
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	
	Если не ЗначениеЗаполнено(Справочники.ххх_Справочник.НоменклатураДопСвойствоСрокГодности.значение.ххх_ИдЦентр) Тогда
		объект=Справочники.ххх_Справочник.НоменклатураДопСвойствоСрокГодности.значение.получитьОбъект();
		объект.ххх_ИдЦентр=150;
		объект.записать();
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Справочники.ххх_Справочник.id_b1.значение.ххх_ИдЦентр) Тогда
		объект=Справочники.ххх_Справочник.id_b1.значение.получитьОбъект();
		объект.ххх_ИдЦентр=-1;
		объект.записать();
	КонецЕсли;
	
	если не ЗначениеЗаполнено(Справочники.ххх_Справочник.id_b2.значение.ххх_ИдЦентр) Тогда
		объект=Справочники.ххх_Справочник.id_b2.значение.получитьОбъект();
		объект.ххх_ИдЦентр=-2;
		объект.записать();
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Справочники.ххх_Справочник.id_b3.значение.ххх_ИдЦентр) Тогда
		объект=Справочники.ххх_Справочник.id_b3.значение.получитьОбъект();
		объект.ххх_ИдЦентр=-3;
		объект.записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	список.Параметры.УстановитьЗначениеПараметра("ТипДокумента",ТипДокумента.Типы());
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	ЗаполнитьМассивТипов();
	Элементы.список.ПодчиненныеЭлементы.ххх_ИдЦентр.Видимость=Истина;
	Элементы.ТипДокумента.ДоступныеТипы=Новый описаниеТипов(ДокиСПравомПросмотра.ВыгрузитьЗначения());
	список.Параметры.УстановитьЗначениеПараметра("ТипДокумента",ТипДокумента.Типы());	
	
	ПодключитьОбработчикОжидания("ПроверитьОшибкиЗагрузкиЧековРазовый",1,Истина);
	ПодключитьОбработчикОжидания("ПроверитьОшибкиЗагрузкиЧеков",60*60);
	
	ПодключитьОбработчикОжидания("ПроверитьАктивностьСеансаКлиент",37*37);

	ПроверитьОшибкиПрогрузкиВесов();
	ПодключитьОбработчикОжидания("ПроверитьОшибкиПрогрузкиВесов",5*60);
	
	//ПроверитьНаличиеОбновлений();
	ПодключитьОбработчикОжидания("ПроверитьНаличиеОбновлений",30*60,ложь);//30*60);

	
	ПодключитьОбработчикОжидания("ЗаполнитьИсториюЦенникаДляНовойБазы",1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктивностьСеансаКлиент()
	
	если ПроверитьАктивностьСеансаСервер() тогда
		
		//ЗавершитьРаботуСистемы();
	
	КонецЕсли
	
КонецПроцедуры	

Функция ПроверитьАктивностьСеансаСервер()
		
	Если ТекущаяДата()-ПараметрыСеанса.ххх_ДатаСтартаСеанса>60*6*60 Тогда
		
		возврат истина;
		
	КонецЕсли;
	
	возврат ложь;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьМассивТипов()		
	

	мас=Новый массив;
	мас.Добавить(ПараметрыСеанса.АвторизованныйПользователь);
	ТекущиеСвойстваПользователей = ТекущиеСвойстваПользователей(мас);
	РолиПользователей = ТекущиеСвойстваПользователей.РолиПользователей;
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("роли",РолиПользователей.ВыгрузитьКолонку("роль"));
	Запрос.Текст="ВЫБРАТЬ
	             |	ПрофилиГруппДоступаРоли.Роль КАК Роль
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПрофилиГруппДоступаРоли.Роль
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.Роль КАК Роль
	             |ИЗ
	             |	йцу КАК йцу
	             |ГДЕ
	             |	йцу.Роль.имя в (&роли)";
	роли=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");	
	доки=Новый массив;
	Для каждого док из Метаданные.Документы Цикл
		доки.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(док));
	КонецЦикла;
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("роли",роли);
	Запрос.УстановитьПараметр("Доки",доки);
	Запрос.Текст="ВЫБРАТЬ
	             |	ТИПЗНАЧЕНИЯ(ПраваРолей.ОбъектМетаданных.ЗначениеПустойСсылки) КАК Типы
	             |ИЗ
	             |	РегистрСведений.ПраваРолей КАК ПраваРолей
	             |ГДЕ
	             |	ПраваРолей.Роль В(&роли)
	             |	И ПраваРолей.Просмотр = ИСТИНА
	             |	И ПраваРолей.ОбъектМетаданных В(&Доки)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТИПЗНАЧЕНИЯ(ПраваРолей.ОбъектМетаданных.ЗначениеПустойСсылки)";
	ДокиСПравомПросмотра.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Типы"));			 	
КонецПроцедуры

Функция ТекущиеСвойстваПользователей(МассивПользователей)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если МассивПользователей = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ИдентификаторПользователяИБ
		|ПОМЕСТИТЬ ПроверяемыеПользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Служебный = ЛОЖЬ
		|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
		
	ИначеЕсли ТипЗнч(МассивПользователей) = Тип("Тип") Тогда
		Если Метаданные.НайтиПоТипу(МассивПользователей) = Метаданные.Справочники.ВнешниеПользователи Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВнешниеПользователи.Ссылка КАК Пользователь,
			|	ВнешниеПользователи.ИдентификаторПользователяИБ
			|ПОМЕСТИТЬ ПроверяемыеПользователи
			|ИЗ
			|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|ГДЕ
			|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	Пользователи.ИдентификаторПользователяИБ
			|ПОМЕСТИТЬ ПроверяемыеПользователи
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Служебный = ЛОЖЬ
			|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
		КонецЕсли;
	Иначе
		ИсходныеПользователи = Новый ТаблицаЗначений;
		ИсходныеПользователи.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(
			"СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи"));
		
		Для каждого Пользователь Из МассивПользователей Цикл
			ИсходныеПользователи.Добавить().Пользователь = Пользователь;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ИсходныеПользователи", ИсходныеПользователи);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсходныеПользователи.Пользователь
		|ПОМЕСТИТЬ ИсходныеПользователи
		|ИЗ
		|	&ИсходныеПользователи КАК ИсходныеПользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ИдентификаторПользователяИБ
		|ПОМЕСТИТЬ ПроверяемыеПользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходныеПользователи КАК ИсходныеПользователи
		|		ПО Пользователи.Ссылка = ИсходныеПользователи.Пользователь
		|			И (Пользователи.Служебный = ЛОЖЬ)
		|			И (Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходныеПользователи КАК ИсходныеПользователи
		|		ПО ВнешниеПользователи.Ссылка = ИсходныеПользователи.Пользователь
		|			И (ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор)";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы))
	|			И ГруппыДоступаПользователи.Пользователь = Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеПользователи.Пользователь,
	|	ПроверяемыеПользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	ПроверяемыеПользователи КАК ПроверяемыеПользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверяемыеПользователи.Пользователь КАК Пользователь,
	|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
	|ПОМЕСТИТЬ ПрофилиПользователей
	|ИЗ
	|	ПроверяемыеПользователи КАК ПроверяемыеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО ПроверяемыеПользователи.Пользователь = СоставыГруппПользователей.Пользователь
	|			И (СоставыГруппПользователей.Используется)
	|			И (&ИсключитьВнешнихПользователей)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.Профиль.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиПользователей.Пользователь,
	|	Роли.Роль.Имя КАК Роль
	|ИЗ
	|	ПрофилиПользователей КАК ПрофилиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|		ПО (Роли.Ссылка = ПрофилиПользователей.Профиль)";
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ТекстЗапроса;
	
	Если Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключитьВнешнихПользователей", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключитьВнешнихПользователей",
			"ТИПЗНАЧЕНИЯ(ПроверяемыеПользователи.Пользователь) = ТИП(Справочник.Пользователи)");
	КонецЕсли;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ПоследнийРезультат = РезультатыЗапросов.Количество()-1;
	Итог = Новый Структура;
	
	Итог.Вставить("Администраторы", Новый Соответствие);
	
	Для каждого Строка Из РезультатыЗапросов[ПоследнийРезультат-3].Выгрузить() Цикл
		Итог.Администраторы.Вставить(Строка.Ссылка, Истина);
	КонецЦикла;
	
	Итог.Вставить("ИдентификаторыПользователейИБ", РезультатыЗапросов[ПоследнийРезультат-2].Выгрузить());
	Итог.ИдентификаторыПользователейИБ.Индексы.Добавить("Пользователь");
	
	Итог.Вставить("РолиПользователей", РезультатыЗапросов[ПоследнийРезультат].Выгрузить());
	Итог.РолиПользователей.Индексы.Добавить("Пользователь");
	
	Возврат Итог;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОшибкиЗагрузкиЧековРазовый()
	ПроверитьОшибкиЗагрузкиЧековНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОшибкиПрогрузкиВесов()
	
	Ошибка="";
	
	ПроверитьОшибкиПрогрузкиВесовСервер(Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		
		струк=Новый Структура;
		струк.Вставить("Ошибка",ошибка);
		ОткрытьФорму("ОбщаяФорма.ххх_ФормаСообщенияПользователюОбОшибках",струк,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьОшибкиПрогрузкиВесовСервер(Ошибка)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КлючФоновогоЗадания","ОшибкиПрогрузкиВесов");
	Запрос.Текст="ВЫБРАТЬ
	             |	ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних.Сообщение КАК Сообщение
	             |ИЗ
	             |	РегистрСведений.ххх_СообщенияПользователюРегламентныеЗадания.СрезПоследних(, КлючФоновогоЗадания = &КлючФоновогоЗадания) КАК ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних
	             |ГДЕ
	             |	ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних.Обработан = ЛОЖЬ";
	выборка=Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		Ошибка=Ошибка+выборка.сообщение+символы.ВК;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОшибкиЗагрузкиЧеков()
	ПроверитьОшибкиЗагрузкиЧековНаСервере();	
КонецПроцедуры
//Zorius

Процедура ПроверитьОшибкиЗагрузкиЧековНаСервере()
#ЕСЛИ не ВебКлиент ТОГДА	
	ххх_КлиентСервер.ПроверитьОшибкиЗагрузкиЧеков();	
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОбновлений()
	
	АдресСайта = "79.172.36.38/" ;
	//Порт = 21;
	Логин = "1c";
	Пароль = "!MegaRoot";
	
	магазины=ПолучитьМагазины();
	
	Для каждого путь из магазины цикл
		ИмяКаталога = путь;
		FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль);
		FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
			
		файлы=FTPСоединение.НайтиФайлы("*.xml");
		файлыЗип=FTPСоединение.НайтиФайлы("*.zip");
		
		Если файлы.Количество() <> 0 или файлыЗип.количество() <> 0 тогда
			
			ошибка="По пути: "+ путь +": Пришли новые обновления, необходимо их принять.";
			
			//струк=Новый Структура;
			//струк.Вставить("Ошибка",ошибка);
			//ОткрытьФорму("ОбщаяФорма.ххх_ФормаСообщенияПользователюОбОшибках",струк,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			ВызватьИсключение ошибка;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМагазины()
	
	мас=Новый массив;
	магазины=справочники.Магазины.Выбрать();
	пока магазины.Следующий() цикл
		мас.Добавить(магазины.ххх_КаталогФТПЗагрузки);
	КонецЦикла;
	
	возврат мас;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсториюЦенникаДляНовойБазы()
	ЗаполнитьИсториюЦенникаДляНовойБазыСервер()
КонецПроцедуры


Процедура ЗаполнитьИсториюЦенникаДляНовойБазыСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	выб=РегистрыСведений.ххх_ИстиорияЦветаЦенника.Выбрать();
		
	Если не выб.Следующий() Тогда
		
		Запрос=Новый запрос;
		запрос.УстановитьПараметр("Дата",ТекущаяДата());
		Запрос.Текст="ВЫБРАТЬ
		             |	Номенклатура1.Ссылка КАК Номенклатура,
		             |	&Дата КАК Период,
		             |	ВЫБОР
		             |		КОГДА НоменклатураСегмента.Номенклатура ЕСТЬ NULL
		             |			ТОГДА ""Белый""
		             |		ИНАЧЕ ""Красный""
		             |	КОНЕЦ КАК ЦветЦенника
		             |ИЗ
		             |	Справочник.Номенклатура КАК Номенклатура1
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		             |		ПО (НоменклатураСегмента.Номенклатура = Номенклатура1.Ссылка)
		             |ГДЕ
		             |	НЕ Номенклатура1.ЭтоГруппа";
		
		Наб=РегистрыСведений.ххх_ИстиорияЦветаЦенника.СоздатьНаборЗаписей();
		Наб.Загрузить(Запрос.Выполнить().Выгрузить());
		Наб.Записать();
		
		
	КонецЕсли;

КонецПроцедуры























