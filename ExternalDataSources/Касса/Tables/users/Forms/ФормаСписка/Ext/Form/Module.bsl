
&НаКлиенте
Процедура Редактировать(Команда)
	структура=Новый Структура;
	СтрокаЮзерс=Новый Структура;
	СтрокаЮзерс.Вставить("id",Элементы.Список.ТекущиеДанные.id); 
	СтрокаЮзерс.Вставить("Name",Элементы.Список.ТекущиеДанные.Name);
	СтрокаЮзерс.Вставить("RULES",Элементы.Список.ТекущиеДанные.RULES);
	СтрокаЮзерс.Вставить("FULLNAME",Элементы.Список.ТекущиеДанные.FULLNAME);
	СтрокаЮзерс.Вставить("Касса",Элементы.Список.ТекущиеДанные.Касса);
	структура.Вставить("СтрокаЮзерс",СтрокаЮзерс);
	ОткрытьФорму("ВнешнийИсточникДанных.Касса.Таблица.users.Форма.ФормаОбъекта",Структура);
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	ОткрытьФорму("ВнешнийИсточникДанных.Касса.Таблица.users.Форма.ФормаОбъекта");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Rules=1;
	Если не РольДоступна("ПолныеПрава") Тогда
		Элементы.Rules.Видимость=ложь;
	КонецЕсли;
	
	 //		  ЗаблокироватьДанныеДляРедактирования(ВыборкаДетальныеЗаписи.Ссылка);

	 //       о = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	 //       о.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	 //       о.Записать();

	 //       РазблокироватьДанныеДляРедактирования(ВыборкаДетальныеЗаписи.Ссылка);

	//попытка 
		//ЗаблокироватьДанныеДляРедактирования(Справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка);
	//Исключение
	//	вызватьИсключение описаниеОшибки();
	//КонецПопытки;
	//
	//Об=Справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.ПолучитьОбъект();
	//ЗначениеВДанныеФормы(Об,Объект);
	
	//
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("Справочник.ххх_Справочник");
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//Блокировка.Заблокировать();

	Если рольДоступна("ПолныеПрава") тогда
		Элементы.Список1.Видимость=Истина;
	КонецЕсли;
	
	ЗАполнитьСписок();
	
	
	//йцу=ВнешниеИсточникиДанных.Касса.Таблицы.users.СоздатьОбъект();
	
	УстановитьБлокировкуПоСеансу();
КонецПроцедуры


Процедура УстановитьБлокировкуПоСеансу()
	УстановитьПривилегированныйРежим(Истина);
	структура=ПроверитьБлокировку();
	Если не структура.Заблокирован Тогда
		ЗаблокироватьДанныеДляРедактирования(Справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка);
			об=справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка.ПолучитьОбъект();
			об.Значение=структура.СтрокаБлокировки;
			об.Записать();
		РазблокироватьДанныеДляРедактирования(Справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка);
	Иначе
		ВызватьИсключение (структура.СтрокаБлокировки)
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьБлокировку()
	УстановитьПривилегированныйРежим(Истина);
	Если Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr") > 0 Тогда
	    // серверный вариант
	    Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=");
	    ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 6);
	    ИмяСервера = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
	    // теперь ищем имя базы
	    Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Ref=");
	    ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 5);
	    ИмяБазы = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
	Иначе
	    // для других способов подключения алгоритм не актуален
	    Возврат 0;
	КонецЕсли;
	
	Коннектор = Новый COMОбъект("v83.COMConnector");
	Агент = Коннектор.ConnectAgent(ИмяСервера);
	
	структура=Новый структура;
	Структура.Вставить("Заблокирован");
	Структура.Вставить("СтрокаБлокировки");
	
	Кластеры = Агент.GetClusters();
	Для каждого Кластер из Кластеры Цикл
		
		Агент.Authenticate(Кластер, , );
		Процессы = Агент.GetWorkingProcesses(Кластер);
		Для каждого Процесс из Процессы Цикл
			Порт = Процесс.MainPort;
			// теперь есть адрес и порт для подключения к рабочему процессу
			РабПроц = Коннектор.ConnectWorkingProcess(ИмяСервера + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
			РабПроц.AddAuthentication("админ", "jesus");
			
			ИнформационнаяБаза = "";

			Базы = Агент.GetInfoBases(Кластер);
			Для каждого База из Базы Цикл
			    Если нрег(База.Name) = нрег(ИмяБазы) Тогда
			        ИнформационнаяБаза = База;
			        Прервать;
			    КонецЕсли;
			КонецЦикла;
			Если ИнформационнаяБаза = "" Тогда
			    // база не найдена
			КонецЕсли;
			Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
			
			СтрокаБлокировки="";
			удалитьУстаревшуюБлокирвоку=истина;
			
			//Для каждого Сеанс из Сеансы Цикл	
			//	Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
			//        Продолжить;
			//	КонецЕсли;
			//	Если Сеанс.UserName = ИмяПользователя() Тогда	
			//		СтрокаБлокировки="Заблокирован: "+Сеанс.UserName+", Ид сеанса="+Сеанс.SessionID+", Начался в: "+Сеанс.StartedAt;									
			//	КонецЕсли;
			//КонецЦикла;	

			Для каждого Сеанс из Сеансы Цикл
				
			    Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда

			        Продолжить;
					
				КонецЕсли;

				СтрокаБлокировкиСтарая="Заблокирован: "+Сеанс.UserName+", Ид сеанса="+Сеанс.SessionID+", Начался в: "+Сеанс.StartedAt;
				
				Если Сеанс.UserName = ИмяПользователя() Тогда
					СтрокаБлокировки=СтрокаБлокировкиСтарая;								
				КонецЕсли;
				
				если СтрокаБлокировкиСтарая=справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Значение тогда	
					удалитьУстаревшуюБлокирвоку=ложь;
				КонецЕсли;
				
			КонецЦикла;	
				
			Если удалитьУстаревшуюБлокирвоку Тогда	
				структура.СтрокаБлокировки=СтрокаБлокировки;
				структура.Заблокирован=ложь;
				возврат структура;
			иначе
				структура.СтрокаБлокировки=СтрокаБлокировки;
				структура.Заблокирован=истина;
				возврат структура;
	        КонецЕсли;
				
			
			//Для каждого Сеанс из Сеансы Цикл
			//    Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
			//        // если это сеансы конфигуратора или фонового задания, то не отключаем
			//        Продолжить;
			//    КонецЕсли;
			//	Если Сеанс.UserName = ИмяПользователя() Тогда
			//		СтрокаБлокировки="Заблокирован: "+Сеанс.UserName+", Ид сеанса="+Сеанс.SessionID+", Начался в: "+Сеанс.StartedAt;
			//		//если СтрокаБлокировки<>справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Значение тогда	
			//			структура.СтрокаБлокировки=СтрокаБлокировки;
			//			//структура.Заблокирован=ложь;
			//			возврат структура;
			//		//Иначе
			//		//	структура.СтрокаБлокировки=СтрокаБлокировки;
			//		//	структура.Заблокирован=истина;
			//		//	возврат структура;
			//		КонецЕсли;
			//    КонецЕсли;
			//    //Агент.TerminateSession(Кластер, Сеанс);
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	возврат ложь;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ТипПоиска="" тогда
	ТипПоиска = "ПоЛюдям";
	//КонецЕсли;
	
	//Если ТипПоиска="ПоКассам" тогда
	//	элементы.Люди.ТолькоПросмотр = Ложь;
	//	элементы.СписокКасса.ТолькоПросмотр = Истина;
	//Иначе
	//	элементы.Люди.ТолькоПросмотр = Истина;
	//	элементы.СписокКасса.ТолькоПросмотр = Ложь;
	//КонецЕсли;
	ЗаполнитьЛюдиКассы(ТипПоиска);
КонецПроцедуры

процедура ЗаполнитьЛюдиКассы(ТипПоиска)
	
	Если ТипПоиска = "ПоКассам" Тогда
		ЗаполнитьПоКассам();
	ИначеЕсли ТипПоиска = "ПоЛюдям" Тогда
		ЗаполнитьПоЛюдям();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоКассам()
	
	люди.Очистить();
	кассы=список.Выгрузить(,"касса");
	кассы.Свернуть("касса");
	СписокКассы.Загрузить(кассы);
	
КонецПроцедуры


процедура ЗаполнитьПоЛюдям()
	
	люди.Очистить();
	СписокКассы.Очистить();
	людиСписок=список.Выгрузить(,"name,fullname,inn");
	людиСписок.Свернуть("name,fullname,inn");
	Для каждого стр из людиСписок цикл
		стрЛюди=люди.Добавить();
		стрЛюди.карточка=стр.name;
		стрЛюди.инн=стр.inn;
		стрЛюди.фио=стр.fullname;
	КонецЦикла;
	
	ЭтаФорма.Люди.Сортировать("ФИО");
	
КонецПроцедуры


Процедура ЗаполнитьПоЧеловеку()
	
	//Для каждого касса из СписокКасс Цикл
	//	
	//	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//	пСоед.СтрокаСоединения = касса.Касса.ххх_СтрокаСоединения;
	//	пСоед.АутентификацияОС=Ложь;
	//	пСоед.АутентификацияСтандартная=Истина;
	//	пСоед.ИмяПользователя=касса.Касса.ххх_ИмяПользователяКассы;
	//	пСоед.СУБД=касса.Касса.ххх_ТипСубд;
	//	ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
	//	ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
	//	ВнешниеИсточникиДанных.Касса.УстановитьСоединение();
	//	
	//	Запрос=Новый запрос;
	//	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	//	             |	users.id КАК id
	//	             |ИЗ
	//	             |	ВнешнийИсточникДанных.Касса.Таблица.users КАК users
	//	             |
	//	             |УПОРЯДОЧИТЬ ПО
	//	             |	id УБЫВ";
	//	выборка=Запрос.Выполнить().Выбрать();
	//	
	//	Если не ЗначениеЗаполнено(id) и выборка.Следующий() тогда
	//		id=выборка.id+1;
	//	КонецЕсли;
	//	
	//	//ВнешниеИсточникиДанных.Касса.cassa_change_user(id,Name,Rules,FullName);
	//	
	//КонецЦикла;
	
КонецПроцедуры


Процедура ЗАполнитьСписок()
	УстановитьПривилегированныйРежим(Истина);
	список.Очистить();
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КассыККМ.ссылка КАК Касса
	             |ИЗ
	             |	Справочник.КассыККМ КАК КассыККМ
	             |ГДЕ
	             |	НЕ КассыККМ.ПометкаУдаления";
	Кассы=Запрос.Выполнить().Выбрать();
	Пока Кассы.Следующий() Цикл
		
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения = Кассы.Касса.ххх_СтрокаСоединения;
		пСоед.АутентификацияОС=Ложь;
		пСоед.АутентификацияСтандартная=Истина;
		пСоед.ИмяПользователя=Кассы.Касса.ххх_ИмяПользователяКассы;
		пСоед.СУБД=Кассы.Касса.ххх_ТипСубд;
		ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьСоединение();

		запрос.УстановитьПараметр("Rules",Rules);
		Запрос.Текст="ВЫБРАТЬ
		             |	users.id КАК id,
		             |	users.Name КАК Name,
		             |	users.RULES КАК RULES,
		             |	users.FULLNAME КАК FULLNAME,
		             |	users.inn КАК inn
		             |ИЗ
		             |	ВнешнийИсточникДанных.Касса.Таблица.users КАК users
		             |ГДЕ
		             |	users.RULES = &Rules";
		выборка=Запрос.Выполнить().Выбрать();
		
		Пока выборка.Следующий() Цикл
			стр=Список.Добавить();
			ЗаполнитьЗначенияСвойств(стр,выборка);
			стр.касса=Кассы.Касса;
		КонецЦикла;
		
	КонецЦикла;

	если список.Количество()>0 тогда
		список.Сортировать("id Убыв");
		НекстИд=список[0].id+1;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервере(name)
	УстановитьПривилегированныйРежим(Истина);
	струк=Новый структура;
	струк.Вставить("name",name);
	строки=Список.НайтиСтроки(струк);
	Для каждого стр из строки Цикл
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения = стр.Касса.ххх_СтрокаСоединения;
		пСоед.АутентификацияОС=Ложь;
		пСоед.АутентификацияСтандартная=Истина;
		пСоед.ИмяПользователя=стр.Касса.ххх_ИмяПользователяКассы;
		пСоед.СУБД=стр.Касса.ххх_ТипСубд;
		ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьСоединение();
		ВнешниеИсточникиДанных.Касса.cassa_delete_user(стр.id);
	КонецЦикла;
	ЗАполнитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьНаСервере(Элементы.Список.ТекущиеДанные.name);//Элементы.Список.ТекущиеДанные.Касса,Элементы.Список.ТекущиеДанные.id);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗАполнитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ЛюдиПриАктивизацииСтроки()
	Если ТипПоиска="ПоЛюдям" тогда
		СписокКассы.Очистить();
		отбор=Новый структура;
		отбор.Вставить("inn",элементы.Люди.ТекущиеДанные.инн);
		отбор.Вставить("fullname",элементы.Люди.ТекущиеДанные.фио);
		отбор.Вставить("name",элементы.Люди.ТекущиеДанные.карточка);
		отбор.Вставить("удален",ложь);
		строки=список.НайтиСтроки(отбор);
		Для каждого стр из строки цикл
			Если ЗначениеЗаполнено(стр.касса) и не стр.удален Тогда
				стрКассы=СписокКассы.Добавить();
				стрКассы.касса=стр.касса;
				стрКассы.ид=стр.id;
			КонецЕсли;
		КонецЦикла;
		СписокКассы.Сортировать("касса");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКассыПриАктивизацииСтроки(Элемент)
	
	Если ТипПоиска="ПоКассам" тогда	
		Люди.Очистить();
		Для каждого стр из список Цикл
			Если стр.касса=Элементы.СписокКассы.ТекущиеДанные.касса и не стр.удален Тогда
				СтрЛюди=Люди.Добавить();
				СтрЛюди.id=стр.id;
				СтрЛюди.ФИО=стр.FULLNAME;
				СтрЛюди.ИНН=стр.INN;
				СтрЛюди.Карточка=стр.NAME;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокиСпискаПриИЗмененииЛюдейПоЛюдям(ВыбранноеЗначение)
	
	Если не ВыбранноеЗначение.ДобавлениеНового Тогда
		
		отбор=Новый структура;
		отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
		отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
		отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
		строки=список.НайтиСтроки(отбор);
		Для каждого стр из строки Цикл
			стр.удален=ложь;
			стр.Изменен=истина;
			стр.inn=ВыбранноеЗначение.инн;
			стр.fullname=ВыбранноеЗначение.фио;
			стр.name=ВыбранноеЗначение.карточка;
		КонецЦикла;
		
		ЗаполнитьПоЛюдям();

	Иначе
		
		
		отбор=Новый структура;
		отбор.Вставить("inn",ВыбранноеЗначение.инн);
		отбор.Вставить("fullname",ВыбранноеЗначение.фио);
		отбор.Вставить("name",ВыбранноеЗначение.карточка);
		строки=список.НайтиСтроки(отбор);

		
		Если строки.количество()=0 Тогда

			стр=Люди.Добавить();
			стр.id=НекстИд;
	//		стр.удален=ложь;
	//		стр.Изменен=истина;
			///стр.rules=1;
			стр.инн=ВыбранноеЗначение.инн;
			стр.фио=ВыбранноеЗначение.фио;
			стр.карточка=ВыбранноеЗначение.карточка;
			
			НекстИд=НекстИд+1;
			
					
			стр=Список.Добавить();
			стр.id=НекстИд;
			стр.удален=ложь;
			стр.Изменен=ложь;
			стр.rules=Rules;
			стр.inn=ВыбранноеЗначение.инн;
			стр.FULLNAME=ВыбранноеЗначение.фио;
			стр.NAME=ВыбранноеЗначение.карточка;
			
			НекстИд=НекстИд+1;
		КонецЕсли;
	КонецЕсли;
			
	ЭтаФорма.ОбновитьОтображениеДанных(Элементы.Люди);
	
	
	отбор=Новый структура;
	отбор.Вставить("инн",ВыбранноеЗначение.инн);
	отбор.Вставить("фио",ВыбранноеЗначение.фио);
	отбор.Вставить("карточка",ВыбранноеЗначение.карточка);
	строки=Люди.НайтиСтроки(отбор);
	
	Элементы.люди.ТекущаяСтрока=строки[0].ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПриИзменении(Элемент)
	ЗаполнитьЛюдиКассы(ТипПоиска)
КонецПроцедуры

&НаКлиенте
Процедура ЛюдиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ПараметрыОткрытия=Новый структура;
	ПараметрыОткрытия.Вставить("инн",элементы.Люди.ТекущиеДанные.инн);
	ПараметрыОткрытия.Вставить("фио",элементы.Люди.ТекущиеДанные.фио);
	ПараметрыОткрытия.Вставить("карточка",элементы.Люди.ТекущиеДанные.карточка);
	мас=Новый массив;
	Для каждого стр из СписокКассы Цикл
		мас.Добавить(стр.касса);
	КонецЦикла;
	ПараметрыОткрытия.Вставить("СписокКасс",мас);
	ПараметрыОткрытия.Вставить("ДобавлениеНового",ложь);
	открытьФорму("ВнешнийИсточникДанных.Касса.Таблица.users.Форма.ФормаОбъекта",ПараметрыОткрытия,Элемент,истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокиСпискаПриИЗмененииЛюдейПоКассам(ВыбранноеЗначение)
	
	Если не ВыбранноеЗначение.ДобавлениеНового Тогда
		отбор=Новый структура;
		отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
		отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
		отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
		отбор.Вставить("Касса",Элементы.СписокКассы.ТекущиеДанные.Касса);
	Иначе
		отбор=Новый структура;
		отбор.Вставить("inn",ВыбранноеЗначение.инн);
		отбор.Вставить("fullname",ВыбранноеЗначение.фио);
		отбор.Вставить("name",ВыбранноеЗначение.карточка);
		отбор.Вставить("Касса",Элементы.СписокКассы.ТекущиеДанные.Касса);
	КонецЕсли;
	
		строки=список.НайтиСтроки(отбор);
		Для каждого стр из строки Цикл
			стр.удален=ложь;
			стр.Изменен=истина;
			стр.inn=ВыбранноеЗначение.инн;
			стр.fullname=ВыбранноеЗначение.фио;
			стр.name=ВыбранноеЗначение.карточка;
		КонецЦикла;	
		
	Если строки.количество()=0 Тогда
		
		стр=Список.Добавить();
		стр.id=НекстИд;
		стр.удален=ложь;
		стр.Изменен=истина;
		стр.rules=Rules;
		стр.inn=ВыбранноеЗначение.инн;
		стр.fullname=ВыбранноеЗначение.фио;
		стр.name=ВыбранноеЗначение.карточка;
		стр.Касса=Элементы.СписокКассы.ТекущиеДанные.Касса;
		
		НекстИд=НекстИд+1;
		
	КонецЕсли;
	НекстИд=НекстИд+1;
	//ЗаполнитьПоКассам();
	СписокКассыПриАктивизацииСтроки("");
	отбор=Новый структура;
	отбор.Вставить("инн",ВыбранноеЗначение.инн);
	отбор.Вставить("фио",ВыбранноеЗначение.фио);
	отбор.Вставить("карточка",ВыбранноеЗначение.карточка);
	строки=Люди.НайтиСтроки(отбор);
	
	Элементы.люди.ТекущаяСтрока=строки[0].ПолучитьИдентификатор();
	
	//отбор=Новый структура;
	//отбор.Вставить("Касса",Элементы.СписокКассы.ТекущиеДанные.Касса);
	//строки=СписокКассы.НайтиСтроки(отбор);
	//Элементы.СписокКассы.ТекущаяСтрока=строки[0].ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛюдиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипПоиска="ПоКассам" Тогда
		ИзменитьСтрокиСпискаПриИЗмененииЛюдейПоКассам(ВыбранноеЗначение);
	Иначе
		ИзменитьСтрокиСпискаПриИЗмененииЛюдейПоЛюдям(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	ЗаблокироватьДанныеДляРедактирования(Справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка);
		об=справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка.ПолучитьОбъект();
		об.Значение="";
		об.Записать();
	РазблокироватьДанныеДляРедактирования(Справочники.ххх_Справочник.ОбъектДляБлокировкиСменыКассиров.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧеловека(Команда)
	//Если РазрешеноДобавитьЧеловека(Элементы.СписокКассы.ТекущиеДанные.касса) Тогда
	ПараметрыОткрытия=Новый структура;
	ПараметрыОткрытия.Вставить("инн","");
	ПараметрыОткрытия.Вставить("фио","");
	ПараметрыОткрытия.Вставить("карточка","");
	ПараметрыОткрытия.Вставить("СписокКасс",Новый массив);
	ПараметрыОткрытия.Вставить("ДобавлениеНового",истина);
	открытьФорму("ВнешнийИсточникДанных.Касса.Таблица.users.Форма.ФормаОбъекта",ПараметрыОткрытия,Элементы.Люди,истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли;
КонецПроцедуры

функция РазрешеноДобавитьЧеловека(касса) экспорт
	МаксЗаписей=Константы.ххх_КолвоЗаписейДляКассы.Получить();
	отбор=Новый структура;
	отбор.Вставить("касса",касса);
	отбор.Вставить("Удален",ложь);
	строки=список.НайтиСтроки(отбор);
	Если строки.количество()>МаксЗаписей Тогда
		сообщить("В кассе:"+касса+", достигнуто максимальное количество записей: "+МаксЗаписей+"! Добавить еще одну невозможно, что бы появилась возможно добавить еще одну карточку, необходимо удалить с этой кассы записи.");
		возврат ложь;
	КонецЕсли;
	возврат истина;
КонецФункции

&НаКлиенте
Процедура УдалитьЧеловека(Команда)
	
	Если ТипПоиска="ПоЛюдям" Тогда
		отбор=Новый структура;
		отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
		отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
		отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
		строки=список.НайтиСтроки(отбор);
		Для каждого стр из строки Цикл
			стр.удален=истина;
		КонецЦикла;
		люди.Удалить(Люди.НайтиПоИдентификатору(Элементы.Люди.ТекущаяСтрока));
		//ЛюдиПриАктивизацииСтроки();
	Иначе
		отбор=Новый структура;
		отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
		отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
		отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
		отбор.Вставить("Касса",Элементы.СписокКассы.ТекущиеДанные.Касса);
		строки=список.НайтиСтроки(отбор);
		Для каждого стр из строки Цикл
			стр.удален=истина;
		КонецЦикла;
		СписокКассыПриАктивизацииСтроки("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКассу(Команда)
	
	Если ТипПоиска="ПоЛюдям" Тогда
		отбор=Новый структура;
		инн=Элементы.Люди.ТекущиеДанные.инн;
		фио=Элементы.Люди.ТекущиеДанные.фио;
		карточка=Элементы.Люди.ТекущиеДанные.карточка;
		отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
		отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
		отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
		отбор.Вставить("касса",Элементы.СписокКассы.ТекущиеДанные.касса);
		строки=список.НайтиСтроки(отбор);
		Для каждого стр из строки Цикл
			стр.удален=истина;
			стр.изменен=ложь;
		КонецЦикла;
		ЗаполнитьПоЛюдям();
		отбор=Новый структура;
		отбор.Вставить("инн",инн);
		отбор.Вставить("фио",фио);
		отбор.Вставить("карточка",карточка);
		строки=Люди.НайтиСтроки(отбор);
		
		Элементы.люди.ТекущаяСтрока=строки[0].ПолучитьИдентификатор();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Закрыть1(Команда)
	этаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Записать1(Команда)
	записать1НаСервере()
КонецПроцедуры


процедура записать1НаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого стр из Список Цикл
		Если стр.изменен тогда
			пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
			пСоед.СтрокаСоединения = стр.Касса.ххх_СтрокаСоединения;
			пСоед.АутентификацияОС=Ложь;
			пСоед.АутентификацияСтандартная=Истина;
			пСоед.ИмяПользователя=стр.Касса.ххх_ИмяПользователяКассы;
			пСоед.СУБД=стр.Касса.ххх_ТипСубд;
			ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
			ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
			ВнешниеИсточникиДанных.Касса.УстановитьСоединение();			
			ВнешниеИсточникиДанных.Касса.cassa_change_user(стр.id,стр.Name,стр.Rules,стр.FullName,стр.inn);
		ИначеЕсли стр.удален Тогда
			пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
			пСоед.СтрокаСоединения = стр.Касса.ххх_СтрокаСоединения;
			пСоед.АутентификацияОС=Ложь;
			пСоед.АутентификацияСтандартная=Истина;
			пСоед.ИмяПользователя=стр.Касса.ххх_ИмяПользователяКассы;
			пСоед.СУБД=стр.Касса.ххх_ТипСубд;
			ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
			ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
			ВнешниеИсточникиДанных.Касса.УстановитьСоединение();			
			ВнешниеИсточникиДанных.Касса.cassa_delete_user(стр.id);
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКассу(Команда)
	Если ТипПоиска="ПоЛюдям" Тогда
	    ПараметрыВыбора = Новый Структура;
	    НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;

	    ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		
		масКасс=Новый Массив;
		Для каждого стр из СписокКассы Цикл
			масКасс.Добавить(стр.касса);
		КонецЦикла;
		
	    ЭлементОтбора.ПравоеЗначение = масКасс;
	    ЭлементОтбора.Использование = Истина;
	    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	    ПараметрыВыбора.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
		ПараметрыВыбора.Вставить("МножественныйВыбор",истина);
		ПараметрыВыбора.Вставить("РежимВыбора",истина);
		ПараметрыВыбора.Вставить("ПометкаУдаления",Ложь);

	    ОткрытьФорму("Справочник.КассыККМ.ФормаВыбора", ПараметрыВыбора, Элементы.СписокКассы,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКассыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) и ВыбранноеЗначение.количество()>0 Тогда
		Для каждого эл из ВыбранноеЗначение Цикл
			Если не РазрешеноДобавитьЧеловека(эл) Тогда
				продолжить;
			КонецЕсли;
			СтандартнаяОбработка=ложь;
			стр=СписокКассы.Добавить();
			стр.касса=ВыбранноеЗначение;
			стр.ид=некстИд;
			
			
			отбор=Новый структура;
			отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
			отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
			отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
			отбор.Вставить("Касса",эл);
			строки=список.НайтиСтроки(отбор);
			Для каждого стр из строки Цикл

				стр.Касса=эл;
				//стр.id=некстИд;
				стр.Name=элементы.Люди.ТекущиеДанные.карточка;
				стр.RULES=Rules;
				стр.FULLNAME=элементы.Люди.ТекущиеДанные.фио;
				стр.inn=элементы.Люди.ТекущиеДанные.инн;
				стр.Изменен=истина;
				стр.Удален=ложь;
			КонецЦикла;
			
			Если строки.количество()=0 Тогда 
				
				отбор=Новый структура;
				отбор.Вставить("inn",Элементы.Люди.ТекущиеДанные.инн);
				отбор.Вставить("fullname",Элементы.Люди.ТекущиеДанные.фио);
				отбор.Вставить("name",Элементы.Люди.ТекущиеДанные.карточка);
				строки=список.НайтиСтроки(отбор);
				
				Если строки.количество()<>0 и не ЗначениеЗаполнено(строки[0].касса) тогда
					стр=строки[0];
				Иначе
					стр=Список.Добавить();
				КонецЕсли;
				
				стр.Касса=эл;
				стр.id=некстИд;
				стр.Name=элементы.Люди.ТекущиеДанные.карточка;
				стр.RULES=Rules;
				стр.FULLNAME=элементы.Люди.ТекущиеДанные.фио;
				стр.inn=элементы.Люди.ТекущиеДанные.инн;
				стр.Изменен=истина;
				стр.Удален=ложь;
			КонецЕсли;
			
			некстИд=НекстИд+1;
		КонецЦикла;
		ЛюдиПриАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКассыЕстьВКассеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если не КодВозвратаДиалогаДа Тогда
		флагИзменений=ложь;
		Для каждого стр из список цикл
			Если стр.изменен или стр.удален Тогда
				флагИзменений=истина;
				прервать;
			КонецЕсли;
		КонецЦикла;
		Если флагИзменений Тогда
			СтандартнаяОбработка=ложь;
			Отказ=истина;
			Оповещение=Новый ОписаниеОповещения("ОбработатьПроверкуПередЗакрытием",ЭтаФорма);
			ПоказатьВопрос(Оповещение,"Вы внесли изменения! Уверены что хотите закрыть форму?",РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
процедура ОбработатьПроверкуПередЗакрытием(Результат,Параметры) экспорт
	Если Результат=КодВозвратаДиалога.Да Тогда
		КодВозвратаДиалогаДа=Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура RulesПриИзменении(Элемент)
	ЗАполнитьСписок();
	ТипПоиска = "ПоЛюдям";
	ЗаполнитьЛюдиКассы(ТипПоиска);
КонецПроцедуры









































