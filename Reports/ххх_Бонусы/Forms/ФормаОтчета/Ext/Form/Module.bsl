
&НаСервере
Процедура Период1ПриИзмененииНаСервере()
	реквизит1.Параметры.УстановитьЗначениеПараметра("Нач",Период.ДатаНачала);
	реквизит1.Параметры.УстановитьЗначениеПараметра("Кон",Период.ДатаОкончания);
	реквизит1.Параметры.УстановитьЗначениеПараметра("НачалоКонца",НачалоДня(Период.ДатаОкончания));
	РассчитатьИтоги(Список,?(ЗначениеЗаполнено(контрагент),контрагент.ххх_ИдЦентр,Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура Период1ПриИзменении(Элемент)
	Период1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Период=Новый СтандартныйПериод;
	Период.ДатаНачала=НачалоДня(ТекущаяДата()-24*60*60);
	Период.ДатаОкончания=КонецДня(ТекущаяДата()-24*60*60);
	
	//реквизит1.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(
	//	реквизит1.КомпоновщикНастроек.ПолучитьНастройки()//.Инициализировать(реквизит1.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	
	//	реквизит1.Параметры.УстановитьЗначениеПараметра("тз",тз);
	реквизит1.Параметры.УстановитьЗначениеПараметра("Нач",Период.ДатаНачала);
	реквизит1.Параметры.УстановитьЗначениеПараметра("Кон",Период.ДатаОкончания);
	реквизит1.Параметры.УстановитьЗначениеПараметра("НачалоКонца",НачалоДня(Период.ДатаОкончания));
	РассчитатьИтоги(Список,?(ЗначениеЗаполнено(контрагент),контрагент.ххх_ИдЦентр,Неопределено));
	 	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент1ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ИСпользование=Истина;
	Иначе
		ИСпользование=Ложь;
	КонецЕсли;
	Контрагент1ПриИзмененииСервер(ИСпользование);
КонецПроцедуры


Процедура Контрагент1ПриИзмененииСервер(ИСпользование)
	ЭлементОтбора="";
	Для каждого эл из Реквизит1.Отбор.Элементы Цикл		
		Если эл.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ИдПоставщика") Тогда
			ЭлементОтбора=эл;
			прервать;
		КонецЕсли;		
	КонецЦикла;
	ЭлементОтбора = ?(ЭлементОтбора<>"",ЭлементОтбора,Реквизит1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдПоставщика");
  	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование = ИСпользование;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Если ЗначениеЗаполнено(Контрагент) Тогда	
    	ЭлементОтбора.ПравоеЗначение = Число(Контрагент.ххх_ИдЦентр);
	КонецЕсли;
	
	РассчитатьИтоги(Список,?(ЗначениеЗаполнено(контрагент),контрагент.ххх_ИдЦентр,Неопределено));	
КонецПроцедуры

Процедура ПапкаПриИзмененииНаСервере(ИСпользование)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("папка",папка);
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.ххх_ИдЦентр КАК ххх_ИдЦентр
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&Папка)
	             |	И НЕ Номенклатура.ЭтоГруппа";
	
	Список=Новый СписокЗначений;
	мас=Новый массив;
	мас.Добавить(Тип("Число"));
	Список.ТипЗначения=Новый ОписаниеТипов(мас);
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ххх_ИдЦентр"));	
	ЭлементОтбора="";
	Для каждого эл из Реквизит1.Отбор.Элементы Цикл		
		Если эл.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ИдТовара") Тогда
			ЭлементОтбора=эл;
			прервать;
		КонецЕсли;		
	КонецЦикла;
	ЭлементОтбора = ?(ЭлементОтбора<>"",ЭлементОтбора,Реквизит1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдТовара");
  	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.Использование = ИСпользование;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.ПравоеЗначение = Список;
	
	Если не ИСпользование Тогда
		Список=Новый СписокЗначений
	КонецЕСли;
	РассчитатьИтоги(Список,?(ЗначениеЗаполнено(контрагент),контрагент.ххх_ИдЦентр,Неопределено));	
КонецПроцедуры


	

&НаКлиенте
Процедура ПапкаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Папка) Тогда
		ИСпользование=Истина;
	Иначе
		ИСпользование=Ложь;
	КонецЕсли;
	ПапкаПриИзмененииНаСервере(ИСпользование);
КонецПроцедуры





Процедура РассчитатьИтоги(Товар=неопределено, поставщик=неопределено)
	
	Запрос=новый ПостроительЗапроса;	
	Запрос.Параметры.Вставить("Нач",Период.ДатаНачала);
	Запрос.Параметры.Вставить("Кон",Период.ДатаОкончания);
	Запрос.Параметры.Вставить("НачалоКонца",НачалоДня(Период.ДатаОкончания));
	
	Если ЗначениеЗаполнено(Товар) и товар.количество()>0 Тогда
		условиеНомки="
				      |ГДЕ
	                  |	Итоги.id_tov В(&номка)";
	иначе
		условиеНомки="";
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	СУММА(ВЫРАЗИТЬ(Периодическая.ПроданоШтук КАК ЧИСЛО(10, 3))) КАК ПроданоШтук,
	             |	СУММА(ВЫРАЗИТЬ(Периодическая.СуммаПродаж КАК ЧИСЛО(10, 2))) КАК СуммаПродаж,
	             |	СРЕДНЕЕ(0) КАК СреднеВзвешаннаяНаценка,
	             |	СРЕДНЕЕ(1 + РАЗНОСТЬДАТ(&нач, &кон, ДЕНЬ)) КАК СреднеВзвешанныйЗапасВДнях,
	             |	СУММА(ВЫРАЗИТЬ(Периодическая.ПрибыльВРублях КАК ЧИСЛО(10, 2))) КАК ПрибыльВРублях,
	             |	СУММА(Статика.ОстатокВЦенахЗакупа) КАК ОстатокВЦенахЗакупа,
	             |	СУММА(Статика.ОстатокВЦенахРозници) КАК ОстатокВЦенахРозници,
	             |	СУММА(Статика.Остаток) КАК Остаток,
	             |	СУММА(ВЫРАЗИТЬ(Периодическая.ЗакупПродаж КАК ЧИСЛО(10, 2))) КАК ЗакупПродаж,
	             |	Периодическая.id_tov КАК id_tov
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_tov КАК id_tov,
	             |		СУММА(ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.prodkol КАК ЧИСЛО(10, 3))) КАК ПроданоШтук,
	             |		СУММА(ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.prodsum КАК ЧИСЛО(10, 2))) КАК СуммаПродаж,
	             |		СУММА(ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.prib_rub КАК ЧИСЛО(10, 2))) КАК ПрибыльВРублях,
	             |		СУММА((ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.prodkol КАК ЧИСЛО(10, 3))) * (ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.senz КАК ЧИСЛО(10, 2)))) КАК ЗакупПродаж
	             |	ИЗ
	             |		ВнешнийИсточникДанных.Пикник23.Таблица.dbo_bonus_m КАК ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m
	             |	ГДЕ
	             |		ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.dat МЕЖДУ &Нач И &Кон
	             |	{ГДЕ
	             |		ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_tov,
	             |		ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_post}
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_tov) КАК Периодическая
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.dat КАК dat,
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_tov КАК id_tov,
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.naim КАК Наименование,
	             |			ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.ost КАК ЧИСЛО(10, 3)) КАК Остаток,
	             |			ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.senz КАК ЧИСЛО(10, 2)) КАК ЦенаЗакупа,
	             |			ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.senr КАК ЧИСЛО(10, 2)) КАК ЦенаРозницы,
	             |			ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.ostz КАК ЧИСЛО(10, 2)) КАК ОстатокВЦенахЗакупа,
	             |			ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.ostr КАК ЧИСЛО(10, 2)) КАК ОстатокВЦенахРозници,
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_post КАК ИдПоставщика,
	             |			ВЫРАЗИТЬ(ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.ost / ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.prodkol КАК ЧИСЛО(10, 2)) КАК ЗапасВДнях
	             |		ИЗ
	             |			ВнешнийИсточникДанных.Пикник23.Таблица.dbo_bonus_m КАК ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m
	             |		ГДЕ
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.dat = &НачалоКонца
	             |		{ГДЕ
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_tov,
	             |			ВнешнийИсточникДанныхПикник23Таблицаdbo_bonus_m.id_post}) КАК Статика
	             |		ПО Периодическая.id_tov = Статика.id_tov
	             |ГДЕ
	             |	Периодическая.id_tov <> 30442
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Периодическая.id_tov";

				 
				 
	//			 
	//			 
	//

	//
	//
	Если ЗначениеЗаполнено(поставщик) Тогда
		Запрос.Отбор.Добавить("id_post");
		Запрос.Отбор["id_post"].Значение = Число(Поставщик);
		Запрос.Отбор["id_post"].ВидСравнения = ВидСравнения.Равно;
		Запрос.Отбор["id_post"].Использование = истина;		
	//Иначе
	//	Запрос.Отбор["id_post"].Использование = ложь;
	КонецЕсли;	
	
		
	Запрос.Выполнить();
	йцу=Запрос.Результат.выгрузить();
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Итоги",йцу);
	Запрос.УстановитьПараметр("Номка",Товар);
	Запрос.Текст="ВЫБРАТЬ
	             |	Итоги.ПроданоШтук КАК ПроданоШтук,
	             |	Итоги.СуммаПродаж КАК СуммаПродаж,
	             |	Итоги.СреднеВзвешаннаяНаценка КАК СреднеВзвешаннаяНаценка,
	             |	Итоги.СреднеВзвешанныйЗапасВДнях КАК СреднеВзвешанныйЗапасВДнях,
	             |	Итоги.ПрибыльВРублях КАК ПрибыльВРублях,
	             |	Итоги.ОстатокВЦенахЗакупа КАК ОстатокВЦенахЗакупа,
	             |	Итоги.Остаток КАК Остаток,
	             |	Итоги.ЗакупПродаж КАК ЗакупПродаж
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&Итоги КАК Итоги"
				 +
				 условиеНомки
				 +
	             "
				 |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СУММА(йцу.ПроданоШтук) КАК ПроданоШтук,
	             |	СУММА(йцу.СуммаПродаж) КАК СуммаПродаж,
	             |	СРЕДНЕЕ(йцу.СреднеВзвешаннаяНаценка) КАК СреднеВзвешаннаяНаценка,
	             |	СРЕДНЕЕ(йцу.СреднеВзвешанныйЗапасВДнях) КАК СреднеВзвешанныйЗапасВДнях,
	             |	СУММА(йцу.ПрибыльВРублях) КАК ПрибыльВРублях,
	             |	СУММА(йцу.ОстатокВЦенахЗакупа) КАК ОстатокВЦенахЗакупа,
	             |	СУММА(йцу.Остаток) КАК Остаток,
	             |	СУММА(йцу.ЗакупПродаж) КАК ЗакупПродаж
	             |ИЗ
	             |	йцу КАК йцу";
	Итоги.Загрузить(Запрос.Выполнить().Выгрузить());
	Если Итоги.Количество()>0 Тогда
		Итоги[0].СреднеВзвешаннаяНаценка=(Итоги[0].ПрибыльВРублях/?(Итоги[0].ЗакупПродаж=0,1,Итоги[0].ЗакупПродаж))*100;
		Итоги[0].СреднеВзвешанныйЗапасВДнях=Итоги[0].Остаток/(?(Итоги[0].ПроданоШтук>0,Итоги[0].ПроданоШтук,1)/?(Итоги[0].СреднеВзвешанныйЗапасВДнях=0,1,Итоги[0].СреднеВзвешанныйЗапасВДнях));
	КонецЕсли;
	
 		
    
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиКнопка(Команда)
	//РассчитатьИтоги(Список,?(ЗначениеЗаполнено(контрагент),контрагент.ххх_ИдЦентр,Неопределено),ИСпользование);	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЧеков(Команда)
	УсловияОтбора  = Новый Структура("Период", Период);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ххх_ГрафикЧеков.ФормаОбъекта",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаЧеков(Команда)
	УсловияОтбора  = Новый Структура("Период", Период);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ОтчетПоЧекам.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура АВСПродажи(Команда)
	УсловияОтбора  = Новый Структура("Период", Период);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ABCXYZАнализПродаж");
	ОткрытьФорму("Отчет.ABCXYZАнализПродаж.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭлементыПользовательскихНастроек = Реквизит1.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
	    Если ТипЗнч(Элемент) = ТипЗнч(Реквизит1.КомпоновщикНастроек.Настройки.Порядок) Тогда
	        Элемент.Элементы.Очистить();
	    КонецЕсли;    
	КонецЦикла;
КонецПроцедуры
























