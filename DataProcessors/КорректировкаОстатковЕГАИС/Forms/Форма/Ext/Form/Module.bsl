
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеМодули = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули();
	
	Если ДоступныеМодули.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	ТранспортныйМодуль = ДоступныеМодули[0];
	
	Объект.Организация = ТранспортныйМодуль.Организация;
	Объект.Магазин = ТранспортныйМодуль.Магазин;
	Объект.ОрганизацияЕГАИС = ТранспортныйМодуль.ОрганизацияЕГАИС;
	
	Объект.КорректироватьОстаткиНемаркируемойПродукции = Истина;
	Элементы.КорректироватьОстаткиНемаркируемойПродукции.Видимость = НЕ ВыгружатьНемаркируемуюПродукцию();
	
	ОпределитьСкладыМагазина(Объект.Магазин, Объект.ИспользуетсяНесколькоСкладов);
	
	// Устанавливаем текущую таблицу переходов
	СценарийКорректировкиОстатковВТорговомЗале();
	
	ЦветОшибка = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветПредупреждение = ЦветаСтиля.ПоясняющийТекст;
	ЦветУспешно = ЦветаСтиля.РезультатУспехЦвет;
	
	ВыполнитьПредварительнуюПроверкуДанных = Истина;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	ИнициализироватьПараметрыЗапросаОстатков();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("Объект.Организация") = Справочники.Организации.ПустаяСсылка() Тогда
		Настройки.Вставить("Объект.Организация", Объект.Организация);
	КонецЕсли;
	
	Если Настройки.Получить("Объект.Магазин") = Справочники.Магазины.ПустаяСсылка() Тогда
		Настройки.Вставить("Объект.Магазин", Объект.Магазин);
	КонецЕсли;
	
	Если Настройки.Получить("Объект.Организация") <> Объект.Организация
		ИЛИ Настройки.Получить("Объект.Магазин") <> Объект.Магазин Тогда
		ОпределитьТранспортныйМодуль = Истина;
	КонецЕсли;
	
	Если Настройки.Получить("Объект.Магазин") <> Объект.Магазин Тогда
		ОпределитьСкладыМагазина = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОкончание Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Отменить корректировку остатков по регистрам ЕГАИС?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьФормуБезусловно");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Магазин"    , Объект.Магазин);
	Отбор.Вставить("Организация", Объект.Организация);
	
	Если ВРег(Лев(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("СоздатьПриказ"))) = ВРег("СоздатьПриказ") Тогда
		СтандартнаяОбработка = Ложь;
		
		Отбор.Вставить("ПравилаОтбораТоваровИнвентаризации", ПредопределенноеЗначение("Справочник.ПравилаОтбораТоваров.ИнвентаризацияАлкогольнойПродукции"));
		
		Если ВРег(Прав(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("НаСкладе"))) = ВРег("НаСкладе") Тогда
			Отбор.Вставить("Склад", СкладПоступления);
		Иначе
			Отбор.Вставить("Склад", СкладПродажи);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Отбор);
		
		ОткрытьФорму("Документ.ПриказНаПроведениеИнвентаризацииТоваров.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ОткрытьСписокПриказов") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Документ.ПриказНаПроведениеИнвентаризацииТоваров.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("СформироватьОтчетПоИзлишкамНедостачам") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура(
			"Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
			Новый Структура("Склад", ПолучитьСкладыМагазина(Объект.Магазин)),
			"ОформлениеИзлишковНедостачКонтекст",
			"ОформлениеИзлишковНедостачКонтекст",
			Истина);

		ОткрытьФорму("Отчет.ОформлениеИзлишковНедостачТоваров.Форма",
					ПараметрыФормы,
					ЭтотОбъект,
					УникальныйИдентификатор);
					
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ЗапуститьПовторнуюПроверку") Тогда
		СтандартнаяОбработка = Ложь;
		
		ВыполнитьПредварительнуюПроверкуДанных();
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ПоказатьНезагруженныеДокументы") Тогда
		СтандартнаяОбработка = Ложь;
		
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения("ЗапускПриложения_Завершение", ЭтотОбъект),
			"http://" + ТранспортныйМодуль.АдресУТМ + ":" + Формат(ТранспортныйМодуль.ПортУТМ, "ЧГ=0") + "/opt/out");
			
	ИначеЕсли ЭтоИмяДокумента(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		СтандартнаяОбработка = Ложь;
		
		ТипЗначения = ПредопределенноеЗначение("Документ." + НавигационнаяСсылкаФорматированнойСтроки + ".ПустаяСсылка");
		МассивСтрок = НеПодтвержденныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		
		МассивСсылок = Новый Массив;
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			МассивСсылок.Добавить(СтрокаТЧ.ДокументСсылка);
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", МассивСсылок);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Документ." + НавигационнаяСсылкаФорматированнойСтроки + ".ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Если ЕстьНеВыгруженныеДокументы() Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытиеОбработки_Подтверждение", ЭтотОбъект),
			НСтр("ru='Не все созданные документы были выгружены в ЕГАИС. Закрыть окно?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗакрытьФормуБезусловно = Истина;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияЕГАИСКлиент.НачатьЗагрузкуДокументов(
		Новый ОписаниеОповещения("ОбменСЕГАИС_ПослеЗагрузкиДокументов", ЭтотОбъект),
		ТранспортныйМодуль,,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетныеОстаткиКоманда(Команда)
	
	Если ПолучитьТекущиеУчетныеОстатки = 0 И НЕ ЗначениеЗаполнено(Объект.ДатаУчетныхОстатков) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата остатков.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ДатаУчетныхОстатков");
		Возврат;
	КонецЕсли;
	
	Если Объект.УчетныеОстатки.Количество() > 0 Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнениеУчетныхОстатков_Подтверждение", ЭтотОбъект),
			НСтр("ru='Таблица учетных остатков будет перезаполнена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнениеУчетныхОстатков_Завершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткиЕГАИСКоманда(Команда)
	
	ЗаполнитьОстаткиЕГАИС();
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьУчетныхОстатков(Команда)
	
	ОбновитьДанныеУчетныхОстатков();
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	
	МассивНоменклатуры = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Элементы.УчетныеОстатки.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.УчетныеОстатки.ДанныеСтроки(СтрокаТаблицы);
		Если ДанныеСтроки.АлкогольнаяПродукция.Пустая() Тогда
			МассивНоменклатуры.Добавить(ДанныеСтроки.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Номенклатура", МассивНоменклатуры);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("СопоставлениеНоменклатуры_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДополнительныеПараметры));
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", ПараметрыФормы,,,,, ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьАлкогольнуюПродукцию(Команда)
	
	МассивАлкогольнойПродукции = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Элементы.ОстаткиЕГАИС.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ОстаткиЕГАИС.ДанныеСтроки(СтрокаТаблицы);
		Если ДанныеСтроки.Номенклатура.Пустая() Тогда
			МассивАлкогольнойПродукции.Добавить(ДанныеСтроки.АлкогольнаяПродукция);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивАлкогольнойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСопоставленияАлкогольнойПродукции(МассивАлкогольнойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из Элементы.СозданныеДокументы.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.СозданныеДокументы.ДанныеСтроки(ИдентификаторСтроки);
		МассивСсылок.Добавить(ТекущиеДанные.Ссылка);
	КонецЦикла;
	
	Если МассивСсылок.Количество() > 0 Тогда
		ПровестиДокументыНаСервере(МассивСсылок);
		Элементы.СозданныеДокументы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВЕГАИС(Команда)
	
	МассивСсылок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.ДокументСсылка);
	КонецЦикла;
	
	СписокДокументов = ПолучитьПроведенныеДокументыДляВыгрузки(МассивСсылок);
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокДокументов", СписокДокументов);
	ДополнительныеПараметры.Вставить("ТекущийИндекс", 0);
	
	ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(СписокДокументов[0].ВидДокумента);
	ВходныеПараметры.ДокументСсылка = СписокДокументов[0].ДокументСсылка;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ВыгрузкаВЕГАИС_ПослеВыгрузкиДокумента", ЭтотОбъект, ДополнительныеПараметры),
		СписокДокументов[0].ВидДокумента,
		ВходныеПараметры,
		ТранспортныйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьУчетныеОстатки(Команда)
	
	РазвернутьСвернутьУчетныеОстаткиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьОстаткиЕГАИС(Команда)
	
	РазвернутьСвернутьОстаткиЕГАИСНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТаблицуКорректировки(Команда)
	
	РазвернутьСвернутьТаблицуКорректировкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОпределитьТранспортныйМодуль = Истина;
	
	ИнициализироватьПараметрыЗапросаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ОпределитьТранспортныйМодуль = Истина;
	ОпределитьСкладыМагазина = Истина;
	
	ИнициализироватьПараметрыЗапросаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьОстаткиНемаркируемойПродукцииПриИзменении(Элемент)
	
	Объект.УчетныеОстатки.Очистить();
	Объект.ОстаткиЕГАИС.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОстаткиНаСкладеПриИзменении(Элемент)
	
	УстановитьТекущиеСтраницыПанелейЗапросаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОстаткиВТорговомЗалеПриИзменении(Элемент)
	
	УстановитьТекущиеСтраницыПанелейЗапросаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекущиеУчетныеОстаткиПриИзменении(Элемент)
	
	Если ПолучитьТекущиеУчетныеОстатки = 1 Тогда
		Объект.ДатаУчетныхОстатков = '00010101';
		Элементы.ДатаУчетныхОстатков.Доступность = Ложь;
	Иначе
		Элементы.ДатаУчетныхОстатков.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиАлкогольнаяПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиАлкогольнаяПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "УчетныеОстаткиИндексКартинкиОшибки" И НЕ ПустаяСтрока(Элемент.ТекущиеДанные.ТекстОшибки) Тогда
		ПоказатьПредупреждение(, Элемент.ТекущиеДанные.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСАлкогольнаяПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСАлкогольнаяПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ОстаткиЕГАИСНоменклатура"
		И Элемент.ТекущиеДанные.Номенклатура.Пустая() Тогда
		Отказ = Истина;
		
		МассивАлкогольнойПродукции = Новый Массив;
		МассивАлкогольнойПродукции.Добавить(Элемент.ТекущиеДанные.АлкогольнаяПродукция);
		ОткрытьФормуСопоставленияАлкогольнойПродукции(МассивАлкогольнойПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЕГАИСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОстаткиЕГАИСИндексКартинкиОшибки" И НЕ ПустаяСтрока(Элемент.ТекущиеДанные.ТекстОшибки) Тогда
		ПоказатьПредупреждение(, Элемент.ТекущиеДанные.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму(
			"Документ." + ИмяДокумента(Элемент.ТекущиеДанные.Ссылка) + ".ФормаОбъекта",
			Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка),
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ПросмотрДокумента_Завершение", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаКорректировкиПередатьВТорговыйЗал"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ТаблицаКорректировкиПоставитьНаБалансВТорговыйЗал"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ТаблицаКорректировкиОприходоватьНаСклад" Тогда
		Отказ = НЕ Элемент.ТекущиеДанные.ПродаетсяВРозлив;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСтраницПомощника

&НаКлиенте
Функция Подключаемый_СтраницаНачальныеДанные_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана организация.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран магазин.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Магазин",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОпределитьТранспортныйМодуль Тогда
		ТранспортныйМодуль = ТранспортныйМодуль(Объект.Организация, Объект.Магазин, Объект.ОрганизацияЕГАИС);
		
		Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить транспортный модуль.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ИначеЕсли НЕ ЗначениеЗаполнено(ТранспортныйМодуль.ОрганизацияЕГАИС) Тогда
			ТекстСообщения = НСтр("ru = 'Не найдена организация ЕГАИС с кодом ФСРАР %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТранспортныйМодуль.ИдентификаторФСРАР);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОпределитьТранспортныйМодуль = Ложь;
		ВыполнитьПредварительнуюПроверкуДанных = Истина;
	КонецЕсли;
	
	Если ОпределитьСкладыМагазина Тогда
		ОпределитьСкладыМагазина(Объект.Магазин, Объект.ИспользуетсяНесколькоСкладов);
		
		ОпределитьСкладыМагазина = Ложь;
		ВыполнитьПредварительнуюПроверкуДанных = Истина;
	КонецЕсли;
	
	Если ВыполнитьПредварительнуюПроверкуДанных Тогда
		ВыполнитьПредварительнуюПроверкуДанных();
		ВыполнитьПредварительнуюПроверкуДанных = Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаДанных_ПриПереходеДалее(Отказ)
	
	УстановитьТекущиеСтраницыПанелейЗапросаОстатков();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПолучениеОстатковЕГАИС_ПриПереходеДалее(Отказ)
	
	Если ЗапроситьОстаткиНаСкладе = 0 И НЕ ЗначениеЗаполнено(Объект.ОстаткиНаСкладе) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков на складе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиНаСкладе",, Отказ);
	КонецЕсли;
	
	Если ЗапроситьОстаткиВТорговомЗале = 0 И НЕ ЗначениеЗаполнено(Объект.ОстаткиВТорговомЗале) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков в торговом зале.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВТорговомЗале",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗапроситьОстаткиНаСкладе = 1 И ЗапроситьОстаткиВТорговомЗале = 1
		И ПолучитьТекущиеУчетныеОстатки = -1 Тогда
		ПолучитьТекущиеУчетныеОстатки = 1;
		Объект.ДатаУчетныхОстатков = '00010101';
		Элементы.ДатаУчетныхОстатков.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗапроситьОстаткиНаСкладе = 1 ИЛИ ЗапроситьОстаткиВТорговомЗале = 1 Тогда
		СоздатьДокументыЗапросаОстатков();
		
		Если ЗапроситьОстаткиНаСкладе = 1 Тогда
			ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатков");
			
			ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
			ВходныеПараметры.ДокументСсылка = Объект.ОстаткиНаСкладе;
			
			ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
				Новый ОписаниеОповещения("ЗапросОстатков_ПослеФормированияЗапросаОстатковНаСкладе", ЭтотОбъект),
				ВидДокумента,
				ВходныеПараметры,
				ТранспортныйМодуль);
		Иначе
			РезультатЗапроса = ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса();
			РезультатЗапроса.Результат = Истина;
			
			ЗапросОстатков_ПослеФормированияЗапросаОстатковНаСкладе(РезультатЗапроса, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданиеПолученияОстатковЕГАИС_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ОжиданиеПолученияОстатковКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	
	Элементы.ПанельОжиданиеПолученияОстатковНаСкладе.ТекущаяСтраница = Элементы.СтраницаОжиданиеПолученияОстатковНаСкладе;
	Элементы.ПанельОжиданиеПолученияОстатковВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаОжиданиеПолученияОстатковВТорговомЗале;
	
	Элементы.ЛеваяПанельОжидание.Доступность = Ложь;
	
	ПодключенОбработчикОтветов = Ложь;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданиеПолученияОстатковЕГАИС_ДлительнаяОперация(Отказ, ПерейтиДалее)
	
	ПолученыОстаткиНаСкладе = Ложь;
	ПолученыОстаткиВТорговомЗале = Ложь;
	
	Если ПустаяСтрока(ТекстОшибкиПолученияОстатковНаСкладе) Тогда
		СтатусОбработки = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОстаткиНаСкладе, "СтатусОбработки");
		
		Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков") Тогда
			ТекстОшибкиПолученияОстатковНаСкладе = ТекстПоследнейОшибкиОбмена(Объект.ОстаткиНаСкладе);
			Если ПустаяСтрока(ТекстОшибкиПолученияОстатковНаСкладе) Тогда
				ТекстОшибкиПолученияОстатковНаСкладе = НСтр("ru='При выполнении запроса остатков возникла ошибка.'");
			КонецЕсли;
		ИначеЕсли СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
			ПолученыОстаткиНаСкладе = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибкиПолученияОстатковВТорговомЗале) Тогда
		СтатусОбработки = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОстаткиВТорговомЗале, "СтатусОбработки");
		
		Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков") Тогда
			ТекстОшибкиПолученияОстатковВТорговомЗале = ТекстПоследнейОшибкиОбмена(Объект.ОстаткиВТорговомЗале);
			Если ПустаяСтрока(ТекстОшибкиПолученияОстатковВТорговомЗале) Тогда
				ТекстОшибкиПолученияОстатковВТорговомЗале = НСтр("ru='При выполнении запроса остатков возникла ошибка.'");
			КонецЕсли;
		ИначеЕсли СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
			ПолученыОстаткиВТорговомЗале = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученыОстаткиНаСкладе Тогда
		Элементы.ПанельОжиданиеПолученияОстатковНаСкладе.ТекущаяСтраница = Элементы.СтраницаОстаткиНаСкладеПолучены;
	ИначеЕсли НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковНаСкладе) Тогда
		Элементы.ПанельОжиданиеПолученияОстатковНаСкладе.ТекущаяСтраница = Элементы.СтраницаОшибкаПолученияОстатковНаСкладе;
	Иначе
		Элементы.ПанельОжиданиеПолученияОстатковНаСкладе.ТекущаяСтраница = Элементы.СтраницаОжиданиеПолученияОстатковНаСкладе;
	КонецЕсли;
	
	Если ПолученыОстаткиВТорговомЗале Тогда
		Элементы.ПанельОжиданиеПолученияОстатковВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаОстаткиВТорговомЗалеПолучены;
	ИначеЕсли НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковВТорговомЗале) Тогда
		Элементы.ПанельОжиданиеПолученияОстатковВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаОшибкаПолученияОстатковВТорговомЗале;
	Иначе
		Элементы.ПанельОжиданиеПолученияОстатковВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаОжиданиеПолученияОстатковВТорговомЗале;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковНаСкладе) ИЛИ НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковВТорговомЗале) Тогда
		ПерейтиДалее = Ложь;
		Элементы.ОжиданиеПолученияОстатковКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.ЛеваяПанельОжидание.Доступность = Истина;
	ИначеЕсли НЕ ПолученыОстаткиНаСкладе ИЛИ НЕ ПолученыОстаткиВТорговомЗале Тогда
		ПерейтиДалее = Ложь;
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 5, Истина);
		
		Если НЕ ПодключенОбработчикОтветов Тогда
			ПодключенОбработчикОтветов = Истина;
			
			Если ТранспортныйМодуль.ОбменНаСервере Тогда
				ПодключитьОбработчикОжидания("СоздатьФоновоеЗаданиеОбработкиОтветов", 1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ЗапуститьОбработкуОтветовНаКлиенте", 15, Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПерейтиДалее = Истина;
		Элементы.ОжиданиеПолученияОстатковКартинка.Картинка = БиблиотекаКартинок.Успешно32;
		
		ЗаполнитьТаблицыОстатков();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		Если НЕ Объект.ИспользуетсяНесколькоСкладов Тогда
			Элементы.УчетныеОстаткиОстатокСклад.Видимость = Ложь;
			Элементы.УчетныеОстаткиОстатокТорговыйЗал.Заголовок = НСтр("ru='Остаток'");
		Иначе
			Элементы.УчетныеОстаткиОстатокСклад.Видимость = Истина;
			Элементы.УчетныеОстаткиОстатокТорговыйЗал.Заголовок = НСтр("ru='Ост. торговый зал'");
		КонецЕсли;
		
		ПроверитьКорректностьОстатков();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриПереходеДалее(Отказ)
	
	РассчитатьКоличествоКорректировки();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриПереходеНазад(Отказ)
	
	Элементы.ПерейтиВпередПродолжение.Доступность = Истина;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСозданиеДокументов_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		Если НЕ Объект.ИспользуетсяНесколькоСкладов Тогда
			Элементы.ТаблицаКорректировкиГруппаУчетныйОстаток.Видимость = Ложь;
			Элементы.ТаблицаКорректировкиУчетныйОстаток.Видимость = Истина;
		Иначе
			Элементы.ТаблицаКорректировкиГруппаУчетныйОстаток.Видимость = Истина;
			Элементы.ТаблицаКорректировкиУчетныйОстаток.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли СозданиеДокументовЗавершено Тогда
		Элементы.ПерейтиНазадПродолжение.Доступность = Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСозданиеДокументов_ПриПереходеДалее(Отказ)
	
	Если НЕ СозданиеДокументовЗавершено Тогда
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СозданиеДокументов_Подтверждение", ЭтотОбъект),
			НСтр("ru='Будут созданы документы корректировки остатков в ЕГАИС. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

&НаКлиенте
Процедура ВыполнитьПредварительнуюПроверкуДанных()
	
	Элементы.ГруппаНеПроведенныеДокументыДействия.Видимость = Ложь;
	
	ВыполнитьПредварительнуюПроверкуДанныхНаСервере();
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов", ЭтотОбъект);
	ПроверитьНезагруженныеДокументы(ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПредварительнуюПроверкуДанныхНаСервере()
	
	ПроверитьНаличиеИнвентаризации();
	
	НайтиДокументыОжидающиеПодтверждения();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнвентаризации()
	
	РекомендуемыеДействия = Новый Массив;
	
	Если Объект.ИспользуетсяНесколькоСкладов Тогда
		
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость = Истина;
		
		ПроверитьНаличиеИнвентаризацииПоСкладу(Перечисления.ТипыСкладов.СкладскоеПомещение, РекомендуемыеДействия);
		
		ПроверитьНаличиеИнвентаризацииПоСкладу(Перечисления.ТипыСкладов.ТорговыйЗал, РекомендуемыеДействия);
		
	Иначе
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость = Ложь;
		
		ПроверитьНаличиеИнвентаризацииПоСкладу(Неопределено, РекомендуемыеДействия);
		
	КонецЕсли;
	
	Если Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Успешно
		ИЛИ Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Успешно
			И Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость Тогда
		МассивСтроки = Новый Массив;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Сформировать'"),,,, "СформироватьОтчетПоИзлишкамНедостачам"));
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(НСтр("ru='отчет по оформлению излишков (недостач).'"));
		
		ДобавитьРекомендуемоеДействие(Новый ФорматированнаяСтрока(МассивСтроки), РекомендуемыеДействия);
	КонецЕсли;
	
	МассивСтроки = Новый Массив;
	Если РекомендуемыеДействия.Количество() > 1 Тогда
		МассивСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	МассивСтроки.Добавить(НСтр("ru='Для просмотра всех Приказов на пересчет товаров перейдите в ""'"));
	МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Список приказов'"),,,, "ОткрытьСписокПриказов"));
	МассивСтроки.Добавить(""".");
	
	ДобавитьРекомендуемоеДействие(Новый ФорматированнаяСтрока(МассивСтроки), РекомендуемыеДействия);
	
	Элементы.НадписьРекомендуемыеДействия.Заголовок = Новый ФорматированнаяСтрока(РекомендуемыеДействия);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнвентаризацииПоСкладу(ТипСклада, РекомендуемыеДействия)
	
	МестоПроведения = ?(ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал, "ВТорговомЗале", "НаСкладе");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Магазин"    , Объект.Магазин);
	Запрос.УстановитьПараметр("ТипСклада"  , ТипСклада);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ЕСТЬNULL(ПриказНаПроведениеИнвентаризацииТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПриказНаПроведениеИнвентаризацииТоваров.ПустаяСсылка)) КАК ДокументСсылка,
	|	ЕСТЬNULL(ПриказНаПроведениеИнвентаризацииТоваров.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания,
	|	ЕСТЬNULL(ПриказНаПроведениеИнвентаризацииТоваров.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриказНаПроведениеИнвентаризацииТоваров КАК ПриказНаПроведениеИнвентаризацииТоваров
	|		ПО Склады.Ссылка = ПриказНаПроведениеИнвентаризацииТоваров.Склад
	|			И (ПриказНаПроведениеИнвентаризацииТоваров.Проведен)
	|			И (ПриказНаПроведениеИнвентаризацииТоваров.Магазин = &Магазин)
	|			И (ВЫБОР
	|				КОГДА Склады.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Склады.Организация = ПриказНаПроведениеИнвентаризацииТоваров.Организация
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ТорговыйЗал)
	|				ТОГДА Склады.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И Склады.Магазин = &Магазин
	|	И ВЫБОР
	|			КОГДА &ТипСклада = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Склады.ТипСклада = &ТипСклада
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	ДатаОкончания УБЫВ
	|ИТОГИ ПО
	|	Склад
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстОшибки = "";
	
	ВыборкаСклад = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() Цикл
		
		Если ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал Тогда
			СкладПродажи = ВыборкаСклад.Склад;
		Иначе
			СкладПоступления = ВыборкаСклад.Склад;
		КонецЕсли;
		
		МассивСтроки = Новый Массив;
		МассивСтроки.Добавить(?(ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал, НСтр("ru='в торговом зале'"), НСтр("ru='на складе'")));
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(ВыборкаСклад.Склад),,,, ПолучитьНавигационнуюСсылку(ВыборкаСклад.Склад)));
		
		ПредставлениеСклада = Новый ФорматированнаяСтрока(МассивСтроки);
		
		МассивСтроки = Новый Массив;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Создать'"),,,, "СоздатьПриказ" + МестоПроведения));
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(НСтр("ru='новый Приказ на пересчет товаров'"));
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(ПредставлениеСклада);
		МассивСтроки.Добавить(".");
		
		ДействиеСоздатьНовый = Новый ФорматированнаяСтрока(МассивСтроки);
		
		Выборка = ВыборкаСклад.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ДокументСсылка.Пустая() Тогда
				ДобавитьРекомендуемоеДействие(ДействиеСоздатьНовый, РекомендуемыеДействия);
				
				МассивСтроки = Новый Массив;
				МассивСтроки.Добавить(НСтр("ru='Инвентаризация товаров'"));
				МассивСтроки.Добавить(" ");
				МассивСтроки.Добавить(ПредставлениеСклада);
				МассивСтроки.Добавить(" ");
				МассивСтроки.Добавить(НСтр("ru='не проводилась.'"));
				
				ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
				
			ИначеЕсли НачалоДня(Выборка.ДатаОкончания) < НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)) Тогда
				ДобавитьРекомендуемоеДействие(ДействиеСоздатьНовый, РекомендуемыеДействия);
				
				МассивСтроки = Новый Массив;
				МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, ПолучитьНавигационнуюСсылку(Выборка.ДокументСсылка)));
				МассивСтроки.Добавить(" ");
				МассивСтроки.Добавить(ПредставлениеСклада);
				МассивСтроки.Добавить(" ");
				МассивСтроки.Добавить(НСтр("ru='проводилась больше месяца назад.'"));
				МассивСтроки.Добавить(Символы.ПС);
				МассивСтроки.Добавить(НСтр("ru='Рекомендуется провести повторную инвентаризацию.'"));
				
				ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
				
			ИначеЕсли Выборка.Статус <> Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
				
				МассивСтроки = Новый Массив;
				МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, ПолучитьНавигационнуюСсылку(Выборка.ДокументСсылка)));
				МассивСтроки.Добавить(" ");
				МассивСтроки.Добавить(ПредставлениеСклада);
				МассивСтроки.Добавить(" ");
				МассивСтроки.Добавить(НСтр("ru='не завершена.'"));
				МассивСтроки.Добавить(Символы.ПС);
				МассивСтроки.Добавить(НСтр("ru='Перед корректировкой остатков по регистрам ЕГАИС рекомендуется завершить инвентаризацию.'"));
				
				ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Элементы["ПанельПроверкаИнвентаризации" + МестоПроведения].ТекущаяСтраница = Элементы["СтраницаПроверкаИнвентаризации" + МестоПроведения + "_Предупреждение"];
		Элементы["НадписьПроверкаИнвентаризации" + МестоПроведения + "_Предупреждение"].Заголовок = ТекстОшибки;
	Иначе
		Элементы["ПанельПроверкаИнвентаризации" + МестоПроведения].ТекущаяСтраница = Элементы["СтраницаПроверкаИнвентаризации" + МестоПроведения + "_Успешно"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРекомендуемоеДействие(НовоеДействие, РекомендуемыеДействия)
	
	Если РекомендуемыеДействия.Количество() <> 0 Тогда
		РекомендуемыеДействия.Добавить(Символы.ПС);
	КонецЕсли;
	
	РекомендуемыеДействия.Добавить(НовоеДействие);
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыОжидающиеПодтверждения()
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений);
	
	СтатусыПодтвержденнойТТН = Новый Массив;
	СтатусыПодтвержденнойТТН.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
	СтатусыПодтвержденнойТТН.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений);
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ВозвратИзТорговогоЗалаЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ПередачаВТорговыйЗалЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	Запрос.УстановитьПараметр("СтатусыПодтвержденнойТТН", СтатусыПодтвержденнойТТН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК ДокументСсылка,
	|	ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка) КАК ТипЗначения
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Проведен
	|	И АктПостановкиНаБалансЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АктПостановкиНаБалансЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Проведен
	|	И АктСписанияЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АктСписанияЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратИзТорговогоЗалаЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ВозвратИзТорговогоЗалаЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ВозвратИзТорговогоЗалаЕГАИС КАК ВозвратИзТорговогоЗалаЕГАИС
	|ГДЕ
	|	ВозвратИзТорговогоЗалаЕГАИС.Проведен
	|	И ВозвратИзТорговогоЗалаЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ВозвратИзТорговогоЗалаЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаВТорговыйЗалЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ПередачаВТорговыйЗалЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ПередачаВТорговыйЗалЕГАИС КАК ПередачаВТорговыйЗалЕГАИС
	|ГДЕ
	|	ПередачаВТорговыйЗалЕГАИС.Проведен
	|	И ПередачаВТорговыйЗалЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ПередачаВТорговыйЗалЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящая.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ТТНВходящая.Ссылка = ПоступлениеТоваров.ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И ТТНВходящая.СтатусОбработки В(&СписокСтатусов)
	|	И ПоступлениеТоваров.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Проведен
	|	И ТТНИсходящаяЕГАИС.Грузоотправитель = &ОрганизацияЕГАИС
	|	И ТТНИсходящаяЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящая.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ТТНВходящая.Ссылка = ПоступлениеТоваров.ТТНВходящаяЕГАИС
	|			И (ПоступлениеТоваров.Проведен)
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И ТТНВходящая.СтатусОбработки В(&СтатусыПодтвержденнойТТН)
	|	И ПоступлениеТоваров.Ссылка ЕСТЬ NULL ";
	
	НеПодтвержденныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если НеПодтвержденныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_ЕстьДокументы;
		
		ВидыДокументов = Новый Массив;
		
		Для Каждого ТипДокумента Из ТипыДокументов Цикл
			МассивСтрок = НеПодтвержденныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", Документы[ТипДокумента.Имя].ПустаяСсылка()));
			Если МассивСтрок.Количество() > 0 Тогда
				Если ВидыДокументов.Количество() > 0 Тогда
					ВидыДокументов.Добавить(", ");
				КонецЕсли;
				ВидыДокументов.Добавить(
					Новый ФорматированнаяСтрока(ТипДокумента.ПредставлениеСписка + " (" + МассивСтрок.Количество() + ")",,,,
					ТипДокумента.Имя));
			КонецЕсли;
		КонецЦикла;
		
		Элементы.НеПодтвержденныеДокументы.Заголовок = Новый ФорматированнаяСтрока(ВидыДокументов);
		Элементы.ГруппаНеПроведенныеДокументыДействия.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНезагруженныеДокументы(ОповещениеПриЗавершении)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если ТранспортныйМодуль.ОбменНаСервере Тогда
		РезультатОперации = ЗапроситьВходящиеДокументыНаСервере(ТранспортныйМодуль);
		ПроверкаНезагруженныхДокументов_ПослеПолученияСпискаДокументов(РезультатОперации, ДополнительныеПараметры);
	Иначе
		ЗапроситьВходящиеДокументыНаКлиенте(Новый ОписаниеОповещения("ПроверкаНезагруженныхДокументов_ПослеПолученияСпискаДокументов", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ПерейтиВпередПродолжение.Доступность = Истина;
	
	Если Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_Ошибка Тогда
		
		Элементы.ПанельРезультатПроверкиДанных.ТекущаяСтраница = Элементы.СтраницаРезультатПроверкиОшибка;
		Элементы.ПерейтиВпередПродолжение.Доступность = Ложь;
		
	ИначеЕсли Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница <> Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Успешно
		ИЛИ Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница <> Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Успешно
			И Объект.ИспользуетсяНесколькоСкладов
		ИЛИ Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_ЕстьДокументы
		ИЛИ Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_ЕстьДокументы Тогда
		
		Элементы.ПанельРезультатПроверкиДанных.ТекущаяСтраница = Элементы.СтраницаРезультатПроверкиПредупреждение;
		
	Иначе
		
		Элементы.ПанельРезультатПроверкиДанных.ТекущаяСтраница = Элементы.СтраницаРезультатПроверкиУспешно;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНезагруженныхДокументов_ПослеПолученияСпискаДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		СтрокиПроверки = Новый Массив;
		СтрокиПроверки.Добавить(НСтр("ru='Ошибка получения списка входящих документов:'"));
		СтрокиПроверки.Добавить(Символы.ПС);
		СтрокиПроверки.Добавить(Результат.ОписаниеОшибки);
		
		Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_Ошибка;
		Элементы.НадписьНеЗагруженныеДокументы_Ошибка.Заголовок = Новый ФорматированнаяСтрока(СтрокиПроверки,, ЦветОшибка);
	Иначе
		#Если ВебКлиент Тогда
			СписокURL = ПолучитьСписокURLДокументовНаСервере(Результат.ОтветМодуляЕГАИС);
		#Иначе
			СписокURL = ПолучитьСписокURLДокументов(Результат.ОтветМодуляЕГАИС);
		#КонецЕсли
		
		Если СписокURL.Количество() > 0 Тогда
			СтрокиПроверки = Новый Массив;
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='В УТМ присутствуют незагруженные'"),, ЦветПредупреждение));
			СтрокиПроверки.Добавить(" ");
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='документы ('")+ СписокURL.Количество() + ")",,,, "ПоказатьНезагруженныеДокументы"));
			
			Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_ЕстьДокументы;
			Элементы.НадписьНеЗагруженныеДокументы_ЕстьДокументы.Заголовок = Новый ФорматированнаяСтрока(СтрокиПроверки);
			
			Элементы.ГруппаНеПроведенныеДокументыДействия.Видимость = Истина;
		Иначе
			Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокURLДокументов(ОтветМодуляЕГАИС)
	
	Результат = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Для Каждого УзелURL Из УзлыURL Цикл
		Результат.Добавить(УзелURL.ТекстовоеСодержимое);
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокURLДокументовНаСервере(ОтветМодуляЕГАИС)
	
	Возврат ПолучитьСписокURLДокументов(ОтветМодуляЕГАИС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапроситьВходящиеДокументыНаСервере(ТранспортныйМодуль)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьВходящиеДокументыНаКлиенте(ОповещениеПриЗавершении)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("ЗапросДокументов_ПослеПолученияСпискаДокументов", ЭтотОбъект, ДополнительныеПараметры),
			ТранспортныйМодуль,
			ДанныеЗапроса);
	#Иначе
		Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		ЗапросДокументов_ПослеПолученияСпискаДокументов(Результат, ДополнительныеПараметры);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДокументов_ПослеПолученияСпискаДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменСЕГАИС_ПослеЗагрузкиДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РезультатЗагрузкиДокументов", Результат.Результат);
	
	ИнтеграцияЕГАИСКлиент.НачатьОбработкуОтветов(
		Новый ОписаниеОповещения("ОбменСЕГАИС_ПослеОбработкиОтветов", ЭтотОбъект, ДополнительныеПараметры),
		ТранспортныйМодуль,,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменСЕГАИС_ПослеОбработкиОтветов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат И ДополнительныеПараметры.РезультатЗагрузкиДокументов Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обмен с ЕГАИС успешно завершен.'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обмен с ЕГАИС завершен с ошибками.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения_Завершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	;// Действие не требуется.
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоИмяДокумента(СтрокаПроверки)
	
	Возврат Метаданные.Документы.Найти(СтрокаПроверки) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПолучениеОстатковЕГАИС

&НаКлиенте
Процедура ИнициализироватьПараметрыЗапросаОстатков()
	
	Объект.ОстаткиНаСкладе = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВТорговомЗале = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	ЗапроситьОстаткиВТорговомЗале = 1;
	ЗапроситьОстаткиНаСкладе = 1;
	
	ПолучитьТекущиеУчетныеОстатки = -1;
	Объект.ДатаУчетныхОстатков = '00010101';
	Объект.УчетныеОстатки.Очистить();
	Объект.ОстаткиЕГАИС.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущиеСтраницыПанелейЗапросаОстатков()
	
	Элементы.ПанельЗапросаОстатковНаСкладе.ТекущаяСтраница = ?(
		ЗапроситьОстаткиНаСкладе = 1,
		Элементы.СтраницаЗапроситьОстаткиНаСкладе,
		Элементы.СтраницаВыбратьОстаткиНаСкладе);
		
	Элементы.ПанельЗапросаОстатковВТорговомЗале.ТекущаяСтраница = ?(
		ЗапроситьОстаткиВТорговомЗале = 1,
		Элементы.СтраницаЗапроситьОстаткиВТорговомЗале,
		Элементы.СтраницаВыбратьОстаткиВТорговомЗале);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыЗапросаОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗапроситьОстаткиНаСкладе = 1 Тогда
		ОбработкаОбъект.СоздатьДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатков);
	КонецЕсли;
	
	Если ЗапроситьОстаткиВТорговомЗале = 1 Тогда
		ОбработкаОбъект.СоздатьДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецФункции

&НаКлиенте
Процедура ЗапросОстатков_ПослеФормированияЗапросаОстатковНаСкладе(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибкиПолученияОстатковНаСкладе = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗапроситьОстаткиВТорговомЗале = 1 Тогда
		ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале");
		
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
		ВходныеПараметры.ДокументСсылка = Объект.ОстаткиВТорговомЗале;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			Новый ОписаниеОповещения("ЗапросОстатков_ПослеФормированияЗапросаОстатковВТорговомЗале", ЭтотОбъект),
			ВидДокумента,
			ВходныеПараметры,
			ТранспортныйМодуль);
	Иначе
		РезультатЗапроса = ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса();
		РезультатЗапроса.Результат = Истина;
		
		ЗапросОстатков_ПослеФормированияЗапросаОстатковВТорговомЗале(РезультатЗапроса, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатков_ПослеФормированияЗапросаОстатковВТорговомЗале(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибкиПолученияОстатковВТорговомЗале = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	ЗапроситьОстаткиНаСкладе = 0;
	ЗапроситьОстаткиВТорговомЗале = 0;
	
	УстановитьТекущиеСтраницыПанелейЗапросаОстатков();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПоследнейОшибкиОбмена(ДокументСсылка)
	
	Возврат РегистрыСведений.ПротоколОбменаЕГАИС.ТекстПоследнейОшибки(ДокументСсылка);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбработкуОтветовНаКлиенте()
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветов_Завершение", ЭтотОбъект);
	
	ИнтеграцияЕГАИСКлиент.НачатьОбработкуОтветов(ОповещениеПриЗавершении, ТранспортныйМодуль, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибкиПолученияОстатковНаСкладе = Результат.ОписаниеОшибки;
		ТекстОшибкиПолученияОстатковНаСкладе = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	ПодключенОбработчикОтветов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФоновоеЗаданиеОбработкиОтветов()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторФоновогоЗадания) Тогда
		ИдентификаторФоновогоЗадания = СоздатьФоновоеЗаданиеНаСервере();
		ПодключитьОбработчикОжидания("СоздатьФоновоеЗаданиеОбработкиОтветов", 15, Истина);
	Иначе
		Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
			ПодключенОбработчикОтветов = Ложь;
			ИдентификаторФоновогоЗадания = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Иначе
			ПодключитьОбработчикОжидания("СоздатьФоновоеЗаданиеОбработкиОтветов", 15, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторФоновогоЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьФоновоеЗаданиеНаСервере()
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ИнтеграцияЕГАИС.ЗапуститьОбработкуОтветовЕГАИС");
	Возврат ФоновоеЗадание.УникальныйИдентификатор;
	
КонецФункции

#КонецОбласти

#Область ПросмотрОстатков

&НаКлиенте
Процедура ЗаполнениеУчетныхОстатков_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеУчетныхОстатков_Завершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеУчетныхОстатков_Завершение()
	
	ЗаполнитьУчетныеОстатки();
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыОстатков()
	
	Если ПолучитьТекущиеУчетныеОстатки = -1 Тогда
		ДатаОстатковНаСкладеЕГАИС = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОстаткиНаСкладе, "Дата");
		ДатаОстатковВТорговомЗалеЕГАИС = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОстаткиВТорговомЗале, "Дата");
		
		ПолучитьТекущиеУчетныеОстатки = 0;
		Объект.ДатаУчетныхОстатков = Мин(ДатаОстатковНаСкладеЕГАИС, ДатаОстатковВТорговомЗалеЕГАИС);
		Элементы.ДатаУчетныхОстатков.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.УчетныеОстатки.Количество() = 0
		ИЛИ Объект.ОстаткиЕГАИС.Количество() = 0 Тогда
		ЗаполнитьТаблицыОстатковНаСервере();
		ПроверитьКорректностьОстатков();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОстатковНаСервере()
	
	Если Объект.УчетныеОстатки.Количество() = 0 Тогда
		
		ЗаполнитьУчетныеОстатки();
		
	КонецЕсли;
	
	Если Объект.ОстаткиЕГАИС.Количество() = 0 Тогда
		
		ЗаполнитьОстаткиЕГАИС();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетныеОстатки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьУчетныеОстатки();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУчетныхОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьДанныеУчетныхОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиЕГАИС()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьОстаткиЕГАИС();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьОстатков()
	
	ОстаткиКорректны = Истина;
	
	МассивСтрок = Объект.УчетныеОстатки.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.ЕстьОшибка = Ложь;
		СтрокаТаблицы.ТекстОшибки = "";
	КонецЦикла;
	
	МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.ЕстьОшибка = Ложь;
		СтрокаТаблицы.ТекстОшибки = "";
	КонецЦикла;
	
	НоваяСтраница = Элементы.СтраницаПроверкаОстатковУспешно;
	
	КартинкаУчетныеОстатки = Новый Картинка;
	КартинкаОстаткиЕГАИС = Новый Картинка;
	
	
	// Проверка заполнения реквизита ОбъемДАЛ для разливной продукции.
	ОтборНеУказанОбъемДАЛ = Новый Структура("ПродаетсяВРозлив, ОбъемДАЛ", Истина, 0);
	
	МассивСтрок = Объект.УчетныеОстатки.НайтиСтроки(ОтборНеУказанОбъемДАЛ);
	Если МассивСтрок.Количество() <> 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаНеУказанОбъемДАЛ;
		КартинкаУчетныеОстатки = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан объем в декалитрах базовой единицы измерения.'");
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(ОтборНеУказанОбъемДАЛ);
	Если МассивСтрок.Количество() <> 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаНеУказанОбъемДАЛ;
		КартинкаОстаткиЕГАИС = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан объем в декалитрах базовой единицы измерения.'");
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка заполнения признака продажи в розлив.
	ОтборНеУказанПризнакПродажиВРозлив = Новый Структура("ПродаетсяВРозлив, ТипПродукции",
		Ложь, ПредопределенноеЗначение("Перечисление.ТипыПродукцииЕГАИС.Неупакованная"));
	
	МассивСтрок = Объект.УчетныеОстатки.НайтиСтроки(ОтборНеУказанПризнакПродажиВРозлив);
	Если МассивСтрок.Количество() <> 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаНеУказанПризнакПродажиВРозлив;
		КартинкаУчетныеОстатки = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан признак продажи в розлив.'");
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(ОтборНеУказанПризнакПродажиВРозлив);
	Если МассивСтрок.Количество() <> 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаНеУказанПризнакПродажиВРозлив;
		КартинкаОстаткиЕГАИС = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан признак продажи в розлив.'");
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка наличия учетных остатков.
	Если Объект.УчетныеОстатки.Количество() = 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаНетДанных;
		КартинкаУчетныеОстатки = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	
	// Проверка отсутствия несопоставленной номенклатуры.
	ПараметрыОтбора = Новый Структура("АлкогольнаяПродукция", ПредопределенноеЗначение("Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка"));
	МассивСтрок = Объект.УчетныеОстатки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() <> 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаЕстьНесопоставленнаяНоменклатура;
		КартинкаУчетныеОстатки = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Номенклатура не сопоставлена с классификатором алкогольной продукции.'");
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика",
		ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		
	МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() <> 0 Тогда
		ОстаткиКорректны = Ложь;
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибкаЕстьНесопоставленнаяАлкогольнаяПродукция;
		КартинкаОстаткиЕГАИС = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Номенклатура не сопоставлена с классификатором алкогольной продукции.'");
		КонецЦикла;
	КонецЕсли;
	
	
	Если Элементы.ПанельПроверкаОстатков.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ПанельПроверкаОстатков.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	Если Элементы.СтраницаУчетныеОстатки.Картинка <> КартинкаУчетныеОстатки Тогда
		Элементы.СтраницаУчетныеОстатки.Картинка = КартинкаУчетныеОстатки;
	КонецЕсли;
	
	Если Элементы.СтраницаОстаткиЕГАИС.Картинка <> КартинкаОстаткиЕГАИС Тогда
		Элементы.СтраницаОстаткиЕГАИС.Картинка = КартинкаОстаткиЕГАИС;
	КонецЕсли;
	
	Если Элементы.ПерейтиВпередПродолжение.Доступность <> ОстаткиКорректны Тогда
		Элементы.ПерейтиВпередПродолжение.Доступность = ОстаткиКорректны;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленияАлкогольнойПродукции(МассивАлкогольнойПродукции)
	
	ПараметрыФормы = Новый Структура;
	ДополнительныеПараметры = Новый Структура;
	
	Если МассивАлкогольнойПродукции.Количество() = 1 Тогда
		ДополнительныеПараметры.Вставить("АлкогольнаяПродукция", МассивАлкогольнойПродукции[0]);
		ПараметрыФормы.Вставить("РежимСопоставленияИВыбора", Истина);
	Иначе
		ДополнительныеПараметры.Вставить("АлкогольнаяПродукция", МассивАлкогольнойПродукции);
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("СопоставлениеАлкогольнойПродукции_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДополнительныеПараметры));
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", ПараметрыФормы,,,,, ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеНоменклатуры_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СоответствиеНоменклатуры = ПолучитьСопоставленнуюАлкогольнуюПродукцию(ДополнительныеПараметры.Номенклатура);
	
	Для Каждого КлючЗначение Из СоответствиеНоменклатуры Цикл
		МассивСтрок = Объект.УчетныеОстатки.НайтиСтроки(КлючЗначение.Значение);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].АлкогольнаяПродукция = КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеАлкогольнойПродукции_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(ДополнительныеПараметры.АлкогольнаяПродукция) = Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС") Тогда
		
		МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", ДополнительныеПараметры.АлкогольнаяПродукция));
		Если МассивСтрок.Количество() <> 0 Тогда
			МассивСтрок[0].Номенклатура = РезультатЗакрытия;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("Структура")
		И ТипЗнч(ДополнительныеПараметры.АлкогольнаяПродукция) = Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС") Тогда
		
		МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", ДополнительныеПараметры.АлкогольнаяПродукция));
		Если МассивСтрок.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], РезультатЗакрытия);
		КонецЕсли;
		
	Иначе
		
		СоответствиеАлкогольнойПродукции = ПолучитьСопоставленнуюНоменклатуру(ДополнительныеПараметры.АлкогольнаяПродукция);
		
		Для Каждого КлючЗначение Из СоответствиеАлкогольнойПродукции Цикл
			МассивСтрок = Объект.ОстаткиЕГАИС.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", КлючЗначение.Ключ));
			Если МассивСтрок.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(МассивСтрок[0], КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСопоставленнуюАлкогольнуюПродукцию(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура В(&СписокНоменклатуры)";
	
	Результат = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.АлкогольнаяПродукция,
			Новый Структура("Номенклатура, Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСопоставленнуюНоменклатуру(СписокАлкогольнойПродукции)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокАлкогольнойПродукции", СписокАлкогольнойПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция В(&СписокАлкогольнойПродукции)";
	
	Результат = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.АлкогольнаяПродукция,
			Новый Структура("Номенклатура, Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РазвернутьСвернутьУчетныеОстаткиНаСервере()
	
	РазвернутаУчетныеОстатки = НЕ РазвернутаУчетныеОстатки;
	
	ВидимостьЭлементов = НЕ РазвернутаУчетныеОстатки;
	
	Элементы.ГруппаПросмотрОстатковЗаголовок.Видимость  = ВидимостьЭлементов;
	Элементы.ГруппаДатаУчетныхОстатков.Видимость        = ВидимостьЭлементов;
	Элементы.СтраницаОстаткиЕГАИС.Видимость             = ВидимостьЭлементов;
	Элементы.ПанельПроверкаОстатков.Видимость           = ВидимостьЭлементов;
	Элементы.ПанельНавигации.Видимость                  = ВидимостьЭлементов;
	Элементы.ГруппаПросмотрОстатков.ОтображатьЗаголовок = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьУчетныеОстатки.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьОстаткиЕГАИСНаСервере()
	
	РазвернутаОстаткиЕГАИС = НЕ РазвернутаОстаткиЕГАИС;
	
	ВидимостьЭлементов = НЕ РазвернутаОстаткиЕГАИС;
	
	Элементы.ГруппаПросмотрОстатковЗаголовок.Видимость  = ВидимостьЭлементов;
	Элементы.СтраницаУчетныеОстатки.Видимость           = ВидимостьЭлементов;
	Элементы.ПанельПроверкаОстатков.Видимость           = ВидимостьЭлементов;
	Элементы.ПанельНавигации.Видимость                  = ВидимостьЭлементов;
	Элементы.ГруппаПросмотрОстатков.ОтображатьЗаголовок = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьОстаткиЕГАИС.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Процедура РассчитатьКоличествоКорректировки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РассчитатьКоличествоКорректировки();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументов_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыКорректировкиОстатков();
	
	СозданиеДокументовЗавершено = Истина;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыКорректировкиОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СоздатьДокументыКорректировкиОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СозданныеДокументы,
		"СписокДокументов",
		Объект.СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументСсылка"),
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяДокумента(ДокументСсылка)
	
	Возврат ДокументСсылка.Метаданные().Имя;
	
КонецФункции

&НаКлиенте
Процедура ПросмотрДокумента_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.СозданныеДокументы.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПровестиДокументыНаСервере(МассивДокументов)
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВЕГАИС_ПослеВыгрузкиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущийИндекс = ДополнительныеПараметры.СписокДокументов.ВГраница() Тогда
		Элементы.СозданныеДокументы.Обновить();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документы успешно выгружены.'"));
	Иначе
		СписокДокументов = ДополнительныеПараметры.СписокДокументов;
		ДополнительныеПараметры.ТекущийИндекс = ДополнительныеПараметры.ТекущийИндекс + 1;
		
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(СписокДокументов[ДополнительныеПараметры.ТекущийИндекс].ВидДокумента);
		ВходныеПараметры.ДокументСсылка = СписокДокументов[ДополнительныеПараметры.ТекущийИндекс].ДокументСсылка;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			Новый ОписаниеОповещения("ВыгрузкаВЕГАИС_ПослеВыгрузкиДокумента", ЭтотОбъект, ДополнительныеПараметры),
			СписокДокументов[ДополнительныеПараметры.ТекущийИндекс].ВидДокумента,
			ВходныеПараметры,
			ТранспортныйМодуль);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТаблицуКорректировкиНаСервере()
	
	РазвернутаТаблицаКорректировки = НЕ РазвернутаТаблицаКорректировки;
	
	ВидимостьЭлементов = НЕ РазвернутаТаблицаКорректировки;
	
	Элементы.НадписьСозданиеДокументов.Видимость          = ВидимостьЭлементов;
	Элементы.НадписьСозданиеДокументовДалее.Видимость     = ВидимостьЭлементов;
	Элементы.ПанельНавигации.Видимость                    = ВидимостьЭлементов;
	Элементы.ГруппаСозданиеДокументов.ОтображатьЗаголовок = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТаблицуКорректировки.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПроведенныеДокументыДляВыгрузки(МассивДокументов)
	
	Результат = Новый Массив;
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен, СтатусОбработки");
		
		Если НЕ РеквизитыДокумента.Проведен
			ИЛИ РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый
				И РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый
				И РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.Новый
				И РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.Новый Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратИзТорговогоЗалаЕГАИС") Тогда
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаВТорговыйЗалЕГАИС") Тогда
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал;
		Иначе
			ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидДокумента");
		КонецЕсли;
		
		Результат.Добавить(Новый Структура("ВидДокумента, ДокументСсылка", ВидДокумента, ДокументСсылка));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЕстьНеВыгруженныеДокументы()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.ДокументСсылка);
	КонецЦикла;
	
	СписокДокументов = ПолучитьНеВыгруженныеДокументы(МассивСсылок);
	
	Возврат СписокДокументов.Количество() <> 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНеВыгруженныеДокументы(МассивДокументов)
	
	Результат = Новый Массив;
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СтатусОбработки");
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.Новый
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.Новый Тогда
			Результат.Добавить(ДокументСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеОбработки_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуБезусловно = Истина;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СценарийКорректировкиОстатковВТорговомЗале()
	
	ТаблицаПереходов.Очистить();
	
	// 1. Исходные данные.
	ТаблицаПереходовНоваяСтрока(
		1,                                           // Порядковый номер перехода.
		"СтраницаНачальныеДанные",                   // Основная страница.
		"СтраницаНавигацииНачало",                   // Страница панели навигации.
		,                                            // Обработчик, вызываемый при открытии страницы.
		"СтраницаНачальныеДанные_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 2. Проверка данных.
	ТаблицаПереходовНоваяСтрока(
		2,                                          // Порядковый номер перехода.
		"СтраницаПроверкаДанных",                   // Основная страница.
		"СтраницаНавигацииПродолжение",             // Страница панели навигации.
		,                                           // Обработчик, вызываемый при открытии страницы.
		"СтраницаПроверкаДанных_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 3. Получение остатков ЕГАИС.
	ТаблицаПереходовНоваяСтрока(
		3,                                                  // Порядковый номер перехода.
		"СтраницаПолучениеОстатковЕГАИС",                   // Основная страница.
		"СтраницаНавигацииПродолжение",                     // Страница панели навигации.
		,                                                   // Обработчик, вызываемый при открытии страницы.
		"СтраницаПолучениеОстатковЕГАИС_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 4. Ожидание получения остатков (длительная операция).
	ТаблицаПереходовНоваяСтрока(
		4,                                                            // Порядковый номер перехода.
		"СтраницаОжиданиеПолученияОстатковЕГАИС",                     // Основная страница.
		"СтраницаНавигацииОжидание",                                  // Страница панели навигации.
		"СтраницаОжиданиеПолученияОстатковЕГАИС_ПриОткрытии",         // Обработчик, вызываемый при открытии страницы.
		,                                                             // Обработчик, вызываемый перед переходом на следующую страницу.
		,                                                             // Обработчик, вызываемый перед переходом на предыдущую страницу.
		Истина,                                                       // Признак длительной операции.
		"СтраницаОжиданиеПолученияОстатковЕГАИС_ДлительнаяОперация"); // Обработчик одной итерации длительной операции.
		
		
	// 5. Просмотр остатков.
	ТаблицаПереходовНоваяСтрока(
		5,                                            // Порядковый номер перехода.
		"СтраницаПросмотрОстатков",                   // Основная страница.
		"СтраницаНавигацииПродолжение",               // Страница панели навигации.
		"СтраницаПросмотрОстатков_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПросмотрОстатков_ПриПереходеДалее",  // Обработчик, вызываемый перед переходом на следующую страницу.
		"СтраницаПросмотрОстатков_ПриПереходеНазад"); // Обработчик, вызываемый перед переходом на предыдущую страницу.
		
		
	// 6. Создание корректировочных документов.
	ТаблицаПереходовНоваяСтрока(
		6,                                              // Порядковый номер перехода.
		"СтраницаСозданиеДокументов",                   // Основная страница.
		"СтраницаНавигацииПродолжение",                 // Страница панели навигации.
		"СтраницаСозданиеДокументов_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаСозданиеДокументов_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
	// 7. Просмотр созданных документов.
	ТаблицаПереходовНоваяСтрока(
		7,                             // Порядковый номер перехода.
		"СтраницаОкончание",           // Основная страница.
		"СтраницаНавигацииОкончание"); // Страница панели навигации.
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "ПерейтиВперед");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "Завершить");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТранспортныйМодуль(Организация, Магазин, ОрганизацияЕГАИС)
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСРТ.ИспользуемыйТранспортныйМодуль(Организация, Магазин);
	
	Если ТипЗнч(ТранспортныйМодуль) = Тип("Структура") Тогда
		ОрганизацияЕГАИС = ТранспортныйМодуль.ОрганизацияЕГАИС;
	Иначе
		ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТранспортныйМодуль;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОпределитьСкладыМагазина(Магазин, ИспользуетсяНесколькоСкладов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.ТипСклада КАК ТипСклада
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|	И НЕ Склады.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользуетсяНесколькоСкладов = Выборка.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СозданныеДокументы", "Дата");
	
	// Дата учетных остатков.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДатаУчетныхОстатков");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"ПолучитьТекущиеУчетныеОстатки",
		0,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ДатаУчетныхОстатков",
		,
		ВидСравненияКомпоновкиДанных.НеЗаполнено,
		,
		Истина);
	
	// Единица измерения учетных остатков.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УчетныеОстаткиНоменклатураЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.УчетныеОстатки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Единица измерения остатков ЕГАИС.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕГАИСНоменклатураЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ОстаткиЕГАИС.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Единица измерения в таблице корректировки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКорректировкиНоменклатураЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаКорректировки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Текст ошибки учетных остатков.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УчетныеОстатки");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.УчетныеОстатки.ЕстьОшибка",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Текст ошибки остатков ЕГАИС.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕГАИС");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ОстаткиЕГАИС.ЕстьОшибка",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Есть ошибка учетных остатков.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УчетныеОстаткиИндексКартинкиОшибки");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.УчетныеОстатки.ЕстьОшибка",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Есть ошибка остатков ЕГАИС.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕГАИСИндексКартинкиОшибки");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ОстаткиЕГАИС.ЕстьОшибка",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСкладыМагазина(Магазин)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|	И НЕ Склады.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгружатьНемаркируемуюПродукцию()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Получить();
	
КонецФункции

#КонецОбласти