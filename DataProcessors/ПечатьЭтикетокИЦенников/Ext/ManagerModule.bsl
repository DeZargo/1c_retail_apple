

&Вместо("Печать")
// Процедура печати документа.
Процедура ВместоПечатьКочетов(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	РежимПечати = "";
	Если ПараметрыПечати.Свойство("РежимПечати") Тогда
		РежимПечати = ПараметрыПечати.РежимПечати;
	КонецЕсли;
	
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	СоответствиеШаблонов = Новый Соответствие;
	
	Если РежимПечати = "ПодарочныеСертификаты" Тогда
		
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПодарочныйСертификат";
		ТекстВременнойТаблицы = "	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Сертификат,
		|		ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка) КАК НомерСертификата,
		|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		
		СтруктураНастроек.Вставить("ТекстВременнойТаблицы", ТекстВременнойТаблицы);
		
		СтруктураНастроек.ОбязательныеПоля.Добавить("Сертификат");
		СтруктураНастроек.ОбязательныеПоля.Добавить("НомерСертификата");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
		
		СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", МассивОбъектов[0].Магазин);
		
		ПечататьЭтикетки = Истина;
		ПечататьЦенники = Ложь;
		ТаблицаШаблонов = МассивОбъектов[0].ПодарочныеСертификаты.Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки");
		
		Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			КонецЕсли;
		КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
			СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
			Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
				Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
					СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		// Подготовка исходных данных.
		ИсходныеДанные = МассивОбъектов[0].ПодарочныеСертификаты.Выгрузить(
																	Новый Структура("Выбран", Истина),
																	"Сертификат, НомерСертификата, Штрихкод, КоличествоЭтикеток, ШаблонЭтикетки, Организация");
		Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СтрокаТЧ.КоличествоЭтикеток = 0;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РежимПечати = "ДисконтныеКарты" 
		ИЛИ РежимПечати = "РегистрационныеКарты" Тогда
		
		Если РежимПечати = "РегистрационныеКарты" Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаРегистрационнаяКарта";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаДисконтнаяКарта";
		КонецЕсли;
		
		ТекстВременнойТаблицы = "	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка) КАК Карта,
		|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		
		СтруктураНастроек.Вставить("ТекстВременнойТаблицы", ТекстВременнойТаблицы);
		
		СтруктураНастроек.ОбязательныеПоля.Добавить("Карта");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
		
		СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", МассивОбъектов[0].Магазин);
		
		ПечататьЭтикетки = Истина;
		ПечататьЦенники = Ложь;
		ТаблицаШаблонов = МассивОбъектов[0][РежимПечати].Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки");
		
		Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			КонецЕсли;
		КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
			СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
			Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
				Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
					СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		// Подготовка исходных данных.
		ИсходныеДанные = МассивОбъектов[0][РежимПечати].Выгрузить(
															Новый Структура("Выбран", Истина),
															"Карта, Штрихкод, КоличествоЭтикеток, ШаблонЭтикетки, Организация");
		Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СтрокаТЧ.КоличествоЭтикеток = 0;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
		КонецЕсли;
		
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
		ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
									И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(МассивОбъектов[0].Магазин);
		Если ИспользоватьАссортимент Тогда
			ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивОбъектов[0].Магазин, "ФорматМагазина");
			СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
		КонецЕсли;
		
		
		
		
		
						
		// Собираем используемые поля из шаблонов.
		ТаблицаШаблонов = МассивОбъектов[0].Товары.Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника, Номенклатура");
		
		
		
		//Zorius
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("красныйЦенник",Справочники.ххх_Справочник.КрасныйЦенник.Значение);
		Запрос.УстановитьПараметр("Товары",ТаблицаШаблонов);
		Запрос.УстановитьПараметр("Красный",МассивОбъектов[0].Красный);
		Запрос.УстановитьПараметр("Штрихкод","Штрихкод");//Кастыль, увезти в справочник для интеграции.
		Запрос.УстановитьПараметр("Этикетка","Этикетка для выпечки (Производство)");
		Запрос.Текст="ВЫБРАТЬ
		             |	Товары.Номенклатура КАК Номенклатура,
		             |	Товары.ШаблонЦенника КАК ШаблонЦенника,
		             |	Товары.ШаблонЭтикетки КАК ШаблонЭтикетки
		             |ПОМЕСТИТЬ йцу
		             |ИЗ
		             |	&Товары КАК Товары
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
					 |	йцу.Номенклатура КАК Номенклатура,
		             |	йцу.ШаблонЦенника КАК ШаблонЦенника,
		             |	йцу.ШаблонЭтикетки КАК ШаблонЭтикетки
		             |ИЗ
		             |	йцу КАК йцу
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		             |		ПО (НоменклатураСегмента.Номенклатура = йцу.Номенклатура)
		             |			И (НоменклатураСегмента.Сегмент = &КрасныйЦенник)
		             |ГДЕ
		             |	ВЫБОР
		             |			КОГДА &Красный
		             |				ТОГДА НЕ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
		             |			ИНАЧЕ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
		             |		КОНЕЦ
		             |	И йцу.ШаблонЦенника.Красный = &Красный
					 |	Или йцу.ШаблонЦенника.Наименование=&Штрихкод Или йцу.ШаблонЦенника.Наименование=&Этикетка";
		ТаблицаШаблонов=Запрос.Выполнить().Выгрузить();

		й=0;
		Пока й<ТаблицаШаблонов.Количество() Цикл
			Если ТаблицаШаблонов[й].ШаблонЦенника.Красный<>МассивОбъектов[0].Красный и (ТаблицаШаблонов[й].ШаблонЦенника.Наименование<>"Штрихкод" или ТаблицаШаблонов[й].ШаблонЦенника.Наименование<>"Этикетка") Тогда //Кастыль, увезти в справочник для интеграции.
				ТаблицаШаблонов.удалить(й);
				й=й-1;
			КонецЕсли;
			й=й+1;
		КонецЦикла;
		//Zorius
		
		ПечататьЭтикетки = Истина;
		ПечататьЦенники = Истина;
		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			ПечататьЦенники = КоллекцияПечатныхФорм[0].ИмяМакета = "Ценники";
			ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники И СтрокаТЧ.ШаблонЦенника.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
			СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
			Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
				Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
					СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		//Zorius
		// Подготовка исходных данных.
		//ИсходныеДанные = МассивОбъектов[0].Товары.Выгрузить(
		//											Новый Структура("Выбран", Истина),
		//											"Номенклатура, СправкаБ, Характеристика, Упаковка, КоличествоЭтикеток, КоличествоЦенников, ШаблонЭтикетки, ШаблонЦенника, Организация");													
		ИсходныеДанные = МассивОбъектов[0].Товары.Выгрузить(
													Новый Структура("Выбран", Истина),
													"Номенклатура, Справка2, Характеристика, Упаковка, КоличествоЭтикеток, КоличествоЦенников, ШаблонЭтикетки, ШаблонЦенника, Организация, ШтрихКод, Страна");
		//												
		Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СтрокаТЧ.КоличествоЭтикеток = 0;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
				СтрокаТЧ.КоличествоЦенников = 0;
			КонецЕсли;
		КонецЦикла;
		
		//Zorius
		й=0;
		Пока  й<ИсходныеДанные.количество()Цикл			
			Если не значениеЗаполнено(ТаблицаШаблонов.Найти(ИсходныеДанные[й].Номенклатура)) Тогда
				ИсходныеДанные.удалить(й);
				й=й-1;
			КонецЕСли;
			й=й+1;
		КонецЦикла;	
		
		мас=Новый массив;
		узлы=ПланыОбмена.ПланОбменаСОборудованием.Выбрать();
		Пока узлы.Следующий() Цикл
			Если не узлы.ЭтотУзел тогда
				мас.Добавить(узлы.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Для каждого эл из ИсходныеДанные.выгрузитьКолонку("номенклатура") Цикл
			планыобмена.ЗарегистрироватьИзменения(мас,эл);	
		КонецЦикла;
		//Zorius

		Если ПараметрыПечати.Режим = "ПечатьЭтикеток" Тогда
			ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЦенников");
		КонецЕсли;
		Если ПараметрыПечати.Режим = "ПечатьЦенников" Тогда
			ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЭтикеток");
		КонецЕсли;
		
		СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",     МассивОбъектов[0].ВидЦены);
		СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", МассивОбъектов[0].Магазин);
		СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования", МассивОбъектов[0].ПравилоЦенообразования);
		СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен", МассивОбъектов[0].Магазин);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", МассивОбъектов[0].ЦеныПоВидуЦены);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату", МассивОбъектов[0].ЦеныНаДату);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие", МассивОбъектов[0].ЦеныНазначенныеДействующие);
		СтруктураНастроек.ПараметрыДанных.Вставить("ВидМинимальныхЦенПродажи", МассивОбъектов[0].ВидМинимальныхЦенПродажи);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныМинимальные", МассивОбъектов[0].УчитыватьЦеныМинимальные);
		СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьАссортимент", ИспользоватьАссортимент);
		СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьСправкиБ", МассивОбъектов[0].ИспользоватьСправкиБ);
		
	КонецЕсли;
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
	
	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники);
	КоллекцияПечатныхФорм.Очистить();
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл
		
		НоваяФорма = КоллекцияПечатныхФорм.Добавить();
		НоваяФорма.ИмяМакета         = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.СинонимМакета     = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.ИмяВРЕГ           = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяФорма.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяФорма.Экземпляров       = 1;
		
	КонецЦикла;
		
КонецПроцедуры

&Вместо("ПодготовитьСтруктуруДанных")
Функция КочетовПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона)
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если СтруктураШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(СтруктураШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, СтруктураШаблона.Шаблон);
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление некорректных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
				Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
					СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	
	// Подмена запроса для расчета цен...
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

		ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
		ТекстЗамены = " ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(ИсходныеДанныеПоследнийЗапрос.Упаковка.Коэффициент, 1) КАК Число(15,2))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		
	КонецЕсли;
	
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные = Неопределено Тогда
		Если СтруктураНастроек.Свойство("ТекстЗаменяемойТаблицы")
			И СтруктураНастроек.Свойство("ТекстТаблицыДляЗамены") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
										СтруктураНастроек.ТекстЗаменяемойТаблицы,
										СтруктураНастроек.ТекстТаблицыДляЗамены);
		КонецЕсли;
	Иначе
		
		Если СтруктураНастроек.Свойство("ТекстВременнойТаблицы") Тогда
			ТекстВременнойТаблицы = СтруктураНастроек.ТекстВременнойТаблицы;
		Иначе
			ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
		Если ТаблицаИсходныеДанные.колонки.найти("Штрихкод")<>неопределено Тогда
			//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.Упаковка КАК Упаковка,","ИсходныеДанные.Упаковка КАК Упаковка,"+ " ИсходныеДанные.Штрихкод как штрихкод,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
		КонецЕСли;	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Страна""", "ИсходныеДанные.Страна");
		
		Если ТаблицаИсходныеДанные.Колонки.Найти("Справка2") = Неопределено Тогда
			ТаблицаИсходныеДанные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
		Запрос.УстановитьПараметр("СостояниеНаВесах", Справочники.ххх_Справочник.СостояниеНаВесах.значение);
		Запрос.УстановитьПараметр("ВидЦеныШоки", Справочники.ххх_Справочник.ВидЦеныШокиЗачеркнутая.значение);
		
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;


КонецФункции

















