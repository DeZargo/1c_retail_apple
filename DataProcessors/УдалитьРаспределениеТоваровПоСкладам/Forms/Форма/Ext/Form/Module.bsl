
&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	Если НЕ Параметры.Документ = Неопределено Тогда
		
		Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ПоступлениеТоваров") 
			И ЗначениеЗаполнено(Параметры.Документ.ЗаказПоставщику) Тогда
			
			Объект.ДокументОснование = Параметры.Документ.ЗаказПоставщику;
			Объект.Магазин    = Параметры.Документ.ЗаказПоставщику.Магазин;
			Объект.Склад      = Параметры.Документ.ЗаказПоставщику.Склад;
			Объект.ДокументПоступления = Параметры.Документ;
		Иначе
			
			Объект.ДокументОснование = Параметры.Документ;
			Объект.Магазин    = Параметры.Магазин;
			Объект.Склад      = Параметры.Склад;
			
			Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				ПоступлениеПоЗаказу = Документы.ПоступлениеТоваров.ПолучитьПоступлениеТоваровПоЗаказуПоставщику(Параметры.Документ);
				Если НЕ ПоступлениеПоЗаказу = Неопределено Тогда
					Объект.ДокументПоступления = ПоступлениеПоЗаказу;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
			Элементы.ДекорацияПустышка.Видимость          = Ложь;
			Элементы.ДокументПоступлениеТоваров.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("Режим") Тогда
			
			Объект.Режим = Параметры.Режим;
			ВозможноИспользование = Ложь;
			
			Если Объект.Режим = "ПриходТовара" Тогда
				
				Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") 
					ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					ВозможноИспользование = Объект.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении;
				ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					ВозможноИспользование = Объект.Магазин.ИспользоватьОрдернуюСхемуПриПеремещении;
				КонецЕсли;
				
			Иначе
				
				Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
					ВозможноИспользование = Объект.Магазин.ИспользоватьОрдернуюСхемуПриОтгрузке;
				ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					ВозможноИспользование = Объект.Магазин.ИспользоватьОрдернуюСхемуПриПеремещении;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ВозможноИспользование Тогда
				
				ВызватьИсключение НСтр("ru = 'Распределение товаров по складам возможно 
					|только при использовании ордерной схемы.'");
				
			КонецЕсли;
			
			УстановитьРежим();
			ЗаполнитьТаблицу();
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Режим работы обработки не установлен'");
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Обработка предназначена только для открытия из форм документов'");
		
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьКнопок();
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	СформироватьЗаголовокКомандыВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
				
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	РедактированиеТЧТовары = Ложь;
	
	СформироватьЗаголовокКомандыВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковокФакт Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковокФакт Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	Если СформироватьДокументы() Тогда
		
		Оповестить("РаспределениеТоваровПоСкладамВыполнено");
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Распределение выполнено:'"),
			,
			НСтр("ru='Документы распределения товаров сформированы.'"),
			БиблиотекаКартинок.Информация32);
			
		Оповестить("ОбновитьСписокРаспоряженийНаПриемкуТоваров");
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	СформироватьЗаголовокКомандыВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоДокументу(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			
			СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			
			СтрокаТоваров.КоличествоФакт         = СтрокаТоваров.Количество;
			СтрокаТоваров.КоличествоУпаковокФакт = СтрокаТоваров.КоличествоУпаковок;
			
		КонецЦикла;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Количество заполнено:'"),
		,
		НСтр("ru='Количество по документу-основанию в таблице заполнено.'"),
		БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Количество не заполнено:'"),
		,
		НСтр("ru='Количество по документу-основанию в таблице не заполнено.'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоФиксированное(Команда)
	
	Перем ФиксированноеКоличество;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводФиксированногоКоличества", ЭтотОбъект);
	ПоказатьВводЧисла(ОписаниеОповещения, ФиксированноеКоличество,НСтр("ru = 'Введите количество'"), 15,3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладыПоДокументуВыделенныхСтрок(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
				
				СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
				
				Если СтрокаТаблицы = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаТаблицы.Склад = Объект.Склад;
				
			КонецЦикла;
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Склады заполнены:'"),
				,
				НСтр("ru='Склады по основанию в выделенных строках заполнены.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Склады не заполнены:'"),
				,
				НСтр("ru='Склады по основанию в выделенных строках не заполнены.'"),
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;	
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Склады не заполнены:'"),
			,
			НСтр("ru='Склады по основанию в выделенных строках не заполнены.'"),
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;
	
	СформироватьЗаголовокКомандыВыполнить();
КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьСкладыПоПравиламРаспределенияВыделенныхСтрок".
//
&НаКлиенте
Процедура ЗаполнитьСкладыПоПравиламРаспределенияВыделенныхСтрок(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		СкладыЗаполнены = Ложь;
		
	Иначе
		
		СкладыЗаполнены = ЗаполнитьПоПравиламРаспределенияТоваровНаСервере(Истина);
		
	КонецЕсли;
	
	Если СкладыЗаполнены Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Склады заполнены:'"),
			,
			НСтр("ru='Склады по правилам распределения в выделенных строках заполнены.'"),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Склады не заполнены:'"),
			,
			НСтр("ru='Склады по правилам распределения в выделенных строках не заполнены.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьСкладыПоСправочникуВыделенныхСтрок".
//
&НаКлиенте
Процедура ЗаполнитьСкладыПоСправочникуВыделенныхСтрок(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ПараметрыФормы  = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Магазин", Объект.Магазин);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		
		Обработчик = Новый ОписаниеОповещения("ОповещениеЗаполнитьСкладыПоСправочнику", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Обработчик, Режим);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Склады не заполнены:'"),
			,
			НСтр("ru='Склады по справочнику в выделенных строках не заполнены.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьСкладыПоСправочнику(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			
			Если СтрокаТаблицы = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаТаблицы.Склад = ВыбранноеЗначение;
			
		КонецЦикла;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Склады заполнены:'"),
		,
		НСтр("ru='Склады по справочнику в выделенных строках заполнены.'"),
		БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Склады не заполнены:'"),
		,
		НСтр("ru='Склады по справочнику в выделенных строках не заполнены.'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	СформироватьЗаголовокКомандыВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьТаблицу();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВводФиксированногоКоличества(ФиксированноеКоличество, ДополнительныеПараметры) Экспорт
	
	Если ФиксированноеКоличество = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьКоличествоФиксированноеНаСервере(ФиксированноеКоличество);
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Заполнение:'"),
				,
				НСтр("ru = 'Заполнено фактическое количество в таблице'"),
				БиблиотекаКартинок.Информация32);
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтаФорма, Объект.СерийныеНомера, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	ТекущаяСтрока = ДополнительныеПараметры.СтрокаТЧ;
	КоличествоУпаковок = ДополнительныеПараметры.КоличествоУпаковок;
	
	Если ПересчетКоличества Тогда
		
		ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковок;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		
		ЗаполнитьСтатусыУказанияСерийСервер();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("РаспределениеТоваровПоСкладам", Истина);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

// Процедура заполняет колонку "КоличествоУпаковокФакт" числом, введенным пользователем.
//
&НаСервере
Процедура ЗаполнитьКоличествоФиксированноеНаСервере(ФиксированноеКоличество)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			
			СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			
			СтрокаТовары.КоличествоУпаковокФакт = ФиксированноеКоличество;
			СтрокаТовары.КоличествоФакт         = СтрокаТовары.КоличествоУпаковокФакт * ?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), СтрокаТовары.Упаковка.Коэффициент, 1);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонку "Склад" в таблице "Товары" по правилам распределения товаров.
//
&НаСервере
Функция ЗаполнитьПоПравиламРаспределенияТоваровНаСервере(ПоВыделеннымСтрокам)
	
	СкладыЗаполнены = Ложь;
	Запрос = Новый Запрос;
	
	Если Объект.Режим = "ПриходТовара" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА РаспределениеПоступлений.Склад ЕСТЬ NULL 
		|			ТОГДА &Склад
		|		ИНАЧЕ РаспределениеПоступлений.Склад
		|	КОНЕЦ КАК Склад
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Склады.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|				Склады.Склад КАК Склад
		|			ИЗ
		|				РегистрСведений.РаспределениеПоступлений КАК Склады
		|			ГДЕ
		|				Склады.Магазин = &Магазин) КАК РаспределениеПоступлений
		|			ПО СправочникНоменклатура.ТоварнаяГруппа = РаспределениеПоступлений.ТоварнаяГруппа
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка";
		Запрос.УстановитьПараметр("Склад", Объект.Магазин.СкладПоступления);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА РаспределениеПродаж.Склад ЕСТЬ NULL 
		|			ТОГДА &Склад
		|		ИНАЧЕ РаспределениеПродаж.Склад
		|	КОНЕЦ КАК Склад
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Склады.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|				Склады.Склад КАК Склад
		|			ИЗ
		|				РегистрСведений.РаспределениеПродаж КАК Склады
		|			ГДЕ
		|				Склады.Магазин = &Магазин
		|				И Склады.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)) КАК РаспределениеПродаж
		|			ПО СправочникНоменклатура.ТоварнаяГруппа = РаспределениеПродаж.ТоварнаяГруппа
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка";
		Запрос.УстановитьПараметр("Склад", Объект.Магазин.СкладПродажи); 		
		
	КонецЕсли;

	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Если ПоВыделеннымСтрокам Тогда
		
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		МассивСтрок = Новый Массив;
		
		Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			
			Если СтрокаТаблицы = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МассивСтрок.Добавить(СтрокаТаблицы);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(МассивСтрок,"НомерСтроки, Номенклатура"));	
		
	Иначе
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура"));	
		
	КонецЕсли;	
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		СкладыЗаполнены = Истина;
		
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекущаяСтрока = Объект.Товары[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
	КонецЦикла;
	
	СформироватьЗаголовокКомандыВыполнить();
	Возврат СкладыЗаполнены;
	
КонецФункции

// Процедура заполняет таблицы "Товары" и "СерийныеНомера" товарами к распределению.
//
&НаСервере
Процедура ЗаполнитьТаблицу(СообщатьОРезультатахЗаполнения = Истина)
	
	Запрос = Новый Запрос;
	Объект.Серии.Очистить();
	Объект.СерийныеНомера.Очистить();
	
	Если Объект.Режим = "ПриходТовара" Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|				ТОГДА Товары.Цена
			|			ИНАЧЕ Товары.Цена / Товары.Упаковка.Коэффициент
			|		КОНЕЦ) КАК Цена,
			|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Документ
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Упаковка
			|ПОМЕСТИТЬ ТоварыСУпаковками
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	МИНИМУМ(Товары.Коэффициент) КАК Коэффициент
			|ПОМЕСТИТЬ ТоварыСКоэффициентами
			|ИЗ
			|	ТоварыСУпаковками КАК Товары
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	ТоварыСУпаковками.Упаковка,
			|	Товары.Коэффициент КАК Коэффициент
			|ПОМЕСТИТЬ УточнениеПоУпаковкам
			|ИЗ
			|	ТоварыСКоэффициентами КАК Товары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСУпаковками КАК ТоварыСУпаковками
			|		ПО Товары.Номенклатура = ТоварыСУпаковками.Номенклатура
			|			И Товары.Характеристика = ТоварыСУпаковками.Характеристика
			|			И Товары.Коэффициент = ТоварыСУпаковками.Коэффициент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
			|	ТоварыКПоступлению.Характеристика КАК Характеристика,
			|	ТоварыКПоступлению.Количество КАК Количество,
			|	ВЫБОР
			|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
			|			ТОГДА ТоварыКПоступлению.Количество / УточнениеПоУпаковкам.Коэффициент
			|		ИНАЧЕ ТоварыКПоступлению.Количество
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ТоварыКПоступлению.Количество КАК КоличествоФакт,
			|	ВЫБОР
			|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
			|			ТОГДА ТоварыКПоступлению.Количество / УточнениеПоУпаковкам.Коэффициент
			|		ИНАЧЕ ТоварыКПоступлению.Количество
			|	КОНЕЦ КАК КоличествоУпаковокФакт,
			|	ВЫБОР
			|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
			|			ТОГДА Товары.Цена * УточнениеПоУпаковкам.Коэффициент
			|		ИНАЧЕ Товары.Цена
			|	КОНЕЦ КАК Цена,
			|	ТоварыКПоступлению.Количество * Товары.Цена КАК Сумма,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	УточнениеПоУпаковкам.Упаковка КАК Упаковка,
			|   &Склад КАК Склад
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыКПоступлению.Номенклатура КАК Номенклатура,
			|		ТоварыКПоступлению.Характеристика КАК Характеристика,
			|		СУММА(ТоварыКПоступлению.КоличествоОстаток) КАК Количество
			|	ИЗ
			|		РегистрНакопления.ТоварыКПоступлению.Остатки(
			|				,
			|				ДокументОснование = &ДокументОснование
			|					) КАК ТоварыКПоступлению
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТоварыКПоступлению.Номенклатура,
			|		ТоварыКПоступлению.Характеристика) КАК ТоварыКПоступлению
			|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
			|		ПО (Товары.Номенклатура = ТоварыКПоступлению.Номенклатура)
			|			И (Товары.Характеристика = ТоварыКПоступлению.Характеристика)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УточнениеПоУпаковкам КАК УточнениеПоУпаковкам
			|		ПО (УточнениеПоУпаковкам.Номенклатура = ТоварыКПоступлению.Номенклатура)
			|			И (УточнениеПоУпаковкам.Характеристика = ТоварыКПоступлению.Характеристика)
			|ГДЕ
			|	ТоварыКПоступлению.Количество > 0");
			
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗаказПоставщику","ВозвратТоваровОтПокупателя");
			КонецЕсли;

			Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
			
			Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
				Запрос.УстановитьПараметр("Документ", Объект.ДокументПоступления);
				Запрос.УстановитьПараметр("Склад", Объект.ДокументПоступления.Склад);
			Иначе
				Запрос.УстановитьПараметр("Документ", Объект.ДокументОснование);
				Запрос.УстановитьПараметр("Склад", Объект.Склад);
			КонецЕсли;
			
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Если Не РезультатыЗапроса[4].Пустой() Тогда
				
				Объект.Товары.Загрузить(РезультатыЗапроса[4].Выгрузить());
				
			Иначе
				
				Объект.Товары.Очистить();
				Объект.СерийныеНомера.Очистить();
				Если СообщатьОРезультатахЗаполнения Тогда
					ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", Объект.ДокументОснование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|				ТОГДА Товары.Цена
			|			ИНАЧЕ Товары.Цена / Товары.Упаковка.Коэффициент
			|		КОНЕЦ) КАК Цена,
			|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
			|	МАКСИМУМ(Товары.КлючСвязиСерийныхНомеров) КАК КлючСвязиСерийныхНомеров
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокументОснование
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СерийныеНомера.СерийныйНомер,
			|	Товары.КлючСвязиСерийныхНомеров
			|ПОМЕСТИТЬ СерийныеНомера
			|ИЗ
			|	Документ.ПоступлениеТоваров.СерийныеНомера КАК СерийныеНомера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ТЧТовары
			|		ПО (ТЧТовары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СерийныеНомераИспользованные.СерийныйНомер КАК СерийныйНомер
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ТоварыКПоступлениюОбороты.Регистратор КАК Регистратор
			|			ИЗ
			|				РегистрНакопления.ТоварыКПоступлению.Обороты(
			|						,
			|						,
			|						Регистратор,
			|						ДокументОснование = &ДокументОснование
			|							И (Номенклатура, Характеристика) В
			|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|									ТаблицаТовары.Номенклатура,
			|									ТаблицаТовары.Характеристика
			|								ИЗ
			|									Товары КАК ТаблицаТовары)) КАК ТоварыКПоступлениюОбороты
			|			ГДЕ
			|				ТоварыКПоступлениюОбороты.Регистратор <> &ДокументОснование) КАК ТаблицаОрдеров
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.СерийныеНомера КАК СерийныеНомераИспользованные
			|				ПО ТаблицаОрдеров.Регистратор = СерийныеНомераИспользованные.Ссылка) КАК СерийныеНомераОрдеров
			|		ПО (СерийныеНомераОрдеров.СерийныйНомер = СерийныеНомера.СерийныйНомер)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
			|		ПО (ТЧТовары.Номенклатура = Товары.Номенклатура)
			|			И (ТЧТовары.Характеристика = Товары.Характеристика)
			|ГДЕ
			|	СерийныеНомера.Ссылка = &ДокументОснование
			|	И СерийныеНомераОрдеров.СерийныйНомер ЕСТЬ NULL 
			|	И ТЧТовары.Ссылка = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Упаковка
			|ПОМЕСТИТЬ ТоварыСУпаковками
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	МИНИМУМ(Товары.Коэффициент) КАК Коэффициент
			|ПОМЕСТИТЬ ТоварыСКоэффициентами
			|ИЗ
			|	ТоварыСУпаковками КАК Товары
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	ТоварыСУпаковками.Упаковка,
			|	Товары.Коэффициент КАК Коэффициент
			|ПОМЕСТИТЬ УточнениеПоУпаковкам
			|ИЗ
			|	ТоварыСКоэффициентами КАК Товары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСУпаковками КАК ТоварыСУпаковками
			|		ПО Товары.Номенклатура = ТоварыСУпаковками.Номенклатура
			|			И Товары.Характеристика = ТоварыСУпаковками.Характеристика
			|			И Товары.Коэффициент = ТоварыСУпаковками.Коэффициент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
			|	ТоварыКПоступлению.Характеристика КАК Характеристика,
			|	СУММА(ТоварыКПоступлению.Количество) КАК Количество,
			|	СУММА(ТоварыКПоступлению.Количество) КАК КоличествоУпаковок,
			|	МАКСИМУМ(Товары.Цена) КАК Цена,
			|	СУММА(ТоварыКПоступлению.Количество) * МАКСИМУМ(Товары.Цена) КАК Сумма,
			|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
			|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыКПоступлению.Номенклатура КАК Номенклатура,
			|		ТоварыКПоступлению.Характеристика КАК Характеристика,
			|		ТоварыКПоступлению.КоличествоОстаток КАК Количество
			|	ИЗ
			|		РегистрНакопления.ТоварыКПоступлению.Остатки(
			|				,
			|				ДокументОснование = &ДокументОснование
			|					) КАК ТоварыКПоступлению) КАК ТоварыКПоступлению
			|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
			|		ПО (Товары.Номенклатура = ТоварыКПоступлению.Номенклатура)
			|			И (Товары.Характеристика = ТоварыКПоступлению.Характеристика)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКПоступлению.Номенклатура,
			|	ТоварыКПоступлению.Характеристика,
			|	Товары.КлючСвязиСерийныхНомеров
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТоварыКПоступлению.Количество) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.НомерСтроки,
			|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
			|	ТаблицаТовары.Количество,
			|	ВЫБОР
			|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
			|			ТОГДА ТаблицаТовары.КоличествоУпаковок / УточнениеПоУпаковкам.Коэффициент
			|		ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК КоличествоФакт,
			|	ВЫБОР
			|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
			|			ТОГДА ТаблицаТовары.КоличествоУпаковок / УточнениеПоУпаковкам.Коэффициент
			|		ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
			|	КОНЕЦ КАК КоличествоУпаковокФакт,
			|	ВЫБОР
			|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
			|			ТОГДА ТаблицаТовары.Цена * УточнениеПоУпаковкам.Коэффициент
			|		ИНАЧЕ ТаблицаТовары.Цена
			|	КОНЕЦ КАК Цена,
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	ТаблицаТовары.Сумма,
			|	УточнениеПоУпаковкам.Упаковка КАК Упаковка,
			|   &Склад КАК Склад
			|ИЗ
			|	ИтоговаяТаблица КАК ТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ УточнениеПоУпаковкам КАК УточнениеПоУпаковкам
			|		ПО (УточнениеПоУпаковкам.Номенклатура = ТаблицаТовары.Номенклатура)
			|			И (УточнениеПоУпаковкам.Характеристика = ТаблицаТовары.Характеристика)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТовары.НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
			|	СерийныеНомера.СерийныйНомер
			|ИЗ
			|	ИтоговаяТаблица КАК ТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ СерийныеНомера КАК СерийныеНомера
			|		ПО ТаблицаТовары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров
			|ГДЕ НЕ СерийныеНомера.СерийныйНомер ЕСТЬ NULL");
			
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПоступлениеТоваров","ПеремещениеТоваров");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Склад", Объект.Склад);
			Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
			
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Если Не РезультатыЗапроса[6].Пустой() Тогда
				
				Объект.Товары.Загрузить(РезультатыЗапроса[6].Выгрузить());
				Объект.СерийныеНомера.Загрузить(РезультатыЗапроса[7].Выгрузить());
				
			Иначе
				
				Объект.Товары.Очистить();
				Объект.СерийныеНомера.Очистить();
				Если СообщатьОРезультатахЗаполнения Тогда
					ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", Объект.ДокументОснование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Цена
		|			ИНАЧЕ Товары.Цена / Товары.Упаковка.Коэффициент
		|		КОНЕЦ) КАК Цена,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|	МАКСИМУМ(Товары.КлючСвязиСерийныхНомеров) КАК КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СерийныеНомера.СерийныйНомер,
		|	Товары.КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ СерийныеНомера
		|ИЗ
		|	Документ.ПеремещениеТоваров.СерийныеНомера КАК СерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТЧТовары
		|		ПО (ТЧТовары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СерийныеНомераИспользованные.СерийныйНомер КАК СерийныйНомер
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТоварыКОтгрузкеОбороты.Регистратор КАК Регистратор
		|			ИЗ
		|				РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|						,
		|						,
		|						Регистратор,
		|						ДокументОснование = &ДокументОснование
		|							И (Номенклатура, Характеристика) В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТаблицаТовары.Номенклатура,
		|									ТаблицаТовары.Характеристика
		|								ИЗ
		|									Товары КАК ТаблицаТовары)) КАК ТоварыКОтгрузкеОбороты
		|			ГДЕ
		|				ТоварыКОтгрузкеОбороты.Регистратор <> &ДокументОснование) КАК ТаблицаОрдеров
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.СерийныеНомера КАК СерийныеНомераИспользованные
		|				ПО ТаблицаОрдеров.Регистратор = СерийныеНомераИспользованные.Ссылка) КАК СерийныеНомераОрдеров
		|		ПО (СерийныеНомераОрдеров.СерийныйНомер = СерийныеНомера.СерийныйНомер)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО (ТЧТовары.Номенклатура = Товары.Номенклатура)
		|			И (ТЧТовары.Характеристика = Товары.Характеристика)
		|ГДЕ
		|	СерийныеНомера.Ссылка = &ДокументОснование
		|	И СерийныеНомераОрдеров.СерийныйНомер ЕСТЬ NULL 
		|	И ТЧТовары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ Товары.Упаковка.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	Товары.Упаковка
		|ПОМЕСТИТЬ ТоварыСУпаковками
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	МИНИМУМ(Товары.Коэффициент) КАК Коэффициент
		|ПОМЕСТИТЬ ТоварыСКоэффициентами
		|ИЗ
		|	ТоварыСУпаковками КАК Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	ТоварыСУпаковками.Упаковка,
		|	Товары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ УточнениеПоУпаковкам
		|ИЗ
		|	ТоварыСКоэффициентами КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСУпаковками КАК ТоварыСУпаковками
		|		ПО Товары.Номенклатура = ТоварыСУпаковками.Номенклатура
		|			И Товары.Характеристика = ТоварыСУпаковками.Характеристика
		|			И Товары.Коэффициент = ТоварыСУпаковками.Коэффициент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	СУММА(ТоварыКОтгрузке.Количество) КАК Количество,
		|	СУММА(ТоварыКОтгрузке.Количество) КАК КоличествоУпаковок,
		|	МАКСИМУМ(Товары.Цена) КАК Цена,
		|	СУММА(ТоварыКОтгрузке.Количество) * МАКСИМУМ(Товары.Цена) КАК Сумма,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|		ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|		ТоварыКОтгрузке.КоличествоОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|				,
		|				ДокументОснование = &ДокументОснование) КАК ТоварыКОтгрузке) КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО (Товары.Номенклатура = ТоварыКОтгрузке.Номенклатура)
		|			И (Товары.Характеристика = ТоварыКОтгрузке.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	Товары.КлючСвязиСерийныхНомеров
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКОтгрузке.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Количество КАК КоличествоФакт,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Сумма,
		|	ВЫБОР
		|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
		|			ТОГДА ТаблицаТовары.КоличествоУпаковок / УточнениеПоУпаковкам.Коэффициент
		|		ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
		|			ТОГДА ТаблицаТовары.КоличествоУпаковок / УточнениеПоУпаковкам.Коэффициент
		|		ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
		|	КОНЕЦ КАК КоличествоУпаковокФакт,
		|	ВЫБОР
		|		КОГДА УточнениеПоУпаковкам.Коэффициент > 0
		|			ТОГДА ТаблицаТовары.Цена * УточнениеПоУпаковкам.Коэффициент
		|		ИНАЧЕ ТаблицаТовары.Цена
		|	КОНЕЦ КАК Цена,
		|	УточнениеПоУпаковкам.Упаковка КАК Упаковка,
		|   &Склад КАК Склад
		|ИЗ
		|	ИтоговаяТаблица КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ УточнениеПоУпаковкам КАК УточнениеПоУпаковкам
		|		ПО (УточнениеПоУпаковкам.Номенклатура = ТаблицаТовары.Номенклатура)
		|			И (УточнениеПоУпаковкам.Характеристика = ТаблицаТовары.Характеристика)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
		|	СерийныеНомера.СерийныйНомер
		|ИЗ
		|	ИтоговаяТаблица КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ СерийныеНомера КАК СерийныеНомера
		|		ПО ТаблицаТовары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров
		|ГДЕ
		|	(НЕ СерийныеНомера.СерийныйНомер ЕСТЬ NULL )");
		
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПеремещениеТоваров","РеализацияТоваров");
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПеремещениеТоваров","ВозвратТоваровПоставщику");
		КонецЕсли;
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если Не РезультатыЗапроса[6].Пустой() Тогда
			Объект.Товары.Загрузить(РезультатыЗапроса[6].Выгрузить());
			Объект.СерийныеНомера.Загрузить(РезультатыЗапроса[7].Выгрузить());
		Иначе
			Объект.Товары.Очистить();
			Объект.СерийныеНомера.Очистить();
			Если СообщатьОРезультатахЗаполнения Тогда
				ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", Объект.ДокументОснование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Обработки.РаспределениеТоваровПоСкладам.ПараметрыУказанияСерий(Объект));
	ЗаполнитьСтатусыУказанияСерийСервер();
	СформироватьЗаголовокКомандыВыполнить();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
КонецПроцедуры

// Управляет созданием документов распределения в зависимости от режима.
// Возвращаемое значение: Булево - Документы созданы.
&НаСервере
Функция СформироватьДокументы()
	
	ВыполненоУспешно = Ложь;
	
	Если ПроверитьЗаполнение() Тогда
		
		Если Объект.Режим = "ПриходТовара" Тогда
			
			ВыполненоУспешно = СформироватьПриходныеОрдера();
			
		ИначеЕсли Объект.Режим = "РасходТовара" Тогда
			
			ВыполненоУспешно = СформироватьРасходныеОрдера();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

// Управляет созданием приходных ордеров на товары.
// Возвращаемое значение: Булево - Документы созданы.
&НаСервере
Функция СформироватьПриходныеОрдера()
	
	ВыполненоУспешно = Ложь;
	МассивСформированныхДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.КоличествоФакт КАК Количество,
	|	ТаблицаТоваров.КоличествоУпаковокФакт КАК КоличествоУпаковок,
	|	ТаблицаТоваров.КлючСвязиСерийныхНомеров,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Цена,
	|	ТаблицаТоваров.Цена * ТаблицаТоваров.КоличествоУпаковокФакт КАК Сумма,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.КлючСвязиСерийныхНомеров,
	|	СерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ СерийныеНомера
	|ИЗ
	|	&СерийныеНомера КАК СерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязиСерийныхНомеров,
	|	Товары.Склад КАК Склад,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|ИТОГИ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
	|	СерийныеНомера.СерийныйНомер
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерийныеНомера КАК СерийныеНомера
	|		ПО ТаблицаТовары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров";
	
	Запрос.УстановитьПараметр("Товары", 		Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("СерийныеНомера", Объект.СерийныеНомера.Выгрузить());

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СерийныеНомера   = РезультатЗапроса[3].Выгрузить();
	Серии            = Объект.Серии.Выгрузить();
	ВыборкаСклад     = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОтборНомеров     = Новый Структура;
	ОтборНомеров.Вставить("КлючСвязиСерийныхНомеров");
	
	Попытка
		
		Пока ВыборкаСклад.Следующий() Цикл
			
			ОрдерНаПеремещение = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
			ОрдерНаПеремещение.Дата = ТекущаяДатаСеанса();
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров")
				И ЗначениеЗаполнено(Объект.ДокументОснование.ЗаказПоставщику) Тогда
				ОрдерНаПеремещение.ДокументОснование = Объект.ДокументОснование.ЗаказПоставщику;
			Иначе
				ОрдерНаПеремещение.ДокументОснование = Объект.ДокументОснование;
			КонецЕсли;
			ОрдерНаПеремещение.Магазин = Объект.Магазин;
			ОрдерНаПеремещение.Склад = ВыборкаСклад.Склад;
			ОрдерНаПеремещение.Ответственный = Пользователи.ТекущийПользователь();
			
			ВыборкаТовары = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаТовары.Следующий() Цикл
				
				СтрокаТовары = ОрдерНаПеремещение.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаТовары);
				
				Если ЗначениеЗаполнено(СтрокаТовары.КлючСвязиСерийныхНомеров) Тогда
					
					ОтборНомеров.КлючСвязиСерийныхНомеров = СтрокаТовары.КлючСвязиСерийныхНомеров;
					МассивСерийныхНомеров = СерийныеНомера.НайтиСтроки(ОтборНомеров);
					
					Для каждого ЭлементСерийныхНомеров Из МассивСерийныхНомеров Цикл
						
						СтрокаСерийныеНомера = ОрдерНаПеремещение.СерийныеНомера.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерийныеНомера, ЭлементСерийныхНомеров);
						
					КонецЦикла;
						
				КонецЕсли;
				
				ОтборСерий = Новый Структура("Номенклатура, Характеристика", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика);
				МассивСерий = Серии.НайтиСтроки(ОтборСерий);
				
				Для Каждого ЭлементСерия Из МассивСерий Цикл
					СтрокаСерия = ОрдерНаПеремещение.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСерия, ЭлементСерия);
				КонецЦикла;
				
			КонецЦикла;
			
			Если ОрдерНаПеремещение.Товары.Количество() > 0 Тогда 
				ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ОрдерНаПеремещение, "Товары", ОрдерНаПеремещение.Магазин, ОрдерНаПеремещение.Дата, Ложь);
			КонецЕсли;
			
			ОрдерНаПеремещение.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			МассивСформированныхДокументов.Добавить(ОрдерНаПеремещение.Ссылка);
			ИсторияРаботыПользователя.Добавить(ОрдерНаПеремещение.Ссылка);
		КонецЦикла;
		
		ВыполненоУспешно = Истина;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при формировании документа: %1'");
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке,
																							КраткоеПредставлениеОшибки(Инфо));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запасы. Создание приходного ордера на товары'"),
									УровеньЖурналаРегистрации.Ошибка,,Инфо);
		ВыполненоУспешно = Ложь;
		
	КонецПопытки;
	
	Если ВыполненоУспешно Тогда
		
		ЗаполнитьТаблицу(Ложь);
		ОтобразитьСформированныеДокументы(МассивСформированныхДокументов);
		
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

// Управляет созданием расходных ордеров на товары.
// Возвращаемое значение: Булево - Документы созданы.
&НаСервере
Функция СформироватьРасходныеОрдера()
	
	ВыполненоУспешно = Ложь;
	МассивСформированныхДокументов = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.КоличествоФакт КАК Количество,
	|	ТаблицаТоваров.КоличествоУпаковокФакт КАК КоличествоУпаковок,
	|	ТаблицаТоваров.КлючСвязиСерийныхНомеров,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Цена,
	|	ТаблицаТоваров.Цена * ТаблицаТоваров.КоличествоУпаковокФакт КАК Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.КлючСвязиСерийныхНомеров,
	|	СерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ СерийныеНомера
	|ИЗ
	|	&СерийныеНомера КАК СерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязиСерийныхНомеров,
	|	Товары.Склад КАК Склад,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Цена,
	|	Товары.Сумма
	|ИЗ
	|	Товары КАК Товары
	|ИТОГИ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
	|	СерийныеНомера.СерийныйНомер
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерийныеНомера КАК СерийныеНомера
	|		ПО ТаблицаТовары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров");
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("СерийныеНомера", Объект.СерийныеНомера.Выгрузить());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СерийныеНомера   = РезультатЗапроса[3].Выгрузить();
	Серии            = Объект.Серии.Выгрузить();
	ВыборкаСклад     = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОтборНомеров     = Новый Структура;
	ОтборНомеров.Вставить("КлючСвязиСерийныхНомеров");
	
	Попытка
		
		Пока ВыборкаСклад.Следующий() Цикл
			
			ОрдерНаПеремещение = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
			ОрдерНаПеремещение.Дата = ТекущаяДатаСеанса();
			ОрдерНаПеремещение.ДокументОснование = Параметры.Документ;
			ОрдерНаПеремещение.Магазин = Объект.Магазин;
			ОрдерНаПеремещение.Склад = ВыборкаСклад.Склад;
			ОрдерНаПеремещение.Ответственный = Пользователи.ТекущийПользователь();
			
			ВыборкаТовары = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаТовары.Следующий() Цикл
				
				СтрокаТовары = ОрдерНаПеремещение.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаТовары);
				
				Если ЗначениеЗаполнено(СтрокаТовары.КлючСвязиСерийныхНомеров) Тогда
					
					ОтборНомеров.КлючСвязиСерийныхНомеров = СтрокаТовары.КлючСвязиСерийныхНомеров;
					МассивСерийныхНомеров = СерийныеНомера.НайтиСтроки(ОтборНомеров);
					
					Для каждого ЭлементСерийныхНомеров Из МассивСерийныхНомеров Цикл
						
						СтрокаСерийныеНомера = ОрдерНаПеремещение.СерийныеНомера.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерийныеНомера, ЭлементСерийныхНомеров);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ОтборСерий = Новый Структура("Номенклатура, Характеристика", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика);
				МассивСерий = Серии.НайтиСтроки(ОтборСерий);
				
				Для Каждого ЭлементСерия Из МассивСерий Цикл
					СтрокаСерия = ОрдерНаПеремещение.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСерия, ЭлементСерия);
				КонецЦикла;
				
			КонецЦикла;
			
			Если ОрдерНаПеремещение.Товары.Количество() > 0 Тогда 
				ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ОрдерНаПеремещение, "Товары", ОрдерНаПеремещение.Магазин, ОрдерНаПеремещение.Дата, Ложь);
			КонецЕсли;
			
			ОрдерНаПеремещение.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			МассивСформированныхДокументов.Добавить(ОрдерНаПеремещение.Ссылка);
			ИсторияРаботыПользователя.Добавить(ОрдерНаПеремещение.Ссылка);
		КонецЦикла;
		
		ВыполненоУспешно = Истина;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при формировании документа: %1'");
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке,
																						КраткоеПредставлениеОшибки(Инфо));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запасы. Создание приходного ордера на товары'"),
									УровеньЖурналаРегистрации.Ошибка,,Инфо);
		ВыполненоУспешно = Ложь;
		
	КонецПопытки;
	
	Если ВыполненоУспешно Тогда
		
		ЗаполнитьТаблицу(Ложь);
		ОтобразитьСформированныеДокументы(МассивСформированныхДокументов);
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

// Процедура управляет видимостью элементов, заголовками элементов.
//
&НаСервере
Процедура УстановитьРежим()
	
	Если Объект.Режим = "ПриходТовара" Тогда
		
		Заголовок         = НСтр("ru = 'Распределение приемки товаров по складам'");
		КартинкаЗаголовка = БиблиотекаКартинок.ПриходТовара;
		Элементы.ФормаВыполнитьОперацию.Заголовок = НСтр("ru = 'Сформировать приходные ордера'");
		
	ИначеЕсли Объект.Режим = "РасходТовара" Тогда
		
		Заголовок         = НСтр("ru = 'Распределение отгрузки товаров по складам'");
		КартинкаЗаголовка = БиблиотекаКартинок.РасходТовара;
		Элементы.ФормаВыполнитьОперацию.Заголовок = НСтр("ru = 'Сформировать ордера'");
		
	КонецЕсли;
	
КонецПроцедуры

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокФакт", "Факт");
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормыУказанияСерий = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьДоступностьКнопок()

	Элементы.ФормаВыполнитьОперацию.Доступность = НЕ (Объект.Товары.Количество() = 0);

КонецПроцедуры

&НаСервере
Процедура ОтобразитьСформированныеДокументы(МассивСформированныхДокументов)
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ПриходныйОрдерНаТовары, ДокументСсылка.РасходныйОрдерНаТовары");
	
	Для каждого Документ Из МассивСформированныхДокументов Цикл
		ДобавляемыеРеквизиты = Новый Массив;
		ИндексЭлемента               = ИндексСформированногоДокумента;
		
		// элемент группа
		ИмяЭлементаГруппа = "ГруппаДобавлен" + ИндексЭлемента;
		Родитель                     = Элементы.ГруппаСформированныеДокументы;
		ЭлементГруппа                      = Элементы.Добавить(ИмяЭлементаГруппа, Тип("ГруппаФормы"), Родитель);
		ЭлементГруппа.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппа.Отображение          = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппа.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементГруппа.ОтображатьЗаголовок  = Ложь;
		ЭлементГруппа.РастягиватьПоГоризонтали = Ложь;
		ЭлементГруппа.Ширина = 40;
		
		// реквизит
		ИмяЭлемента = "Добавлен" + ИндексЭлемента;
		Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		// команда печать
		ИмяКомандыПечать = "ДобавленПечать" + ИндексЭлемента;
		КомандаПечать = Команды.Добавить(ИмяКомандыПечать);
		КомандаПечать.Действие = "ПечатьДокумента";
		КомандаПечать.Подсказка = НСтр("ru = 'Печать документа...'");
		
		// элемент формы
		//Родитель                     = Элементы.ГруппаСформированныеДокументы;
		Элемент                      = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид                  = ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным          = ИмяЭлемента;
		Элемент.Гиперссылка          = Истина;
		Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ЭтаФорма[ИмяЭлемента] = Документ;
		
		// кнопка печать
		ИмяЭлементаПечать = "ДобавленПечать" + ИндексЭлемента;
		ЭлементПечать = Элементы.Добавить(ИмяЭлементаПечать, Тип("КнопкаФормы"), ЭлементГруппа);
		ЭлементПечать.Картинка = БиблиотекаКартинок.Печать;
		ЭлементПечать.Отображение = ОтображениеКнопки.Картинка;
		ЭлементПечать.ИмяКоманды = ИмяКомандыПечать;
		
		ИндексСформированногоДокумента = ИндексСформированногоДокумента + 1;
		
	КонецЦикла;
	
	Элементы.СтраницаСформированныеДокументы.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокумента(Команда)
	
	ИндексДокумента = СтрЗаменить(Команда.Имя, "ДобавленПечать", "");
	ДокументСсылка = ЭтаФорма["Добавлен"+ИндексДокумента];
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДокументСсылка);
	
	МассивНепроведенныхДокументов = ФормированиеПечатныхФормВызовСервера.ПолучитьМассивНепроведенныхДокументов(МассивДокументов);
	
	Если МассивНепроведенныхДокументов.Количество() > 0 Тогда
		
		Если МассивНепроведенныхДокументов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Печать возможна только после проведения документа, провести документ?'")
		Иначе
			ТекстВопроса = НСтр("ru = 'Печать возможна только после проведения документов, провести документы?'")
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
		ДополнительныеПараметры.Вставить("МассивДокументов", МассивДокументов);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросОПроведенииДокументов", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПечатьМассиваДокументов(МассивДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьВсеДокументы(Команда)
	
	Индекс = 0;
	МассивДокументов = Новый Массив;
	
	Пока Индекс <= ИндексСформированногоДокумента-1 Цикл
		ДокументСсылка = ЭтаФорма["Добавлен"  +Индекс];
		МассивДокументов.Добавить(ДокументСсылка);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	МассивНепроведенныхДокументов = ФормированиеПечатныхФормВызовСервера.ПолучитьМассивНепроведенныхДокументов(МассивДокументов);
	
	Если МассивНепроведенныхДокументов.Количество() > 0 Тогда
		
		Если МассивНепроведенныхДокументов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Печать возможна только после проведения документа, провести документ?'")
		Иначе
			ТекстВопроса = НСтр("ru = 'Печать возможна только после проведения документов, провести документы?'")
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
		ДополнительныеПараметры.Вставить("МассивДокументов", МассивДокументов);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросОПроведенииДокументов", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПечатьМассиваДокументов(МассивДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьМассиваДокументов(МассивДокументов)
	
	Если Объект.Режим = "РасходТовара" Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйОрдерНаТовары",
		"РасходныйОрдерНаТовары",
		МассивДокументов,
		ЭтаФорма,
		Неопределено);
		
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПриходныйОрдерНаТовары",
		"ПриходныйОрдерНаТовары",
		МассивДокументов,
		ЭтаФорма,
		Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросОПроведенииДокументов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МассивНепроведенныхДокументов = ФормированиеПечатныхФормВызовСервера.ПровестиДокументы(ДополнительныеПараметры.МассивНепроведенныхДокументов);
		МассивДокументов = ДополнительныеПараметры.МассивДокументов;
		Если МассивНепроведенныхДокументов.Количество() = 0 Тогда
			
			ПечатьМассиваДокументов(МассивДокументов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокКомандыВыполнить()
	
	ТаблицаСкладов = Объект.Товары.Выгрузить(, "Склад");
	ТаблицаСкладов.Свернуть("Склад");
	
	КоличествоСкладов = ТаблицаСкладов.Количество();
		
	Если Объект.Режим = "ПриходТовара" Тогда
		
		Если КоличествоСкладов > 1 Тогда
			ЗаголовокКоманды = НСтр("ru = 'Сформировать приходные ордера (%КоличествоСкладов%)'");
			ЗаголовокКоманды = СтрЗаменить(ЗаголовокКоманды, "%КоличествоСкладов%", КоличествоСкладов);
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Сформировать приходный ордер'");
		КонецЕсли;
		
	ИначеЕсли Объект.Режим = "РасходТовара" Тогда
	
		ЗаголовокКоманды = НСтр("ru = 'Сформировать ордера'");
		
		Если КоличествоСкладов > 1 Тогда
			ЗаголовокКоманды = НСтр("ru = 'Сформировать расходные ордера (%КоличествоСкладов%)'");
			ЗаголовокКоманды = СтрЗаменить(ЗаголовокКоманды, "%КоличествоСкладов%", КоличествоСкладов);
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Сформировать расходный ордер'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаВыполнитьОперацию.Заголовок = ЗаголовокКоманды;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
