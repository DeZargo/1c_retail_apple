


&НаКлиенте
&Вместо("ОповещениеПоискаПоШтрихкоду")
Процедура ВместоОповещениеПоискаПоШтрихкодуКочетов(Структура, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Структура) Тогда
		штрихкод=Структура.штрихкод;		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		Если СтруктураПараметровКлиента.ЗначенияПоиска.количество()<>0 Тогда
			ПодборТаблицаНоменклатураВыбор(Элементы.ПодборТаблицаНоменклатура, 123, 123, истина);
		КонецЕсли;
		ПоискПоШтрихкоду("");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
&Вместо("ПоискПоШтрихкоду")
Процедура ВместоПоискПоШтрихкодуКочетов(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);	
КонецПроцедуры


&НаКлиенте
Процедура КочетовПриОткрытииПеред(Отказ)
	//СкрыватьЗапрещенные = истина ;
	//Элементы.СкрыватьЗапрещенные.Пометка = СкрыватьЗапрещенные;
	//ИзменитьТекстЗапросаДинамическогоСписка();
	//ВариантОтбораПриИзменении();
	//Элементы.СкрыватьЗапрещенные.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура КочетовПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	Параметры.РежимПодбораСУчетомАссортимента=Истина;
	Параметры.УсловиеАссортимента = "РазрешеныЗакупки";
	Параметры.ФорматМагазина=Справочники.ххх_Справочник.Магазин.Значение.ФорматМагазина;
	Параметры.РежимПодбораБезКоличественныхПараметров=ложь;
	Параметры.РежимПодбораБезСуммовыхПараметров=ложь;
	Параметры.Магазин=ПараметрыСеанса.ТекущийМагазин;
	//Параметры.вставить("Дата");
КонецПроцедуры

&НаКлиенте
Процедура КочетовПоискВместо(Команда)
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаПоиска",,ЭтаФорма.Элементы.ИерархияНоменклатуры,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры


&НаКлиенте
Процедура КочетовИерархияНоменклатурыОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
 Если ЗначениеЗаполнено(ВыбранноеЗначение) 
   и не ПроверитьНаГруппу(ВыбранноеЗначение) тогда
  Элементы.ИерархияНоменклатуры.ТекущаяСтрока=ПолучитьРодителя(выбранноеЗначение);
  ЭтаФОрма.выбранноеЗначение=выбранноеЗначение;
  ПодключитьОбработчикОжидания("ВыбратьНужнуюСтрокуПослеПоиска",1,истина);
  //Элементы.ПодборТаблицаНоменклатура.ТекущаяСтрока=выбранноеЗначение;
 ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение) тогда
  Элементы.ИерархияНоменклатуры.ТекущаяСтрока=выбранноеЗначение;
 КонецЕсли;
КонецПроцедуры

&НаКлиенте
процедура ВыбратьНужнуюСтрокуПослеПоиска();
 Элементы.ПодборТаблицаНоменклатура.ТекущаяСтрока=ЭтаФОрма.выбранноеЗначение;
КонецПроцедуры

Функция ПроверитьНаГруппу(ВыбранноеЗначение)
	возврат ВыбранноеЗначение.ЭтоГруппа;
КонецФункции

Функция ПолучитьРодителя(ВыбранноеЗначение)
	возврат ВыбранноеЗначение.Родитель;
КонецФункции

&НаКлиенте
Процедура КочетовИерархияНоменклатурыПриАктивизацииСтрокиПеред(Элемент)
//	ПодборТаблицаНоменклатура.Параметры.УстановитьЗначениеПараметра("розница",ПолучитьРозничнуюЦену());
//	ПодборТаблицаНоменклатура.Параметры.УстановитьЗначениеПараметра("закуп",ПолучитьЗакупочнуюЦену());
КонецПроцедуры


Функция ПолучитьРозничнуюЦену()
	возврат Справочники.ххх_Справочник.РозничнаяЦена.значение;	
КонецФункции

Функция ПолучитьЗакупочнуюЦену()
	возврат Справочники.ххх_Справочник.ЗакупочнаяЦена.значение;
КонецФункции

&НаСервере
Процедура КочетовПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//ПодборТаблицаНоменклатура.Параметры.УстановитьЗначениеПараметра("розница",ПолучитьРозничнуюЦену());
	//ПодборТаблицаНоменклатура.Параметры.УстановитьЗначениеПараметра("закуп",ПолучитьЗакупочнуюЦену());
	//ValMa - 13-12-2018
	Попытка
		Объект.КочетовВидЦен = Параметры.ВидЦенДок;
	Исключение
	КонецПопытки;
	//---
КонецПроцедуры

&НаКлиенте
Процедура КочетовПодборТаблицаНоменклатураПриАктивизацииСтрокиПосле(Элемент)
	//ЦенаРозницы=ПолучитьЦенуПоВидуЦен(Элементы.ПодборТаблицаНоменклатура.ТекущаяСтрока,ПолучитьРозничнуюЦену());
	//ЦенаЗакупа=ПолучитьЦенуПоВидуЦен(Элементы.ПодборТаблицаНоменклатура.ТекущаяСтрока,ПолучитьЗакупочнуюЦену());
КонецПроцедуры

Функция ПолучитьЦенуПоВидуЦен(Номенклатура,видЦены)
	Запрос=Новый запрос;
	запрос.УстановитьПараметр("видЦены",видЦены);
	запрос.УстановитьПараметр("Номенклатура",Номенклатура);	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			Номенклатура = &Номенклатура
	             |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
				 
	выборка=запрос.Выполнить().Выбрать();
	Если выборка.Следующий() тогда
		возврат выборка.цена;
	Иначе
		возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КочетовУстановитьВариантОтбораПоВесамВместо(Команда)
	Элементы.ОтборПоВесам.Видимость=не Элементы.ОтборПоВесам.Видимость;	
КонецПроцедуры

&НаСервере
Процедура КочетовОтборПоВесамПриИзмененииПослеНаСервере(весы)
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("весы",весы);
	Запрос.Текст="ВЫБРАТЬ
	             |	ххх_КодыНоменклатурыВесыКассы.Номенклатура КАК Номенклатура,
	             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоУпаковок
	             |ИЗ
	             |	РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	             |		ПО ххх_КодыНоменклатурыВесыКассы.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	             |ГДЕ
	             |	ххх_КодыНоменклатурыВесыКассы.Оборудование = &весы
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ххх_КодыНоменклатурыВесыКассы.Номенклатура,
	             |	ТоварыНаСкладахОстатки.КоличествоОстаток";
	Объект.корзина.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура КочетовОтборПоВесамПриИзмененииПосле(Элемент)
	Если ЗначениеЗаполнено(ЭтаФорма.ОтборПоВесам) Тогда
		КочетовОтборПоВесамПриИзмененииПослеНаСервере(ЭтаФорма.ОтборПоВесам);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КочетовИерархияНоменклатурыПриПолученииДанныхНаСервереПосле(ИмяЭлемента, Настройки, Строки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
&Вместо("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания")
Процедура КочетовПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	Если ИнформацияОТовареПрочитана или ПодборТекущаяНоменклатура=неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрукЦеныЗакупаРозницыОстаток=ПолучитьЦеныЗакупаРозницыОстаток(ПодборТекущаяНоменклатура);	
	
	ИнформацияОТовареПрочитана = Истина;

КонецПроцедуры


функция ПолучитьЦеныЗакупаРозницыОстаток(номенклатура)
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("номенклатура",номенклатура);
	Запрос.УстановитьПараметр("Розница",ПолучитьРозничнуюЦену());
	Запрос.УстановитьПараметр("Закуп",ПолучитьЗакупочнуюЦену());
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			Номенклатура = &Номенклатура
	             |				И (ВидЦены = &Розница
	             |					ИЛИ ВидЦены = &Закуп)) КАК ЦеныНоменклатурыСрезПоследних
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(йцу.Номенклатура, 0) КАК Номенклатура,
	             |	йцу.ВидЦены КАК ВидЦеныРозница,
	             |	йцу.Цена КАК ЦенаРозница,
	             |	NULL КАК ЦенаЗакуп,
	             |	NULL КАК ВидЗакуп
	             |ПОМЕСТИТЬ фыв
	             |ИЗ
	             |	йцу КАК йцу
	             |ГДЕ
	             |	йцу.ВидЦены = &Розница
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	йцу.Номенклатура,
	             |	NULL,
	             |	NULL,
	             |	йцу.Цена,
	             |	йцу.ВидЦены
	             |ИЗ
	             |	йцу КАК йцу
	             |ГДЕ
	             |	йцу.ВидЦены = &Закуп
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МАКСИМУМ(фыв.Номенклатура) КАК Номенклатура,
	             |	МАКСИМУМ(фыв.ВидЦеныРозница) КАК ВидЦеныРозница,
	             |	МАКСИМУМ(фыв.ЦенаРозница) КАК ЦенаРозница,
	             |	МАКСИМУМ(фыв.ЦенаЗакуп) КАК ЦенаЗакуп,
	             |	МАКСИМУМ(фыв.ВидЗакуп) КАК ВидЗакуп,
	             |	NULL КАК КоличествоОстаток
	             |ПОМЕСТИТЬ ячс
	             |ИЗ
	             |	фыв КАК фыв
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ТоварыНаСкладахОстатки.Номенклатура,
	             |	NULL,
	             |	NULL,
	             |	NULL,
	             |	NULL,
	             |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток)
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТоварыНаСкладахОстатки.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МАКСИМУМ(ячс.Номенклатура) КАК Номенклатура,
	             |	МАКСИМУМ(ячс.ВидЦеныРозница) КАК ВидЦеныРозница,
	             |	МАКСИМУМ(ячс.ЦенаРозница) КАК ЦенаРозница,
	             |	МАКСИМУМ(ячс.ЦенаЗакуп) КАК ЦенаЗакуп,
	             |	МАКСИМУМ(ячс.ВидЗакуп) КАК ВидЗакуп,
	             |	МАКСИМУМ(ячс.КоличествоОстаток) КАК КоличествоОстаток,
	             |	ячс.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	             |ИЗ
	             |	ячс КАК ячс
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ячс.Номенклатура.ЕдиницаИзмерения";
	
	выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		ЦенаРозницы=выборка.ЦенаРозница;
		ЦенаЗакупа=выборка.ЦенаЗакуп;
		//Цена=ЦенаЗакупа;
		Остаток=выборка.КоличествоОстаток;		
		ЕдИзм=выборка.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
&Вместо("УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания")
Процедура КочетовУстановитьОтборПоИерархииНоменклатурыОбработчикОжидания()
		ВидСравненияДляОтбора = ВидСравненияКомпоновкиДанных.Равно;
								
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Родитель",
		ТекущаяНавигация.ПоИерархииНоменклатуры,
		ЗначениеЗаполнено(ТекущаяНавигация.ПоИерархииНоменклатуры), ВидСравненияДляОтбора
	);
	
	ПерейтиКСпискуНоменклатурыНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КочетовПодборТаблицаНоменклатураВыборВместо(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПроверки = СтруктураПроверкиПодбора();
		Если НельзяПодбирать(СтруктураПроверки) Тогда
			Возврат;
		КонецЕсли;
	
		Если (НЕ РежимПодбораБезХарактеристик)
			И (Элемент.ТекущиеДанные.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры")
			ИЛИ Элемент.ТекущиеДанные.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры")) Тогда
			
			ПерейтиКСпискуХарактеристикНаКлиенте();
			
		Иначе
			
			Если Не ИнформацияОТовареПрочитана Тогда
				ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания();
			КонецЕсли;
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("Номенклатура",               ПодборТекущаяНоменклатура);
			СтруктураПараметры.Вставить("ТипНоменклатуры",            ПодборТекущаяНоменклатураТипНоменклатуры);
			СтруктураПараметры.Вставить("Характеристика",             ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			СтруктураПараметры.Вставить("ХарактеристикиИспользуются", Ложь);
			СтруктураПараметры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
			
			//СтруктураПараметры.Вставить("Цена",    ЦенаЗакупа); //оригинал
			
			//ValMa - 13-12-2018 - в форме подбора у выбранного товара должна выбираться нужная цена для док. Списания
			ПустаяСсылкаСпр = ПолучитьПустуюСсылкуВидаЦены();
			Если Объект.КочетовВидЦен = ПустаяСсылкаСпр Тогда
				СтруктураПараметры.Вставить("Цена",    ЦенаЗакупа);
			Иначе
				РознЦена = ПолучитьРозничнуюЦену();
				ЗакупЦена = ПолучитьЗакупочнуюЦену(); 
				Если объект.КочетовВидЦен = РознЦена Тогда
					СтруктураПараметры.Вставить("Цена", ЦенаРозницы);
				ИначеЕсли объект.КочетовВидЦен = ЗакупЦена Тогда
					СтруктураПараметры.Вставить("Цена", ЦенаЗакупа);
				Иначе
					СтруктураПараметры.Вставить("Цена", 0);
				КонецЕсли;
			КонецЕсли;
			//---
			
			СтруктураПараметры.Вставить("ДоговорПлатежногоАгента",    Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные.ДоговорПлатежногоАгента);
			ДобавитьВКорзину(СтруктураПараметры, 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПустуюСсылкуВидаЦены()
	Возврат Справочники.ВидыЦен.ПустаяСсылка()
КонецФункции

&НаСервере
Процедура Кочетовххх_ЗагрузитьИзЕксельПослеНаСервере(файл)
	ТабДок=Новый ТабличныйДокумент;
	ТабДок.Прочитать(файл);
	ТЗ=ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДок);
	ТЗ.свернуть("ID");
	мас=НОвый массив;
	Для каждого стр из ТЗ цикл
		//стр=Объект.Корзина.Добавить();
		Если ЗначениеЗаполнено(стр.id) Тогда
			мас.Добавить(стр.id);
		КонецЕсли;
	КонецЦикла;
	
	запрос=новый  запрос;
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Ссылка,
	             |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.Ссылка.ххх_ИдЦентр В(&мас)
	             |	И НЕ Номенклатура.ЭтоГруппа";
	
	
	выборка=ЗАпрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
		
		стр=Объект.Корзина.Добавить();
		стр.номенклатура=выборка.ссылка;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Кочетовххх_ЗагрузитьИзЕксельПосле(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	КонецЕсли; 

	УИД = Новый УникальныйИдентификатор;
	СохранитьФайлНаСервере(МассивФайлов[0],"C:\",,УИД);
	Кочетовххх_ЗагрузитьИзЕксельПослеНаСервере("C:\"+УИД+".xlsx");
КонецПроцедуры

Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент) 
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка); 
	// Создаем описание источника данных на основании области ячеек табличного документа.
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
	// Создаем объект для интеллектуального построения отчетов,
	// указываем источник данных и выполняем построение отчета.
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	// Результат выгружаем в таблицу значений.
	ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	Возврат ТабЗначений
КонецФункции




// Параметры
//  <ИмяФайла> - <Строка> - содержит адрес файла, который нужно перенести на сервер
//  <ЛокальныйАдресКаталога> - <Строка> - содержит адрес каталога на сервере, куда необходимо поместить новый файл
&НаКлиенте
Процедура СохранитьФайлНаСервере(ИмяФайла, ЛокальныйАдресКаталога, Расширение = ".xlsx",УИД) Экспорт
	
	Если ПустаяСтрока(ИмяФайла) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Идентификатор  = Новый УникальныйИдентификатор;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Идентификатор); 
	
	ЗаписатьНаСервер(АдресХранилища, ЛокальныйАдресКаталога, Расширение,УИД);
	
КонецПроцедуры

&НаСервере
// Выполняет запись файла из временного хранилища на диск
Процедура ЗаписатьНаСервер(АдресХранилища, ЛокальныйАдресКаталога = "", Расширение,УИД) Экспорт
	
	// Проверим заполнен ли адрес временного хранилища, откуда будем брать файл
	Если ПустаяСтрока(АдресХранилища) Тогда	
		Возврат;		
	КонецЕсли; 
	
	// Проверим заполнен ли адрес каталога для записи
	Если ПустаяСтрока(ЛокальныйАдресКаталога) Тогда
	
		// По умолчанию дирректорию устнавливаем "C:\1C"
		ЛокальныйАдресКаталога = "C:\"; 		
	
	КонецЕсли; 
	
	// Проверим существует ли указанный каталог
	КаталогЗаписи = Новый Файл(ЛокальныйАдресКаталога);
	
	Если НЕ КаталогЗаписи.Существует() Тогда	
		СоздатьКаталог(ЛокальныйАдресКаталога);	
	КонецЕсли; 
	
	ЛокальныйАдресКаталога = ЛокальныйАдресКаталога;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища); 
		
	ИмяФайла = УИД;
	
	Попытка	
		// Записать файл на сервере
		ДвоичныеДанные.Записать(ЛокальныйАдресКаталога  + "\" + ИмяФайла + Расширение);	
	Исключение		
		ЗаписьЖурналаРегистрации("Запись XML-файла на сервере.", УровеньЖурналаРегистрации.Ошибка, , ,ОписаниеОшибки()); 
	КонецПопытки; 
	
КонецПроцедуры

//&Вместо("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания")
//&НаКлиенте
//Процедура КочетовПодборТаблицаПриАктивизацииСтрокиОбработчикОжиданияВместо()
//	
//	Если ИнформацияОТовареПрочитана Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ОстаткиТоваров.Очистить();
//	
//	Если РежимПодбораБезСуммовыхПараметров
//		И ТекущийРежимОтображенияОстатков = 2 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ПодборТекущаяНоменклатура) Тогда
//		
//		Если ПодборТекущаяНоменклатураТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда	
//			Если ТекущийРежимОтображенияОстатков = 2 Тогда
//				Если РежимПодбораВЗакупки Тогда
//					СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуЗакупки(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, Контрагент, СсылкаНаПоступление);						
//				Иначе
//					СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуПродажи(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, РежимПодбораСУчетомМинимальныхЦен);
//				КонецЕсли;
//			ИначеЕсли ТекущийРежимОтображенияОстатков = 1 Тогда
//				Если РежимПодбораВЗакупки Тогда
//					СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуЗакупкиИОстаткиНоменклатуры(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, Истина, Контрагент, СсылкаНаПоступление);
//				Иначе					
//					СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуПродажиИОстаткиНоменклатуры(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, Истина, РежимПодбораСУчетомМинимальныхЦен);
//				КонецЕсли;
//			Иначе
//				Если РежимПодбораВЗакупки Тогда
//					СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуЗакупкиИОстаткиНоменклатуры(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, Ложь, Контрагент, СсылкаНаПоступление);
//				Иначе
//					СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуПродажиИОстаткиНоменклатуры(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, Ложь, РежимПодбораСУчетомМинимальныхЦен);
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			Если РежимПодбораВЗакупки Тогда
//				СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуЗакупки(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, Контрагент, СсылкаНаПоступление);	
//			Иначе
//				СтруктураИнформацииОТоваре = ПодборТоваровВызовСервера.ПолучитьЦенуПродажи(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Магазин, РежимПодбораСУчетомМинимальныхЦен);
//			КонецЕсли;
//		КонецЕсли;
//		
//		СтруктураЦена = СтруктураИнформацииОТоваре.Цена;
//		НаименованиеЕдиницыИзмерения = Строка(СтруктураЦена.ЕдиницаИзмерения);
//		
//		Если ПодборТекущаяНоменклатураТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
//			
//			Если ТекущийРежимОтображенияОстатков <> 2 Тогда
//				
//				Для Инд = 0 По СтруктураИнформацииОТоваре.ТекущиеОстатки.ВГраница() Цикл
//					
//					СтрокаТЧ = СтруктураИнформацииОТоваре.ТекущиеОстатки[Инд];
//					ТекущийОстаток = ОстаткиТоваров.Добавить();
//					ТекущийОстаток.ВНаличии = СтрокаТЧ.ВНаличии;
//					ТекущийОстаток.ВНаличииОписание = ?(ЗначениеЗаполнено(ТекущийОстаток.ВНаличии), Формат(ТекущийОстаток.ВНаличии,"ЧДЦ=3") +" "+ НаименованиеЕдиницыИзмерения, "");
//					ТекущийОстаток.МестоХранения    = СтрокаТЧ.МестоХранения;
//					ТекущийОстаток.МестоХраненияОписание = Строка(СтрокаТЧ.МестоХранения);
//					ТекущийОстаток.ЭтоМагазин = СтрокаТЧ.ЭтоМагазин;
//					
//				КонецЦикла;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		Цена             = СтруктураЦена.Цена;
//		ЕдиницаИзмерения = СтруктураЦена.ЕдиницаИзмерения;
//		
//		Если Цена <> 0 Тогда
//			//Zorius
//			//Если ТекущийОстаток.количество()>0 Тогда
//				ТекущийОстаток.цена=цена;
//			//КонецЕсли;
//			//Если ТекущийОстаток.количество()>1 Тогда
//			//	ТекущийОстаток.удалить(1);
//			//КонецЕсли;
//			//Zorius
//			СтрокаИнформацииОНоменклатуре = НСтр("ru = 'Цена: %Цена% %Валюта% за %ЕдиницаИзмерения%'");
//			СтрокаИнформацииОНоменклатуре = СтрЗаменить(СтрокаИнформацииОНоменклатуре, "%Цена%",     Формат(СтруктураЦена.Цена,"ЧДЦ=2"));
//			СтрокаИнформацииОНоменклатуре = СтрЗаменить(СтрокаИнформацииОНоменклатуре, "%Валюта%",   ОбщегоНазначенияРТКлиентСервер.ПредставлениеВалютыУчета().НаименованиеСокращенное);
//			СтрокаИнформацииОНоменклатуре = СтрЗаменить(СтрокаИнформацииОНоменклатуре, "%ЕдиницаИзмерения%", НаименованиеЕдиницыИзмерения);
//		Иначе
//			СтрокаИнформацииОНоменклатуре = НСтр("ru = 'Цена: Не назначена'");
//		КонецЕсли;
//		
//	Иначе
//		
//		Цена     = 0;
//		ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка");
//		СтрокаИнформацииОНоменклатуре = НСтр("ru = 'Цена: Не назначена'");
//		
//	КонецЕсли;
//	
//	ИнформацияОТовареПрочитана = Истина;
//	
//КонецПроцедуры
