
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОписаниеОповещения=Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкодуКочетов",ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.КочетовФормаПоискаПоШтрихКоду",,ЭтаФОрма,истина,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры



&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкодуКочетов(Структура, ДополнительныеПараметры) Экспорт	
	Если ЗначениеЗаполнено(Структура) Тогда
		штрихкод=Структура.штрихкод;
		//Если Структура.ПоискПоВесовомуТовару=Ложь тогда
		//	номка=ПоискПоОбычномуТовару(штрихкод);
		//Иначе	
		//	номка=ххх_Сервер.ПолучитьВесовойШтрихкод(штрихкод);
		//КонецЕсли;
		//Zorius
		ТабДок=Печать(штрихкод,Структура.ПоискПоВесовомуТовару);
		//ТабДок.показать();
		ТабДок.Напечатать();
		ПоискПоШтрихкоду("");
		//Zorius
	КонецЕсли;
КонецПроцедуры


Функция ПоискПоОбычномуТовару(штрихкод)
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("штрихкод",штрихкод);
	Запрос.Текст="ВЫБРАТЬ
	             |	Штрихкоды.Владелец КАК Владелец
	             |ИЗ
	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
	             |ГДЕ
	             |	Штрихкоды.Штрихкод = &Штрихкод";
	
	выборка=Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() Тогда
		возврат выборка.владелец;
	КонецЕсли;
	возврат неопределено;
	
	
КонецФункции



функция печать(штрихкод,ПоискПоВесовомуТовару)
	
	
	Если ПоискПоВесовомуТовару=Ложь тогда
		номка=ПоискПоОбычномуТовару(штрихкод);
	Иначе	
		номка=ххх_Сервер.ПолучитьВесовойШтрихкод(штрихкод);
	КонецЕсли;
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("номка",номка);
	Запрос.УстановитьПараметр("красныйЦенник",Справочники.ххх_Справочник.КрасныйЦенник.Значение);
	Запрос.УстановитьПараметр("ВидЦены",справочники.ххх_Справочник.РозничнаяЦена.Значение);
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ВЫБОР
	             |		КОГДА НоменклатураСегмента.Сегмент = &красныйЦенник
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК красный,
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			ВидЦены = &ВидЦены
	             |				И Номенклатура = &номка) КАК ЦеныНоменклатурыСрезПоследних
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	             |		ПО (НоменклатураСегмента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	             |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = Штрихкоды.Владелец
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	             |	ВЫБОР
	             |		КОГДА НоменклатураСегмента.Сегмент = &красныйЦенник
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ,
	             |	ЦеныНоменклатурыСрезПоследних.Цена";
	
	//ценник=Справочники.ХранилищеШаблонов.НайтиПоНаименованию("3х7 (61мм*39мм)");
	
	//шаблон=ценник.Шаблон.Получить();
	
	выборка=Запрос.Выполнить().Выбрать();
	
	если выборка.Следующий() Тогда
	
		ТабДок=Новый ТабличныйДокумент;
		
		ТабДок.Автомасштаб=истина;
		//ТабДок.ВерхнийКолонтитул=0;
		//ТабДок.НижнийКолонтитул=0;
		ТабДок.ПолеСверху=0;
		ТабДок.ПолеСлева=0;
		ТабДок.ПолеСнизу=0;
		ТабДок.ПолеСправа=0;

		
		//ТабДок.ИмяПринтера=Принтеры1;
		
		Обработка =  РеквизитФормыВЗначение("Объект");
		
		если выборка.красный тогда
			Макет = Обработка.ПолучитьМакет("МакетКрасный");
			ОблЦена=Макет.ПолучитьОбласть("Область");
			ТабДок.ИмяПринтера=ПринтерыКрасный;
		иначе
			Макет = Обработка.ПолучитьМакет("МакетБелый");
			ОблЦена=Макет.ПолучитьОбласть("Область");
			ОблЦена.Параметры.ЦенаСоСкидкой=выборка.цена-выборка.цена*0.05;
			ТабДок.ИмяПринтера=Принтеры1;
		конецесли;
		//Макет = Обработка.ПолучитьМакет("МакетБелый"); 
			
		
		//ОблЦена=Макет.ПолучитьОбласть("Область");
		ОблЦена.Параметры.Цена=выборка.цена;
		попытка
			ОблЦена.Параметры.ЦенаСоСкидкой=выборка.цена-выборка.цена*0.05;
		Исключение
		КонецПопытки;
		ОблЦена.Параметры.ТекущееВремя=ТекущаяДата();
		ОблЦена.Параметры.Организация=Организация;                                           
		ОблЦена.Параметры.МойШтрихКод="";//выборка.Штрихкод;
		ОблЦена.Параметры.ЕдиницаИзмерения=выборка.Номенклатура.ЕдиницаИзмерения;
		ОблЦена.Параметры.Страна=выборка.Номенклатура.СтранаПроисхождения;
		ОблЦена.Параметры.НаименованиеЦенник=выборка.Номенклатура.ххх_НаименованиеЦенник;
		
		
		Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	    КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",	30);//Окр(ОблЦена.Рисунки.Штрихкод.Ширина /КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",	Окр(ОблЦена.Рисунки.Штрихкод.Высота /КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",				выборка.Штрихкод);
		ПараметрыШтрихкода.Вставить("ТипКода",				1);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст",		истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",			10);
		ОблЦена.Рисунки.Штрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);



		
					//Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() ИЛИ Лев(Рисунок.Имя,13) = ПолучитьИмяПараметраШтрихкодСправкиБ()
					//		ИЛИ Лев(Рисунок.Имя,17) = ПолучитьИмяПараметраШтрихАвтопроверки() Тогда
					//		
					//		Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() Тогда
					//			ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкод())];
					//		ИначеЕсли Лев(Рисунок.Имя,13) = ПолучитьИмяПараметраШтрихкодСправкиБ() Тогда
					//			ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкодСправкиБ())];
					//		ИначеЕсли Лев(Рисунок.Имя,17) = ПолучитьИмяПараметраШтрихАвтопроверки() Тогда
					//			ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихАвтопроверки())];
					//		КонецЕсли;
					//		
					//		Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					//			
					//			ПараметрыШтрихкода = Новый Структура;
					//			ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					//			ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					//			
					//			Если СтруктураШаблона.ТипКода = 16 Тогда
					//				МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
					//				ПараметрыШтрихкода.Ширина = МинСторона;
					//				ПараметрыШтрихкода.Высота = МинСторона;
					//			КонецЕсли;
					//			
					//			Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
					//				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
					//			Иначе
					//				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
					//			КонецЕсли;
					//			
					//			ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
					//			ПараметрыШтрихкода.Вставить("ТипКода",				СтруктураШаблона.ТипКода);
					//			ПараметрыШтрихкода.Вставить("ОтображатьТекст",		СтруктураШаблона.ОтображатьТекст);
					//			ПараметрыШтрихкода.Вставить("РазмерШрифта",			СтруктураШаблона.РазмерШрифта);
					//			
					//			Если СтруктураШаблона.Свойство("УголПоворота") Тогда
					//				ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					//			КонецЕсли;
					//			
					//			Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					//			
					//		КонецЕсли;
					//		
					//	КонецЕсли;

		
		
					
		ТабДок.Вывести(ОблЦена);
		
		//ТабДок.параметры.ПараметрМакета5=123;
		
		возврат ТабДок; 
	
	КонецЕсли;	
		
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация=Справочники.ххх_Справочник.ОрганизацияТорговлиПивом.Значение;
КонецПроцедуры

&НаКлиенте
Процедура Печать1(Команда)
	Если ВидЦенника="А4" Тогда
		ТабДок=ПечатьНаСервере();
	Иначе
		ТабДок=ПечатьНаСервере2х5();
	КонецЕсли;
	ТабДок.показать();
	//ТабДок.Напечатать();
КонецПроцедуры

&НаСервере
функция ПечатьНаСервере2х5()
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("номка",номенклатура);
	Запрос.УстановитьПараметр("Сегмент",Справочники.ххх_Справочник.КрасныйЦенник.Значение);
	Запрос.УстановитьПараметр("ВидЦены",справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос.УстановитьПараметр("Оборудование",весы);
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	ххх_КодыНоменклатурыВесыКассы.Код КАК Код,
	             |	ВЫБОР
	             |		КОГДА НоменклатураСегмента.Сегмент = &Сегмент
	             |			ТОГДА ""красный""
	             |		ИНАЧЕ ""белый""
	             |	КОНЕЦ КАК ТипЦенника
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			ВидЦены = &ВидЦены
	             |				И Номенклатура = &номка) КАК ЦеныНоменклатурыСрезПоследних
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	             |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ххх_КодыНоменклатурыВесыКассы.Номенклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	             |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = НоменклатураСегмента.Номенклатура
	             |ГДЕ
	             |	ххх_КодыНоменклатурыВесыКассы.Оборудование = &Оборудование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена,
	             |	ххх_КодыНоменклатурыВесыКассы.Код,
	             |	ВЫБОР
	             |		КОГДА НоменклатураСегмента.Сегмент = &Сегмент
	             |			ТОГДА ""красный""
	             |		ИНАЧЕ ""белый""
	             |	КОНЕЦ";
	
	//ценник=Справочники.ХранилищеШаблонов.НайтиПоНаименованию("3х7 (61мм*39мм)");
	
	//шаблон=ценник.Шаблон.Получить();
	
	выборка=Запрос.Выполнить().Выбрать();
	
	если выборка.Следующий() Тогда
	
		ТабДок=Новый ТабличныйДокумент;
		
		ТабДок.Автомасштаб=истина;
		
		ТабДок.ИмяПринтера=Принтеры1;
		
		Обработка =  РеквизитФормыВЗначение("Объект");
		
		если выборка.ТипЦенника="красный" тогда
			Макет = Обработка.ПолучитьМакет("Макет2х5Красный");
			ОблЦена=Макет.ПолучитьОбласть("Область");
		иначе
			Макет = Обработка.ПолучитьМакет("Макет2х5");
			ОблЦена=Макет.ПолучитьОбласть("Область");
		//	ОблЦена.Параметры.ЦенаСоСкидкой=выборка.цена-выборка.цена*0.05;
		конецесли;
		//Макет = Обработка.ПолучитьМакет("МакетБелый"); 
			
		
		//ОблЦена=Макет.ПолучитьОбласть("Область");
		ОблЦена.Параметры.Цена=выборка.цена;
		если не выборка.ТипЦенника="красный" тогда
			ОблЦена.Параметры.ЦенаСоСкидкой=выборка.цена-выборка.цена*0.05;
		КонецЕсли;
		ОблЦена.Параметры.ТекущееВремя=ТекущаяДата();
		ОблЦена.Параметры.Организация=Организация;       
		ОблЦена.Параметры.Ячейка=Выборка.код;
		//ОблЦена.Параметры.МойШтрихКод="";//выборка.Штрихкод;
//		ОблЦена.Параметры.ЕдиницаИзмерения=выборка.Номенклатура.ЕдиницаИзмерения;
		ОблЦена.Параметры.Страна=выборка.Номенклатура.СтранаПроисхождения;
		ОблЦена.Параметры.Наименование=выборка.Номенклатура.ххх_НаименованиеЦенник;
		
					
		ТабДок.Вывести(ОблЦена);
		
		//ТабДок.параметры.ПараметрМакета5=123;
		
		возврат ТабДок; 
	
	КонецЕсли;	

КонецФункции



&НаСервере
функция ПечатьНаСервере()
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("номка",номенклатура);
	Запрос.УстановитьПараметр("красныйЦенник",Справочники.ххх_Справочник.КрасныйЦенник.Значение);
	Запрос.УстановитьПараметр("ВидЦены",справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос.УстановитьПараметр("Оборудование",весы);
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	ххх_КодыНоменклатурыВесыКассы.Код КАК Код
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			ВидЦены = &ВидЦены
	             |				И Номенклатура = &номка) КАК ЦеныНоменклатурыСрезПоследних
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	             |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ххх_КодыНоменклатурыВесыКассы.Номенклатура
	             |ГДЕ
	             |	ххх_КодыНоменклатурыВесыКассы.Оборудование = &Оборудование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена,
	             |	ххх_КодыНоменклатурыВесыКассы.Код";
	
	//ценник=Справочники.ХранилищеШаблонов.НайтиПоНаименованию("3х7 (61мм*39мм)");
	
	//шаблон=ценник.Шаблон.Получить();
	
	выборка=Запрос.Выполнить().Выбрать();
	
	если выборка.Следующий() Тогда
	
		ТабДок=Новый ТабличныйДокумент;
		
		ТабДок.Автомасштаб=истина;
		
		ТабДок.ИмяПринтера=Принтеры1;
		
		Обработка =  РеквизитФормыВЗначение("Объект");
		
		//если выборка.красный тогда
			Макет = Обработка.ПолучитьМакет("МакетА4");
			ОблЦена=Макет.ПолучитьОбласть("Область");
		//иначе
		//	Макет = Обработка.ПолучитьМакет("МакетБелый");
		//	ОблЦена=Макет.ПолучитьОбласть("Область");
		//	ОблЦена.Параметры.ЦенаСоСкидкой=выборка.цена-выборка.цена*0.05;
		//конецесли;
		//Макет = Обработка.ПолучитьМакет("МакетБелый"); 
			
		
		//ОблЦена=Макет.ПолучитьОбласть("Область");
		ОблЦена.Параметры.Цена=выборка.цена;
		//ОблЦена.Параметры.ЦенаСоСкидкой=выборка.цена-выборка.цена*0.05;
		ОблЦена.Параметры.ТекущееВремя=ТекущаяДата();
		ОблЦена.Параметры.Организация=Организация;       
		ОблЦена.Параметры.Ячейка=Выборка.код;
		//ОблЦена.Параметры.МойШтрихКод="";//выборка.Штрихкод;
//		ОблЦена.Параметры.ЕдиницаИзмерения=выборка.Номенклатура.ЕдиницаИзмерения;
		ОблЦена.Параметры.Страна=выборка.Номенклатура.СтранаПроисхождения;
		ОблЦена.Параметры.НаименованиеЦенник=выборка.Номенклатура.ххх_НаименованиеЦенник;
		
					
		ТабДок.Вывести(ОблЦена);
		
		//ТабДок.параметры.ПараметрМакета5=123;
		
		возврат ТабДок; 
	
	КонецЕсли;	

КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыборПринтеров=новый массив;
	ВыборПринтеров.Очистить(); // список значений 
	Принтеры = Новый COMОбъект ("WScript.Network"); 
	prn = Принтеры.EnumPrinterConnections(); 
	i = 0; 
	Пока i < prn.Count()-1 Цикл 
	    ВыборПринтеров.Добавить(prn.Item(i+1)); 
	    i = i + 2; 
	КонецЦикла; 
	ЭтаФорма.Элементы.Принтеры1.СписокВыбора.ЗагрузитьЗначения(ВыборПринтеров); // загоняем в комбобокс
	ЭтаФорма.Элементы.ПринтерыКрасный.СписокВыбора.ЗагрузитьЗначения(ВыборПринтеров); // загоняем в комбобокс

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если не ЗначениеЗаполнено(Весы) Тогда
		сообщить("Выьберите весы!");
		возврат
	КонецЕсли;
	
	
	
	
	//Оповещение-Новый ОповещениеСистемыВзаимодействия
	
	ЗначениеОтбора  = Новый Структура("Оборудование", Весы);
	//ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	//
	ОткрытьФорму("Обработка.ххх_ПечатьМелкихЧеков.Форма.ФормаВыбораНоменклатуры",ЗначениеОтбора,элемент,истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Номенклатура=ВыбранноеЗначение;
КонецПроцедуры












































