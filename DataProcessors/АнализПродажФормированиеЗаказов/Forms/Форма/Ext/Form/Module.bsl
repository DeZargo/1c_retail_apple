


// Процедура - Рассчитать остатки дату
//
Процедура РассчитатьОстаткиДату()
	
	Древо=Результат.ПолучитьЭлементы();//,Новый описаниеТипов(Тип("ДеревоЗначений")));
	
	Древо=ДанныеФормыВЗначение(Результат,Тип("ДеревоЗначений"));
	Номка=Новый массив;
	//попытка
	//	Для каждого стрКонтр из Древо.строки Цикл
	//		Для каждого стр из стрКонтр.строки Цикл	
	//			Номка.добавить(Стр.Номенклатура);	
	//		КонецЦикла;
	//	КонецЦикла;
	//Исключение
//	Если Древо.Колонки.Найти("Номенклатура")<>неопределено Тогда
		Для каждого стр из Древо.строки Цикл
			стр.производитель=Стр.номенклатура.производитель;
			Номка.добавить(Стр.Номенклатура);
		//	стр.потребность=0;
		КонецЦикла;
	//КонецПопытки;
	//Иначе
	//	Для каждого стрКонтр из Древо.строки Цикл
	//		Для каждого стр из стрКонтр.строки Цикл	
	//			Номка.добавить(Стр.Номенклатура);	
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("номка",номка);
	Запрос.УстановитьПараметр("ДатаНачала",ПериодАнализа.ДатаНачала);
	Запрос.УстановитьПараметр("Дата",ПериодАнализа.ДатаОкончания);
	Запрос.УстановитьПараметр("склад",Магазин.СкладПоступления);
	Запрос.УстановитьПараметр("Контр",Поставщик);
	Запрос.УстановитьПараметр("Вход",Справочники.ххх_Справочник.ЗакупочнаяЦена.значение);
	Запрос.УстановитьПараметр("ПродажаСИнетернетМагазина",Справочники.ххх_Справочник.АналитикаХозОперРеализацияСИнтернетМагазина.значение);
	Запрос.Текст="ВЫБРАТЬ
	             |	ПродажиОбороты.Номенклатура КАК Номенклатура,
	             |	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоОборот
	             |ПОМЕСТИТЬ Продажи
	             |ИЗ
	             |	РегистрНакопления.Продажи.Обороты(&ДатаНАчала, &Дата, Регистратор, ) КАК ПродажиОбороты
	             |ГДЕ
	             |	ПродажиОбороты.Регистратор ССЫЛКА Документ.ЧекККМ ИЛИ ДокументПродажи.ххх_АналитикаХозОперации = &ПродажаСИнетернетМагазина
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПродажиОбороты.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Ссылка
	             |ПОМЕСТИТЬ Номка
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.Ссылка В(&номка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоКонечныйОстаток,
	             |	Продажи.КоличествоОборот КАК КоличествоОборот,
	             |	Номка.Ссылка КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ИЗ
	             |	Номка КАК Номка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура.ххх_Поставщик = &контр) КАК ТоварыНаСкладахОстатки
	             |		ПО Номка.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	             |		ПО Номка.Ссылка = НоменклатураПоставщиков.Номенклатура
	             |			И (НоменклатураПоставщиков.Поставщик = &Контр)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	             |		ПО Номка.Ссылка = Продажи.Номенклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &Вход) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО Номка.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураПоставщиков.ДатаПоследнегоПоступления,
	             |	Продажи.КоличествоОборот,
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0),
	             |	Номка.Ссылка,
	             |	ЦеныНоменклатурыСрезПоследних.Цена";
	выборка=ЗАпрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		Струк=Новый структура;
		Струк.Вставить("Номенклатура",выборка.номенклатура);
		Строки=Древо.строки.найтиСТроки(Струк,Истина);
		Для каждого стр из строки цикл
			стр.ДатаПоступления=выборка.ДатаПоследнегоПоступления;
			стр.остаток=выборка.КоличествоКонечныйОстаток;	
			стр.ПродажиКоличество=Выборка.КоличествоОборот;
			стр.Цена=Выборка.Цена;
			Если стр.ПродажиКоличество<>0 Тогда
				стр.ЗапасВДнях=выборка.КоличествоКонечныйОстаток/стр.ПродажиКоличество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВДанныеФормы(Древо,Результат);
КонецПроцедуры

&НаКлиенте
Процедура КочетовРассчитатьПосле(Команда)
//	РассчитатьОстаткиДату();
КонецПроцедуры

&НаСервере
&Вместо("ЗагрузитьНастройкиОтбораПоУмолчанию")
Процедура ЗагрузитьНастройкиОтбораПоУмолчаниюКочетов()
	
	УстановитьПривилегированныйРежим(Истина);

	Обработка = РеквизитФормыВЗначение("Объект");
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ххх_Макет");
	Иначе
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КонецЕсли;

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

	АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), ЭтаФорма.УникальныйИдентификатор);
	

КонецПроцедуры


&НаКлиенте
&Вместо("ПометкаПриИзменении")
Процедура ВместоПометкаПриИзмененииКочетов()
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Пометка = ТекущиеДанные.Пометка;
	ТекущаяСтрока = Элементы.Результат.ТекущаяСтрока;
	ТекущийПоставщик = ТекущиеДанные.Поставщик;
	
	Если Пометка Тогда
		СчетчикПометок = СчетчикПометок + 1;
		УстановитьПометку(ТекущаяСтрока);
	Иначе
		СчетчикПометок = СчетчикПометок - 1;
		СнятьПометку(ТекущаяСтрока, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры




&НаСервере
&Вместо("РассчитатьРезультатСервер")
Процедура РассчитатьРезультатСерверКочетов()
	
//	ЗагрузитьНастройкиОтбораПоУмолчаниюКочетов();
	
	Если ПоверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаРасчета = ТекущаяДатаСеанса();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаРасчета"                  , ДатаРасчета);
	СтруктураПараметров.Вставить("УчитыватьТоварыКПоступлению"  , Истина);
	СтруктураПараметров.Вставить("Магазин"  , Справочники.ххх_Справочник.Магазин.значение);
	СтруктураПараметров.Вставить("ДатаАнализаНачало"            , НачалоДня(ПериодАнализа.ДатаНачала));
	СтруктураПараметров.Вставить("ДатаАнализаКонец"             , КонецДня(ПериодАнализа.ДатаОкончания));
	СтруктураПараметров.Вставить("ИспользоватьУпаковки"         , ИспользоватьУпаковки);
	СтруктураПараметров.Вставить("ИспользоватьЗаказыПокупателей", ИспользоватьЗаказыПокупателей);
	СтруктураПараметров.Вставить("ПериодПоставкиПо"             , КонецДня(НачалоПродаж + КоличествоДнейПродаж*86400));
	СтруктураПараметров.Вставить("КоличествоДнейПродаж"         , КоличествоДнейПродаж + ПланируемыйОстаток);
	СтруктураПараметров.Вставить("НачалоПродаж"                 , НачалоДня(НачалоПродаж));
	СтруктураПараметров.Вставить("ДнейДоНачалаПродаж"           , (НачалоДня(НачалоПродаж) - НачалоДня(ДатаРасчета))/86400);
	СтруктураПараметров.Вставить("ПорядокОкругления"            , ?(ЗначениеЗаполнено(ПорядокОкругления), ПорядокОкругления, 0.001));
	СтруктураПараметров.Вставить("ОкруглятьВБольшуюСторону"     , ОкруглятьВБольшуюСторону);
	СтруктураПараметров.Вставить("Закуп"     , Справочники.ххх_Справочник.ЗакупочнаяЦена.значение);
	СтруктураПараметров.Вставить("Розница"     , Справочники.ххх_Справочник.РозничнаяЦена.значение);
	СтруктураПараметров.Вставить("ПродажаСИнетернетМагазина",Справочники.ххх_Справочник.АналитикаХозОперРеализацияСИнтернетМагазина.значение);
	СтруктураПараметров.Вставить("Округлять"                    , (ОкруглятьВБольшуюСторону ИЛИ ЗначениеЗаполнено(ПорядокОкругления)) И НЕ ИспользоватьУпаковки);
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПараметров.Вставить("ЖелаемаяДатаПоставки", ЖелаемаяДатаПоставки);
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(АдресНастроек) <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроек));
	КонецЕсли;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Производитель) Тогда
		ЭлементОтбораПроизводитель = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПроизводитель.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Производитель");
		ЭлементОтбораПроизводитель.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбораПроизводитель.Использование  = Истина;
		ЭлементОтбораПроизводитель.ПравоеЗначение = Производитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ЭлементОтбораПоставщик = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПоставщик.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Поставщик");
		ЭлементОтбораПоставщик.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораПоставщик.Использование  = Истина;
		ЭлементОтбораПоставщик.ПравоеЗначение = Поставщик;
	КонецЕсли;

	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ЭлементОтбораМагазин = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораМагазин.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Магазин");
		ЭлементОтбораМагазин.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораМагазин.Использование  = Истина;
		ЭлементОтбораМагазин.ПравоеЗначение = Магазин;
		
		ПроверитьЗаполненностьРасписания();
	КонецЕсли;
	
	ДеревоЗначенийРезультат = Новый ДеревоЗначений;
	Обработка = РеквизитФормыВЗначение("Объект");
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	//////////////// Группировки
	//Если Не ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(Магазин) Тогда
	//	ИмяГруппировки = "ПоставщикМагазин";
	//ИначеЕсли ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(Магазин) Тогда
	//	ИмяГруппировки = "Магазин";
	//ИначеЕсли Не ЗначениеЗаполнено(Поставщик) И ЗначениеЗаполнено(Магазин) Тогда
	//	ИмяГруппировки = "Поставщик";
	//Иначе
	//	ИмяГруппировки = "ДетальныеЗаписи";
	//КонецЕсли;

//	Для Каждого ГруппировкаСКД Из КомпоновщикНастроек.Настройки.Структура Цикл
//		ГруппировкаСКД.Использование = ?(ГруппировкаСКД.Имя = ИмяГруппировки, Истина, Ложь);
//	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	// Вывод
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ВыводВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ВыводВКоллекциюЗначений.УстановитьОбъект(ДеревоЗначенийРезультат);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет,,, Истина);
	ВыводВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	
	
	Если ЗначениеЗаполнено(Производитель) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораПроизводитель);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Поставщик) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораПоставщик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораМагазин);
	КонецЕсли;
	
	Если ИспользоватьУпаковки Тогда
		ДеревоЗначенийРезультат.Колонки.КЗаказуКоличество.Имя = "КЗаказуНеИспользовать";
		ДеревоЗначенийРезультат.Колонки.КЗаказуКоличествоВУпаковках.Имя = "КЗаказуКоличество";
	КонецЕсли;
	
	ДеревоФормы = РеквизитФормыВЗначение("Результат");
	ДеревоФормы.Строки.Очистить();
	
	ДанныеПрогноза = Неопределено;
	
	Если СредненедельныеПродажи Тогда
		
		ДанныеПрогноза = СтруктураДанныхПрогноза(ДеревоЗначенийРезультат);
		АдресДанныхПрогноза = ПоместитьВоВременноеХранилище(ДанныеПрогноза, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, , , ДанныеПрогноза);
	
		//Zorius
	ДеревоФормы.колонки.добавить("КодГруппы");
	Для каждого СТрокаДрева из ДеревоФормы.Строки Цикл
		//Для каждого стр из СтрокиДрева Цикл			
			СТрокаДрева.КодГруппы=ПолучитьСтрокуГрупп(СТрокаДрева.номенклатура.Родитель,15)//.Родитель.наименование;//?(ЗначениеЗаполнено(СТрокаДрева.номенклатура.Родитель),СТрокаДрева.номенклатура.Родитель.Код,"");			
		//КонецЦикла;
	КонецЦикла;
	ДеревоФормы.Строки.Сортировать("КодГруппы,Номенклатура");
	ДеревоФормы.колонки.Удалить("КодГруппы");
	//ДеревоФормы.Строки.Сортировать("Номенклатура","ИЕРАРХИЯ");
	//Zorius
	
	ЗначениеВРеквизитФормы(ДеревоФормы, "Результат");
	
	УстановитьБлокировкуФормыСервер(Ложь);
	
	//йцу=РеквизитФормыВЗначение("Результат");
	
	СчетчикПометок = 0;
	БлокировкаСтрокУстановлена = Ложь;
	//
КонецПроцедуры

функция ПолучитьСтрокуГрупп(Знач номенклатура,вложенность)
	й=0;
	СтрокаПредков="";
	Пока й<вложенность цикл
		СтрокаПредков=номенклатура.Наименование+СтрокаПредков;
		номенклатура=номенклатура.Родитель;
		й=й+1;
	КонецЦикла;
	возврат СтрокаПредков;
КонецФункции

&НаСервере
&Вместо("ПолучитьСтрокиДерева")
Процедура ПолучитьСтрокиДереваКочетов(
			ДеревоФормы,
			ДеревоЗначенийРезультат,
			СтрокаДереваРезультатВходящая = Неопределено,
			СтрокаДереваФормыВходящая = Неопределено,
			ДанныеПрогноза = Неопределено)

	Если СтрокаДереваРезультатВходящая = Неопределено Тогда
		Для Каждого СтрокаДереваРезультат Из ДеревоЗначенийРезультат.Строки Цикл
			ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат, , ДанныеПрогноза);
		КонецЦикла;
	Иначе
		Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
			СтрокаДереваФормы = ДеревоФормы.Строки.Добавить();
		Иначе
			СтрокаДереваФормы = СтрокаДереваФормыВходящая.Строки.Добавить();
		КонецЕсли;
		
		Для Каждого СтрокаДереваРезультат Из СтрокаДереваРезультатВходящая.Строки Цикл
			ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат, СтрокаДереваФормы, ДанныеПрогноза);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтрокаДереваФормы, СтрокаДереваРезультатВходящая);
		Если ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура)
			И ТипЗнч(СтрокаДереваФормы.Поставщик) = Тип("СправочникСсылка.Магазины") Тогда
			СтрокаДереваФормы.ВнутреннийЗаказ = Истина;
		КонецЕсли;
		Если СредненедельныеПродажи Тогда
			Если ДанныеПрогноза <> Неопределено И ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура) Тогда
				СтруктураПоиска = Новый Структура;
				Если ЗначениеЗаполнено(Магазин) Тогда
					СтруктураПоиска.Вставить("Магазин", Магазин);
				Иначе
					СтруктураПоиска.Вставить("Магазин", СтрокаДереваФормы.Магазин);
				КонецЕсли;
				СтруктураПоиска.Вставить("Номенклатура", СтрокаДереваФормы.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрокаДереваФормы.Характеристика);
				СтрокиПрогноза = ДанныеПрогноза.ТаблицаПрогноза.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПрогноза.Количество() > 0 Тогда
					ПрогнозДоПродаж = 0;
					ПрогнозПродаж = 0;
					Для Каждого СтрокаПрогноза Из СтрокиПрогноза Цикл
						Если СтрокаПрогноза.Дата < НачалоПродаж Тогда
							ПрогнозДоПродаж = ПрогнозДоПродаж + СтрокаПрогноза.Количество;
						Иначе
							ПрогнозПродаж = ПрогнозПродаж + СтрокаПрогноза.Количество;
						КонецЕсли;
					КонецЦикла;
					СтрокаДереваФормы.Прогноз = ПрогнозПродаж;
					СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество = Макс(СтрокаДереваРезультатВходящая.ОстатокНаДатуРасчета - ПрогнозДоПродаж, 0);
					
					ИтоговаяПотребность = 0;
					ПересчитатьПотребность = Истина;
					
					Если ИспользоватьАссортимент Тогда
						Если НЕ СтрокаДереваФормы.РазрешеныЗакупки Тогда
							ПересчитатьПотребность = Ложь;
							Если НЕ СтрокаДереваФормы.РазрешеныПродажи Тогда
								ИтоговаяПотребность = Мин(СтрокаДереваФормы.ТоварыКОтгрузкеКоличество - СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество, 0);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ПересчитатьПотребность Тогда
						Если СтрокаДереваФормы.МетодРасчетаПотребности = Перечисления.МетодыРасчетаПотребности.ПоЗаказамПокупателей Тогда
							ИтоговаяПотребность = СтрокаДереваФормы.ЗаказаноОстаток
												- СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество
												- СтрокаДереваФормы.ОжидаемоеПоступлениеКоличество
												- СтрокаДереваФормы.ТоварыКПоступлениюКоличество
												+ СтрокаДереваФормы.ТоварыКОтгрузкеКоличество;
						ИначеЕсли ИспользоватьЗаказыПокупателей
							И СтрокаДереваФормы.МетодРасчетаПотребности = Перечисления.МетодыРасчетаПотребности.ПоСтатистикеПродажТорговогоЗала Тогда
							ИтоговаяПотребность = Макс(СтрокаДереваФормы.ЗаказаноОстаток, ПрогнозПродаж)
												- СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество
												- СтрокаДереваФормы.ОжидаемоеПоступлениеКоличество
												- СтрокаДереваФормы.ТоварыКПоступлениюКоличество
												+ СтрокаДереваФормы.ТоварыКОтгрузкеКоличество;
						Иначе //
							ИтоговаяПотребность = ПрогнозПродаж + СтрокаДереваФормы.ЗаказаноОстаток
												- СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество
												- СтрокаДереваФормы.ОжидаемоеПоступлениеКоличество
												- СтрокаДереваФормы.ТоварыКПоступлениюКоличество
												+ СтрокаДереваФормы.ТоварыКОтгрузкеКоличество;
						КонецЕсли;
					КонецЕсли;
					
					Если ИспользоватьУпаковки Тогда
						Если (НЕ СтрокаДереваФормы.Весовой)
							И ИтоговаяПотребность <> Цел(ИтоговаяПотребность) Тогда
							ИтоговаяПотребность = Цел(ИтоговаяПотребность) + 1;
						КонецЕсли;
					Иначе
						Если ПорядокОкругления <> 0 Тогда
							Если ИтоговаяПотребность > 0 Тогда
								ИтоговаяПотребность = Ценообразование.ОкруглитьЦену(ИтоговаяПотребность, ПорядокОкругления, ОкруглятьВБольшуюСторону);
							ИначеЕсли ИтоговаяПотребность < 0 Тогда
								ИтоговаяПотребность = -Ценообразование.ОкруглитьЦену(-ИтоговаяПотребность, ПорядокОкругления, ОкруглятьВБольшуюСторону);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					СтрокаДереваФормы.ПотребностьКоличество = ИтоговаяПотребность;
					
					Если ИтоговаяПотребность >= 0 Тогда
						СтрокаДереваФормы.КЗаказуКоличество = ИтоговаяПотребность;
						СтрокаДереваФормы.КЗаказуКоличествоУпаковок = ИтоговаяПотребность * СтрокаДереваФормы.Коэффициент;
						Если Цел(СтрокаДереваФормы.КЗаказуКоличествоУпаковок) <> СтрокаДереваФормы.КЗаказуКоличествоУпаковок Тогда
							СтрокаДереваФормы.КЗаказуКоличествоУпаковок = Цел(СтрокаДереваФормы.КЗаказуКоличествоУпаковок) + 1;
						КонецЕсли;
						СтрокаДереваФормы.КВозвратуКоличество = 0;
						СтрокаДереваФормы.СуммаВозврата = 0;
						СтрокаДереваФормы.СуммаЗаказа = СтрокаДереваФормы.КЗаказуКоличествоУпаковок * СтрокаДереваФормы.Цена;
					Иначе
						СтрокаДереваФормы.КЗаказуКоличество = 0;
						СтрокаДереваФормы.КЗаказуКоличествоУпаковок = 0;
						СтрокаДереваФормы.КВозвратуКоличество = - ИтоговаяПотребность;
						СтрокаДереваФормы.СуммаЗаказа = 0;
						СтрокаДереваФормы.СуммаВозврата = - ИтоговаяПотребность * СтрокаДереваФормы.Цена;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура) Тогда
			//Если СтрокаДереваФормы.ПотребностьКоличество = 0 Тогда
			//	Если (НЕ ИспользоватьАссортимент)
			//		ИЛИ (НЕ СтрокаДереваФормы.КонтролироватьАссортимент)
			//		ИЛИ (СтрокаДереваФормы.КонтролироватьАссортимент
			//				И НЕ СтрокаДереваФормы.РазрешеныЗакупки) Тогда
			//		Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
			//			ДеревоФормы.Строки.Удалить(СтрокаДереваФормы);
			//		Иначе
			//			СтрокаДереваФормыВходящая.Строки.Удалить(СтрокаДереваФормы);
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
		Иначе
			Если СтрокаДереваФормы.Строки.Количество() = 0 Тогда
				Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
					ДеревоФормы.Строки.Удалить(СтрокаДереваФормы);
				Иначе
					СтрокаДереваФормыВходящая.Строки.Удалить(СтрокаДереваФормы);
				КонецЕсли;
			Иначе
				ОбновитьИтогиСтроки(СтрокаДереваФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтатистикаПродажСредняяПродажа.Видимость = НЕ СредненедельныеПродажи;
	Элементы.СтатистикаПродажПрогноз.Видимость = СредненедельныеПродажи;
		
КонецПроцедуры

&НаСервере
&Вместо("ПроверитьПросроченныеЗаказы")
Процедура ПроверитьПросроченныеЗаказыКочетов(ДатаЗакрытия, Магазин)
	
	//ТаблицаЗаказов = ЗапасыСервер.ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(ДатаЗакрытия, ?(ЗначениеЗаполнено(Магазин), Магазин, Неопределено));
	//	
	//Если ТаблицаЗаказов.Количество() > 0 Тогда
	//	Элементы.ФормаПерейтиЗакрытиеЗаказов.Доступность = Истина;
	//	
	//	ТекстСообщения = НСтр("ru = 'Перед работой рекомендуется закрыть просроченные заказы'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//Иначе
	//	Элементы.ФормаПерейтиЗакрытиеЗаказов.Доступность = Ложь;
	//КонецЕсли;
	//
КонецПроцедуры


&НаСервере
&Вместо("ПроверитьЗаполненностьРасписания")
Процедура ПроверитьЗаполненностьРасписанияКочетов()
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 	"ВЫБРАТЬ ПЕРВЫЕ 1
	//               	|	ГрафикРаботы.Магазин КАК Магазин
	//               	|ИЗ
	//               	|	РегистрСведений.ГрафикиРаботыМагазинов КАК ГрафикРаботы
	//               	|ГДЕ
	//               	|	ГрафикРаботы.Магазин = &Магазин
	//               	|	И ГрафикРаботы.ДатаКалендаря <= &ДатаАнализаКонец
	//               	|	И ГрафикРаботы.ДатаКалендаря >= &ДатаАнализаНачало";
	//Запрос.УстановитьПараметр("Магазин", Магазин);
	//Запрос.УстановитьПараметр("ДатаАнализаКонец", КонецДня(ПериодАнализа.ДатаОкончания));
	//Запрос.УстановитьПараметр("ДатаАнализаНачало", НачалоДня(ПериодАнализа.ДатаНачала));
	//РезультатПроверки = Запрос.Выполнить();
	//Если РезультатПроверки.Пустой() Тогда
	//	ТекстСообщения = НСтр("ru = 'Для выбранного магазина не заполнено расписание работы'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Магазин");
	//КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
&Вместо("РассчитатьРезультатПослеЗакрытияДокумента")
Процедура РассчитатьРезультатПослеЗакрытияДокументаКочетов(Результат, ДополнительныеПараметры) Экспорт
	
	//ПоказатьОповещениеПользователя(НСтр("ru=''"),, НСтр("ru='Запущен процесс пересчета данных.'"),
	//								БиблиотекаКартинок.Информация32);
	//РассчитатьРезультатСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КочетовРезультатПриИзмененииПосле(Элемент)
	КочетовРезультатПриИзмененииПослеСервер();
КонецПроцедуры

функция КочетовРезультатПриИзмененииПослеСервер()
	Древо=ДанныеФормыВЗначение(Результат,Тип("ДеревоЗначений"));
	СуммаЗаказа=Древо.строки.Итог("СуммаЗаказа");
КонецФункции

&НаКлиенте
Процедура КочетовПроизводитель1НачалоВыбораВместо(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",Новый структура("Производители",""),Элемент);
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаСервере
&Вместо("СоздатьДокументыСервер")
Процедура ВместоСоздатьДокументыСерверКочетов(МассивДанных, ТипДокумента, Отказ, ТекстОшибки)
	
	Дерево = РеквизитФормыВЗначение("Результат");
	ТаблицаВыделенныхСтрок = РеквизитФормыВЗначение("ВыделенныеСтроки");
	ТаблицаВыделенныхСтрок.Очистить();
	ПараметрыОтбора = Новый Структура("Пометка", Истина);
	МассивСтрок = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаМассива.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВыделенныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаМассива);
		
		Если НЕ ИспользоватьУпаковки Тогда
			СтрокаМассива.КЗаказуКоличествоУпаковок = СтрокаМассива.КЗаказуКоличество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаМассива.КЗаказуКоличествоУпаковок) Тогда
			СтрокаТаблицы.Количество = СтрокаМассива.КЗаказуКоличествоУпаковок;
			СтрокаТаблицы.Упаковка	 = СтрокаМассива.КЗаказуУпаковка;
		ИначеЕсли ЗначениеЗаполнено(СтрокаМассива.КВозвратуКоличество) Тогда
			СтрокаТаблицы.КВозврату = СтрокаМассива.КВозвратуКоличество;
		Иначе
			СтрокаТаблицы.Количество = СтрокаМассива.КЗаказуКоличество;
			СтрокаТаблицы.Упаковка	 = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Если ТипДокумента = "ЗаказПоставщику" Тогда
		УсловиеГде = "Таблица.Количество > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Контрагенты
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		УсловиеГде = "Таблица.Количество > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Магазины
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ВозвратПоставщику" Тогда
		УсловиеГде = "Таблица.КВозврату > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Контрагенты
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
		УсловиеГде = "Таблица.КВозврату > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Магазины
					|ИНАЧЕ ИСТИНА КОНЕЦ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ТаблицаВыделенныхСтрок.ЗаполнитьЗначения(Поставщик, "Поставщик");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ТаблицаВыделенныхСтрок.ЗаполнитьЗначения(Магазин, "Магазин");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Поставщик,
	|	Таблица.Магазин,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Количество,
	|	Таблица.Упаковка,
	|	Таблица.Цена,
	|	Таблица.КВозврату
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Поставщик КАК Поставщик,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА Таблица.Количество = 0 ТОГДА Таблица.КВозврату ИНАЧЕ Таблица.Количество КОНЕЦ КАК Количество,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Магазин КАК Магазин,
	|	Таблица.Цена КАК Цена
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	"+ УсловиеГде +"
	|Итоги по
	|	Магазин";
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаВыделенныхСтрок);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	РезультатПакет = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатПакет[1];
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ		= Истина;
		ТекстОшибки = НСтр("ru = 'Нет выбранных данных для формирования документов %ТипДокумента%'"); 
		
		Если ТипДокумента = "ЗаказПоставщику" Тогда
			ТипДокументаОписание = "Заказ поставщику"
		ИначеЕсли ТипДокумента = "ВозвратПоставщику" Тогда
			ТипДокументаОписание = "Возврат поставщику"
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
			ТипДокументаОписание = "Заказ на перемещение"
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			ТипДокументаОписание = "Заказ на перемещение (возврат)"
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипДокумента%", ТипДокументаОписание);
		
		Возврат;
	КонецЕсли;
	 //
	ВыборкаМагазины = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//ВыборкаПоставщики.Следующий();
	
	//ВыборкаМагазины = ВыборкаПоставщики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаМагазины.Следующий() Цикл
		
		Товары = Новый Массив;
		Реквизиты = Новый Структура;
		
		Реквизиты.Вставить("Контрагент",				Поставщик);
		Реквизиты.Вставить("Магазин",					ВыборкаМагазины.Магазин);
		Реквизиты.Вставить("ДатаПоступления",			ЖелаемаяДатаПоставки);
		
		Если ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			Реквизиты.Вставить("МагазинОтправитель",	ВыборкаМагазины.Магазин);
			Реквизиты.Вставить("МагазинПолучатель",		Поставщик);
		Иначе
			Реквизиты.Вставить("МагазинОтправитель",	Поставщик);
			Реквизиты.Вставить("МагазинПолучатель",		ВыборкаМагазины.Магазин);
		КонецЕсли;
		
		Реквизиты.Вставить("ЖелаемаяДатаПоступления",	ЖелаемаяДатаПоставки);
		
		Товары.Очистить();
		ВыборкаНоменклатура = ВыборкаМагазины.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаТовары = Новый Структура;
			СтрокаТовары.Вставить("Номенклатура",	ВыборкаНоменклатура.Номенклатура); 
			СтрокаТовары.Вставить("Характеристика",	ВыборкаНоменклатура.Характеристика);
			СтрокаТовары.Вставить("Количество",		ВыборкаНоменклатура.Количество);
			СтрокаТовары.Вставить("Упаковка",		ВыборкаНоменклатура.Упаковка);
			СтрокаТовары.Вставить("Цена",			ВыборкаНоменклатура.Цена);
			
			Товары.Добавить(СтрокаТовары);
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Реквизиты", Реквизиты);
		СтруктураДанных.Вставить("Товары", Товары);
		МассивДанных.Добавить(СтруктураДанных); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КочетовСвернутьРазвернутьТЧПосле(Команда)
	КочетовСвернутьРазвернутьТЧПослеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КочетовСвернутьРазвернутьТЧПослеНаСервере()
	
	Элементы.Шапка.Видимость = не Элементы.Шапка.Видимость;
	Элементы.ПараметрыОкругления.Видимость = не Элементы.ПараметрыОкругления.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КочетовДобавитьПоставщикаВместо(Команда)
	СтандартнаяОбработка=ложь;
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",Новый структура("Производители",""),Элементы.Производитель2);
КонецПроцедуры



























