
&НаКлиенте
Процедура Команда1()
	Команда1НаСервере();
КонецПроцедуры

&НаСервере
Процедура Команда1НаСервере()
	УстановитьПривилегированныйРежим(Истина);
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"gruppa_Пикник.txt");
	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Родитель",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Тч.Добавить();
		стрТч.Имя=СокрЛп(МассивКол[1]);
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.Родитель=СокрЛп(МассивКол[2]);	
		итератор=итератор+1;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.Ид КАК Ид
	             |ПОМЕСТИТЬ Тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Тч.Ид КАК Ид,
	             |	Тч.Имя КАК Имя
	             |ИЗ
	             |	Тч КАК Тч
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО Тч.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ИСТИНА)
	             |ГДЕ
	             |	Номенклатура.Ссылка ЕСТЬ NULL";
	Выборка=Запрос.Выполнить().Выбрать();
	й=1;
	Пока Выборка.Следующий() Цикл
		номенклатура=Справочники.номенклатура.СоздатьГруппу();
		номенклатура.ххх_ИдЦентр=Выборка.Ид;
		номенклатура.Наименование=выборка.имя;
		номенклатура.записать();
		й=й+1;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Имя,
	             |	Тч.Родитель,
	             |	Тч.Ид
	             |ПОМЕСТИТЬ Тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Тч.Имя,
	             |	Номенклатура.Ссылка КАК родитель,
	             |	Тч.Ид
	             |ПОМЕСТИТЬ ИщемРодителей
	             |ИЗ
	             |	Тч КАК Тч
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО Тч.Родитель = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ИСТИНА)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ИщемРодителей.Имя,
	             |	Номенклатура.Ссылка КАК Номенклатура,
	             |	ИщемРодителей.родитель
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИщемРодителей КАК ИщемРодителей
	             |		ПО (Номенклатура.ЭтоГруппа = ИСТИНА)
	             |			И (Номенклатура.Наименование <> ИщемРодителей.Имя
	             |				ИЛИ Номенклатура.Родитель <> ИщемРодителей.родитель)
	             |			И Номенклатура.ххх_ИдЦентр = ИщемРодителей.Ид";
	Выборка=Запрос.Выполнить().Выбрать();
	й=1;
	
	Пока Выборка.Следующий() Цикл
		номенклатура=Выборка.номенклатура.получитьобъект();
		номенклатура.Родитель=справочники.Номенклатура.ПустаяСсылка();
		номенклатура.записать();
	КонецЦикла;

	выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		номенклатура=Выборка.номенклатура.получитьобъект();
		номенклатура.Наименование=Выборка.Имя;
		номенклатура.Родитель=Выборка.Родитель;
		номенклатура.записать();
		й=й+1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Команда2()
	Команда2НаСервере();
КонецПроцедуры

&НаСервере
Процедура Команда2НаСервере()
	УстановитьПривилегированныйРежим(Истина);
	//Запрос=Новый запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//             |	Номенклатура.Ссылка
	//             |ИЗ
	//             |	Справочник.Номенклатура КАК Номенклатура
	//             |ГДЕ
	//             |	Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	//             |	И Номенклатура.ЭтоГруппа = ЛОЖЬ";
	//УдалитьОбъект1ы(Запрос.Выполнить().выгрузить().выгрузитьКолонку("Ссылка"),ложь);
	//Пока Выборка.Следующий()Цикл
	//	номка=выборка.ссылка.получитьобъект();
	//	номка.удалить();
	//КонецЦикла;
	наб=регистрыСведений.ххх_КодыНоменклатурыВесыКассы.СоздатьНаборЗаписей();
	Наб.Прочитать();
	Наб.Очистить();
	Наб.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуруБезГрупп()
	ЗагрузитьНоменклатуруБезГруппНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатуруБезГруппНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	//
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"ItemPropertyValue.txt");	
	ТчВетис=Новый таблицаЗначений;
	ТчВетис.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));

	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	
	Пока итератор<КолвоСтрок+1 Цикл
		
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
			
		Если СокрЛп(МассивКол[1])="143" и (Нрег(СокрЛп(МассивКол[3]))="да" или Нрег(СокрЛп(МассивКол[3]))="true" )Тогда
			
			стрТч=ТчВетис.Добавить();	
			стрТч.Ид=СокрЛп(МассивКол[0]);
			
		КонецЕсли;	
		
		итератор=итератор+1;
		
	КонецЦикла;
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"TovarExt_Пикник.txt");	
	ТчВид=Новый таблицаЗначений;
	ТчВид.Колонки.Добавить("Вид",Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТчВид.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ТчВид.Колонки.Добавить("ФиксЦенаНаценка",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ТчВид.Колонки.Добавить("ВыгружатьВИнетМагаз",Новый ОписаниеТипов("Булево"));
	
	Наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	Наб.Отбор.свойство.установить("ВидНоменклатурыАлкоголь");
	Наб.Прочитать();
	Алкашка=Наб[0].ЗначениеВБазе;
	
	Наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	Наб.Отбор.свойство.установить("ВидНоменклатурыТовар");
	Наб.Прочитать();
	Товар=Наб[0].ЗначениеВБазе;
	
	Тара=Справочники.ххх_Справочник.ВидНоменклатурыТара.Значение;
	
	Ветис=Справочники.ххх_Справочник.ВидНоменклатурыВетис.Значение;
	
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=ТчВид.Добавить();
		Если  СокрЛп(МассивКол[2])="T" Тогда
			стрТч.Вид=Алкашка;
		Иначе
			//стрВетис="";
			Если ЗначениеЗаполнено(ТчВетис.Найти(СокрЛп(МассивКол[0]))) Тогда
				стрТч.Вид=Ветис;
			Иначе
				стрТч.Вид=Товар;
			КонецЕсли;
		КонецЕсли;
		Если  СокрЛп(МассивКол[3])="11" Тогда
			стрТч.вид=Тара;
		КонецЕсли;
		Если СокрЛп(МассивКол[3])="14" Тогда
			стрТч.ВыгружатьВИнетМагаз=Истина;
		Иначе
			стрТч.ВыгружатьВИнетМагаз=Ложь;
		КонецЕсли;
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.ФиксЦенаНаценка=СокрЛп(МассивКол[1]);
		итератор=итератор+1;
		//прервать;
	КонецЦикла;

	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"tovar_"+НаименованиеДляФайлов+".txt");	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Родитель",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Страна",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Пост",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Произв",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ндс",Новый ОписаниеТипов("ПеречислениеССылка.СтавкиНДС"));
	Тч.Колонки.Добавить("единица",Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	Тч.Колонки.Добавить("крепость",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	Тч.Колонки.Добавить("объем",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	Тч.Колонки.Добавить("ИмяКасса",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИмяЦенник",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИмяЭтикетка",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Состав",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(500)));
	Тч.Колонки.Добавить("ИдБаза1",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИдБаза2",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИдБаза3",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Кор1",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Уп1",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Шт1",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Кор2",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Уп2",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Шт2",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Кор3",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Уп3",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Шт3",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИмяВБазе",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("нетто",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	Тч.Колонки.Добавить("брутто",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));

	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	
	НабНДС=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	НабНДС.Отбор.свойство.установить("НДС0");
	НабНДС.Прочитать();
	ндс0=НабНДС[0].ЗначениеВБазе;
	
	НабНДС.Отбор.свойство.установить("НДС10");
	НабНДС.Прочитать();
	ндс10=НабНДС[0].ЗначениеВБазе;
	
	НабНДС.Отбор.свойство.установить("НДС18");
	НабНДС.Прочитать();
	ндс18=НабНДС[0].ЗначениеВБазе;
	
	НабЕдИзм=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	НабЕдИзм.Отбор.свойство.установить("ЕдИзмКг(1)");
	НабЕдИзм.Прочитать();
	ЕдИзмКг=НабЕдИзм[0].ЗначениеВБазе;
	
	НабЕдИзм.Отбор.свойство.установить("ЕдИзмШт(2)");
	НабЕдИзм.Прочитать();
	ЕдИзмШт=НабЕдИзм[0].ЗначениеВБазе;

	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Тч.Добавить();
		стрТч.Имя=СокрЛп(МассивКол[1]);
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.Родитель=СокрЛп(МассивКол[3]);
		стрТч.Страна=СокрЛп(МассивКол[26]);
		стрТч.Пост=СокрЛп(МассивКол[8]);
		стрТч.Произв=СокрЛп(МассивКол[21]);
		
		стрТч.ндс=?(СокрЛп(МассивКол[4])=ндс18,перечисления.СтавкиНДС.НДС18,
			?(СокрЛп(МассивКол[4])=ндс10,перечисления.СтавкиНДС.НДС10,перечисления.СтавкиНДС.БезНДС));
			
		Если стрТч.ндс=Перечисления.СтавкиНДС.НДС18 и ТекущаяДата()>='20190101' Тогда
			
			стрТч.ндс=Перечисления.СтавкиНДС.НДС20;
			
		КонецЕсли;		
			
		стрТч.единица=?(СокрЛп(МассивКол[2])="1",ЕдИзмКг,ЕдИзмШт);
		стрТч.крепость=СокрЛп(МассивКол[27]);
		стрТч.объем=СокрЛп(МассивКол[28]);
		стрТч.Состав=СокрЛп(МассивКол[24]);
		стрТч.ИмяКасса=СокрЛп(МассивКол[5]);
		стрТч.ИмяЦенник=СокрЛп(МассивКол[6]);
		стрТч.ИмяЭтикетка=СокрЛп(МассивКол[7]);
		стрТч.ИдБаза1=СокрЛп(МассивКол[9]);
		стрТч.ИдБаза2=СокрЛп(МассивКол[10]);
		стрТч.ИдБаза3=СокрЛп(МассивКол[11]);
		стрТч.Кор1=СокрЛп(МассивКол[12]);
		стрТч.Уп1=СокрЛп(МассивКол[13]);
		стрТч.Шт1=СокрЛп(МассивКол[14]);
		стрТч.Кор2=СокрЛп(МассивКол[15]);
		стрТч.Уп2=СокрЛп(МассивКол[16]);
		стрТч.Шт2=СокрЛп(МассивКол[17]);
		стрТч.Кор3=СокрЛп(МассивКол[18]);
		стрТч.Уп3=СокрЛп(МассивКол[19]);
		стрТч.Шт3=СокрЛп(МассивКол[20]);
		стрТч.ИмяВБазе=СокрЛп(МассивКол[23]);
		
		стрТч.Брутто=СокрЛп(МассивКол[30]);
		стрТч.Нетто=СокрЛп(МассивКол[31]);

		итератор=итератор+1;
	КонецЦикла;
	
	#Область й
		
	Наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	Наб.Отбор.свойство.установить("НоменклатураДопРеквизитОсновнойПоставщик");
	Наб.Прочитать();
	ДопРекизитПоставщик=Наб[0].ЗначениеВБазе;
	//
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("proizv_Пикник");
	наб.Отбор.свойство.установить("ПРОИЗВОДИТЕЛИ");
	наб.Прочитать();
	ГруппаПроизв=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("ПОСТАВЩИКИ");
	наб.Прочитать();
	ГруппаПостав=наб[0].ЗначениеВБазе;
		
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.свойство.установить("НоменклатураПроизводства");
	наб.Прочитать();
	ГруппаНоменклатураПроизводства=наб[0].ЗначениеВБазе;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	Запрос.УстановитьПараметр("ДопРекизитПоставщик",ДопРекизитПоставщик);
	Запрос.УстановитьПараметр("ТчВид",ТчВид);
	Запрос.УстановитьПараметр("произв",ГруппаПроизв);
	Запрос.УстановитьПараметр("пост",ГруппаПостав);
	Запрос.УстановитьПараметр("ГруппаНоменклатураПроизводства",ГруппаНоменклатураПроизводства);
	Запрос.УстановитьПараметр("ветис",ветис);

	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.Родитель КАК Родитель,
	             |	Тч.Ид КАК Ид,
	             |	Тч.Страна КАК Страна,
	             |	Тч.произв КАК произв,
	             |	Тч.пост КАК пост,
	             |	Тч.крепость КАК крепость,
	             |	Тч.объем КАК объем,
	             |	Тч.Единица КАК Единица,
	             |	Тч.ндс КАК ндс,
	             |	Тч.ИмяКасса КАК ИмяКасса,
	             |	Тч.ИмяЦенник КАК ИмяЦенник,
	             |	Тч.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	Тч.Состав КАК Состав,
	             |	Тч.ИдБаза1 КАК ИдБаза1,
	             |	Тч.ИдБаза2 КАК ИдБаза2,
	             |	Тч.ИдБаза3 КАК ИдБаза3,
	             |	Тч.ИмяВБазе КАК ИмяВБазе,
	             |	Тч.нетто КАК нетто,
	             |	Тч.брутто КАК брутто
	             |ПОМЕСТИТЬ Тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТчВид.Ид КАК Ид,
	             |	ТчВид.Вид КАК Вид
	             |ПОМЕСТИТЬ ТчВид
	             |ИЗ
	             |	&ТчВид КАК ТчВид
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.Родитель КАК Родитель,
	             |	Тч.Ид КАК Ид,
	             |	Тч.Страна КАК Страна,
	             |	Тч.произв КАК произв,
	             |	Тч.пост КАК пост,
	             |	Тч.крепость КАК крепость,
	             |	Тч.объем КАК объем,
	             |	Тч.Единица КАК Единица,
	             |	Тч.ндс КАК ндс,
	             |	ТчВид.Вид КАК Вид,
	             |	Тч.ИмяКасса КАК ИмяКасса,
	             |	Тч.ИмяЦенник КАК ИмяЦенник,
	             |	Тч.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	Тч.Состав КАК Состав,
	             |	Тч.ИдБаза1 КАК ИдБаза1,
	             |	Тч.ИдБаза2 КАК ИдБаза2,
	             |	Тч.ИдБаза3 КАК ИдБаза3,
	             |	Тч.ИмяВБазе КАК ИмяВБазе,
	             |	Тч.нетто КАК нетто,
	             |	Тч.брутто КАК брутто
	             |ПОМЕСТИТЬ ОпределямВид
	             |ИЗ
	             |	Тч КАК Тч
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ТчВид КАК ТчВид
	             |		ПО Тч.Ид = ТчВид.Ид
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОпределямВид.Имя КАК Имя,
	             |	Номенклатура.Ссылка КАК родитель,
	             |	ОпределямВид.Ид КАК Ид,
	             |	ОпределямВид.Страна КАК Страна,
	             |	ОпределямВид.произв КАК произв,
	             |	ОпределямВид.пост КАК пост,
	             |	ОпределямВид.крепость КАК крепость,
	             |	ОпределямВид.объем КАК объем,
	             |	ОпределямВид.Единица КАК Единица,
	             |	ОпределямВид.ндс КАК ндс,
	             |	ОпределямВид.Вид КАК Вид,
	             |	ОпределямВид.ИмяКасса КАК ИмяКасса,
	             |	ОпределямВид.ИмяЦенник КАК ИмяЦенник,
	             |	ОпределямВид.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	ОпределямВид.Состав КАК Состав,
	             |	ОпределямВид.ИдБаза2 КАК ИдБаза2,
	             |	ОпределямВид.ИдБаза1 КАК ИдБаза1,
	             |	ОпределямВид.ИдБаза3 КАК ИдБаза3,
	             |	ОпределямВид.ИмяВБазе КАК ИмяВБазе,
	             |	ОпределямВид.нетто КАК нетто,
	             |	ОпределямВид.брутто КАК брутто
	             |ПОМЕСТИТЬ ИщемРодителей
	             |ИЗ
	             |	ОпределямВид КАК ОпределямВид
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО ОпределямВид.Родитель = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ИСТИНА)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ИщемРодителей.Имя КАК Имя,
	             |	ИщемРодителей.родитель КАК родитель,
	             |	ИщемРодителей.Ид КАК Ид,
	             |	ИщемРодителей.произв КАК произв,
	             |	ИщемРодителей.пост КАК пост,
	             |	ИщемРодителей.крепость КАК крепость,
	             |	ИщемРодителей.объем КАК объем,
	             |	ИщемРодителей.Единица КАК Единица,
	             |	СтраныМира.Ссылка КАК страна,
	             |	ИщемРодителей.ндс КАК ндс,
	             |	ИщемРодителей.Вид КАК Вид,
	             |	ИщемРодителей.ИмяКасса КАК ИмяКасса,
	             |	ИщемРодителей.ИмяЦенник КАК ИмяЦенник,
	             |	ИщемРодителей.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	ИщемРодителей.Состав КАК Состав,
	             |	ИщемРодителей.ИдБаза2 КАК ИдБаза2,
	             |	ИщемРодителей.ИдБаза1 КАК ИдБаза1,
	             |	ИщемРодителей.ИдБаза3 КАК ИдБаза3,
	             |	ИщемРодителей.ИмяВБазе КАК ИмяВБазе,
	             |	ИщемРодителей.нетто КАК нетто,
	             |	ИщемРодителей.брутто КАК брутто
	             |ПОМЕСТИТЬ ИщемСтраны
	             |ИЗ
	             |	ИщемРодителей КАК ИщемРодителей
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	             |		ПО ИщемРодителей.Страна = СтраныМира.Код
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ИщемСтраны.Имя КАК Имя,
	             |	ИщемСтраны.родитель КАК родитель,
	             |	ИщемСтраны.Ид КАК Ид,
	             |	ИщемСтраны.произв КАК произв,
	             |	ИщемСтраны.крепость КАК крепость,
	             |	ИщемСтраны.объем КАК объем,
	             |	ИщемСтраны.Единица КАК Единица,
	             |	ИщемСтраны.страна КАК страна,
	             |	Контрагенты.Ссылка КАК пост,
	             |	ИщемСтраны.ндс КАК ндс,
	             |	ИщемСтраны.Вид КАК Вид,
	             |	ИщемСтраны.ИмяКасса КАК ИмяКасса,
	             |	ИщемСтраны.ИмяЦенник КАК ИмяЦенник,
	             |	ИщемСтраны.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	ИщемСтраны.Состав КАК Состав,
	             |	ИщемСтраны.ИдБаза1 КАК ИдБаза1,
	             |	ИщемСтраны.ИдБаза2 КАК ИдБаза2,
	             |	ИщемСтраны.ИдБаза3 КАК ИдБаза3,
	             |	ИщемСтраны.ИмяВБазе КАК ИмяВБазе,
	             |	ИщемСтраны.нетто КАК нетто,
	             |	ИщемСтраны.брутто КАК брутто
	             |ПОМЕСТИТЬ ИщемПоставщиков
	             |ИЗ
	             |	ИщемСтраны КАК ИщемСтраны
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	             |		ПО ИщемСтраны.пост = Контрагенты.ххх_ИдЦентр
	             |			И (Контрагенты.Родитель = &пост)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ИщемПоставщиков.Имя КАК Имя,
	             |	ИщемПоставщиков.родитель КАК родитель,
	             |	ИщемПоставщиков.Ид КАК Ид,
	             |	ИщемПоставщиков.крепость КАК крепость,
	             |	ИщемПоставщиков.объем КАК объем,
	             |	ИщемПоставщиков.Единица КАК Единица,
	             |	ИщемПоставщиков.страна КАК страна,
	             |	ИщемПоставщиков.пост КАК пост,
	             |	ИщемПоставщиков.ндс КАК ндс,
	             |	ИщемПоставщиков.Вид КАК Вид,
	             |	ИщемПоставщиков.ИмяКасса КАК ИмяКасса,
	             |	ИщемПоставщиков.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	ИщемПоставщиков.ИмяЦенник КАК ИмяЦенник,
	             |	Контрагенты.Ссылка КАК произв,
	             |	ИщемПоставщиков.Состав КАК Состав,
	             |	ИщемПоставщиков.ИдБаза1 КАК ИдБаза1,
	             |	ИщемПоставщиков.ИдБаза2 КАК ИдБаза2,
	             |	ИщемПоставщиков.ИдБаза3 КАК ИдБаза3,
	             |	ИщемПоставщиков.ИмяВБазе КАК ИмяВБазе,
	             |	ИщемПоставщиков.нетто КАК нетто,
	             |	ИщемПоставщиков.брутто КАК брутто
	             |ПОМЕСТИТЬ ИщемПроизв
	             |ИЗ
	             |	ИщемПоставщиков КАК ИщемПоставщиков
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	             |		ПО ИщемПоставщиков.произв = Контрагенты.ххх_ИдЦентр
	             |			И (Контрагенты.Родитель = &произв)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НоменклатураДополнительныеРеквизиты.Значение КАК Пост,
	             |	Номенклатура.Ссылка КАК Ссылка,
	             |	Номенклатура.Родитель КАК Родитель,
	             |	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	             |	Номенклатура.Код КАК Код,
	             |	Номенклатура.Наименование КАК Наименование,
	             |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	             |	Номенклатура.ххх_ИдЦентр КАК ххх_ИдЦентр,
	             |	Номенклатура.Крепость КАК Крепость,
	             |	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	             |	Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	             |	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	             |	Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	             |	Номенклатура.ххх_НаименованиеКасса КАК ххх_НаименованиеКасса,
	             |	Номенклатура.ххх_НаименованиеЦенник КАК ххх_НаименованиеЦенник,
	             |	Номенклатура.ххх_НаименованиеЭтикетка КАК ххх_НаименованиеЭтикетка,
	             |	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	             |	Номенклатура.Производитель КАК Производитель,
	             |	НоменклатураДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
	             |	Номенклатура.Описание КАК Состав,
	             |	Номенклатура.ххх_Поставщик КАК ххх_Поставщик,
	             |	Номенклатура.ххх_НаименованиеВБазе КАК ххх_НаименованиеВБазе,
	             |	Номенклатура.ххх_Нетто КАК ххх_Нетто,
	             |	Номенклатура.ххх_Брутто КАК ххх_Брутто
	             |ПОМЕСТИТЬ НоменклатураПоставщик
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	             |		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = Номенклатура.Ссылка)
	             |			И (НоменклатураДополнительныеРеквизиты.Свойство = &ДопРекизитПоставщик)
	             |ГДЕ
	             |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ххх_ИдЦентр
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ИщемПроизв.Имя КАК Имя,
	             |	НоменклатураПоставщик.Ссылка КАК Номенклатура,
	             |	ИщемПроизв.родитель КАК родитель,
	             |	ИщемПроизв.крепость КАК крепость,
	             |	ИщемПроизв.объем КАК объем,
	             |	ИщемПроизв.Единица КАК Единица,
	             |	ИщемПроизв.страна КАК страна,
	             |	ИщемПроизв.пост КАК пост,
	             |	ИщемПроизв.произв КАК произв,
	             |	ИщемПроизв.ндс КАК ндс,
	             |	ИщемПроизв.Вид КАК Вид,
	             |	ИщемПроизв.ИмяКасса КАК ИмяКасса,
	             |	ИщемПроизв.ИмяЭтикетка КАК ИмяЭтикетка,
	             |	ИщемПроизв.ИмяЦенник КАК ИмяЦенник,
	             |	НоменклатураПоставщик.НомерСтроки КАК НомерСтрокиПоставщик,
	             |	ИщемПроизв.Состав КАК Состав,
	             |	ИщемПроизв.ИдБаза1 КАК ИдБаза1,
	             |	ИщемПроизв.ИдБаза2 КАК ИдБаза2,
	             |	ИщемПроизв.ИдБаза3 КАК ИдБаза3,
	             |	ИщемПроизв.ИмяВБазе КАК ИмяВБазе,
	             |	ИщемПроизв.нетто КАК нетто,
	             |	ИщемПроизв.брутто КАК брутто
	             |ИЗ
	             |	ИщемПроизв КАК ИщемПроизв
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПоставщик КАК НоменклатураПоставщик
	             |		ПО (НоменклатураПоставщик.ЭтоГруппа = ЛОЖЬ)
	             |			И (НоменклатураПоставщик.ххх_ИдЦентр = ИщемПроизв.Ид)
	             |			И (ИщемПроизв.Имя <> НоменклатураПоставщик.Наименование
	             |				ИЛИ НоменклатураПоставщик.Наименование <> НоменклатураПоставщик.НаименованиеПолное
	             |				ИЛИ ИщемПроизв.родитель <> НоменклатураПоставщик.Родитель
	             |				ИЛИ ИщемПроизв.крепость <> НоменклатураПоставщик.Крепость
	             |				ИЛИ ИщемПроизв.объем <> НоменклатураПоставщик.ОбъемДАЛ
	             |				ИЛИ ИщемПроизв.Единица <> НоменклатураПоставщик.ЕдиницаИзмерения
	             |				ИЛИ ИщемПроизв.страна <> НоменклатураПоставщик.СтранаПроисхождения
	             |				ИЛИ ИщемПроизв.ндс <> НоменклатураПоставщик.СтавкаНДС
	             |				ИЛИ ИщемПроизв.Вид <> НоменклатураПоставщик.ВидНоменклатуры
	             |				ИЛИ ИщемПроизв.ИмяКасса <> НоменклатураПоставщик.ххх_НаименованиеКасса
	             |				ИЛИ ИщемПроизв.ИмяЭтикетка <> НоменклатураПоставщик.ххх_НаименованиеЭтикетка
	             |				ИЛИ ИщемПроизв.ИмяЦенник <> НоменклатураПоставщик.ххх_НаименованиеЦенник
	             |				ИЛИ ИщемПроизв.произв <> НоменклатураПоставщик.Производитель
	             |				ИЛИ ИщемПроизв.Состав <> НоменклатураПоставщик.Состав
	             |				ИЛИ ИщемПроизв.ИмяВБазе <> НоменклатураПоставщик.ххх_НаименованиеВБазе
	             |				ИЛИ ИщемПроизв.нетто <> НоменклатураПоставщик.ххх_Нетто
	             |				ИЛИ ИщемПроизв.брутто <> НоменклатураПоставщик.ххх_Брутто
	             |				ИЛИ ИщемПроизв.Вид = &Ветис
	             |					И НоменклатураПоставщик.Ссылка.ПодконтрольнаяПродукцияВЕТИС = ЛОЖЬ)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ИщемПроизв.Имя,
	             |	ИщемПроизв.Ид,
	             |	ИщемПроизв.родитель,
	             |	ИщемПроизв.крепость,
	             |	ИщемПроизв.объем,
	             |	ИщемПроизв.Единица,
	             |	ИщемПроизв.страна,
	             |	ИщемПроизв.пост,
	             |	ИщемПроизв.произв,
	             |	ИщемПроизв.ндс,
	             |	ИщемПроизв.Вид,
	             |	ИщемПроизв.ИмяКасса,
	             |	ИщемПроизв.ИмяЭтикетка,
	             |	ИщемПроизв.ИмяЦенник,
	             |	NULL,
	             |	ИщемПроизв.Состав,
	             |	ИщемПроизв.ИдБаза1,
	             |	ИщемПроизв.ИдБаза2,
	             |	ИщемПроизв.ИдБаза3,
	             |	ИщемПроизв.ИмяВБазе,
	             |	ИщемПроизв.нетто,
	             |	ИщемПроизв.брутто
	             |ИЗ
	             |	ИщемПроизв КАК ИщемПроизв
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО ИщемПроизв.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |ГДЕ
	             |	Номенклатура.Ссылка ЕСТЬ NULL";

	Выборка=Запрос.Выполнить().Выбрать();
	й=1;
	
	набНоменклатураДопРеквизитОсновнойПоставщик=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	набНоменклатураДопРеквизитОсновнойПоставщик.Отбор.свойство.установить("НоменклатураДопРеквизитОсновнойПоставщик");
	набНоменклатураДопРеквизитОсновнойПоставщик.Прочитать();
	НоменклатураДопРеквизитОсновнойПоставщик=набНоменклатураДопРеквизитОсновнойПоставщик[0].ЗначениеВБазе;
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.номенклатура)=тип("СправочникСсылка.Номенклатура") Тогда
			номенклатура=Выборка.номенклатура.получитьОбъект();
		иначе
			номенклатура=Справочники.номенклатура.СоздатьЭлемент();
			номенклатура.ххх_ИдЦентр=Выборка.Номенклатура;
		КонецЕсли;
		
		номенклатура.Наименование=выборка.имя;
		номенклатура.родитель=выборка.родитель;
		номенклатура.ЕдиницаИзмерения=выборка.единица;
		номенклатура.СтавкаНДС=выборка.ндс;
		номенклатура.ххх_НаименованиеВБазе=выборка.ИмяВБазе;
		номенклатура.Крепость=выборка.крепость;
		номенклатура.ОбъемДАЛ=выборка.объем;
		номенклатура.Производитель=выборка.произв;
		Если не ЗначениеЗаполнено(номенклатура.ххх_Поставщик)  Тогда
			номенклатура.ххх_Поставщик=Выборка.пост;
		КонецЕсли;
		Номенклатура.СтранаПроисхождения=выборка.страна;
		Номенклатура.ВидНоменклатуры=Выборка.вид;
		Номенклатура.ххх_НаименованиеКасса = выборка.ИмяКасса;
		Номенклатура.ххх_НаименованиеЦенник = выборка.ИмяЦенник;
		Номенклатура.ххх_НаименованиеЭтикетка = выборка.ИмяЭтикетка;
		номенклатура.НаименованиеПолное = выборка.имя;
		номенклатура.ххх_Нетто=Выборка.Нетто;
		номенклатура.ххх_Брутто=Выборка.Брутто;
		Номенклатура.Описание=Выборка.Состав;
		номенклатура.ПометкаУдаления=Ложь;
		Если Выборка.единица=ЕдИзмКг тогда
			Номенклатура.Весовой=истина;
		Иначе
			Номенклатура.Весовой=ложь;
		КонецЕсли;
		
		Если Выборка.вид=Алкашка Тогда
			номенклатура.ПроизводительИмпортерАлкогольнойПродукции=номенклатура.Производитель;
			номенклатура.АлкогольнаяПродукция=Истина;
		Иначе
			номенклатура.АлкогольнаяПродукция=Ложь;
		КонецЕсли;
		
		Если Выборка.вид=Справочники.ххх_Справочник.ВидНоменклатурыВетис.Значение Тогда
			номенклатура.ПодконтрольнаяПродукцияВЕТИС=Истина;
		Иначе
			номенклатура.ПодконтрольнаяПродукцияВЕТИС=ложь;
		КонецЕсли;
		
		номенклатура.записать();		
		
		й=й+1;
	КонецЦикла; //	

	выборка="";
	
	  Если не магазин.ххх_ИнтернетМагазин Тогда
		УстановитьПривилегированныйРежим(Истина);	
		ЗагружаемыйФайл = Новый ТекстовыйДокумент;
		ЗагружаемыйФайл.Прочитать(Путь+"sroki_"+НаименованиеДляФайлов+".txt");	
		ТчСрок=Новый таблицаЗначений;
		ТчСрок.Колонки.Добавить("Срок",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		ТчСрок.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
				
		итератор=2;
		КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
		Пока итератор<КолвоСтрок+1 Цикл
			МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
			стрТч=ТчСрок.Добавить();
			стрТч.срок=СокрЛп(МассивКол[2]);
			стрТч.Ид=СокрЛп(МассивКол[1]);
			итератор=итератор+1;
		КонецЦикла;
		
		//запрос=Новый запрос;
		//Запрос.УстановитьПараметр("ТчСрок",ТчСрок);
		//Запрос.УстановитьПараметр("Тч",Тч);
		//Запрос.УстановитьПараметр("СвойствоСрок",Справочники.ххх_Справочник.НоменклатураДопСвойствоСрокГодности.Значение);
		//Запрос.УстановитьПараметр("СвойствоБаза1",справочники.ххх_Справочник.id_b1.Значение);
		//Запрос.УстановитьПараметр("СвойствоБаза2",справочники.ххх_Справочник.id_b2.Значение);
		//Запрос.УстановитьПараметр("СвойствоБаза3",справочники.ххх_Справочник.id_b3.Значение);
		//Запрос.Текст="ВЫБРАТЬ
		//             |	ТчСрок.Ид КАК Ид,
		//             |	ТчСрок.Срок КАК Значение,
		//             |	&СвойствоСрок КАК СвойствоСрок
		//             |ПОМЕСТИТЬ тч
		//             |ИЗ
		//             |	&ТчСрок КАК ТчСрок
		//             |
		//             |ИНДЕКСИРОВАТЬ ПО
		//             |	Ид
		//             |;
		//             |
		//             |////////////////////////////////////////////////////////////////////////////////
		//             |ВЫБРАТЬ
		//             |	Тч.ид КАК ид,
		//             |	Тч.ИдБаза1 КАК ИдБаза1,
		//             |	Тч.ИдБаза2 КАК ИдБаза2,
		//             |	Тч.ИдБаза3 КАК ИдБаза3
		//             |ПОМЕСТИТЬ ТчБаза
		//             |ИЗ
		//             |	&Тч КАК Тч
		//             |
		//             |ИНДЕКСИРОВАТЬ ПО
		//             |	ид
		//             |;
		//             |
		//             |////////////////////////////////////////////////////////////////////////////////
		//             |ВЫБРАТЬ
		//             |	ТчБаза.ид КАК ид,
		//             |	ТчБаза.ИдБаза1 КАК Значение,
		//             |	&СвойствоБаза1 КАК Свойство
		//             |ПОМЕСТИТЬ СвойстваПеревязкиНомкиСБазой
		//             |ИЗ
		//             |	ТчБаза КАК ТчБаза
		//             |
		//             |ОБЪЕДИНИТЬ ВСЕ
		//             |
		//             |ВЫБРАТЬ
		//             |	ТчБаза.ид,
		//             |	ТчБаза.ИдБаза2,
		//             |	&СвойствоБаза2
		//             |ИЗ
		//             |	ТчБаза КАК ТчБаза
		//             |
		//             |ОБЪЕДИНИТЬ ВСЕ
		//             |
		//             |ВЫБРАТЬ
		//             |	ТчБаза.ид,
		//             |	ТчБаза.ИдБаза3,
		//             |	&СвойствоБаза3
		//             |ИЗ
		//             |	ТчБаза КАК ТчБаза
		//             |
		//             |ИНДЕКСИРОВАТЬ ПО
		//             |	ид
		//             |;
		//             |
		//             |////////////////////////////////////////////////////////////////////////////////
		//             |ВЫБРАТЬ
		//             |	СвойстваПеревязкиНомкиСБазой.ид КАК ид,
		//             |	СвойстваПеревязкиНомкиСБазой.Значение КАК Значение,
		//             |	СвойстваПеревязкиНомкиСБазой.Свойство КАК Свойство
		//             |ПОМЕСТИТЬ СрокиИдБаза
		//             |ИЗ
		//             |	СвойстваПеревязкиНомкиСБазой КАК СвойстваПеревязкиНомкиСБазой
		//             |
		//             |ОБЪЕДИНИТЬ ВСЕ
		//             |
		//             |ВЫБРАТЬ
		//             |	тч.Ид,
		//             |	тч.Значение,
		//             |	тч.СвойствоСрок
		//             |ИЗ
		//             |	тч КАК тч
		//             |
		//             |ИНДЕКСИРОВАТЬ ПО
		//             |	ид
		//             |;
		//             |
		//             |////////////////////////////////////////////////////////////////////////////////
		//             |ВЫБРАТЬ
		//             |	Номенклатура.Ссылка КАК Объект,
		//             |	СрокиИдБаза.Значение КАК Значение,
		//             |	СрокиИдБаза.Свойство КАК Свойство
		//             |ИЗ
		//             |	СрокиИдБаза КАК СрокиИдБаза
		//             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		//             |		ПО СрокиИдБаза.ид = Номенклатура.ххх_ИдЦентр
		//             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)";
		//			 
		////Выборка=Запрос.Выполнить().Выбрать();
		//
		//НачатьТранзакцию();
		//СостНАВесах=регистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		//СостНАВесах.Отбор.свойство.установить(Справочники.ххх_Справочник.СостояниеНаВесах.Значение);
		//СостНАВесах.Прочитать();
		//СостНАВесахТЗ=СостНАВесах.Выгрузить();
		//
		////ValMa - 11-03-2019 - запомним отбор по доп свойству
		//ДопСв = Справочники.ххх_Справочник.НоменклатураДопСвойствоВыводитьДатуПроизводства.Значение;
		//ВремяИзг = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		//ВремяИзг.Отбор.Свойство.установить(ДопСв);
		//ВремяИзг.Прочитать();
		//ВремяИзгТЗ = ВремяИзг.Выгрузить();
		////---

		//ДополнительныеСведения=РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		//ДополнительныеСведения.Прочитать();
		//ДополнительныеСведения.Очистить();
		//ДополнительныеСведения.Записать();
		//ДополнительныеСведения.Загрузить(Запрос.Выполнить().Выгрузить());
		//ДополнительныеСведения.Записать();
		//
		////ValMa - вернем данные в РС
		//ВремяИзг.Загрузить(ВремяИзгТЗ);
		//ВремяИзг.Записать();
		////---		
		//
		//СостНАВесах.Загрузить(СостНАВесахТЗ);
		//СостНАВесах.Записать();
		//ЗафиксироватьТранзакцию();
	КонецЕсли;

	//Пока Выборка.Следующий() Цикл
	//	стр=РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	//	стр.Объект=Выборка.Ссылка;
	//	стр.Свойство=НоменклатураДопСвойствоСрокГодности;
	//	стр.Значение=выборка.срок;
	//	стр.Записать(Истина);
	//КонецЦикла;

	//
	//выборка="";

	//	
	//Запрос.Текст="ВЫБРАТЬ
	//             |	тч.ид КАК ид,
	//             |	тч.ИдБаза1 КАК ИдБаза1,
	//             |	тч.ИдБаза2 КАК ИдБаза2,
	//             |	тч.ИдБаза3 КАК ИдБаза3
	//             |ПОМЕСТИТЬ йцу
	//             |ИЗ
	//             |	&тч КАК тч
	//             |
	//             |ИНДЕКСИРОВАТЬ ПО
	//             |	ид
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	йцу.ИдБаза1 КАК ИдБаза1,
	//             |	йцу.ИдБаза2 КАК ИдБаза2,
	//             |	йцу.ИдБаза3 КАК ИдБаза3,
	//             |	Номенклатура.Ссылка КАК Номенклатура
	//             |ИЗ
	//             |	йцу КАК йцу
	//             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	//             |		ПО йцу.ид = Номенклатура.ххх_ИдЦентр";
	//
	// выборка2=Запрос.Выполнить().Выбрать();
	// Пока выборка2.Следующий() Цикл
	//	Запись=РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	//	Запись.Свойство=Справочники.ххх_Справочник.id_b1.Значение; 
	//	Запись.Объект=выборка2.Номенклатура;
	//	Запись.Значение=выборка2.ИдБаза1;
	//	Запись.Записать(истина);
	//	
	//	Запись=РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	//	Запись.Свойство=Справочники.ххх_Справочник.id_b2.Значение;
	//	Запись.Объект=выборка2.Номенклатура;
	//	Запись.Значение=выборка2.ИдБаза2;	
	//	Запись.Записать(истина);
	//	
	//	Запись=РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	//	Запись.Свойство=Справочники.ххх_Справочник.id_b3.Значение;
	//	Запись.Объект=выборка2.Номенклатура;
	//	Запись.Значение=выборка2.ИдБаза3;
	//	Запись.Записать(истина);		 
	// КонецЦикла;
	//

	//ДокВыводаАсорти=Документы.ИзменениеАссортимента.НайтиПоНомеру(магазин.ххх_НомерАсортиВывода).ПолучитьОбъект();
	//ДокВыводаАсорти.Дата="20170815";
	//мас=тч.ВыгрузитьКолонку(1);
	//Запрос.УстановитьПараметр("мас",мас);
	//Запрос.УстановитьПараметр("ПостоянныйАссортимент",перечисления.РолиАссортимента.ПостоянныйАссортимент);
	//Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	//             |	Номенклатура.Ссылка КАК Номенклатура,
	//             |	&ПостоянныйАссортимент КАК РольАссортимента
	//             |ИЗ
	//             |	Справочник.Номенклатура КАК Номенклатура
	//             |ГДЕ
	//             |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	//             |	И НЕ Номенклатура.ххх_ИдЦентр В (&мас)
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	Номенклатура.Ссылка";
	//ДокВыводаАсорти.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	//ДокВыводаАсорти.Записать(РежимЗаписиДокумента.Проведение);
		
	ДокВводаАсорти=Документы.ИзменениеАссортимента.НайтиПоНомеру(магазин.ххх_НомерАсортиВввода).ПолучитьОбъект();
	ДокВводаАсорти.Дата="20170816";
	мас=тч.ВыгрузитьКолонку(1);
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.УстановитьПараметр("ПостоянныйАссортимент",перечисления.РолиАссортимента.ПостоянныйАссортимент);
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Номенклатура,
	             |	&ПостоянныйАссортимент КАК РольАссортимента
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	             |	И Номенклатура.ххх_ИдЦентр В(&мас)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Номенклатура.Ссылка";
	ДокВводаАсорти.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	ДокВводаАсорти.Записать(РежимЗаписиДокумента.Проведение);
		
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	Запрос.УстановитьПараметр("База1",Справочники.ххх_Справочник.id_b1);
	Запрос.УстановитьПараметр("База2",Справочники.ххх_Справочник.id_b2);
	Запрос.УстановитьПараметр("База3",Справочники.ххх_Справочник.id_b3);
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Запрос.Текст="ВЫБРАТЬ
	             |	ТЧ.ид КАК ид,
	             |	ТЧ.шт1 КАК шт1,
	             |	ТЧ.кор1 КАК кор1,
	             |	ТЧ.уп1 КАК уп1,
	             |	ТЧ.уп2 КАК уп2,
	             |	ТЧ.уп3 КАК уп3,
	             |	ТЧ.кор2 КАК кор2,
	             |	ТЧ.кор3 КАК кор3,
	             |	ТЧ.шт2 КАК шт2,
	             |	ТЧ.шт3 КАК шт3
	             |ПОМЕСТИТЬ ТчПарам
	             |ИЗ
	             |	&ТЧ КАК ТЧ
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТчПарам.ид КАК Ид,
	             |	ТчПарам.кор1 КАК Коробки,
	             |	ТчПарам.шт1 КАК Штуки,
	             |	ТчПарам.уп1 КАК Упаковки,
	             |	&База1 КАК База
	             |ПОМЕСТИТЬ Тч
	             |ИЗ
	             |	ТчПарам КАК ТчПарам
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ТчПарам.ид,
	             |	ТчПарам.кор2,
	             |	ТчПарам.шт2,
	             |	ТчПарам.уп2,
	             |	&База2
	             |ИЗ
	             |	ТчПарам КАК ТчПарам
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ТчПарам.ид,
	             |	ТчПарам.кор3,
	             |	ТчПарам.шт3,
	             |	ТчПарам.уп3,
	             |	&База3
	             |ИЗ
	             |	ТчПарам КАК ТчПарам
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Номенклатура,
	             |	Тч.Коробки КАК Коробки,
	             |	Тч.Штуки КАК Штуки,
	             |	Тч.Упаковки КАК Упаковки,
	             |	&Период КАК Период,
	             |	Тч.База КАК База
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Тч КАК Тч
	             |		ПО Номенклатура.ххх_ИдЦентр = Тч.Ид
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Тч.База,
	             |	Тч.Упаковки,
	             |	Тч.Коробки,
	             |	Тч.Штуки,
	             |	Номенклатура.Ссылка
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Номенклатура,
	             |	База";
					
	наб=РегистрыСведений.ххх_ОстаткиВБазах.СоздатьНаборЗаписей();
	наб.Прочитать();
	наб.Очистить();
	наб.Записать();
	наб.Загрузить(Запрос.Выполнить().Выгрузить());    //493 строка
	Наб.Записать();
	
	//
	//Заполняю наценки.
	Если не Магазин.ххх_ИнтернетМагазин Тогда
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("тч",ТчВид);
		дата=ТекущаяДата();
		Запрос.УстановитьПараметр("Период",дата);
		Запрос.Текст="ВЫБРАТЬ
		             |	Тч.Ид КАК Ид,
		             |	Тч.ФиксЦенаНаценка КАК ФиксЦенаНаценка
		             |ПОМЕСТИТЬ йцу
		             |ИЗ
		             |	&Тч КАК Тч
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	Ид
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	Номенклатура.Ссылка КАК Номенклатура,
		             |	йцу.ФиксЦенаНаценка КАК Наценка_ФиксЦена,
		             |	&Период КАК Период
		             |ИЗ
		             |	Справочник.Номенклатура КАК Номенклатура
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ йцу КАК йцу
		             |		ПО Номенклатура.ххх_ИдЦентр = йцу.Ид
		             |			И (Номенклатура.ЭтоГруппа = Ложь)";
					 
		//Выборка=Запрос.Выполнить().Выбрать();
		
		//Пока выборка.Следующий() Цикл
		//	Запись=РегистрыСведений.ххх_Наценки.СоздатьМенеджерЗаписи();
		//	ЗаполнитьЗначенияСвойств(Запись,выборка);
		//	Запись.Записать();
		//КонецЦикла;
		наб=РегистрыСведений.ххх_Наценки.СоздатьНаборЗаписей();
		Наб.Отбор.период.установить(дата);
		Наб.Прочитать();
		Наб.Загрузить(Запрос.Выполнить().Выгрузить());
		Наб.Записать();
	КонецЕсли;
	#КонецОбласти
		
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КлючФоновогоЗадания","ххх_ЗагрузкаЧеков");
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.ххх_ИдЦентр КАК ххх_ИдЦентр
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ххх_СообщенияПользователюРегламентныеЗадания.СрезПоследних(, КлючФоновогоЗадания = &КлючФоновогоЗадания) КАК ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних
	             |		ПО (ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних.Измерение1 = Номенклатура.ххх_ИдЦентр)
	             |			И (НЕ Номенклатура.ЭтоГруппа)
	             |ГДЕ
	             |	ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних.Обработан = ЛОЖЬ";
	выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл		
		стр=РегистрыСведений.ххх_СообщенияПользователюРегламентныеЗадания.СоздатьМенеджерЗаписи();
		стр.Период=ТекущаяДата();
		стр.Измерение1=выборка.ххх_ИдЦентр;
		стр.КлючФоновогоЗадания="ххх_ЗагрузкаЧеков";
		стр.Обработан=Истина;
		стр.Записать();		
	КонецЦикла;
		
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	
	еСЛИ НайтиФайлы(Путь+"tovar_internetShop.txt").Количество()<>0 Тогда
		ЗагружаемыйФайл.Прочитать(Путь+"tovar_internetShop.txt");	
		Тч=Новый таблицаЗначений;
		Тч.Колонки.Добавить("НаименованиеИнетШоп",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		
		КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
		итератор=2;

		Пока итератор<КолвоСтрок+1 Цикл
			МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
			стрТч=Тч.Добавить();
			стрТч.Ид=СокрЛп(МассивКол[0]);
			стрТч.НаименованиеИнетШоп=СокрЛп(МассивКол[1]);
		
			итератор=итератор+1;
		КонецЦикла;

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Тч",тч);
		Запрос.Текст="ВЫБРАТЬ
		             |	Тч.ИД КАК ИД,
		             |	Тч.НаименованиеИнетШоп КАК НаименованиеИнетШоп
		             |ПОМЕСТИТЬ йцу
		             |ИЗ
		             |	&Тч КАК Тч
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	ИД
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	Номенклатура.Ссылка КАК Номка,
		             |	йцу.НаименованиеИнетШоп КАК НаименованиеИнетШоп
		             |ИЗ
		             |	йцу КАК йцу
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		             |		ПО йцу.ИД = Номенклатура.ххх_ИдЦентр
		             |			И йцу.НаименованиеИнетШоп <> Номенклатура.ххх_НаименованиеИнтернетМагазина";

		выборка=запрос.Выполнить().Выбрать();
		Пока выборка.Следующий() Цикл
			Номка=Выборка.номка.получитьОбъект();
			номка.ххх_НаименованиеИнтернетМагазина=выборка.НаименованиеИнетШоп;
			номка.записать();
		КонецЦикла;
	КонецЕсли;	
	
	Если ЕстьИМ Тогда	
		
		наб=РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		наб.Отбор.свойство.установить(Справочники.ххх_Справочник.ВыгружатьВИнетМагаз.Значение);
		наб.Прочитать();
		наб.Очистить();
		
		Запрос=новый запрос;
		Запрос.УстановитьПараметр("тч",тчВид);
		Запрос.УстановитьПараметр("ВыгружатьВИнетМагаз",Справочники.ххх_Справочник.ВыгружатьВИнетМагаз.Значение);
		запрос.Текст="ВЫБРАТЬ
		             |	Тч.ид КАК ид,
		             |	Тч.ВыгружатьВИнетМагаз КАК ВыгружатьВИнетМагаз
		             |ПОМЕСТИТЬ йцу
		             |ИЗ
		             |	&Тч КАК Тч
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	ид
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	Номенклатура.Ссылка КАК Объект,
		             |	йцу.ВыгружатьВИнетМагаз КАК Значение,
		             |	&ВыгружатьВИнетМагаз КАК Свойство
		             |ИЗ
		             |	Справочник.Номенклатура КАК Номенклатура
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ йцу КАК йцу
		             |		ПО Номенклатура.ххх_ИдЦентр = йцу.ид
		             |ГДЕ
		             |	НЕ Номенклатура.ЭтоГруппа";
		
		Наб.Загрузить(Запрос.Выполнить().Выгрузить());
		Наб.Записать(Истина);
		//выборка=запрос.Выполнить().Выбрать();
		//Пока выборка.Следующий() Цикл
		//	мен=регистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		//	мен.Объект=выборка.номка;
		//	мен.Значение=выборка.ВыгружатьВИнетМагаз;
		//	мен.Свойство=Справочники.ххх_Справочник.ВыгружатьВИнетМагаз.Значение;
		//	мен.Записать(истина);
		//КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Загрузитьноменклатуру()
	//ОчиситьДопСведения();
	Команда1НаСервере();
	ЗагрузитьНоменклатуруБезГрупп();
	//загрузитьСвойства();//ДопСведения
КонецПроцедуры

Процедура ОчиситьДопСведения()
	УстановитьПривилегированныйРежим(Истина);
	СостНАВесах=регистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	СостНАВесах.Отбор.свойство.установить(Справочники.ххх_Справочник.СостояниеНаВесах.Значение);
	СостНАВесах.Прочитать();
	СостНАВесахТЗ=СостНАВесах.Выгрузить();
	ДополнительныеСведения=регистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДополнительныеСведения.Прочитать();
	ДополнительныеСведения.Очистить();
	ДополнительныеСведения.Записать();
	СостНАВесах.Загрузить(СостНАВесахТЗ);
	СостНАВесах.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтраны()
	ЗагрузитьСтраныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтраныНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"Country_Яблоко.txt");	
	Тч=Новый таблицаЗначений;
	//Тч.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	//Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
			
		Страна=справочники.СтраныМира.НайтиПоКоду(СокрЛп(МассивКол[0]));
		Если ЗначениеЗаполнено(Страна) тогда
			Страна=Страна.ПолучитьОбъект();
			Страна.наименование=СокрЛп(МассивКол[1]);
			страна.записать();
		Иначе
			страна=Справочники.СтраныМира.СоздатьЭлемент();
			страна.код=СокрЛп(МассивКол[0]);
			Страна.наименование=СокрЛп(МассивКол[1]);
			страна.записать();
		КонецЕсли;
		//стрТч=Тч.Добавить();
		//стрТч.Имя=СокрЛп(МассивКол[1]);
		//стрТч.Ид=СокрЛп(МассивКол[0]);
		//стрТч.Родитель=СокрЛп(МассивКол[3]);	
		итератор=итератор+1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроизводителей()
	ЗагрузитьПроизводителейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПроизводителейНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"proizv_Пикник.txt");	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("инн",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Кпп",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИмяЛонг",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));

	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Тч.Добавить();
		стрТч.Имя=СокрЛп(МассивКол[1]);
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.инн=СокрЛп(МассивКол[2]);
		стрТч.кпп=СокрЛп(МассивКол[3]);
		стрТч.ИмяЛонг=СокрЛп(МассивКол[4]);
		итератор=итератор+1;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("proizv_Пикник");
	наб.Отбор.свойство.установить("ПРОИЗВОДИТЕЛИ");
	наб.Прочитать();
	ГруппаПроизв=наб[0].ЗначениеВБазе;
	
	Запрос.УстановитьПараметр("произв",ГруппаПроизв);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Имя,
	             |	Тч.инн,
	             |	Тч.Ид,
	             |	Тч.кпп,
	             |	Тч.имяЛонг
	             |ПОМЕСТИТЬ Тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Тч.Имя,
	             |	Тч.инн,
	             |	Тч.Ид КАК Контрагент,
	             |	Тч.кпп,
	             |	Тч.имяЛонг
	             |ИЗ
	             |	Тч КАК Тч
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	             |		ПО Тч.Ид = Контрагенты.ххх_ИдЦентр
	             |			И (Контрагенты.Родитель = &произв)
	             |ГДЕ
	             |	Контрагенты.Ссылка ЕСТЬ NULL 
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	Тч.Имя,
	             |	Тч.инн,
	             |	Контрагенты.Ссылка,
	             |	Тч.кпп,
	             |	Тч.имяЛонг
	             |ИЗ
	             |	Тч КАК Тч
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	             |		ПО Тч.Ид = Контрагенты.ххх_ИдЦентр
	             |			И (Контрагенты.Родитель = &произв)
	             |			И (Тч.Имя <> Контрагенты.Наименование
	             |				ИЛИ Тч.инн <> Контрагенты.ИНН
	             |				ИЛИ Тч.кпп <> Контрагенты.КПП
	             |				ИЛИ НЕ Тч.имяЛонг ПОДОБНО Контрагенты.НаименованиеПолное)";

	Выборка=Запрос.Выполнить().Выбрать();
	й=1;
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контрагент)=тип("СправочникСсылка.Контрагенты") Тогда
			Контрагент=Выборка.Контрагент.получитьОбъект();
		иначе
			Контрагент=Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.ххх_ИдЦентр=Выборка.Контрагент;
		КонецЕсли;
		Контрагент.Наименование=выборка.имя;
		Контрагент.инн=выборка.инн;
		Контрагент.кпп=выборка.кпп;	
//		Контрагент.ххх_ИдЦентр=Выборка.Контрагент;
		Контрагент.НаименованиеПолное=выборка.имяЛонг;
		Контрагент.родитель=ГруппаПроизв;
		Если стрДлина(выборка.инн)=10 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо;
			Если стрДлина(выборка.кпп)<>9 Тогда
				Сообщить("КПП не 9 символов, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		ИначеЕсли стрДлина(выборка.инн)=12 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо;
			Если стрДлина(выборка.кпп)<>0 Тогда
				Сообщить("У физ лиц не бывает КПП, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		ИначеЕсли стрДлина(выборка.инн)=0 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
			Если стрДлина(выборка.кпп)<>0 Тогда
				Сообщить("У иностранных лиц не бывает КПП, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		Иначе
			Сообщить("Не верная длина ИНН, ид="+Контрагент.ххх_ИдЦентр);
		КонецЕсли;
		Контрагент.записать();
		й=й+1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоставщиков()
	ЗагрузитьПоставщиковНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоставщиковНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"post_Пикник.txt");	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("инн",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Кпп",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИмяЛонг",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Адресс",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Дир",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Бух",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Серия",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("АдрессСклад",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("От",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Тч.Колонки.Добавить("До",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Тч.Колонки.Добавить("НовыйФорматВозвратов",Новый ОписаниеТипов("Булево"));	
	Тч.Колонки.Добавить("ПлательщикНДС",Новый ОписаниеТипов("Булево"));

	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Тч.Добавить();
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.Имя=СокрЛп(МассивКол[1]);
		стрТч.ИмяЛонг=СокрЛп(МассивКол[2]);
		стрТч.адресс=СокрЛп(МассивКол[3]);
		стрТч.АдрессСклад=СокрЛп(МассивКол[4]);
		стрТч.Дир=СокрЛп(МассивКол[6]);
		стрТч.Бух=СокрЛп(МассивКол[7]);
		стрТч.Серия=СокрЛп(МассивКол[8]);
		
		стрТч.ПлательщикНДС=?(СокрЛп(МассивКол[13])="True",истина,ложь);
		//Если СокрЛП(магазин.Код)<>"25" Тогда
			стрТч.НовыйФорматВозвратов=?(СокрЛп(МассивКол[16])="True",истина,ложь);
		//КонецЕсли;
		ИннКпп=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛп(МассивКол[5]),"\");
		стрТч.инн=СокрЛп(ИннКпп[0]);
		стрТч.кпп=СокрЛп(ИннКпп[1]);
		
		От=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛп(МассивКол[9]),".");
		стрТч.от=Дата(СокрЛп(От[2]),СокрЛп(От[1]),СокрЛп(От[0]));
		
		До=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛп(МассивКол[10]),".");
		стрТч.До=Дата(СокрЛп(До[2]),СокрЛп(До[1]),СокрЛп(До[0]));
		
		итератор=итератор+1;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("ПОСТАВЩИКИ");
	наб.Прочитать();
	ГруппаПостав=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("АдресСклада");
	наб.Прочитать();
	ВидКонтИнфСклад=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("Бухгалтер");
	наб.Прочитать();
	ВидКонтИнфБух=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("директор");
	наб.Прочитать();
	ВидКонтИнфДир=наб[0].ЗначениеВБазе;
	
	Запрос.УстановитьПараметр("Постав",ГруппаПостав);
	Запрос.УстановитьПараметр("ВидКонтИнфСклад",ВидКонтИнфСклад);
	Запрос.УстановитьПараметр("ВидКонтИнфБух",ВидКонтИнфБух);
	Запрос.УстановитьПараметр("ВидКонтИнфДир",ВидКонтИнфДир);
	Запрос.УстановитьПараметр("ВидКонтИнфЮрАдр",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ВидКонтИнфФактАдр",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.инн КАК инн,
	             |	Тч.Ид КАК Ид,
	             |	Тч.адресс КАК адресс,
	             |	Тч.кпп КАК кпп,
	             |	Тч.АдрессСклад КАК АдрессСклад,
	             |	Тч.Дир КАК Дир,
	             |	Тч.Бух КАК Бух,
	             |	Тч.Серия КАК Серия,
	             |	Тч.От КАК От,
	             |	Тч.имяЛонг КАК имяЛонг,
	             |	Тч.До КАК До,
	             |	Тч.ПлательщикНДС КАК ПлательщикНДС,
	             |	Тч.НовыйФорматВозвратов КАК НовыйФорматВозвратов
	             |ПОМЕСТИТЬ тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаАдрессСклада,
	             |	ВложенныйЗапрос.АдрессСклада КАК АдрессСклада,
	             |	ВложенныйЗапрос.НомерСтрокиАдрессСклада КАК НомерСтрокиАдрессСклада
	             |ПОМЕСТИТЬ АдрессаСкладов
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК АдрессСклада,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиАдрессСклада
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфСклад) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |			И (Контрагенты.Ссылка В ИЕРАРХИИ (&Постав))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаЮрАдресс,
	             |	ВложенныйЗапрос.ЮрАдресс КАК ЮрАдресс,
	             |	ВложенныйЗапрос.НомерСтрокиЮрАдресс КАК НомерСтрокиЮрАдресс
	             |ПОМЕСТИТЬ ЮрАдресса
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК ЮрАдресс,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиЮрАдресс
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфЮрАдр) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаЮрАдресс,
	             |	ВложенныйЗапрос.ФактАдресс КАК ФактАдресс,
	             |	ВложенныйЗапрос.НомерСтрокиФактАдресс КАК НомерСтрокиФактАдресс
	             |ПОМЕСТИТЬ ФактАдресса
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК ФактАдресс,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиФактАдресс
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфФактАдр) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаБух,
	             |	ВложенныйЗапрос.Бух КАК Бух,
	             |	ВложенныйЗапрос.НомерСтрокиБух КАК НомерСтрокиБух
	             |ПОМЕСТИТЬ Бухи
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК Бух,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиБух
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфБух) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаДир,
	             |	ВложенныйЗапрос.Дир КАК Дир,
	             |	ВложенныйЗапрос.НомерСтрокиДир КАК НомерСтрокиДир
	             |ПОМЕСТИТЬ Диры
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК Дир,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиДир
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфДир) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаЛицензия,
	             |	ЛицензииПоставщиковАлкогольнойПродукции.Ссылка КАК Лицензия,
	             |	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК ДатаНачала,
	             |	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК ДатаОкончания
	             |ПОМЕСТИТЬ Лицензии
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	             |		ПО (ЛицензииПоставщиковАлкогольнойПродукции.Владелец = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК Ссылка,
	             |	Контрагенты.ххх_ИдЦентр КАК ххх_ИдЦентр
	             |ПОМЕСТИТЬ Поставщики
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |ГДЕ
	             |	Контрагенты.Ссылка В ИЕРАРХИИ(&Постав)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ххх_ИдЦентр
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АдрессаСкладов.СсылкаАдрессСклада КАК Ссылка,
	             |	АдрессаСкладов.СсылкаАдрессСклада.Родитель КАК Родитель,
	             |	АдрессаСкладов.СсылкаАдрессСклада.ИНН КАК ИНН,
	             |	АдрессаСкладов.СсылкаАдрессСклада.КПП КАК КПП,
	             |	АдрессаСкладов.СсылкаАдрессСклада.НаименованиеПолное КАК НаименованиеПолное,
	             |	АдрессаСкладов.СсылкаАдрессСклада.Наименование КАК Наименование,
	             |	АдрессаСкладов.СсылкаАдрессСклада.ххх_ИдЦентр КАК ххх_ИдЦентр,
	             |	АдрессаСкладов.АдрессСклада КАК АдрессСклада,
	             |	Бухи.Бух КАК Бух,
	             |	Диры.Дир КАК Дир,
	             |	Лицензии.Лицензия КАК Лицензия,
	             |	ЮрАдресса.ЮрАдресс КАК ЮрАдресс,
	             |	Лицензии.ДатаНачала КАК ДатаНачала,
	             |	Лицензии.ДатаОкончания КАК ДатаОкончания,
	             |	АдрессаСкладов.НомерСтрокиАдрессСклада КАК НомерСтрокиАдрессСклада,
	             |	Бухи.НомерСтрокиБух КАК НомерСтрокиБух,
	             |	Диры.НомерСтрокиДир КАК НомерСтрокиДир,
	             |	ЮрАдресса.НомерСтрокиЮрАдресс КАК НомерСтрокиЮрАдресс,
	             |	ФактАдресса.НомерСтрокиФактАдресс КАК НомерСтрокиФактАдресс,
	             |	ФактАдресса.ФактАдресс КАК ФактАдресс
	             |ПОМЕСТИТЬ Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир
	             |ИЗ
	             |	АдрессаСкладов КАК АдрессаСкладов
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЮрАдресса КАК ЮрАдресса
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = ЮрАдресса.СсылкаЮрАдресс
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Диры КАК Диры
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = Диры.СсылкаДир
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Лицензии КАК Лицензии
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = Лицензии.СсылкаЛицензия
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Бухи КАК Бухи
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = Бухи.СсылкаБух
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФактАдресса КАК ФактАдресса
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = ФактАдресса.СсылкаЮрАдресс
	             |ГДЕ
	             |	АдрессаСкладов.СсылкаАдрессСклада.Родитель = &постав
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.инн КАК инн,
	             |	Тч.Ид КАК ххх_ИдЦентр,
	             |	Тч.кпп КАК кпп,
	             |	Тч.имяЛонг КАК имяЛонг,
	             |	Тч.адресс КАК адресс,
	             |	Тч.АдрессСклад КАК АдрессСклад,
	             |	Тч.Дир КАК Дир,
	             |	Тч.Бух КАК Бух,
	             |	Тч.Серия КАК Серия,
	             |	Тч.От КАК От,
	             |	Тч.До КАК До,
	             |	ЕСТЬNULL(Поставщики.Ссылка, 0) КАК Контрагент,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиЮрАдресс КАК НомерСтрокиЮрАдрес,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиДир КАК НомерСтрокиДир,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиБух КАК НомерСтрокиБух,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиАдрессСклада КАК НомерСтрокиАдрессСклада,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Лицензия КАК Лицензия,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаНачала КАК ДатаНачала,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаОкончания КАК ДатаОкончания,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиФактАдресс КАК НомерСтрокиФактАдресс,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ФактАдресс КАК ФактАдресс,
	             |	Тч.ПлательщикНДС КАК ПлательщикНДС,
	             |	Тч.НовыйФорматВозвратов КАК НовыйФорматВозвратов
	             |ИЗ
	             |	тч КАК Тч
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Поставщики КАК Поставщики
	             |		ПО Тч.Ид = Поставщики.ххх_ИдЦентр
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир КАК Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир
	             |		ПО Тч.Ид = Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ххх_ИдЦентр";
				 //|			И (Тч.Имя <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Наименование
				 //|				ИЛИ Тч.инн <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ИНН
				 //|				ИЛИ Тч.кпп <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.КПП
				 //|				ИЛИ НЕ Тч.имяЛонг ПОДОБНО Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НаименованиеПолное
				 //|				ИЛИ Тч.АдрессСклад <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.АдрессСклада
				 //|				ИЛИ Тч.Дир <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Дир
				 //|				ИЛИ Тч.Бух <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Бух
				 //|				ИЛИ Тч.Серия <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Серия
				 //|				ИЛИ Тч.От <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаНачала
				 //|				ИЛИ Тч.До <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаОкончания)";

	Выборка=Запрос.Выполнить().Выбрать();
	//пакет=запрос.ВыполнитьПакет();
	й=1;
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контрагент)=тип("СправочникСсылка.Контрагенты") Тогда
			Контрагент=Выборка.Контрагент.получитьОбъект();
			Если ЗначениеЗаполнено(Выборка.Лицензия) Тогда
				Лицензия=Выборка.Лицензия.получитьОбъект();
			иначеесли ЗначениеЗаполнено(выборка.серия) тогда
				Лицензия=Справочники.ЛицензииПоставщиковАлкогольнойПродукции.СоздатьЭлемент();
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиЮрАдрес) Тогда
				ЮрАдрес=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиЮрАдрес-1];
				ЮрАдрес.Представление=выборка.адресс;
				ЮрАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.адресс,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				ЮрАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
			иначеесли ЗначениеЗаполнено(выборка.адресс) тогда
				ЮрАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ЮрАдрес.вид=справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЮрАдрес.Представление=выборка.адресс;	
				ЮрАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.адресс,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				ЮрАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиФактАдресс) Тогда
				ФактАдрес=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиФактАдресс-1];
				ФактАдрес.Представление=выборка.АдрессСклад;
				ФактАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				ФактАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
			иначеесли ЗначениеЗаполнено(выборка.адресс) тогда
				ФактАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ФактАдрес.вид=справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ФактАдрес.Представление=выборка.АдрессСклад;
				ФактАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				ФактАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.НомерСтрокиДир) Тогда
				Дир=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиДир-1];
			иначеесли ЗначениеЗаполнено(выборка.дир) тогда
				Дир=Контрагент.КонтактнаяИнформация.добавить();
				Дир.вид=ВидКонтИнфДир;
				Дир.Представление=выборка.дир;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиБух) Тогда
				Бух=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиБух-1];
			иначеесли ЗначениеЗаполнено(выборка.бух) тогда
				Бух=Контрагент.КонтактнаяИнформация.добавить();
				Бух.вид=ВидКонтИнфБух;
				Бух.Представление=выборка.бух;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиАдрессСклада) Тогда
				АдрессСклада=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиАдрессСклада-1];
				АдрессСклада.Представление=выборка.АдрессСклад;
				АдрессСклада.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдрессСклада.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);

			иначеесли ЗначениеЗаполнено(выборка.АдрессСклад) тогда
				АдрессСклада=Контрагент.КонтактнаяИнформация.добавить();
				АдрессСклада.вид=ВидКонтИнфСклад;
				АдрессСклада.Представление=выборка.АдрессСклад;
				АдрессСклада.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				АдрессСклада.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
			КонецЕсли;
		иначе
			Контрагент=Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.ххх_ИдЦентр=Выборка.ххх_ИдЦентр;
			если ЗначениеЗаполнено(выборка.серия) тогда
				Лицензия=Справочники.ЛицензииПоставщиковАлкогольнойПродукции.СоздатьЭлемент();
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.адресс) тогда
				ЮрАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ЮрАдрес.вид=справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЮрАдрес.Представление=выборка.адресс;
				
				ФактАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ФактАдрес.вид=справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ФактАдрес.Представление=выборка.АдрессСклад;
				
				ФактАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЮрАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;

				
				ЮрАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.адресс,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				ФактАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
	
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.дир) тогда
				Дир=Контрагент.КонтактнаяИнформация.добавить();
				Дир.вид=ВидКонтИнфДир;
				Дир.Представление=выборка.дир;
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.бух) тогда
				Бух=Контрагент.КонтактнаяИнформация.добавить();
				Бух.вид=ВидКонтИнфБух;
				Бух.Представление=выборка.бух;
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.АдрессСклад) тогда
				АдрессСклада=Контрагент.КонтактнаяИнформация.добавить();
				АдрессСклада.вид=ВидКонтИнфСклад;
				АдрессСклада.Представление=выборка.АдрессСклад;
				АдрессСклада.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдрессСклада.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
			КонецЕсли;
		КонецЕсли;
		Контрагент.Наименование=выборка.имя;
		Контрагент.инн=выборка.инн;
		Контрагент.кпп=?(выборка.кпп="0","",выборка.кпп);	
		Контрагент.НаименованиеПолное=выборка.имяЛонг;
		
		Контрагент.ххх_ПлательщикНДС=выборка.ПлательщикНДС;
		
		Контрагент.родитель=ГруппаПостав;
		Если стрДлина(выборка.инн)=10 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо;
			Если стрДлина(выборка.кпп)<>9 Тогда
				Сообщить("КПП не 9 символов, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		ИначеЕсли стрДлина(выборка.инн)=12 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо;
			Если стрДлина(выборка.кпп)<>0 Тогда
				Сообщить("У физ лиц не бывает КПП, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		ИначеЕсли стрДлина(выборка.инн)=0 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
			Если стрДлина(выборка.кпп)<>0 Тогда
				Сообщить("У иностранных лиц не бывает КПП, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		Иначе
			Сообщить("Не верная длина ИНН, ид="+Контрагент.ххх_ИдЦентр);
		КонецЕсли;
		Контрагент.ххх_Поставщик=Истина;
		

		Контрагент.ххх_НовыйФорматВозвратов=выборка.НовыйФорматВозвратов;
		//УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Контрагент.ПолучитьФорму("ФормаЭлемента"),Объект);
		
		
		
		Контрагент.записать();
		
		
		Отбор = Новый Структура("Контрагент", Контрагент.Ссылка);
		ДатыНовыхВозвратов = РегистрыСведений.ххх_ДатыНовыхФорматовВозвратов.СрезПоследних(ТекущаяДата(), Отбор);
		
		Если ДатыНовыхВозвратов.Количество()=0 или ДатыНовыхВозвратов[0].Введено<>выборка.НовыйФорматВозвратов Тогда
			
			мен=РегистрыСведений.ххх_ДатыНовыхФорматовВозвратов.создатьМенеджерЗаписи();
			
			мен.Контрагент=Контрагент.Ссылка;
			мен.Введено=выборка.НовыйФорматВозвратов;
			мен.Период=ТекущаяДата();
			мен.записать();
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(выборка.серия) тогда
			Лицензия.Наименование=выборка.серия;
			Лицензия.Владелец=контрагент.ссылка;
			Лицензия.ДатаНачала=выборка.от;
			Лицензия.ДатаОкончания=выборка.до;
			лицензия.Записать();
		КонецЕсли;
		й=й+1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОграничениеСкидки()
	ЗагрузитьОграничениеСкидкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОграничениеСкидкиНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"yellow_Пикник.txt");	
	мас=Новый Массив;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	Пока итератор<КолвоСтрок+1 Цикл
		мас.добавить(СокрЛп(ЗагружаемыйФайл.ПолучитьСтроку(итератор)));
		итератор=итератор+1;
	КонецЦикла;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("yellow_Пикник");
	наб.Отбор.свойство.установить("Сегмент");
	наб.Прочитать();
	Сегмент=наб[0].ЗначениеВБазе;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Запрос.Текст="ВЫБРАТЬ
	             |	ВЫБОР
	             |		КОГДА Номенклатура.ххх_ИдЦентр В (&мас)
	             |			ТОГДА ""Красный""
	             |		ИНАЧЕ ""Белый""
	             |	КОНЕЦ КАК ЦветЦенника,
	             |	&Период КАК Период,
	             |	Номенклатура.Ссылка КАК Номенклатура
	             |ПОМЕСТИТЬ НовыеКрасныеБелые
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НовыеКрасныеИстория.Номенклатура КАК Номенклатура,
	             |	НовыеКрасныеБелые.Период КАК Период,
	             |	НовыеКрасныеБелые.ЦветЦенника КАК ЦветЦенника
	             |ИЗ
	             |	РегистрСведений.ххх_ИстиорияЦветаЦенника.СрезПоследних КАК НовыеКрасныеИстория
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НовыеКрасныеБелые КАК НовыеКрасныеБелые
	             |		ПО НовыеКрасныеИстория.Номенклатура = НовыеКрасныеБелые.Номенклатура
	             |			И НовыеКрасныеИстория.ЦветЦенника <> НовыеКрасныеБелые.ЦветЦенника";


	
	
	выборка=Запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
		
		мен=РегистрыСведений.ххх_ИстиорияЦветаЦенника.СоздатьМенеджерЗаписи();
		мен.Номенклатура=выборка.Номенклатура;
		мен.Период=выборка.Период;
		мен.ЦветЦенника=выборка.ЦветЦенника;
		//мен.прочитать();
		//Если не мен.выбран() Тогда
		мен.Записать();
		//КонецЕсли;
		//
		//
	КонецЦикла;
	
		
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.УстановитьПараметр("Сегмент",Сегмент);
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.Ссылка как Номенклатура,
	             |	&Сегмент
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.ххх_ИдЦентр В(&мас)
	             |	И Номенклатура.ЭтоГруппа = ЛОЖЬ";

	Наб=РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
	Наб.Отбор.сегмент.установить(сегмент);
	Наб.Прочитать();
	Наб.Очистить();
	Наб.Записать();
	Наб.Загрузить(Запрос.Выполнить().Выгрузить());
	Наб.Записать();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСвойстваНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"sroki_"+НаименованиеДляФайлов+".txt");	
	ТчСрок=Новый таблицаЗначений;
	ТчСрок.Колонки.Добавить("Срок",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ТчСрок.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=ТчСрок.Добавить();
		стрТч.срок=СокрЛп(МассивКол[2]);
		стрТч.Ид=СокрЛп(МассивКол[1]);
		итератор=итератор+1;
	КонецЦикла;
	
	запрос=Новый запрос;
	Запрос.УстановитьПараметр("тч",ТчСрок);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Ид КАК Ид,
	             |	Тч.Срок КАК Срок
	             |ПОМЕСТИТЬ тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Ссылка,
	             |	тч.Срок КАК Срок
	             |ИЗ
	             |	тч КАК тч
	             |		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО тч.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)";
				 
	Выборка=Запрос.Выполнить().Выбрать();
	
	НоменклатураДопСвойствоСрокГодности=Справочники.ххх_Справочник.НоменклатураДопСвойствоСрокГодности.Значение;
	//
	//ДополнительныеСведения=РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	//ДополнительныеСведения.Отбор.свойство.установить(НоменклатураДопСвойствоСрокГодности);
	//ДополнительныеСведения.Прочитать();
	Пока Выборка.Следующий() Цикл
		стр=РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		стр.Объект=Выборка.Ссылка;
		стр.Свойство=НоменклатураДопСвойствоСрокГодности;
		стр.Значение=выборка.срок;
		стр.Записать(Истина);
	КонецЦикла;
	////#
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"ItemProperty.txt");	
	ItemProperty=Новый таблицаЗначений;
	ItemProperty.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ItemProperty.Колонки.Добавить("ИдПроп",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
			
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=ItemProperty.Добавить();
		стрТч.Имя=СокрЛп(МассивКол[1]);
		стрТч.ИдПроп=СокрЛп(МассивКол[0]);
		итератор=итератор+1;
	КонецЦикла;

	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"ItemPropertyValue.txt");	
	ItemPropertyValue=Новый таблицаЗначений;
	ItemPropertyValue.Колонки.Добавить("ПропЗнач1",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ItemPropertyValue.Колонки.Добавить("ПропЗнач2",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ItemPropertyValue.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ItemPropertyValue.Колонки.Добавить("ПропИд",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=ItemPropertyValue.Добавить();
		стрТч.ПропЗнач1=СокрЛп(МассивКол[2]);
		стрТч.ПропЗнач2=СокрЛп(МассивКол[3]);
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.ПропИд=СокрЛп(МассивКол[1]);
		итератор=итератор+1;
	КонецЦикла;

	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"PropertyValue.txt");	
	PropertyValue=Новый таблицаЗначений;
	PropertyValue.Колонки.Добавить("Знач",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	PropertyValue.Колонки.Добавить("ИдПроп",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	PropertyValue.Колонки.Добавить("ИдПропЗнач",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));

	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=PropertyValue.Добавить();
		стрТч.ИдПроп=СокрЛп(МассивКол[1]);
		стрТч.Знач=СокрЛп(МассивКол[2]);
		стрТч.ИдПропЗнач=СокрЛп(МассивКол[0]);
		итератор=итератор+1;
	КонецЦикла;
	
	НаборСвойстДопСведРеквОбщ=справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие.Ссылка;
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("PropertyValue",PropertyValue);
	Запрос.УстановитьПараметр("ItemPropertyValue",ItemPropertyValue);
	Запрос.УстановитьПараметр("ItemProperty",ItemProperty);
	Запрос.УстановитьПараметр("НаборСвойстДопСведРеквОбщ",НаборСвойстДопСведРеквОбщ);
	Запрос.Текст="ВЫБРАТЬ
	             |	PropertyValue.ИдПроп КАК ИдПроп,
	             |	PropertyValue.ИдПропЗнач,
	             |	PropertyValue.Знач
	             |ПОМЕСТИТЬ PropertyValue
	             |ИЗ
	             |	&PropertyValue КАК PropertyValue
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИдПроп
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ItemProperty.Имя,
	             |	ItemProperty.ИдПроп КАК ИдПроп
	             |ПОМЕСТИТЬ ItemProperty
	             |ИЗ
	             |	&ItemProperty КАК ItemProperty
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИдПроп
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ItemPropertyValue.Ид КАК Ид,
	             |	ItemPropertyValue.ПропИд КАК ПропИд,
	             |	ItemPropertyValue.ПропЗнач1,
	             |	ItemPropertyValue.ПропЗнач2
	             |ПОМЕСТИТЬ ItemPropertyValue1                                                     
				 |ИЗ
	             |	&ItemPropertyValue КАК ItemPropertyValue
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ПропИд,
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ItemPropertyValue.ПропИд КАК ПропИд,
	             |	ItemPropertyValue.ПропЗнач2,
	             |	ItemPropertyValue.Ид,
	             |	ItemPropertyValue.ПропЗнач1
	             |ПОМЕСТИТЬ ItemPropertyValue2
	             |ИЗ
	             |	&ItemPropertyValue КАК ItemPropertyValue
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ПропИд
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	PropertyValue.ИдПропЗнач КАК ИдПропЗнач,
	             |	ItemProperty.Имя КАК ИмяПроп,
	             |	PropertyValue.Знач,
	             |	ItemProperty.ИдПроп КАК ИдПроп1
	             |ПОМЕСТИТЬ ПропЗнач
	             |ИЗ
	             |	ItemProperty КАК ItemProperty
	             |		ЛЕВОЕ СОЕДИНЕНИЕ PropertyValue КАК PropertyValue
	             |		ПО (PropertyValue.ИдПроп = ItemProperty.ИдПроп)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ItemPropertyValue1.Ид КАК Ид,
	             |	ПропЗнач.ИмяПроп КАК ИмяПроп,
	             |	ПропЗнач.Знач
	             |ПОМЕСТИТЬ Итог
	             |ИЗ
	             |	ПропЗнач КАК ПропЗнач
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ItemPropertyValue1 КАК ItemPropertyValue1
	             |		ПО ПропЗнач.ИдПропЗнач = ItemPropertyValue1.ПропЗнач1
	             |			И ПропЗнач.ИдПроп1 = ItemPropertyValue1.ПропИд
	             |			И (ItemPropertyValue1.ПропЗнач2 = """")
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ItemPropertyValue1.Ид,
	             |	ПропЗнач.Знач,
	             |	ПропЗнач.ИмяПроп
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ItemPropertyValue2.Ид,
	             |	ПропЗнач.ИмяПроп,
	             |	ItemPropertyValue2.ПропЗнач2
	             |ИЗ
	             |	ПропЗнач КАК ПропЗнач
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ItemPropertyValue2 КАК ItemPropertyValue2
	             |		ПО ПропЗнач.ИдПроп1 = ItemPropertyValue2.ПропИд
	             |			И (ItemPropertyValue2.ПропЗнач1 = """")
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ItemPropertyValue2.Ид,
	             |	ItemPropertyValue2.ПропЗнач2,
	             |	ПропЗнач.ИмяПроп
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИмяПроп
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ДополнительныеРеквизитыИСведения.Ссылка, Итог.ИмяПроп) КАК Свойство,
	             |	Итог.Ид КАК Ид,
	             |	Итог.Знач
	             |ПОМЕСТИТЬ ДопСвИтог
	             |ИЗ
	             |	Итог КАК Итог
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	             |		ПО Итог.ИмяПроп = ДополнительныеРеквизитыИСведения.Наименование
	             |			И (ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойстДопСведРеквОбщ)
	             |			И (ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ИСТИНА)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДопСвИтог.Свойство КАК Свойство,
	             |	ДопСвИтог.Знач,
	             |	ЕСТЬNULL(Номенклатура.Ссылка, ДопСвИтог.Ид) КАК Номенклатура
	             |ИЗ
	             |	ДопСвИтог КАК ДопСвИтог
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО ДопСвИтог.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДопСвИтог.Знач,
	             |	ЕСТЬNULL(Номенклатура.Ссылка, ДопСвИтог.Ид),
	             |	ДопСвИтог.Свойство
	             |ИТОГИ ПО
	             |	Свойство";

	Свойства=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   // Запрос.Выполнить().выгрузить()
	
	Наб=регистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборСвойстДопСведРеквОбщ=НаборСвойстДопСведРеквОбщ.ПолучитьОбъект();
	флаг=ложь;
	Пока Свойства.Следующий()Цикл
		
		Если ТипЗнч(Свойства.свойство)<>Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") тогда
			Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			Свойство.Виден=Истина;
			Свойство.Доступен=истина;
			Свойство.Наименование=Свойства.Свойство;
			Свойство.НаборСвойств=НаборСвойстДопСведРеквОбщ.ссылка;
			Свойство.ЭтоДополнительноеСведение=истина;
			Свойство.Заголовок=Свойства.Свойство;
			Свойство.ТипЗначения=Тип("Строка");//Новый Описаниетипов("Строка",,,,Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
			свойство.записать();
			свойство=свойство.ссылка;			
			стр=НаборСвойстДопСведРеквОбщ.ДополнительныеСведения.добавить();
			стр.Свойство=Свойство;
			флаг=истина;
		Иначе
			свойство=Свойства.Свойство;
		КонецЕсли;
		
		//наб.Отбор.свойство.установить(свойство);
		//наб.Прочитать();
	
		СвойствоДетЗаписи=Свойства.Выбрать();
		Пока СвойствоДетЗаписи.Следующий() Цикл
			стр=регистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();//Наб.Добавить();
			стр.Объект=СвойствоДетЗаписи.Номенклатура;
			стр.Свойство=Свойство;
			стр.Значение=СвойствоДетЗаписи.Знач;
			стр.Записать(Истина);
		КОнецЦикла;
		//наб.Записать(Истина);
	КонецЦикла;
	////если флаг тогда
	////	НаборСвойстДопСведРеквОбщ.записать(Истина);
	////КонеЦЕсли;
	//#
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСвойства()
	ЗагрузитьСвойстваНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуруПроизводства()
	ЗагрузитьНоменклатуруПроизводстваНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатуруПроизводстваНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"pItems_Пикник.txt");	
	НоменклатураПроизводства=Новый таблицаЗначений;
	НоменклатураПроизводства.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	НоменклатураПроизводства.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	НоменклатураПроизводства.Колонки.Добавить("ЭтоГруппа",Новый ОписаниеТипов("Булево"));
	НоменклатураПроизводства.Колонки.Добавить("ИдГруппы",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=НоменклатураПроизводства.Добавить();
		стрТч.Имя=СокрЛп(МассивКол[1]);
		стрТч.Ид=СокрЛп(МассивКол[0]);
		стрТч.ИдГруппы=СокрЛп(МассивКол[2]);
		итератор=итератор+1;
	КонецЦикла;
	
	Для каждого стр из НоменклатураПроизводства цикл		
		если ЗначениеЗаполнено(НоменклатураПроизводства.Найти(стр.ид,"ИдГруппы")) Тогда
			стр.ЭтоГруппа=Истина;
		Иначе
			стр.ЭтоГруппа=Ложь;
		КонецЕсли;		
	КонецЦикла;
		
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.свойство.установить("НоменклатураПроизводства");
	наб.Прочитать();
	ГруппаНоменклатураПроизводства=наб[0].ЗначениеВБазе;
	
	запрос=новый запрос;
	Запрос.УстановитьПараметр("ГруппаНоменклатураПроизводства",ГруппаНоменклатураПроизводства);
	Запрос.УстановитьПараметр("НоменклатураПроизводства",НоменклатураПроизводства);
	запрос.Текст="ВЫБРАТЬ
	             |	НоменклатураПроизводства.Имя,
	             |	НоменклатураПроизводства.Ид,
	             |	НоменклатураПроизводства.ЭтоГруппа,
	             |	НоменклатураПроизводства.ИдГруппы
	             |ПОМЕСТИТЬ НомкаПроизвв
	             |ИЗ
	             |	&НоменклатураПроизводства КАК НоменклатураПроизводства
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НомкаПроизвв.Имя,
	             |	НомкаПроизвв.Ид,
	             |	НомкаПроизвв.ЭтоГруппа
	             |ИЗ
	             |	НомкаПроизвв КАК НомкаПроизвв
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО НомкаПроизвв.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ИСТИНА)
	             |			И (Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |			И (НомкаПроизвв.ЭтоГруппа = ИСТИНА)
	             |ГДЕ
	             |	Номенклатура.Ссылка ЕСТЬ NULL 
	             |	И НомкаПроизвв.ЭтоГруппа = ИСТИНА
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	НомкаПроизвв.Имя,
	             |	Номенклатура.Ссылка,
	             |	НомкаПроизвв.ЭтоГруппа
	             |ИЗ
	             |	НомкаПроизвв КАК НомкаПроизвв
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО НомкаПроизвв.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |			И НомкаПроизвв.Имя <> Номенклатура.Наименование
	             |			И (Номенклатура.ЭтоГруппа = ИСТИНА)
	             |			И (НомкаПроизвв.ЭтоГруппа = ИСТИНА)
	             |ГДЕ
	             |	НомкаПроизвв.ЭтоГруппа = ИСТИНА";
				 
	Выборка=Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ид)=тип("СправочникСсылка.Номенклатура") Тогда
			номенклатура=Выборка.Ид.получитьОбъект();
		иначе
			номенклатура=Справочники.номенклатура.СоздатьГруппу();
			номенклатура.ххх_ИдЦентр=Выборка.Ид;
		КонецЕсли;
		номенклатура.Наименование=Выборка.Имя;
		номенклатура.Родитель=ГруппаНоменклатураПроизводства;
		номенклатура.Записать();
	КонецЦикла;	

	запрос=новый запрос;
	Запрос.УстановитьПараметр("ГруппаНоменклатураПроизводства",ГруппаНоменклатураПроизводства);
	Запрос.УстановитьПараметр("НоменклатураПроизводства",НоменклатураПроизводства);
	запрос.Текст="ВЫБРАТЬ
	             |	НоменклатураПроизводства.Имя,
	             |	НоменклатураПроизводства.Ид,
	             |	НоменклатураПроизводства.ЭтоГруппа,
	             |	НоменклатураПроизводства.ИдГруппы
	             |ПОМЕСТИТЬ НомкаПроизвв
	             |ИЗ
	             |	&НоменклатураПроизводства КАК НоменклатураПроизводства
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НомкаПроизвв.Имя,
	             |	НомкаПроизвв.Ид,
	             |	НомкаПроизвв.ЭтоГруппа,
	             |	Номенклатура.Ссылка КАК родитель
	             |ПОМЕСТИТЬ Группы
	             |ИЗ
	             |	НомкаПроизвв КАК НомкаПроизвв
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО НомкаПроизвв.ИдГруппы = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Группы.Имя,
	             |	Группы.Ид КАК номенклатура,
	             |	Группы.родитель,
	             |	Группы.ЭтоГруппа
	             |ИЗ
	             |	Группы КАК Группы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО Группы.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |ГДЕ
	             |	Номенклатура.Ссылка ЕСТЬ NULL 
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	Группы.Имя,
	             |	Номенклатура.Ссылка,
	             |	Группы.родитель,
	             |	Группы.ЭтоГруппа
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Группы КАК Группы
	             |		ПО Номенклатура.ххх_ИдЦентр = Группы.Ид
	             |			И (Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |			И (Номенклатура.Родитель <> Группы.родитель
	             |				ИЛИ Номенклатура.Наименование <> Группы.Имя)";
				 
	Выборка=Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.номенклатура)=тип("СправочникСсылка.Номенклатура") Тогда
			номенклатура=Выборка.номенклатура.получитьОбъект();
		иначе
			Если Выборка.ЭтоГруппа тогда
				номенклатура=Справочники.номенклатура.СоздатьГруппу();
			Иначе
				номенклатура=Справочники.номенклатура.СоздатьЭлемент();
			КонецЕсли;
			номенклатура.ххх_ИдЦентр=Выборка.Номенклатура;
		КонецЕсли;
		номенклатура.Наименование=Выборка.Имя;
		номенклатура.Родитель=выборка.родитель;
		номенклатура.Записать();
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРецепты()
	ЗагрузитьРецептыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРецептыНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	наб=РегистрыСведений.КомплектующиеНоменклатуры.СоздатьНаборЗаписей();
	наб.Прочитать();
	наб.Очистить();
	наб.Записать();
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"TTK_Headers_Яблоко11.txt");	
	Комплекты=Новый таблицаЗначений;
	Комплекты.Колонки.Добавить("ИдНом",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Комплекты.Колонки.Добавить("ИдНаб",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
			
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Комплекты.Добавить();
		стрТч.ИдНом=СокрЛп(МассивКол[4]);
		стрТч.ИдНаб=СокрЛп(МассивКол[2]);
		итератор=итератор+1;
	КонецЦикла;
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"TTK_Table_Яблоко11.txt");	
	Комплектующие=Новый таблицаЗначений;
	Комплектующие.Колонки.Добавить("ИдНаб",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Комплектующие.Колонки.Добавить("ИдСост",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
			
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Комплектующие.Добавить();
		стрТч.ИдНаб=СокрЛп(МассивКол[1]);
		стрТч.ИдСост=СокрЛп(МассивКол[3]);
		итератор=итератор+1;
	КонецЦикла;
			
	набГруппаНоменклатураПроизводства=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	набГруппаНоменклатураПроизводства.Отбор.свойство.установить("НоменклатураПроизводства");
	набГруппаНоменклатураПроизводства.Прочитать();
	ГруппаНоменклатураПроизводства=набГруппаНоменклатураПроизводства[0].ЗначениеВБазе;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаНоменклатураПроизводства",ГруппаНоменклатураПроизводства);
	Запрос.УстановитьПараметр("Комплекты",Комплекты);
	Запрос.УстановитьПараметр("Комплектующие",Комплектующие);
	запрос.Текст="ВЫБРАТЬ
	             |	Комплекты.ИдНаб,
	             |	Комплекты.ИдНом
	             |ПОМЕСТИТЬ Комплекты
	             |ИЗ
	             |	&Комплекты КАК Комплекты
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Комплектующие.ИдНаб,
	             |	Комплектующие.ИдСост
	             |ПОМЕСТИТЬ Комплектующие
	             |ИЗ
	             |	&Комплектующие КАК Комплектующие
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Комплект,
	             |	Комплекты.ИдНаб
	             |ПОМЕСТИТЬ КомплектыСсылка
	             |ИЗ
	             |	Комплекты КАК Комплекты
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО Комплекты.ИдНом = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |			И (НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Комплектующая,
	             |	Комплектующие.ИдНаб
	             |ПОМЕСТИТЬ КомплектующиеСсылка
	             |ИЗ
	             |	Комплектующие КАК Комплектующие
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО Комплектующие.ИдСост = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |			И (Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатураПроизводства))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	КомплектыСсылка.Комплект КАК Номенклатура,
	             |	КомплектующиеСсылка.Комплектующая,
	             |	1 КАК ДоляСтоимости,
	             |	1 КАК Количество
	             |ИЗ
	             |	КомплектыСсылка КАК КомплектыСсылка
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КомплектующиеСсылка КАК КомплектующиеСсылка
	             |		ПО КомплектыСсылка.ИдНаб = КомплектующиеСсылка.ИдНаб";
	
	Наб.Загрузить(Запрос.Выполнить().Выгрузить());
	Наб.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСоответствияНоменклатурыЕГАИС()
	ЗагрузитьСоответствияНоменклатурыЕГАИСНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСоответствияНоменклатурыЕГАИСНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"tovar_"+НаименованиеДляФайлов+".txt");		
	ТчВыгрузкиАлкИнфо=Новый таблицаЗначений;
	ТчВыгрузкиАлкИнфо.Колонки.Добавить("id",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ТчВыгрузкиАлкИнфо.Колонки.Добавить("krep",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ТчВыгрузкиАлкИнфо.Колонки.Добавить("volume",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	ТчВыгрузкиАлкИнфо.Колонки.Добавить("type",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стр=ТчВыгрузкиАлкИнфо.Добавить();	
		стр.id=сокрлп(МассивКол[0]);
		стр.krep=стрЗаменить(сокрлп(МассивКол[27]),".",",");
		стр.volume=стрЗаменить(сокрлп(МассивКол[28]),".",",");
		стр.type=сокрлп(МассивКол[29]);
			
		итератор=итератор+1;
	КонецЦикла;	
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Путь+"FSRARMEdgeItemId_Яблоко.txt");	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИдРар",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИдПост",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
			
	итератор=2;
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		Если СтрДлина((СокрЛп(МассивКол[2])))=19 Тогда
			стрТч=Тч.Добавить();
			стрТч.Ид=СокрЛп(МассивКол[0]);
			стрТч.ИдРар=СокрЛп(МассивКол[2]);
			стрТч.ИдПост=СокрЛп(МассивКол[1]);
		КонецЕсли;
		итератор=итератор+1;
	КонецЦикла;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("proizv_Пикник");
	наб.Отбор.свойство.установить("ПРОИЗВОДИТЕЛИ");
	наб.Прочитать();
	Производители=наб[0].ЗначениеВБазе;
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("тч",тч);
	Запрос.УстановитьПараметр("Производители",Производители);
	Запрос.УстановитьПараметр("ТчВыгрузкиАлкИнфо",ТчВыгрузкиАлкИнфо);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.Ид КАК Ид,
	             |	тч.ИдРар КАК ИдРар,
	             |	тч.ИдПост КАК ИдПост
	             |ПОМЕСТИТЬ тч
	             |ИЗ
	             |	&тч КАК тч
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Ид
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	тч.ИдРар КАК ИдРар,
	             |	тч.ИдПост КАК ИдПост,
	             |	Номенклатура.Ссылка КАК НоменклатураСсылка
	             |ПОМЕСТИТЬ Номенклатура
	             |ИЗ
	             |	тч КАК тч
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО тч.Ид = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИдРар
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.ИдПост КАК ИдПост,
	             |	Номенклатура.ИдРар КАК КласикАлкиЕГАИС,
	             |	Номенклатура.НоменклатураСсылка КАК НоменклатураСсылка,
	             |	Номенклатура.НоменклатураСсылка.ПроизводительИмпортерАлкогольнойПродукции КАК НоменклатураСсылкаПроизводительИмпортерАлкогольнойПродукции,
	             |	Номенклатура.НоменклатураСсылка.ОбъемДАЛ КАК НоменклатураСсылкаОбъемДАЛ,
	             |	Номенклатура.НоменклатураСсылка.Крепость КАК НоменклатураСсылкаКрепость
	             |ПОМЕСТИТЬ КласикАлкашкиНомка
	             |ИЗ
	             |	Номенклатура КАК Номенклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	             |		ПО Номенклатура.ИдРар = КлассификаторАлкогольнойПродукцииЕГАИС.Код
	             |ГДЕ
	             |	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	Номенклатура.ИдПост,
	             |	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка,
	             |	Номенклатура.НоменклатураСсылка,
	             |	Номенклатура.НоменклатураСсылка.ПроизводительИмпортерАлкогольнойПродукции,
	             |	Номенклатура.НоменклатураСсылка.ОбъемДАЛ,
	             |	Номенклатура.НоменклатураСсылка.Крепость
	             |ИЗ
	             |	Номенклатура КАК Номенклатура
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	             |		ПО Номенклатура.ИдРар = КлассификаторАлкогольнойПродукцииЕГАИС.Код
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИдПост
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТчВыгрузкиАлкИнфо.id КАК id,
	             |	ТчВыгрузкиАлкИнфо.krep КАК alcvolume,
	             |	ТчВыгрузкиАлкИнфо.volume КАК volume,
	             |	ТчВыгрузкиАлкИнфо.type КАК type
	             |ПОМЕСТИТЬ ТчВыгрузкиАлкИнфо
	             |ИЗ
	             |	&ТчВыгрузкиАлкИнфо КАК ТчВыгрузкиАлкИнфо
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	id
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	КласикАлкашкиНомка.КласикАлкиЕГАИС КАК КласикАлкиЕГАИС,
	             |	КласикАлкашкиНомка.НоменклатураСсылка КАК НоменклатураСсылка,
	             |	КласикАлкашкиНомка.НоменклатураСсылкаПроизводительИмпортерАлкогольнойПродукции КАК НоменклатураСсылкаПроизводительИмпортерАлкогольнойПродукции,
	             |	КласикАлкашкиНомка.НоменклатураСсылкаОбъемДАЛ КАК НоменклатураСсылкаОбъемДАЛ,
	             |	КласикАлкашкиНомка.НоменклатураСсылкаКрепость КАК НоменклатураСсылкаКрепость,
	             |	Контрагенты.Ссылка КАК Производитель,
	             |	ВидыАлкогольнойПродукцииЕГАИС.Ссылка КАК ВидАлкогольнойПродукции,
	             |	ТчВыгрузкиАлкИнфо.alcvolume КАК Крепость,
	             |	ТчВыгрузкиАлкИнфо.volume КАК Объем
	             |ИЗ
	             |	КласикАлкашкиНомка КАК КласикАлкашкиНомка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	             |		ПО КласикАлкашкиНомка.ИдПост = Контрагенты.ххх_ИдЦентр
	             |			И (Контрагенты.Родитель = &Производители)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ТчВыгрузкиАлкИнфо КАК ТчВыгрузкиАлкИнфо
	             |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукцииЕГАИС
	             |			ПО ТчВыгрузкиАлкИнфо.type = ВидыАлкогольнойПродукцииЕГАИС.Код
	             |		ПО КласикАлкашкиНомка.НоменклатураСсылка.ххх_ИдЦентр = ТчВыгрузкиАлкИнфо.id
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	КласикАлкашкиНомка.КласикАлкиЕГАИС,
	             |	КласикАлкашкиНомка.НоменклатураСсылка,
	             |	КласикАлкашкиНомка.НоменклатураСсылкаПроизводительИмпортерАлкогольнойПродукции,
	             |	Контрагенты.Ссылка,
	             |	КласикАлкашкиНомка.НоменклатураСсылкаОбъемДАЛ,
	             |	КласикАлкашкиНомка.НоменклатураСсылкаКрепость,
	             |	ВидыАлкогольнойПродукцииЕГАИС.Ссылка,
	             |	ТчВыгрузкиАлкИнфо.alcvolume,
	             |	ТчВыгрузкиАлкИнфо.volume
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	КласикАлкашкиНомка.НоменклатураСсылка.Наименование";
	Выборка=Запрос.Выполнить().Выбрать();
	//видПродукции=Справочники.ВидыАлкогольнойПродукцииЕГАИС.НайтиПоКоду("1");
	наб=РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
	наб.Прочитать();
	Наб.Очистить();
	//Наб.Записать();
	Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.КласикАлкиЕГАИС)=Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС") Тогда
				Объект1=Выборка.КласикАлкиЕГАИС.получитьОбъект();
				Если ЗначениеЗаполнено(выборка.ВидАлкогольнойПродукции) Тогда
					Объект1.Наименование=выборка.НоменклатураСсылка.ххх_НаименованиеЦенник;
					Объект1.НаименованиеПолное=выборка.НоменклатураСсылка.ххх_НаименованиеЦенник;
					Объект1.ВидПродукции=выборка.ВидАлкогольнойПродукции;
					Объект1.Крепость=выборка.Крепость;
					Объект1.Объем=выборка.Объем;
					Объект1.ТипПродукции=Перечисления.ТипыПродукцииЕГАИС.Упакованная;
					Объект1.Записать();
				КонецЕсли;
			Иначе
				Объект1=Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
				Объект1.Код=Выборка.КласикАлкиЕГАИС;
				Объект1.Наименование=выборка.НоменклатураСсылка.ххх_НаименованиеЦенник;
				Объект1.НаименованиеПолное=выборка.НоменклатураСсылка.ххх_НаименованиеЦенник;
				Объект1.ВидПродукции=выборка.ВидАлкогольнойПродукции;
				Объект1.Крепость=выборка.Крепость;
				Объект1.Объем=выборка.Объем;
				Объект1.ТипПродукции=Перечисления.ТипыПродукцииЕГАИС.Упакованная;
				Объект1.Записать();
			КонецЕсли;
			Если выборка.НоменклатураСсылка.ВидАлкогольнойПродукцииЕГАИС<>Объект1.ВидПродукции тогда
				Номка=выборка.НоменклатураСсылка.ПолучитьОбъект();
				Номка.ВидАлкогольнойПродукцииЕГАИС=Объект1.ВидПродукции;
				Номка.Записать();
			КонецЕсли;
		//если стрДлина(Объект1.Код)=19 тогда
			стр=Наб.Добавить();
			стр.АлкогольнаяПродукция=Объект1.Ссылка;
			стр.Номенклатура=выборка.НоменклатураСсылка;
		//КонецЕсли;
	КонецЦикла;
	
	ЗАпрос=Новый запрос;
	ЗАпрос.УстановитьПараметр("набНов",Наб.Выгрузить());
	Запрос.Текст="ВЫБРАТЬ
	             |	НабНов.Номенклатура КАК Номенклатура,
	             |	НабНов.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&НабНов КАК НабНов
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.Номенклатура КАК Номенклатура,
	             |	йцу.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ НовГруп
	             |ИЗ
	             |	йцу КАК йцу
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.Номенклатура,
	             |	йцу.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ СтарГруп
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НовГруп.Номенклатура КАК Номенклатура,
	             |	НовГруп.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ итоговая
	             |ИЗ
	             |	НовГруп КАК НовГруп
	             |		ЛЕВОЕ СОЕДИНЕНИЕ СтарГруп КАК СтарГруп
	             |		ПО НовГруп.Номенклатура = СтарГруп.Номенклатура
	             |			И НовГруп.АлкогольнаяПродукция = СтарГруп.АлкогольнаяПродукция
	             |ГДЕ
	             |	СтарГруп.Номенклатура ЕСТЬ NULL
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК АкцизнаяМарка
	             |ИЗ
	             |	итоговая КАК итоговая
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	             |		ПО итоговая.АлкогольнаяПродукция = АкцизныеМаркиЕГАИС.АлкогольнаяПродукция
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	АкцизныеМаркиЕГАИС.АкцизнаяМарка";
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Узлы = ПланыОбмена.ПланОбменаСОборудованием.Выбрать();
	
	Пока Узлы.Следующий() Цикл
		
		Если Узлы.Ссылка = ПланыОбмена.ПланОбменаСОборудованием.ЭтотУзел() или ТипЗнч(Узлы.Оборудование)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Продолжить;
		КонецЕсли;
	
		пока выборка.Следующий() Цикл	
			ПланыОбмена.ЗарегистрироватьИзменения(узлы.Ссылка, выборка.АкцизнаяМарка); 	
		КонецЦикла;
		
		выборка.Сбросить();
	КонецЦикла;	
			
	наб.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаШтрихкодов()
	ЗагрузкаШтрихкодовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаШтрихкодовНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	Запрос=Новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	dbo_shtrix.sk,
	             |	dbo_shtrix.id_tov КАК id_tov
	             |ИЗ
	             |	ВнешнийИсточникДанных.Пикник23.Таблица.dbo_shtrix КАК dbo_shtrix";
				 
	штрихи=Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из Штрихи Цикл
		стр.id_tov=Стрзаменить(стр.id_tov," ","");	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("dbo_shtrix",штрихи);
	Запрос.УстановитьПараметр("Еан8",ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8);
	Запрос.УстановитьПараметр("Еан13",ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("НашШтрихкод",Справочники.ххх_Справочник.НашШтрихкод.Значение);
	Запрос.Текст="ВЫБРАТЬ
	             |	dbo_shtrix.sk,
	             |	dbo_shtrix.id_tov КАК id_tov
	             |ПОМЕСТИТЬ скуль
	             |ИЗ
	             |	&dbo_shtrix КАК dbo_shtrix
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	id_tov
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Владелец,
	             |	скуль.sk КАК Штрихкод,
	             |	ВЫБОР
	             |		КОГДА скуль.sk ПОДОБНО ""_____________""
	             |			ТОГДА &Еан13
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА скуль.sk ПОДОБНО ""________""
	             |					ТОГДА &Еан8
	             |				ИНАЧЕ &НашШтрихкод
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ТипШтрихкода
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ скуль КАК скуль
	             |		ПО Номенклатура.ххх_ИдЦентр = скуль.id_tov
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)";
	Наб=РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	Наб.Прочитать();
	Наб.Очистить();
	Наб.Записать();
	Наб.Загрузить(запрос.Выполнить().Выгрузить());
	Наб.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоступление()
	ЗагрузитьПоступлениеНаСервере()
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоступлениеНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	файлы=НайтиФайлы(Справочники.ххх_Справочник.ПутьЗагрузкиРеализацийСБазы.Значение,"*.txt");
	Для каждого ЗагружаемыйФайл из файлы Цикл
		ПолноеИмя=ЗагружаемыйФайл.ПолноеИмя;
		ЗагружаемыйФайл = Новый ТекстовыйДокумент;
		ЗагружаемыйФайл.Прочитать(ПолноеИмя);	
		Тч=Новый таблицаЗначений;
		Тч.Колонки.Добавить("ИдДок",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("ИдТов",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("Цена",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("Дата",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("Колво",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));	
		Тч.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
		Тч.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5)));
		итератор=1;
		КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
		Пока итератор<КолвоСтрок+1 Цикл
			стр=ЗагружаемыйФайл.ПолучитьСтроку(итератор);
			стрТч=Тч.Добавить();
			стрТч.ИдДок=СокрЛп(Сред(стр,0,10));
			стрТч.Дата=СокрЛп(Сред(стр,11,10));
			стрТч.Цена=СокрЛп(Сред(стр,41,10));
			стрТч.Сумма=СокрЛп(Сред(стр,51,10));
			стрТч.Колво=СокрЛп(Сред(стр,31,10));
			стрТч.ИдТов=СокрЛп(Сред(стр,21,10));
			стрТч.Наименование=СокрЛп(Сред(стр,60,80));
			стрТч.НомерСтроки=итератор;
			итератор=итератор+1;
		КонецЦикла;
		
		Свойства=Новый массив;
		Свойства.Добавить(Справочники.ххх_Справочник.id_b1.Значение);
		Свойства.Добавить(Справочники.ххх_Справочник.id_b2.Значение);
		Свойства.Добавить(Справочники.ххх_Справочник.id_b3.Значение);
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("тч",тч);
		Запрос.УстановитьПараметр("Свойства",Свойства);
		Запрос.Текст="ВЫБРАТЬ
		             |	Тч.ИдТов КАК ИдТов,
		             |	Тч.Колво КАК Колво,
		             |	Тч.Сумма КАК Сумма,
		             |	Тч.Цена КАК Цена,
		             |	Тч.Наименование КАК Наименование,
		             |	Тч.НомерСтроки КАК НомерСтроки
		             |ПОМЕСТИТЬ йцу
		             |ИЗ
		             |	&Тч КАК Тч
		             |
		             |ИНДЕКСИРОВАТЬ ПО
		             |	ИдТов
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ЕСТЬNULL(ДополнительныеСведения.Объект, йцу.ИдТов) КАК Номенклатура,
		             |	йцу.Колво КАК Колво,
		             |	йцу.Сумма КАК Сумма,
		             |	йцу.Цена КАК Цена,
		             |	йцу.Наименование КАК Наименование
		             |ИЗ
		             |	йцу КАК йцу
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		             |		ПО йцу.ИдТов = ДополнительныеСведения.Значение
		             |			И (ДополнительныеСведения.Свойство В (&Свойства))
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	йцу.НомерСтроки";
		Выборка=Запрос.Выполнить().Выбрать();
		
		Док=Документы.ПоступлениеТоваров.СоздатьДокумент();
		Док.Дата=ТекущаяДата();
		Док.ДатаВходящегоДокумента=Дата(Лев(Тч[0].Дата,СтрДлина(Тч[0].Дата)-2)+"20"+Прав(Тч[0].Дата,2)+"  0:00:00");
		Док.НомерВходящегоДокумента=Тч[0].ИдДок;
		Док.Организация=Справочники.ххх_Справочник.Магазин.Значение.СкладПродажи.Организация;
		Док.Магазин=Справочники.ххх_Справочник.Магазин.Значение;
		Док.УчитыватьНДС=Истина;
		Док.Склад=Справочники.ххх_Справочник.Магазин.Значение.СкладПродажи;
		Док.ЦенаВключаетНДС=истина;
		Док.ХозяйственнаяОперация=Справочники.АналитикаХозяйственныхОпераций.ОприходованиеТоваров;
		Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		масПиздеца=Новый массив;
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				масПиздеца.добавить("Код в базе: " + Выборка.номенклатура+". Наименование: "+Выборка.наименование);
				продолжить;
			КонецЕсли;
			стр=Док.Товары.Добавить();
			стр.Количество=выборка.Колво;
			стр.Цена=Выборка.Цена;
			Стр.Сумма=Выборка.Сумма;
			стр.СтавкаНДС=Выборка.Номенклатура.СтавкаНДС;
			стр.Номенклатура=Выборка.номенклатура;
			стр.КоличествоУпаковок=выборка.колво;
			Если стр.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.БезНДС тогда
				Стр.СуммаНДС=0;
			ИначеЕсли стр.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
				Стр.СуммаНДС=стр.Сумма*10/110;
			 Иначе 
				Стр.СуммаНДС=стр.Сумма*20/120;
			КонецЕсли;
		КонецЦикла;
		Если масПиздеца.Количество()<>0 Тогда
			Сообщить("По следущим позициям не заданы соответствия. Обратитесь к менеджерам!");
			Для каждого Пиздец из масПиздеца Цикл
				Сообщить(Пиздец);
			КонецЦикла;
			//возврат;
		КонецЕсли;
		Док.Записать();
		УдалитьФайлы(ПолноеИмя);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПостуупление()
	ЗагрузитьПоступлениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Загрузить()
	РазобратьЗипАрхивы();
	
	//ххх_ОбменСОфисом();
	Предупреждение=ПроверитьФайлы(); 
	Если ЗначениеЗаполнено(Предупреждение) тогда
		Предупреждение=Предупреждение+Символы.ВК+Символы.ВК+"Вы уверены что хотите начать загрузку?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаОЗагрузке",ЭтаФОрма,),Предупреждение,РежимДиалогаВопрос.ОК);
	Иначе
		Сообщить("Не найдены файлы!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если рольДоступна("ПолныеПрава") тогда
		Элементы.ххх_ОбменСОфисом.Видимость=Истина;
	КонецЕсли;
	магазин=Справочники.ххх_Справочник.Магазин.Значение;
	путь=Магазин.ххх_ПутьЗагрузкиНСИ;
	НаименованиеДляФайлов=Магазин.ххх_НаименованиеДляФайлов;
	Если ЗначениеЗаполнено(Справочники.ххх_Справочник.ИнтернетМагазин.Значение) и Справочники.ххх_Справочник.ИнтернетМагазин.Значение.ххх_ИнтернетМагазин Тогда
		ЕстьИМ=Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьФайлы()

	fso=Новый COMОбъект("Scripting.FileSystemObject");
	ФАйлы=НайтиФайлы(Путь,"*.txt");
	Предупреждение="";
	Для каждого ф из Файлы Цикл	
		ИмяФайла=Путь+ф.Имя;
	    file=fso.GetFile(ИмяФайла); //Открываем файл в режиме "только чтение"           
	    ДатаСоздания=file.DateLastModified;  		
		Предупреждение=Предупреждение+"Файл "+ф.Имя+" был создан: "+ДатаСоздания+Символы.ВК;	
	КонецЦикла;
	
	возврат Предупреждение;		
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВопросаОЗагрузке(Ответ,йцу) экспорт
	//	попытка
	Если Ответ=КодВозвратаДиалога.ОК тогда
		 
			ЗагрузитьСтраны();
			ЗагрузитьПроизводителей();
			//ЗагрузитьПоставщиков();
			Загрузитьноменклатуру();
			
			Если ПрогружаемНаОбычныйМагазин() Тогда
				ЗагрузитьОграничениеСкидки();
			КонецЕсли;
			
			ЗагрузитьСоответствияНоменклатурыЕГАИС();
			ПереместитьФайлыНаКассы();
			ЗатянутьПроизводствоВСтаруюБазу();  
			Если ЕстьИМ Тогда
				КочетовОбменСИнтернетМагазином.ВыгрузитьХМЛ("Inetshop");
			КонецЕсли;
			
			ххх_ОбменСОфисом();
			
		//////////////////////////////////////////////////////////////////////ЗагрузкаШтрихкодов(); На хуй не нужно!(Юзается только при первой прогрузке)
		//ЗагрузитьПостуупление();
	КонецЕсли;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
КонецПроцедуры

функция ПрогружаемНаОбычныйМагазин()
	возврат не Магазин.ххх_ИнтернетМагазин;
КонецФункции

&НаСервереБезКонтекста
Функция проверкаНаОбъект(объект)	
	Если ТипЗнч(объект)=Тип("ОбъектXDTO") Тогда
		возврат истина;
	Иначе
		возврат Ложь;
	КонецЕсли;	
КонецФункции

функция получитьОперацииРазбиения(ИдОперации)
	
	Если ИдОперации="0" или ИдОперации="3"или ИдОперации="4" Тогда
		возврат 1;
	ИначеЕсли ИдОперации="2" Тогда
		возврат 2;
	Иначе
		возврат 9;
	КонецЕСли;
	
КонецФункции

процедура ЗаполнитьСтрокуТоваров(стр,ВидЦены,Номенклатура,Цена,КвалификаторДеленияДоковПоОперациям,ххх_ПериодДействияАкцииНачало,ххх_ПериодДействияАкцииКонец)
	стр.ВидЦены=ВидЦены;
	стр.Номенклатура=Номенклатура;
	стр.Цена=Цена;
	стр.КвалификаторДеленияДоковПоОперациям=КвалификаторДеленияДоковПоОперациям;
	стр.ххх_ПериодДействияАкцииНачало=ххх_ПериодДействияАкцииНачало;
	стр.ххх_ПериодДействияАкцииКонец=ххх_ПериодДействияАкцииКонец;
КонецПроцедуры

Функция преобразоватьСКЛДатуВ1сДату(дата)
	стр=СтрЗаменить(дата,"-","");
	Пока Прав(стр,1)<>"T" Цикл
		стр=Лев(стр,СтрДлина(стр)-1);
	КонецЦикла;
	стр=Лев(стр,СтрДлина(стр)-1);
	возврат стр;
КонецФункции

Процедура ПереместитьФайлыНаКассы()	
	Запрос=Новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КассыККМ.ПутьКПапкеВыгрузки КАК ПутьКПапкеВыгрузки
	             |ИЗ
	             |	Справочник.КассыККМ КАК КассыККМ
	             |ГДЕ
	             |	КассыККМ.ПометкаУдаления = ЛОЖЬ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	КассыККМ.ПутьКПапкеВыгрузки";
	Выборка=Запрос.Выполнить().Выбрать();	 
	Пока Выборка.Следующий()Цикл		
		КопироватьФайл(Справочники.ххх_Справочник.ПутьЗагрузкиНСИ.Значение+"\ItemProperty.txt",Выборка.ПутьКПапкеВыгрузки+"\ItemProperty.txt");	
		КопироватьФайл(Справочники.ххх_Справочник.ПутьЗагрузкиНСИ.Значение+"\ItemPropertyValue.txt",Выборка.ПутьКПапкеВыгрузки+"\ItemPropertyValue.txt");	
		КопироватьФайл(Справочники.ххх_Справочник.ПутьЗагрузкиНСИ.Значение+"\PropertyValue.txt",Выборка.ПутьКПапкеВыгрузки+"\PropertyValue.txt");				
	КонецЦикла;	
КонецПроцедуры

Процедура ЗатянутьПроизводствоВСтаруюБазу()
	
	Если Не ЗначениеЗАполнено(Константы.ххх_ОрганизацияПринимающаяяПроизводство.Получить()) или магазин.ххх_ИнтернетМагазин Тогда
		возврат;
	КонецЕсли;
	ВнешниеИсточникиДанных.Пикник23.dbo_ImportGroup(путь+"gruppa_Пикник.txt");	
	
	ВнешниеИсточникиДанных.Пикник23.dbo_ImportTovar(путь+"tovar_"+НаименованиеДляФайлов+".txt");
	
	ВнешниеИсточникиДанных.Пикник23.dbo_ImportItems(путь+"pItems_Пикник.txt");
	ВнешниеИсточникиДанных.Пикник23.dbo_ImportCustomer(путь+"post_Пикник.txt");
	ВнешниеИсточникиДанных.Пикник23.dbo_ImportTTK_Headers(путь+"TTK_Headers_"+НаименованиеДляФайлов+".txt");
	ВнешниеИсточникиДанных.Пикник23.dbo_ImportTTK_Table(путь+"TTK_Table_"+НаименованиеДляФайлов+".txt");
		
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииНаСервере()
	путь=Магазин.ххх_ПутьЗагрузкиНСИ;
	НаименованиеДляФайлов=Магазин.ххх_НаименованиеДляФайлов;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	МагазинПриИзмененииНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗагрузитьАкции(Команда)
	//ЗагрузитьАкцию();
	НайтиИЗагрузитьФайлыАкций();
КонецПроцедуры

процедура НайтиИЗагрузитьФайлыАкций()	
	ФайлыАкций=НайтиФайлы(путь+"\","mDocs_"+НаименованиеДляФайлов+"*"+".xml");
	Если ФайлыАкций.Количество()>0 Тогда
		Для каждого файл из ФайлыАкций цикл
			ЗагрузитьАкцию(файл.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьАкцию(путьКАкции)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(путьКАкции);
	ТипЗначенияXDTO = ФабрикаXDTO.Тип("http://www.Office.org", "Root");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипЗначенияXDTO);
	
	Если проверкаНаОбъект(ОбъектXDTO.Documents.Offers)Тогда
		РазобратьАкцию(ОбъектXDTO.Documents.Offers.Offer);
	Иначе	
		Для каждого офер из ОбъектXDTO.Documents.Offers Цикл
			РазобратьАкцию(офер);
		КонецЦикла;
	КонецЕсли;	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(путьКАкции);
КонецПроцедуры

Процедура РазобратьАкцию(офер)
	
	ШокАкция=получитьШокАкция(офер.header.OfferType);
	
	Док=Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	док.Дата=ТекущаяДата();
	док.Ответственный=ПараметрыСеанса.АвторизованныйПользователь;
	док.Комментарий="Документ с ИД: "+офер.header.DocId;
	док.ххх_ИдДокументаМаркетинговойАкции=офер.header.DocId;
	
	Товары=док.Товары.Выгрузить();
	Товары.Очистить();
	Товары.Колонки.Добавить("КвалификаторДеленияДоковПоОперациям",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ххх_ПериодДействияАкцииНачало",Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ххх_ПериодДействияАкцииКонец",Новый ОписаниеТипов("Дата"));
		
	Если проверкаНаОбъект(офер.body.row)Тогда
		РазобратьСтроку(офер.body.row, Товары, Док.ххх_Акции, Док.ВидыЦен,ШокАкция);
	Иначе	
		Для каждого строкаАкция из офер.body.row Цикл
			РазобратьСтроку(строкаАкция, Товары, Док.ххх_Акции, Док.ВидыЦен,ШокАкция);
		КонецЦикла;
	КонецЕсли;
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("тз",Товары);
	Запрос.текст="ВЫБРАТЬ
	|	тз.ВидЦены КАК ВидЦены,
	|	тз.Цена КАК Цена,
	|	тз.Номенклатура КАК Номенклатура,
	|	тз.КвалификаторДеленияДоковПоОперациям КАК КвалификаторДеленияДоковПоОперациям,
	|	тз.ххх_ПериодДействияАкцииКонец КАК ххх_ПериодДействияАкцииКонец,
	|	тз.ххх_ПериодДействияАкцииНачало КАК ххх_ПериодДействияАкцииНачало
	|ПОМЕСТИТЬ тз
	|ИЗ
	|	&тз КАК тз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тз.ВидЦены КАК ВидЦены,
	|	тз.Цена КАК Цена,
	|	тз.Номенклатура КАК Номенклатура,
	|	тз.КвалификаторДеленияДоковПоОперациям КАК КвалификаторДеленияДоковПоОперациям,
	|	тз.ххх_ПериодДействияАкцииКонец КАК ххх_ПериодДействияАкцииКонец,
	|	тз.ххх_ПериодДействияАкцииНачало КАК ххх_ПериодДействияАкцииНачало
	|ИЗ
	|	тз КАК тз
	|
	|УПОРЯДОЧИТЬ ПО
	|	тз.Номенклатура.ххх_НаименованиеЦенник
	|ИТОГИ ПО
	|	КвалификаторДеленияДоковПоОперациям,
	|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	
	тз=Запрос.Выполнить().Выгрузить();
	
	//ValMa - Для "Шок" для всех товаров 1 документ "Установка цен номенклатуры"
	Если ШокАкция = "Шок" Тогда
		//РазобратьАкциюШок(тз,Док,"Шок",офер.Header.Comment);
		РазобратьАкциюШок(тз, Док, офер.Header.Comment);
	Иначе
	//--
		й=0;
		Пока й < Тз.Количество() цикл
			Если Не ЗначениеЗаполнено(Тз[й].номенклатура) или Тз[й].номенклатура.Этогруппа и ЗначениеЗаполнено(Тз[й].номенклатура.Родитель) тогда
				Тз.Удалить(Тз[й]);
				й=й-1;
			КонецЕсли;
			й=й+1;
		КонецЦикла;
				
		группа="";
		ДокСоздания="";
		УбратьВновь="";
		Для каждого стр из Тз Цикл
			Если стр.номенклатура.Этогруппа Тогда
				Если ДокСоздания<>"" Тогда
					ДСТ=ДокСоздания.Товары.выгрузить();
					ДСТ.свернуть("ВидЦены");
					ДокСоздания.ВидыЦен.загрузить(ДСТ);
					//ДокСоздания.ххх_Акции.Свернуть("Номенклатура,ххх_ПериодДействияАкцииНачало,ххх_ПериодДействияАкцииКонец");
					//
					//Если ДокСоздания.ххх_Акции.количество()<>0 Тогда
					//	ххх_ПериодДействияАкцииНачало=ДокСоздания.ххх_Акции[0].ххх_ПериодДействияАкцииНачало;
					//	ххх_ПериодДействияАкцииКонец=ДокСоздания.ххх_Акции[0].ххх_ПериодДействияАкцииКонец;
					//КонецЕсли;
					
					//ДокСоздания.Комментарий=ШокАкция+" "
					//+Формат(ххх_ПериодДействияАкцииНачало,"ДФ=dd.MM.yy")+"-"
					//+Формат(ххх_ПериодДействияАкцииКонец,"ДФ=dd.MM.yy")+" "
					ДокСоздания.Комментарий = офер.Header.Comment +" "
					+УбратьВновь+" "+Группа.наименование+" "+ДокСоздания.Комментарий;
					ДокСоздания.Записать();
				КонецЕсли;
				ДокСоздания=Док.Скопировать();
				ДокСоздания.дата=ТекущаяДата();
				группа=стр.номенклатура;
				УбратьВновь=?(стр.КвалификаторДеленияДоковПоОперациям=1,"Вновь","Убрать");
			Иначе //не группа
				стрТов=ДокСоздания.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(стрТов,стр);
				СтрАкции=ДокСоздания.ххх_Акции.Добавить();
				ЗаполнитьЗначенияСвойств(СтрАкции,стр);
			КонецЕсли;
		КонецЦикла;
		Если ДокСоздания<>"" Тогда
			ДСТ=ДокСоздания.Товары.выгрузить();
			ДСТ.свернуть("ВидЦены");
			ДокСоздания.ВидыЦен.загрузить(ДСТ);
			//ДокСоздания.ххх_Акции.Свернуть("Номенклатура,ххх_ПериодДействияАкцииНачало,ххх_ПериодДействияАкцииКонец");
			//
			//Если ДокСоздания.ххх_Акции.количество()<>0 Тогда
			//	ххх_ПериодДействияАкцииНачало=ДокСоздания.ххх_Акции[0].ххх_ПериодДействияАкцииНачало;
			//	ххх_ПериодДействияАкцииКонец=ДокСоздания.ххх_Акции[0].ххх_ПериодДействияАкцииКонец;
			//КонецЕсли;
			
			//ДокСоздания.Комментарий=ШокАкция+" "
			//+Формат(ххх_ПериодДействияАкцииНачало,"ДФ=dd.MM.yy")+"-"
			//+Формат(ххх_ПериодДействияАкцииКонец,"ДФ=dd.MM.yy")+" "
			ДокСоздания.Комментарий = офер.Header.Comment +" "
			+УбратьВновь+" "+Группа.наименование+" "+ДокСоздания.Комментарий;
			ДокСоздания.Записать();
		КонецЕсли;
	КонецЕсли; //ValMa

КонецПроцедуры

Процедура РазобратьАкциюШок(ТаблЗн, ДокУстЦен, Коммент)
		
	//ValMa - удаляем строки в ТЗ. оставляем только товары
	Для Индекс = -ТаблЗн.Количество()+1 По 0 Цикл
		Если НЕ ЗначениеЗаполнено(ТаблЗн[-Индекс].Номенклатура) ИЛИ
			ТаблЗн[-Индекс].Номенклатура.ЭтоГруппа Тогда
			ТаблЗн.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;	
	Для каждого стр из ТаблЗн Цикл
		стрТов = ДокУстЦен.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(стрТов, стр);
		СтрАкции = ДокУстЦен.ххх_Акции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрАкции, стр);
	КонецЦикла;
	
	ВидыЦенДок = ДокУстЦен.Товары.выгрузить();
	ВидыЦенДок.Свернуть("ВидЦены");
	ДокУстЦен.ВидыЦен.загрузить(ВидыЦенДок);
	//ДокУстЦен.ххх_Акции.Свернуть("Номенклатура,ххх_ПериодДействияАкцииНачало,ххх_ПериодДействияАкцииКонец");
	//
	//Если ДокУстЦен.ххх_Акции.количество()<>0 Тогда
	//	ПериодДействияАкцииНачало = ДокУстЦен.ххх_Акции[0].ххх_ПериодДействияАкцииНачало;
	//	ПериодДействияАкцииКонец  = ДокУстЦен.ххх_Акции[0].ххх_ПериодДействияАкцииКонец;
	//КонецЕсли;
	
	УбратьВновь=?(ТаблЗн[0].КвалификаторДеленияДоковПоОперациям = 1, "Вновь", "Убрать");
	
	ДокУстЦен.Комментарий = Коммент+" "
	//ДокУстЦен.Комментарий = ШокАкция+" "
	//+Формат(ПериодДействияАкцииНачало,"ДФ=dd.MM.yy")+"-"
	//+Формат(ПериодДействияАкцииКонец,"ДФ=dd.MM.yy")+" "
	+УбратьВновь+" "
	+ДокУстЦен.Комментарий;
	ДокУстЦен.Записать();
	
КонецПроцедуры

функция получитьШокАкция(ИдШокАкция)
	
	Если ИдШокАкция = "1" Тогда
		Возврат "Шок";
	ИначеЕсли ИдШокАкция = "3" Тогда
		Возврат "Акция";
	Иначе
		Возврат "99";
	КонецЕСли;
	
КонецФункции

процедура РазобратьСтроку(СтрокаАкция, Товары, Акции, ВидыЦен, ШокАкция)
	
	ИдОперации=получитьОперацииРазбиения(СтрокаАкция.OperationId);
	Если ИдОперации=9 Тогда 
		возврат;
	КонецЕсли;
	
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("ид",СтрокаАкция.ProductId);
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	НЕ Номенклатура.ЭтоГруппа
	             |	И Номенклатура.ххх_ИдЦентр = &ид";
	выборка=Запрос.Выполнить().Выбрать();
	выборка.Следующий();
	
	Если ЗначениеЗаполнено(СтрокаАкция.RetailPrice) Тогда
		
		стр=Товары.добавить();
		
		ЗаполнитьСтрокуТоваров(стр,Справочники.ххх_Справочник.РозничнаяЦена.Значение,выборка.ссылка,СтрокаАкция.RetailPrice,
			ИдОперации,преобразоватьСКЛДатуВ1сДату(СтрокаАкция.StartDate),преобразоватьСКЛДатуВ1сДату(СтрокаАкция.EndDate));
			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаАкция.PriceBeforeOffer) и ШокАкция="Шок" Тогда
		
		стр=Товары.добавить();
		ЗаполнитьСтрокуТоваров(стр,Справочники.ххх_Справочник.ВидЦеныШокиЗачеркнутая.Значение,выборка.ссылка,СтрокаАкция.PriceBeforeOffer,
			ИдОперации,преобразоватьСКЛДатуВ1сДату(СтрокаАкция.StartDate),преобразоватьСКЛДатуВ1сДату(СтрокаАкция.EndDate));
		
	КонецЕСли;
	
	Если ЗначениеЗаполнено(СтрокаАкция.PurchasePrice) Тогда
			
		//стр=Товары.добавить();	
		//ЗаполнитьСтрокуТоваров(стр,Справочники.ххх_Справочник.ЗакупочнаяЦена.Значение,выборка.ссылка,СтрокаАкция.PurchasePrice,
		//	ИдОперации,преобразоватьСКЛДатуВ1сДату(СтрокаАкция.StartDate),преобразоватьСКЛДатуВ1сДату(СтрокаАкция.EndDate));	
	КонецЕСли;
	
	//ххх_ПериодДействияАкцииНачало=преобразоватьСКЛДатуВ1сДату(СтрокаАкция.StartDate);
	//ххх_ПериодДействияАкцииКонец=преобразоватьСКЛДатуВ1сДату(СтрокаАкция.EndDate);
	
	//стр=Акции.Добавить();
	//стр.ххх_ПериодДействияАкцииКонец=ххх_ПериодДействияАкцииКонец;
	//стр.ххх_ПериодДействияАкцииНачало=ххх_ПериодДействияАкцииНачало;
	//стр.номенклатура=выборка.ссылка;
	
	Если Не ЗначениеЗаполнено(выборка.ссылка) Тогда
//		ВызватьИсключение("Не найдена номенклатура: "+СтрокаАкция.ProductId+", обратитесь к менеджерам что бы открыли допуск, выгрузили вам обновления, далее принимаете это обновление и только после этого акцию.");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////

Процедура РазобратьЗипАрхивы()
		
	АдресСайта = "79.172.36.38/" ;
	//Порт = 21;
	Логин = "1c";
	Пароль = "!MegaRoot";
	ИмяКаталога = Магазин.ххх_КаталогФТПЗагрузки;
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	файлы=FTPСоединение.НайтиФайлы("*.zip");
	
	Если файлы.Количество() = 0 тогда
		сООБЩИТЬ("Нету файлов для загрузки.");
		Возврат;
	КонецЕсли;
		
	ФайлНужный=файлы[файлы.количество()-1];
	
	ВременныйФайлНужный = ПолучитьИмяВременногоФайла("zip");
	FTPСоединение.Получить(ФайлНужный.ПолноеИмя,ВременныйФайлНужный);
		
	ЧтениеZIP = Новый ЧтениеZipФайла(ВременныйФайлНужный);
	ЧтениеZIP.ИзвлечьВсе(Магазин.ххх_ПутьЗагрузкиНСИ);
	
	й=0;
		
	файлыБак=FTPСоединение.НайтиФайлы("*.bak");
	
	Для каждого файл из файлыБак цикл
				
		FTPСоединение.Удалить(файл.ПолноеИмя);
		
	КонецЦикла;
	
	FTPСоединение.Записать(ВременныйФайлНужный,ФайлНужный.ИмяБезРасширения+".bak");
	
	Для каждого файл из файлы цикл
		
		FTPСоединение.Удалить(файл.ПолноеИмя);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
процедура ххх_ОбменСОфисомКлиент()
	ххх_ОбменСОфисом();
	//выгрузкаВОфисХМЛ();	
КонецПроцедуры

Процедура ххх_ОбменСОфисом() 
	АдресСайта = "79.172.36.38/" ;
	//Порт = 21;
	Логин = "1c";
	Пароль = "!MegaRoot";
	ИмяКаталога = Магазин.ххх_КаталогФТПЗагрузки;
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	//РазобратьЗипАрхивы(FTPСоединение);
	
	файлы=FTPСоединение.НайтиФайлы("*.xml");
	Если файлы.Количество() = 0 тогда
		Возврат;
	КонецЕсли;        

	Для каждого файл из файлы цикл
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		FTPСоединение.Получить(файл.ПолноеИмя,ВременныйФайл);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайл);
		
		//ТипЗначенияXDTO = ФабрикаXDTO.Тип("url:\\apple-office.ru", "Root");
		//НашПакет=ФабрикаXDTO.пакеты.получить("url:\\apple-office.ru");
		//ОбъектXDTO=ФабрикаXDTO.Создать(НашПакет.КорневыеСвойства.Получить("root").Тип);

		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);//,ОбъектXDTO.Тип());
		
		
		Если ОбъектXDTO.Свойства().получить("properties")<>Неопределено Тогда
			РазобратьСвойства(ОбъектXDTO);
		КонецЕсли;

		
		Если ОбъектXDTO.Свойства().получить("alcoholDatas")<>Неопределено Тогда
			РазобратьМРЦ(ОбъектXDTO);
		КонецЕсли;
		
		Если ОбъектXDTO.Свойства().получить("items")<>Неопределено Тогда		
			РазобратьАйтемсы(ОбъектXDTO);
		КонецЕсли;
		
		Если ОбъектXDTO.Свойства().получить("barcodes")<>Неопределено Тогда
			//РазобратьШтрихкоды(ОбъектXDTO);
		КонецЕсли;
		
		Если ОбъектXDTO.Свойства().получить("suppliers")<>Неопределено Тогда
			РазобратьПоставщиков(ОбъектXDTO);
		КонецЕсли;



		//		FTPСоединение.Переместить(ВременныйФайл,ИмяКаталога);
		FTPСоединение.Удалить(файл.ПолноеИмя);
	КонецЦикла;	
		
КонецПроцедуры

Процедура РазобратьАйтемсы(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	тз.Колонки.Добавить("ТНВЭД",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(10)));
	тз.Колонки.Добавить("ОписаниеПолное",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(1024)));
	
	
	
	тзСвойства=Новый ТаблицаЗначений;
	тзСвойства.Колонки.Добавить("ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	тзСвойства.Колонки.Добавить("идСвойства",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)));
	тзСвойства.Колонки.Добавить("Значение",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));

	
	Если проверкаНаОбъект(ОбъектXDTO.items.item) тогда
		
		item=ОбъектXDTO.items.item;
		стр=Тз.Добавить();
		стр.ид=item.Id;
		стр.ОписаниеПолное=?(Строка(item.compositionFull)="ОбъектXDTO","",item.compositionFull);
		
		стр.ТНВЭД=?(Строка(item.classifier.tnved)="ОбъектXDTO","",item.classifier.tnved);

		РазобратьЗначенияСвойств(тзСвойства,item);
		
	Иначе
		Для каждого item из ОбъектXDTO.items.item цикл
			
			стр=Тз.Добавить();
			стр.ид=item.Id;
			стр.ОписаниеПолное=?(Строка(item.compositionFull)="ОбъектXDTO","",item.compositionFull);
			стр.ТНВЭД=?(Строка(item.classifier.tnved)="ОбъектXDTO","",item.classifier.tnved);
			РазобратьЗначенияСвойств(тзСвойства,item);
			
		КонецЦикла;
	КонецЕсли;	
	
	тзТНВЭД=тз.Скопировать(,"ТНВЭД");
	тзТНВЭД.Свернуть("ТНВЭД");
	
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("тзТНВЭД",тзТНВЭД);
    запрос.Текст="ВЫБРАТЬ
                 |	тзТНВЭД.ТНВЭД КАК ТНВЭД
                 |ПОМЕСТИТЬ йцу
                 |ИЗ
                 |	&тзТНВЭД КАК тзТНВЭД
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	йцу.ТНВЭД КАК ТНВЭД
                 |ИЗ
                 |	йцу КАК йцу
                 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
                 |		ПО йцу.ТНВЭД = КлассификаторТНВЭД.Код
                 |ГДЕ
                 |	КлассификаторТНВЭД.Ссылка ЕСТЬ NULL
                 |	И йцу.ТНВЭД <> """"";
	
	
	выборка=Запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() цикл
		
		тнвэд=Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
		тнвэд.Код=выборка.тнвэд;
		тнвэд.Наименование=выборка.тнвэд;
		тнвэд.НаименованиеПолное=выборка.тнвэд;
		тнвэд.Записать();
		
	КонецЦикла;
	
	
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("тз",тз);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.ид КАК ид,
	             |	тз.ТНВЭД КАК ТНВЭД,
	             |	тз.ОписаниеПолное КАК ОписаниеПолное
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.ид КАК ид,
	             |	йцу.ОписаниеПолное КАК ОписаниеПолное,
	             |	КлассификаторТНВЭД.Ссылка КАК тнвэд
	             |ПОМЕСТИТЬ ПоискТНВЭД
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	             |		ПО йцу.ТНВЭД = КлассификаторТНВЭД.Код
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПоискТНВЭД.ОписаниеПолное КАК ОписаниеПолное,
	             |	Номенклатура.Ссылка КАК Ссылка,
	             |	ПоискТНВЭД.тнвэд КАК тнвэд
	             |ИЗ
	             |	ПоискТНВЭД КАК ПоискТНВЭД
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО ПоискТНВЭД.ид = Номенклатура.ххх_ИдЦентр
	             |			И (ПоискТНВЭД.ОписаниеПолное <> Номенклатура.ххх_ОписаниеПолное
	             |				ИЛИ ПоискТНВЭД.тнвэд <> Номенклатура.КодТНВЭД)
	             |			И (НЕ Номенклатура.ЭтоГруппа)";

	Выборка=Запрос.Выполнить().Выбрать();
	пока Выборка.Следующий() цикл 
		
		номка=выборка.ссылка.получитьОбъект();
		номка.ххх_ОписаниеПолное=выборка.ОписаниеПолное;
		номка.КодТНВЭД=выборка.тнвэд;
		Номка.записать();
		
	КонецЦикла;
	
	
	Если магазин.ххх_ИнтернетМагазин Тогда
		возврат;
	КонецЕсли;
	
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("тз",тзСвойства);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.ид КАК ид,
	             |	тз.идСвойства КАК идСвойства,
	             |	тз.Значение КАК Значение
	             |ПОМЕСТИТЬ свойства
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	             |	свойства.Значение КАК Значение,
	             |	Номенклатура.Ссылка КАК Номка
	             |ПОМЕСТИТЬ промежутка
	             |ИЗ
	             |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ свойства КАК свойства
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |			ПО свойства.ид = Номенклатура.ххх_ИдЦентр
	             |				И (НЕ Номенклатура.ЭтоГруппа)
	             |		ПО (свойства.идСвойства = ДополнительныеРеквизитыИСведения.ххх_ИдЦентр)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	промежутка.Свойство КАК Свойство,
	             |	промежутка.Номка КАК объект,
	             |	промежутка.Значение КАК Значение,
	             |	ВЫБОР
	             |		КОГДА ДополнительныеСведения.Объект ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК Новый,
	             |	ДополнительныеСведения.Значение КАК Значение1,
	             |	ДополнительныеСведения.Объект КАК Объект1,
	             |	ДополнительныеСведения.Свойство КАК Свойство1
	             |ПОМЕСТИТЬ итог
	             |ИЗ
	             |	промежутка КАК промежутка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	             |		ПО (ДополнительныеСведения.Объект = промежутка.Номка)
	             |			И (ДополнительныеСведения.Свойство = промежутка.Свойство)
	             |			И (ЕСТЬNULL(ДополнительныеСведения.Значение, """") <> промежутка.Значение)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	итог.Свойство КАК Свойство,
	             |	итог.объект КАК объект,
	             |	итог.Значение КАК Значение,
	             |	итог.Значение1 КАК Значение1,
	             |	итог.Свойство1 КАК Свойство1,
	             |	итог.Объект1 КАК Объект1
	             |ИЗ
	             |	итог КАК итог
	             |ИТОГИ ПО
	             |	Свойство";
	ВыборкаСвойства=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаСвойства.Следующий() Цикл
		й=1;
		выборка=ВыборкаСвойства.Выбрать();
		наб=регистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		наб.Отбор.свойство.установить(ВыборкаСвойства.Свойство);
		пока выборка.Следующий() Цикл
			стр=наб.Добавить();
			ЗаполнитьЗначенияСвойств(стр,выборка);
			//мен.Записать(истина);
			й=й+1;
		КонецЦикла;
		наб.Записать(Истина);
	КонецЦикла;	
КонецПроцедуры


Процедура РазобратьПоставщиков(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("инн",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Кпп",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИмяЛонг",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Адресс",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Дир",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Бух",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Серия",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("АдрессСклад",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("От",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Тч.Колонки.Добавить("До",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Тч.Колонки.Добавить("НовыйФорматВозвратов",Новый ОписаниеТипов("Булево"));	
	Тч.Колонки.Добавить("ПлательщикНДС",Новый ОписаниеТипов("Булево"));
	Тч.Колонки.Добавить("EDI",Новый ОписаниеТипов("Булево"));

	
	Для каждого контр из ОбъектXDTO.suppliers.supplier цикл
		
		стрТч=Тч.Добавить();
		стрТч.Ид=контр.id;
		стрТч.Имя=контр.name;
		стрТч.ИмяЛонг=контр.nameFull;
		стрТч.адресс=контр.address;
		стрТч.АдрессСклад=контр.shipping;
		стрТч.Дир=контр.director;
		стрТч.Бух=контр.buh;
		стрТч.Серия=контр.seria;
		
		стрТч.ПлательщикНДС=?(контр.vatPayer="true",истина,ложь);
		//Если СокрЛП(магазин.Код)<>"25" Тогда
			стрТч.НовыйФорматВозвратов=?(контр.correctiveInvoice="true",истина,ложь);
		//КонецЕсли;
		//ИннКпп=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛп(МассивКол[5]),"\");
		стрТч.инн=контр.inn;
		стрТч.кпп=контр.kpp;
		
		//От=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛп(МассивКол[9]),".");
		стрТч.от=контр.dateBegin;
		
		//До=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛп(МассивКол[10]),".");
		стрТч.До=контр.dateEnd;
		
		стрТч.EDI=?(контр.edi="true",истина,ложь);;
		
		//итератор=итератор+1;

		
	КонецЦикла;
	
	//
	//
	
	
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("тч",Тч);
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("ПОСТАВЩИКИ");
	наб.Прочитать();
	ГруппаПостав=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("АдресСклада");
	наб.Прочитать();
	ВидКонтИнфСклад=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("Бухгалтер");
	наб.Прочитать();
	ВидКонтИнфБух=наб[0].ЗначениеВБазе;
	
	наб=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	наб.Отбор.файл.установить("post_Пикник");
	наб.Отбор.свойство.установить("директор");
	наб.Прочитать();
	ВидКонтИнфДир=наб[0].ЗначениеВБазе;
	
	Запрос.УстановитьПараметр("Постав",ГруппаПостав);
	Запрос.УстановитьПараметр("ВидКонтИнфСклад",ВидКонтИнфСклад);
	Запрос.УстановитьПараметр("ВидКонтИнфБух",ВидКонтИнфБух);
	Запрос.УстановитьПараметр("ВидКонтИнфДир",ВидКонтИнфДир);
	Запрос.УстановитьПараметр("ВидКонтИнфЮрАдр",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ВидКонтИнфФактАдр",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.инн КАК инн,
	             |	Тч.Ид КАК Ид,
	             |	Тч.адресс КАК адресс,
	             |	Тч.кпп КАК кпп,
	             |	Тч.АдрессСклад КАК АдрессСклад,
	             |	Тч.Дир КАК Дир,
	             |	Тч.Бух КАК Бух,
	             |	Тч.Серия КАК Серия,
	             |	Тч.От КАК От,
	             |	Тч.имяЛонг КАК имяЛонг,
	             |	Тч.До КАК До,
	             |	Тч.ПлательщикНДС КАК ПлательщикНДС,
	             |	Тч.НовыйФорматВозвратов КАК НовыйФорматВозвратов,
	             |	Тч.edi КАК edi
	             |ПОМЕСТИТЬ тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаАдрессСклада,
	             |	ВложенныйЗапрос.АдрессСклада КАК АдрессСклада,
	             |	ВложенныйЗапрос.НомерСтрокиАдрессСклада КАК НомерСтрокиАдрессСклада
	             |ПОМЕСТИТЬ АдрессаСкладов
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК АдрессСклада,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиАдрессСклада
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфСклад) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |			И (Контрагенты.Ссылка В ИЕРАРХИИ (&Постав))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаЮрАдресс,
	             |	ВложенныйЗапрос.ЮрАдресс КАК ЮрАдресс,
	             |	ВложенныйЗапрос.НомерСтрокиЮрАдресс КАК НомерСтрокиЮрАдресс
	             |ПОМЕСТИТЬ ЮрАдресса
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК ЮрАдресс,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиЮрАдресс
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфЮрАдр) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаЮрАдресс,
	             |	ВложенныйЗапрос.ФактАдресс КАК ФактАдресс,
	             |	ВложенныйЗапрос.НомерСтрокиФактАдресс КАК НомерСтрокиФактАдресс
	             |ПОМЕСТИТЬ ФактАдресса
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК ФактАдресс,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиФактАдресс
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфФактАдр) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаБух,
	             |	ВложенныйЗапрос.Бух КАК Бух,
	             |	ВложенныйЗапрос.НомерСтрокиБух КАК НомерСтрокиБух
	             |ПОМЕСТИТЬ Бухи
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК Бух,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиБух
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфБух) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаДир,
	             |	ВложенныйЗапрос.Дир КАК Дир,
	             |	ВложенныйЗапрос.НомерСтрокиДир КАК НомерСтрокиДир
	             |ПОМЕСТИТЬ Диры
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	             |			КонтрагентыКонтактнаяИнформация.Представление КАК Дир,
	             |			КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтрокиДир
	             |		ИЗ
	             |			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	             |		ГДЕ
	             |			КонтрагентыКонтактнаяИнформация.Вид = &ВидКонтИнфДир) КАК ВложенныйЗапрос
	             |		ПО (ВложенныйЗапрос.Ссылка = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК СсылкаЛицензия,
	             |	ЛицензииПоставщиковАлкогольнойПродукции.Ссылка КАК Лицензия,
	             |	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК ДатаНачала,
	             |	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК ДатаОкончания
	             |ПОМЕСТИТЬ Лицензии
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	             |		ПО (ЛицензииПоставщиковАлкогольнойПродукции.Владелец = Контрагенты.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Контрагенты.Ссылка КАК Ссылка,
	             |	Контрагенты.ххх_ИдЦентр КАК ххх_ИдЦентр
	             |ПОМЕСТИТЬ Поставщики
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |ГДЕ
	             |	Контрагенты.Ссылка В ИЕРАРХИИ(&Постав)
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ххх_ИдЦентр
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АдрессаСкладов.СсылкаАдрессСклада КАК Ссылка,
	             |	АдрессаСкладов.СсылкаАдрессСклада.Родитель КАК Родитель,
	             |	АдрессаСкладов.СсылкаАдрессСклада.ИНН КАК ИНН,
	             |	АдрессаСкладов.СсылкаАдрессСклада.КПП КАК КПП,
	             |	АдрессаСкладов.СсылкаАдрессСклада.НаименованиеПолное КАК НаименованиеПолное,
	             |	АдрессаСкладов.СсылкаАдрессСклада.Наименование КАК Наименование,
	             |	АдрессаСкладов.СсылкаАдрессСклада.ххх_ИдЦентр КАК ххх_ИдЦентр,
	             |	АдрессаСкладов.АдрессСклада КАК АдрессСклада,
	             |	Бухи.Бух КАК Бух,
	             |	Диры.Дир КАК Дир,
	             |	Лицензии.Лицензия КАК Лицензия,
	             |	ЮрАдресса.ЮрАдресс КАК ЮрАдресс,
	             |	Лицензии.ДатаНачала КАК ДатаНачала,
	             |	Лицензии.ДатаОкончания КАК ДатаОкончания,
	             |	АдрессаСкладов.НомерСтрокиАдрессСклада КАК НомерСтрокиАдрессСклада,
	             |	Бухи.НомерСтрокиБух КАК НомерСтрокиБух,
	             |	Диры.НомерСтрокиДир КАК НомерСтрокиДир,
	             |	ЮрАдресса.НомерСтрокиЮрАдресс КАК НомерСтрокиЮрАдресс,
	             |	ФактАдресса.НомерСтрокиФактАдресс КАК НомерСтрокиФактАдресс,
	             |	ФактАдресса.ФактАдресс КАК ФактАдресс
	             |ПОМЕСТИТЬ Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир
	             |ИЗ
	             |	АдрессаСкладов КАК АдрессаСкладов
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЮрАдресса КАК ЮрАдресса
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = ЮрАдресса.СсылкаЮрАдресс
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Диры КАК Диры
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = Диры.СсылкаДир
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Лицензии КАК Лицензии
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = Лицензии.СсылкаЛицензия
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Бухи КАК Бухи
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = Бухи.СсылкаБух
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФактАдресса КАК ФактАдресса
	             |		ПО АдрессаСкладов.СсылкаАдрессСклада = ФактАдресса.СсылкаЮрАдресс
	             |ГДЕ
	             |	АдрессаСкладов.СсылкаАдрессСклада.Родитель = &постав
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Тч.Имя КАК Имя,
	             |	Тч.инн КАК инн,
	             |	Тч.Ид КАК ххх_ИдЦентр,
	             |	Тч.кпп КАК кпп,
	             |	Тч.имяЛонг КАК имяЛонг,
	             |	Тч.адресс КАК адресс,
	             |	Тч.АдрессСклад КАК АдрессСклад,
	             |	Тч.Дир КАК Дир,
	             |	Тч.Бух КАК Бух,
	             |	Тч.Серия КАК Серия,
	             |	Тч.От КАК От,
	             |	Тч.До КАК До,
	             |	ЕСТЬNULL(Поставщики.Ссылка, 0) КАК Контрагент,
	             |	МАКСИМУМ(Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиЮрАдресс) КАК НомерСтрокиЮрАдрес,
	             |	МАКСИМУМ(Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиДир) КАК НомерСтрокиДир,
	             |	МАКСИМУМ(Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиБух) КАК НомерСтрокиБух,
	             |	МАКСИМУМ(Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиАдрессСклада) КАК НомерСтрокиАдрессСклада,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаНачала КАК ДатаНачала,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаОкончания КАК ДатаОкончания,
	             |	МАКСИМУМ(Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НомерСтрокиФактАдресс) КАК НомерСтрокиФактАдресс,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ФактАдресс КАК ФактАдресс,
	             |	Тч.ПлательщикНДС КАК ПлательщикНДС,
	             |	Тч.НовыйФорматВозвратов КАК НовыйФорматВозвратов,
	             |	Тч.edi КАК edi
	             |ИЗ
	             |	тч КАК Тч
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Поставщики КАК Поставщики
	             |		ПО Тч.Ид = Поставщики.ххх_ИдЦентр
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир КАК Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир
	             |		ПО Тч.Ид = Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ххх_ИдЦентр
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Тч.Ид,
	             |	Тч.Имя,
	             |	Тч.инн,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаНачала,
	             |	Тч.АдрессСклад,
	             |	Тч.От,
	             |	Тч.Бух,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ФактАдресс,
	             |	Тч.НовыйФорматВозвратов,
	             |	Тч.edi,
	             |	Тч.адресс,
	             |	Тч.ПлательщикНДС,
	             |	Тч.До,
	             |	Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаОкончания,
	             |	Тч.Дир,
	             |	Тч.Серия,
	             |	Тч.кпп,
	             |	Тч.имяЛонг,
	             |	ЕСТЬNULL(Поставщики.Ссылка, 0)";
				 //|			И (Тч.Имя <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Наименование
				 //|				ИЛИ Тч.инн <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ИНН
				 //|				ИЛИ Тч.кпп <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.КПП
				 //|				ИЛИ НЕ Тч.имяЛонг ПОДОБНО Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.НаименованиеПолное
				 //|				ИЛИ Тч.АдрессСклад <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.АдрессСклада
				 //|				ИЛИ Тч.Дир <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Дир
				 //|				ИЛИ Тч.Бух <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Бух
				 //|				ИЛИ Тч.Серия <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.Серия
				 //|				ИЛИ Тч.От <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаНачала
				 //|				ИЛИ Тч.До <> Контрагент_АдрессСклада_АлкоСерияОтДо_Бух_Дир.ДатаОкончания)";

	Выборка=Запрос.Выполнить().Выбрать();
	//пакет=запрос.ВыполнитьПакет();
	й=1;
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контрагент)=тип("СправочникСсылка.Контрагенты") Тогда
			Контрагент=Выборка.Контрагент.получитьОбъект();
			//Если ЗначениеЗаполнено(Выборка.Лицензия) Тогда
			//	Лицензия=Выборка.Лицензия.получитьОбъект();
			//иначеесли ЗначениеЗаполнено(выборка.серия) тогда
			//	Лицензия=Справочники.ЛицензииПоставщиковАлкогольнойПродукции.СоздатьЭлемент();
			//КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиЮрАдрес) Тогда
				ЮрАдрес=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиЮрАдрес-1];
				ЮрАдрес.Представление=выборка.адресс;
				ЮрАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.адресс,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				ЮрАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
			иначеесли ЗначениеЗаполнено(выборка.адресс) тогда
				ЮрАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ЮрАдрес.вид=справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЮрАдрес.Представление=выборка.адресс;	
				ЮрАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.адресс,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				ЮрАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиФактАдресс) Тогда
				ФактАдрес=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиФактАдресс-1];
				ФактАдрес.Представление=выборка.АдрессСклад;
				ФактАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				ФактАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
			иначеесли ЗначениеЗаполнено(выборка.адресс) тогда
				ФактАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ФактАдрес.вид=справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ФактАдрес.Представление=выборка.АдрессСклад;
				ФактАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				ФактАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.НомерСтрокиДир) Тогда
				Дир=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиДир-1];
			иначеесли ЗначениеЗаполнено(выборка.дир) тогда
				Дир=Контрагент.КонтактнаяИнформация.добавить();
				Дир.вид=ВидКонтИнфДир;
				Дир.Представление=выборка.дир;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиБух) Тогда
				Бух=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиБух-1];
			иначеесли ЗначениеЗаполнено(выборка.бух) тогда
				Бух=Контрагент.КонтактнаяИнформация.добавить();
				Бух.вид=ВидКонтИнфБух;
				Бух.Представление=выборка.бух;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НомерСтрокиАдрессСклада) Тогда
				АдрессСклада=Контрагент.КонтактнаяИнформация[Выборка.НомерСтрокиАдрессСклада-1];
				АдрессСклада.Представление=выборка.АдрессСклад;
				АдрессСклада.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдрессСклада.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);

			иначеесли ЗначениеЗаполнено(выборка.АдрессСклад) тогда
				АдрессСклада=Контрагент.КонтактнаяИнформация.добавить();
				АдрессСклада.вид=ВидКонтИнфСклад;
				АдрессСклада.Представление=выборка.АдрессСклад;
				АдрессСклада.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				АдрессСклада.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
			КонецЕсли;
		иначе
			Контрагент=Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.ххх_ИдЦентр=Выборка.ххх_ИдЦентр;
			//если ЗначениеЗаполнено(выборка.серия) тогда
			//	Лицензия=Справочники.ЛицензииПоставщиковАлкогольнойПродукции.СоздатьЭлемент();
			//КонецЕсли;
			если ЗначениеЗаполнено(выборка.адресс) тогда
				ЮрАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ЮрАдрес.вид=справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЮрАдрес.Представление=выборка.адресс;
				
				ФактАдрес=Контрагент.КонтактнаяИнформация.добавить();
				ФактАдрес.вид=справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ФактАдрес.Представление=выборка.АдрессСклад;
				
				ФактАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЮрАдрес.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;

				
				ЮрАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.адресс,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
				ФактАдрес.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
	
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.дир) тогда
				Дир=Контрагент.КонтактнаяИнформация.добавить();
				Дир.вид=ВидКонтИнфДир;
				Дир.Представление=выборка.дир;
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.бух) тогда
				Бух=Контрагент.КонтактнаяИнформация.добавить();
				Бух.вид=ВидКонтИнфБух;
				Бух.Представление=выборка.бух;
			КонецЕсли;
			если ЗначениеЗаполнено(выборка.АдрессСклад) тогда
				АдрессСклада=Контрагент.КонтактнаяИнформация.добавить();
				АдрессСклада.вид=ВидКонтИнфСклад;
				АдрессСклада.Представление=выборка.АдрессСклад;
				АдрессСклада.тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдрессСклада.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					выборка.АдрессСклад,Перечисления.ТипыКонтактнойИнформации["Адрес"]);
			КонецЕсли;
		КонецЕсли;
		Контрагент.Наименование=выборка.имя;
		Контрагент.инн=выборка.инн;
		Контрагент.кпп=?(выборка.кпп="0","",выборка.кпп);	
		Контрагент.НаименованиеПолное=выборка.имяЛонг;
		
		Контрагент.ххх_ПлательщикНДС=выборка.ПлательщикНДС;
		
		Контрагент.родитель=ГруппаПостав;
		Если стрДлина(выборка.инн)=10 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо;
			Если стрДлина(выборка.кпп)<>9 Тогда
				Сообщить("КПП не 9 символов, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		ИначеЕсли стрДлина(выборка.инн)=12 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо;
			Если стрДлина(выборка.кпп)<>0 Тогда
				Сообщить("У физ лиц не бывает КПП, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		ИначеЕсли стрДлина(выборка.инн)=0 тогда
			контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
			Если стрДлина(выборка.кпп)<>0 Тогда
				Сообщить("У иностранных лиц не бывает КПП, ид="+Контрагент.ххх_ИдЦентр);
			КонецЕсли;
		Иначе
			Сообщить("Не верная длина ИНН, ид="+Контрагент.ххх_ИдЦентр);
		КонецЕсли;
		Контрагент.ххх_Поставщик=Истина;
		

		Контрагент.ххх_НовыйФорматВозвратов=выборка.НовыйФорматВозвратов;
		Контрагент.ххх_edi=выборка.edi;
		//УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Контрагент.ПолучитьФорму("ФормаЭлемента"),Объект);
		
		
		
		Контрагент.записать();
		
		
		Отбор = Новый Структура("Контрагент", Контрагент.Ссылка);
		ДатыНовыхВозвратов = РегистрыСведений.ххх_ДатыНовыхФорматовВозвратов.СрезПоследних(ТекущаяДата(), Отбор);
		
		Если ДатыНовыхВозвратов.Количество()=0 или ДатыНовыхВозвратов[0].Введено<>выборка.НовыйФорматВозвратов Тогда
			
			мен=РегистрыСведений.ххх_ДатыНовыхФорматовВозвратов.создатьМенеджерЗаписи();
			
			мен.Контрагент=Контрагент.Ссылка;
			мен.Введено=выборка.НовыйФорматВозвратов;
			мен.Период=ТекущаяДата();
			мен.записать();
		КонецЕсли;
		
		
		//Если ЗначениеЗаполнено(выборка.серия) тогда
		//	Лицензия.Наименование=выборка.серия;
		//	Лицензия.Владелец=контрагент.ссылка;
		//	Лицензия.ДатаНачала=выборка.от;
		//	Лицензия.ДатаОкончания=выборка.до;
		//	лицензия.Записать();
		//КонецЕсли;
		й=й+1;
	КонецЦикла;

		
КонецПроцедуры

Процедура РазобратьМРЦ(ОбъектXDTO)
		
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("КодВидаПродукцииЕГАИС",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(4)));
	тз.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,3)));
	тз.Колонки.Добавить("Объем",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,3)));
	
	Если проверкаНаОбъект(ОбъектXDTO.alcoholDatas.alcoholData) тогда
		
		АлкоДата=ОбъектXDTO.alcoholDatas.alcoholData;
		стр=Тз.Добавить();
		стр.КодВидаПродукцииЕГАИС=АлкоДата.Code;
		стр.Объем=АлкоДата.Capacity;
		стр.Цена=АлкоДата.Price;
		
	Иначе
		Для каждого АлкоДата из ОбъектXDTO.alcoholDatas.alcoholData цикл
			
			стр=Тз.Добавить();
			стр.КодВидаПродукцииЕГАИС=АлкоДата.Code;
			стр.Объем=АлкоДата.Capacity;
			стр.Цена=АлкоДата.Price;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("тз",тз);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.Цена КАК Цена,
	             |	тз.Объем КАК Объем,
	             |	тз.КодВидаПродукцииЕГАИС КАК КодПродукцииЕГАИС
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВидыАлкогольнойПродукции.Ссылка КАК ВидАлкогольнойПродукции,
	             |	йцу.Объем КАК Объем,
	             |	йцу.Цена КАК Цена
	             |ПОМЕСТИТЬ йцу1
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	             |		ПО йцу.КодПродукцииЕГАИС = ВидыАлкогольнойПродукции.Код
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу1.ВидАлкогольнойПродукции КАК ВидПродукции,
	             |	йцу1.Объем КАК Объем,
	             |	йцу1.Цена КАК Цена,
	             |	ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Период КАК Период,
	             |	ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции КАК ВидПродукции1,
	             |	ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж КАК Литраж,
	             |	ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ КАК МРЦ
	             |ИЗ
	             |	йцу1 КАК йцу1
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ВидПродуцкцииМрцАлкаголь.СрезПоследних КАК ххх_ВидПродуцкцииМрцАлкагольСрезПоследних
	             |		ПО йцу1.ВидАлкогольнойПродукции = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции
	             |			И йцу1.Объем = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж
	             |			И йцу1.Цена = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ
	             |ГДЕ
	             |	ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции ЕСТЬ NULL";
	
	выборка=запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
	
		//Если ЗначениеЗаполнено(выборка.ВидПродукции1) тогда
		
			мен=РегистрыСведений.ххх_ВидПродуцкцииМрцАлкаголь.СоздатьМенеджерЗаписи();
			мен.ВидПродукции=выборка.ВидПродукции;
			мен.Литраж=выборка.объем;
			мен.МРЦ=выборка.Цена;
			мен.Период=ТекущаяДата();
			мен.Записать(Истина);
		//КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьСвойства(ОбъектXDTO)
	УстановитьПривилегированныйРежим(Истина);
	тз=Новый ТаблицаЗначений;
	//тз.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	тз.Колонки.Добавить("ид",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)));
	тз.Колонки.Добавить("имя",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	тз.Колонки.Добавить("Заголовок",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	
	Если проверкаНаОбъект(ОбъектXDTO.properties.property) тогда
		
		property=ОбъектXDTO.properties.property;
		стр=Тз.Добавить();
		стр.ид=property.id;
		стр.имя=СтрЗаменить(ТРег(property.name)," ","");
		стр.Заголовок=property.name;
	Иначе
		Для каждого property из ОбъектXDTO.properties.property цикл
			
			стр=Тз.Добавить();
			стр.ид=property.id;
			стр.имя=СтрЗаменить(ТРег(property.name)," ","");
			стр.Заголовок=property.name;
			
		КонецЦикла;
	КонецЕсли;	 
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("тз",тз);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.ид КАК ид,
	             |	тз.имя КАК имя,
	             |	тз.Заголовок КАК Заголовок
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.ид КАК ид,
	             |	йцу.имя КАК имя,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДополнительныеРеквизитыИСведения.Ссылка, ""Новый"") = ""новый""
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Новый,
	             |	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	             |	йцу.Заголовок КАК Заголовок
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	             |		ПО йцу.ид = ДополнительныеРеквизитыИСведения.ххх_ИдЦентр
	             |			И йцу.имя = ДополнительныеРеквизитыИСведения.Имя";
	Выборка=Запрос.Выполнить().Выбрать();
	
	пока выборка.Следующий() Цикл
		
		Если не выборка.новый Тогда
			харька=Выборка.ссылка.получитьОбъект();
		Иначе
			Харька=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			Харька.ххх_ИдЦентр=выборка.ид;
		КонецЕсли;
		
//		ЗаполнитьЗначенияСвойств(харька,справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
		харька.НаборСвойств=справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
		//ТипЗначения	Дополнительное значение	ОписаниеТипов
		харька.ТипЗначения=Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150));
		харька.Виден=Истина;
		харька.ЭтоДополнительноеСведение=Истина;
		харька.Доступен=Истина;
		харька.ЗаголовокФормыВыбораЗначения=выборка.Заголовок;
		харька.ЗаголовокФормыЗначения=выборка.Заголовок;
		харька.имя=выборка.имя;
		харька.Заголовок=выборка.Заголовок;
		харька.Наименование=выборка.Заголовок+" ("+харька.НаборСвойств+")";
		
		харька.записать();
		
		Если выборка.новый Тогда
			
			Справочник_Номенклатура_Общие=справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие.ПолучитьОбъект();
			стр=Справочник_Номенклатура_Общие.ДополнительныеСведения.Добавить();
			стр.Свойство=харька.Ссылка;
			Справочник_Номенклатура_Общие.КоличествоСведений=Справочник_Номенклатура_Общие.КоличествоСведений+1;
			Справочник_Номенклатура_Общие.Записать();
			
		КонецЕсли;
		КонецЦикла;
		
КонецПроцедуры

Процедура РазобратьШтрихкоды(ОбъектXDTO)
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	тз.Колонки.Добавить("Ид",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	тз.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	
	Если проверкаНаОбъект(ОбъектXDTO.barcodes.barcode) тогда
		
		баркод=ОбъектXDTO.barcodes.barcode;
		стр=Тз.Добавить();
		стр.ид=баркод.itemId;
		стр.Штрихкод=баркод.value;
		стр.Действие=баркод.operationName;
		
	Иначе
		Для каждого баркод из ОбъектXDTO.barcodes.barcode цикл
			
			 стр=Тз.Добавить();
			 стр.ид=баркод.itemId;
			 стр.Штрихкод=баркод.value;
			 стр.Действие=баркод.operationName;
			
		КонецЦикла;
	КонецЕсли;	 
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("тз",тз);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.ид КАК ид,
	             |	тз.действие КАК действие,
	             |	тз.Штрихкод КАК Штрихкод
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.ид КАК ид,
	             |	йцу.действие КАК действие,
	             |	йцу.Штрихкод КАК Штрихкод,
	             |	Номенклатура.Ссылка КАК Ссылка
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО йцу.ид = Номенклатура.ххх_ИдЦентр
	             |			И (НЕ Номенклатура.ЭтоГруппа)";
	Выборка=Запрос.Выполнить().Выбрать();
	
	пока выборка.Следующий() Цикл
		
		мен=РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		если выборка.действие="удален" Тогда
			мен.Штрихкод=выборка.штрихкод;
			мен.Прочитать();
			мен.Удалить();
		Иначе
			мен.Штрихкод=выборка.штрихкод;
			мен.Владелец=выборка.ссылка;
			мен.Дата=текущаяДата();
			мен.ТипШтрихкода=?(СтрДлина(выборка.штрихкод)=13,ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13,ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8);
			//мен.Прочитать();
			мен.Записать(истина);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура РазобратьЗначенияСвойств(тзСвойства,item)
	
	Если проверкаНаОбъект(item.properties) и item.properties.Свойства().количество()>0 и проверкаНаОбъект(item.properties.property) Тогда
		
		стр=тзСвойства.Добавить();
		стр.ид=item.Id;
		стр.идСвойства=item.properties.property.id;
		стр.Значение=item.properties.property.value;
		
		
	ИначеЕсли item.properties.Свойства().количество()>0 Тогда
		Для каждого property из item.properties.property цикл
			
			стр=тзСвойства.Добавить();
			стр.ид=item.Id;
			стр.идСвойства=property.id;
			стр.Значение=property.value;
			
		КонецЦикла;
	КонецЕсли;
	
	стр=тзСвойства.Добавить();
	
	стр.ид=item.Id;
	стр.идСвойства=item.idB1_Id;
	стр.Значение=item.idB1;
	
	стр=тзСвойства.Добавить();
	
	стр.ид=item.Id;
	стр.идСвойства=item.idB2_Id;
	стр.Значение=item.idB2;

	стр=тзСвойства.Добавить();
	
	стр.ид=item.Id;
	стр.идСвойства=item.idB3_Id;
	стр.Значение=item.idB3;
	
	стр=тзСвойства.Добавить();
	
	стр.ид=item.Id;
	стр.идСвойства=150;
	стр.Значение=item.lifeTime;


	
КонецПроцедуры















