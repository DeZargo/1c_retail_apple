
&НаКлиенте
&Вместо("ОповещениеПоискаПоШтрихкоду")
Процедура ОповещениеПоискаПоШтрихкодуКочетов(Структура, ДополнительныеПараметры) Экспорт	
	Если ЗначениеЗаполнено(Структура) Тогда
		штрихкод=Структура.штрихкод;
		Если Структура.ПоискПоВесовомуТовару=Ложь тогда
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			ТекущаяСтрокаЕГАИС = Неопределено;
		Иначе			
			Элементы.Товары.ТекущаяСтрока=ПоискПоВесовомуШтрихКоду(штрихкод);
			ТоварыНоменклатураПриИзменении("");
		КонецЕсли;
		//Zorius
		ПоискПоШтрихкоду("");
		//Zorius
	КонецЕсли;
КонецПроцедуры

Функция ПоискПоВесовомуШтрихКоду(штрихкод)
	номка=ххх_Сервер.ПолучитьВесовойШтрихкод(штрихкод);  //23 12647 00182 0
	Если значениеЗаполнено(номка) Тогда
		
		вес=Число(Лев(Прав(штрихкод,6),5)/1000);
		
		строки=Объект.товары.НайтиСтроки(Новый структура("Номенклатура",номка));
		
		стр=?(ЗначениеЗаполнено(строки),строки[0],неопределено);
		Если стр<>Неопределено Тогда
			стр.количество=стр.количество+вес;
			стр.количествоУпаковок=стр.количество;
		Иначе
			стр=Объект.товары.добавить();
			стр.Номенклатура=номка;
			стр.количество=вес;
			стр.количествоУпаковок=стр.количество;
		КонецЕсли;
		возврат стр.ПолучитьИдентификатор();
	Иначе
		Сообщить("Данные по коду не найдены: "+штрихкод);
		возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КочетовТоварыКоличествоУпаковок1ПриИзмененииВместо(Элемент)
	ПриИзмененииТоварыКоличестваУпаковок();
КонецПроцедуры

&НаСервере
&После("ОбработкаВыбораПодборНаСервере")
Процедура КочетовОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ВидЦены",Справочники.ххх_Справочник.ЗакупочнаяЦена.значение);
	Запрос.Текст="ВЫБРАТЬ
	             |	товары.НомерСтроки КАК НомерСтроки,
	             |	товары.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ номка
	             |ИЗ
	             |	&товары КАК товары
	             |ГДЕ
	             |	товары.Цена = 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	номка.НомерСтроки - 1 КАК НомерСтроки,
	             |	номка.Номенклатура КАК Номенклатура,
	             |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	             |ИЗ
	             |	номка КАК номка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО номка.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	выборка=Запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл		
		Объект.Товары[выборка.НомерСтроки].цена=выборка.цена;
		Объект.Товары[выборка.НомерСтроки].Сумма=выборка.цена*Объект.Товары[выборка.НомерСтроки].количество;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КочетовПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	//Если не РольДоступна("ПолныеПрава")Тогда
	//	
	//	Запрос=новый запрос;
	//	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.АвторизованныйПользователь);
	//	Запрос.УстановитьПараметр("ГруппаДоступаБухгалтер",Справочники.ххх_Справочник.ГруппаДоступаБухгалтер.значение);
	//	Запрос.Текст="ВЫБРАТЬ
	//	             |	ГруппыДоступаПользователи.Ссылка КАК Ссылка
	//	             |ИЗ
	//	             |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	//	             |ГДЕ
	//	             |	ГруппыДоступаПользователи.Ссылка = &ГруппаДоступаБухгалтер
	//	             |	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	//	Выборка=Запрос.Выполнить().Выбрать();
	//	
	//	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
	//		и ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров") 
	//		и не выборка.Следующий() тогда
	//		Отказ=истина;
	//		Сообщить("Не хватает парав!");
	//	КонецЕсли;
	//	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные=Неопределено или 
		Элементы.Товары.ТекущиеДанные<>Неопределено и не ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Сообщить("Заполните номенклатуру!");
		возврат;
	КонецЕсли;
	СтандартнаяОбработка=ложь;
	струк=Новый структура();
	струк.Вставить("Номенклатура",Элементы.Товары.ТекущиеДанные.Номенклатура);
	струк.Вставить("Магазин",Объект.Магазин);
	струк.Вставить("Организация",Объект.Организация);
	струк.Вставить("Склад",Объект.Склад);
	струк.Вставить("Дата",Объект.Дата);
	струк.Вставить("Контрагент",Объект.Контрагент);
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаВыбораПартииПоступВозврат",струк,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Объект.Товары[Элементы.Товары.ТекущаяСтрока].Партия=ВыбранноеЗначение.ПартияТоваров;
	Объект.Товары[Элементы.Товары.ТекущаяСтрока].Цена=ВыбранноеЗначение.Цена;
	
	Объект.Товары[Элементы.Товары.ТекущаяСтрока].Справка2=ВыбранноеЗначение.Справка2;
		
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));	
	СтруктураДействий.Вставить("ПересчитатьСумму");	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура КочетовКонтрагентПриИзмененииПосле()
	
	
	Для каждого стр из Объект.Товары Цикл
		стр.партия=неопределено;
	КонецЦикла;
	
	
	//Zorius
	Если КонтрагентПлательщикНДС() Тогда
		Объект.УчитыватьНДС=истина;
		Объект.ЦенаВключаетНДС=истина;
	Иначе
		Объект.УчитыватьНДС=ложь;
		Объект.ЦенаВключаетНДС=ложь;
	КонецЕсли;
	ЦенаВключаетНДСПриИзменении("");
	УчитыватьНДСПриИзменении("");
КонецПроцедуры

функция КонтрагентПлательщикНДС ()
 	возврат ?(ЗначениеЗаполнено(объект.Контрагент),объект.Контрагент.ххх_ПлательщикНДС и Осно(),ложь)
КонецФункции

функция Осно()
	Запрос=Новый запрос;
	//Запрос.УстановитьПараметр("Упрощенная",перечисления.СистемыНалогообложения.Упрощенная);
	Запрос.УстановитьПараметр("Упрощенная",перечисления.УдалитьСистемыНалогообложения.Упрощенная);
	Запрос.УстановитьПараметр("Орг",Объект.Организация);
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.Текст="ВЫБРАТЬ
	             |	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	             |ИЗ
				 //|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Орг) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	             |	РегистрСведений.УдалитьСистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Орг) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	выборка=Запрос.Выполнить().Выбрать();
	выборка.Следующий();
	//Если выборка.СистемаНалогообложения=перечисления.СистемыНалогообложения.Упрощенная тогда
	Если выборка.СистемаНалогообложения=перечисления.УдалитьСистемыНалогообложения.Упрощенная тогда	
		возврат ложь;
	Иначе
		возврат истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КочетовПриОткрытииПосле(Отказ)
	Если КонтрагентПлательщикНДС() Тогда
		Объект.УчитыватьНДС=истина;
		Объект.ЦенаВключаетНДС=истина;
	Иначе
		Объект.УчитыватьНДС=ложь;
		Объект.ЦенаВключаетНДС=ложь;
	КонецЕсли;
	ЦенаВключаетНДСПриИзменении("");
	УчитыватьНДСПриИзменении("");

	АналитикаХозяйственнойОперации=Объект.АналитикаХозяйственнойОперации;
КонецПроцедуры

&НаКлиенте
Процедура КочетовАналитикаХозяйственнойОперации1НачалоВыбораИзСпискаПеред(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура КочетовПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура КочетовАналитикаХозяйственнойОперации1ОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КочетовАналитикаХозяйственнойОперации2ПриИзмененииВместо(Элемент)
	Объект.АналитикаХозяйственнойОперации=АналитикаХозяйственнойОперации;
КонецПроцедуры

&НаКлиенте
Процедура КочетовЗаполнитьПоЛИФОПосле(Команда)
	КочетовЗаполнитьПоЛИФОПослеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КочетовЗаполнитьПоЛИФОПослеНаСервере()
	
	
	
	
	Для каждого стр из Объект.Товары Цикл
			
		Если стр.номенклатура.ВидНоменклатуры=Справочники.ххх_Справочник.ВидНоменклатурыАлкоголь.значение Тогда
			
			Сообщить("Заполнить по ЛИФО для алкогольной продукции нельзя!");
			возврат;
			
		КонецЕсли;
				
	КонецЦикла;
	
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("номка",Объект.Товары.Выгрузить().ВыгрузитьКолонку("номенклатура"));
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.УстановитьПараметр("магазин",Объект.Магазин);
	Запрос.УстановитьПараметр("тз",Объект.Товары.Выгрузить());
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.Номенклатура КАК Номенклатура,
	             |	тз.Количество КАК Количество,
	             |	тз.Цена КАК Цена,
	             |	тз.НомерСтроки КАК НомерСтроки
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.Номенклатура КАК Номенклатура,
	             |	СУММА(йцу.Количество) КАК Количество,
	             |	МАКСИМУМ(йцу.Цена) КАК Цена,
	             |	МАКСИМУМ(йцу.НомерСтроки) КАК НомерСтроки
	             |ПОМЕСТИТЬ йцу1
	             |ИЗ
	             |	йцу КАК йцу
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ххх_ПартииТоваровПоступВозвратОстатки.ПартияТоваров КАК ПартияТоваров,
	             |	ххх_ПартииТоваровПоступВозвратОстатки.Цена КАК Цена,
	             |	СУММА(ххх_ПартииТоваровПоступВозвратОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	             |	ххх_ПартииТоваровПоступВозвратОстатки.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ НеНулОстатки
	             |ИЗ
	             |	РегистрНакопления.ххх_ПартииТоваровПоступВозврат.Остатки(
	             |			&Дата,
	             |			ПартияТоваров.Контрагент = &Контрагент
	             |				И Номенклатура В (&номка)
	             |				И Магазин = &Магазин) КАК ххх_ПартииТоваровПоступВозвратОстатки
	             |ГДЕ
	             |	ххх_ПартииТоваровПоступВозвратОстатки.КоличествоОстаток > 0
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ххх_ПартииТоваровПоступВозвратОстатки.ПартияТоваров,
	             |	ххх_ПартииТоваровПоступВозвратОстатки.Цена,
	             |	ххх_ПартииТоваровПоступВозвратОстатки.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НеНулОстатки.ПартияТоваров КАК ПартияТоваров,
	             |	йцу1.Номенклатура КАК Номенклатура,
	             |	ЕСТЬNULL(НеНулОстатки.Цена, йцу1.Цена) КАК Цена,
	             |	СУММА(йцу1.Количество) КАК Количество,
	             |	ЕСТЬNULL(НеНулОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	             |	МАКСИМУМ(йцу1.НомерСтроки) КАК НомерСтроки
	             |ПОМЕСТИТЬ итог
	             |ИЗ
	             |	йцу1 КАК йцу1
	             |		ЛЕВОЕ СОЕДИНЕНИЕ НеНулОстатки КАК НеНулОстатки
	             |		ПО (НеНулОстатки.Номенклатура = йцу1.Номенклатура)
	             |			И (НеНулОстатки.КоличествоОстаток > 0)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НеНулОстатки.ПартияТоваров,
	             |	йцу1.Номенклатура,
	             |	ЕСТЬNULL(НеНулОстатки.Цена, йцу1.Цена),
	             |	ЕСТЬNULL(НеНулОстатки.КоличествоОстаток, 0)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	итог.ПартияТоваров КАК ПартияТоваров,
	             |	итог.Номенклатура КАК Номенклатура,
	             |	итог.Цена КАК Цена,
	             |	итог.Количество КАК Количество,
	             |	итог.КоличествоОстаток КАК КоличествоОстаток,
	             |	итог.НомерСтроки КАК НомерСтроки
	             |ИЗ
	             |	итог КАК итог
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерСтроки,
	             |	итог.ПартияТоваров.Дата УБЫВ
	             |ИТОГИ
	             |	МАКСИМУМ(Количество),
	             |	СУММА(КоличествоОстаток)
	             |ПО
	             |	Номенклатура,
	             |	ПартияТоваров";
	
	выборкаНомка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	

	Объект.Товары.Очистить();

	
	Пока выборкаНомка.Следующий() Цикл
		
		КолвоНужно=выборкаНомка.количество;
		
		ВыборкаПартии=выборкаНомка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаПартии.Следующий() Цикл
			
			выборка=ВыборкаПартии.Выбрать();
			
			ОстатокПоПартии=ВыборкаПартии.КоличествоОстаток;
			
							
			Пока выборка.Следующий() и КолвоНужно<>0 и ЗначениеЗаполнено(выборка.ПартияТоваров) и ОстатокПоПартии>0 цикл
				

				стр=Объект.Товары.Добавить();
				стр.номенклатура=выборка.номенклатура;
				стр.цена=выборка.цена;
				
				
				Если КолвоНужно<=ОстатокПоПартии Тогда
					
					стр.КоличествоУпаковок=КолвоНужно;
					стр.Количество=стр.КоличествоУпаковок;
					стр.Партия=выборка.ПартияТоваров;
					КолвоНужно=0;
					ОстатокПоПартии=ОстатокПоПартии-стр.КоличествоУпаковок;
					
				Иначе
					
					стр.КоличествоУпаковок=ОстатокПоПартии;
					стр.Количество=стр.КоличествоУпаковок;
					КолвоНужно=КолвоНужно-стр.КоличествоУпаковок;
					стр.Партия=выборка.ПартияТоваров;
					ОстатокПоПартии=0;
					
				КонецЕсли;			
				
				стр.сумма=стр.цена*стр.количество;
				стр.СуммаВсего=стр.сумма;
				
				стр.ставкаНДС=Перечисления.СтавкиНДС.БезНДС;
				стр.суммаНДС=0;
				
				//наб=РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
				наб=РегистрыСведений.УдалитьСистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();

				наб.отбор.организация.установить(Объект.Организация);
				наб.Прочитать();
				СисНал=Наб[0].СистемаНалогообложения;
				
				Если Объект.контрагент.ххх_ПлательщикНДС и СисНал=Перечисления.УдалитьСистемыНалогообложения.Общая Тогда
				//Если Объект.контрагент.ххх_ПлательщикНДС и СисНал=Перечисления.СистемыНалогообложения.Общая Тогда	
					Если стр.номенклатура.ставкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
						стр.ставкаНДС=перечисления.СтавкиНДС.НДС10;
						стр.суммаНДС=стр.сумма*10/110;
					ИначеЕсли стр.номенклатура.ставкаНДС=перечисления.СтавкиНДС.НДС20 Тогда
						стр.ставкаНДС=перечисления.СтавкиНДС.НДС20;
						стр.суммаНДС=стр.сумма*20/120;
					КонецЕсли;
				КонецЕсли;

				//Если КолвоНужно<>0 Тогда
				//		
				//КонецЕсли;
		
			КонецЦикла;
						
		КонецЦикла;
		
		Если КолвоНужно<>0 Тогда
			
			наб=РегистрыСведений.УдалитьСистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
			наб.отбор.организация.установить(Объект.Организация);
			наб.Прочитать();
			СисНал=Наб[0].СистемаНалогообложения;
			
			стр=Объект.Товары.Добавить();
			стр.номенклатура=выборкаНомка.номенклатура;
			стр.цена=выборкаНомка.цена;
			стр.КоличествоУпаковок=КолвоНужно;
			стр.Количество=стр.КоличествоУпаковок;
			стр.сумма=стр.цена*стр.количество;
			стр.СуммаВсего=стр.сумма;
			стр.ставкаНДС=перечисления.СтавкиНДС.БезНДС;
			Если Объект.контрагент.ххх_ПлательщикНДС и СисНал=Перечисления.УдалитьСистемыНалогообложения.Общая Тогда	
				
				Если выборкаНомка.номенклатура.ставкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
					стр.ставкаНДС=перечисления.СтавкиНДС.НДС10;
					стр.суммаНДС=стр.сумма*10/110;
				ИначеЕсли выборкаНомка.номенклатура.ставкаНДС=перечисления.СтавкиНДС.НДС20 Тогда
					стр.суммаНДС=стр.сумма*20/120;   
					стр.ставкаНДС=перечисления.СтавкиНДС.НДС20;
				КонецЕсли;
			КонецЕсли;

			КолвоНужно=0;

		КонецЕсли;	

			
	КонецЦикла;
	
	Объект.СуммаДокумента=Объект.Товары.Итог("СуммаВсего");
	ЭтаФорма.Модифицированность=Истина;
	СуммаВсего=Объект.СуммаДокумента;
	//Объект.СуммаДокумента=выгрузка.Итог(
		
	
КонецПроцедуры

Функция ДокументНеПроведен(СсылкаНаДокумент)
	Возврат НЕ СсылкаНаДокумент.Проведен;	
КонецФункции // ПрочитатьРеквизитПроведен()

&НаКлиенте
&Вместо("Подключаемый_ВыполнитьКоманду")
Процедура КочетовПодключаемый_ВыполнитьКоманду(Команда)
	
	//ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект); // оригинал
	
	Если Команда.Имя = "ПодменюПечатьОбычное_УПД" И ЕстьНовыйФорматВозвратовПоставщика(Объект.Контрагент) Тогда	
		Если ДокументНеПроведен(Объект.Ссылка) Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопрос", ЭтотОбъект); // Прописываем название процедуры-обработчика.
			ПоказатьВопрос(Оповещение, "Для выполнения команды необходимо предварительно провести документ.",  // вместо привычного "Вопрос", теперь "ПоказатьВопрос"
			РежимДиалогаВопрос.ОК, // Набор кнопок
			0, // задержка (секунды). необязательно
			, // КодВозвратаДиалога.ОК, // задает кнопку по умолчанию. необязательно
			"Внимание!" // устанавливаем заголовок. необязательно
			);
			Возврат;
		КонецЕсли;
		// сформируем нужный нам табличный документ
		ТабДокумент = ВывестиВОбщуюФормуПечатьДокументовУПД(Объект.Ссылка);
		// определить, нужно будет выводить Претензии
		ВыводитьПретензии = ПоискДопСвойстваСкоропортВВозврате(Объект.Ссылка);
		// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
		Если ВыводитьПретензии Тогда
			КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Макет_1,Макет_2,Макет_3");
		Иначе //без Претензии
			КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Макет_1,Макет_2");
		КонецЕсли;
		// Добавляем в коллекцию (тип массив) сформированный Табличный документ
		КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДокумент; 
		// если требуется устанавливаем параметры печати
		КоллекцияПечатныхФорм[0].Экземпляров = 2;
		//КоллекцияПечатныхФорм[0].ТабличныйДокумент.КоличествоЭкземпляров = 2;
		КоллекцияПечатныхФорм[0].СинонимМакета = "Документ УПД";  // используется для формирования имени файла при сохранении из общей формы печати документов
		// сформируем нужный нам табличный документ 2
		ТабДокумент2 = ВывестиВОбщуюФормуПечатьДокументовПриложение(Объект.Ссылка);
		ТабДокумент2.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		// Добавляем в коллекцию сформированный Табличный документ 2
		КоллекцияПечатныхФорм[1].ТабличныйДокумент = ТабДокумент2;
		КоллекцияПечатныхФорм[1].Экземпляров = 2;
		//КоллекцияПечатныхФорм[1].ТабличныйДокумент.КоличествоЭкземпляров = 2;
		КоллекцияПечатныхФорм[1].СинонимМакета = "Приложение к УПД";
		Если ВыводитьПретензии Тогда 
			// сформируем нужный нам табличный документ 3
			ТабДокумент3 = ВывестиВОбщуюФормуПечатьДокументовПретензия(Объект.Ссылка);
			// если требуется устанавливаем параметры печати
			ТабДокумент3.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			// Добавляем в коллекцию сформированный Табличный документ 3
			КоллекцияПечатныхФорм[2].ТабличныйДокумент = ТабДокумент3; 
			КоллекцияПечатныхФорм[2].СинонимМакета = "Претензия к УПД";
		КонецЕсли;
		// и выводим стандартной процедурой БСП
		УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос(Результат, Параметры) Экспорт 
	Возврат;	
КонецПроцедуры

Функция ЕстьНовыйФорматВозвратовПоставщика(СсылкаКонтрагент)

	Возврат СсылкаКонтрагент.ххх_НовыйФорматВозвратов;	

КонецФункции // ЕстьНовыйФорматВозвратовПоставщика()


Функция ВывестиВОбщуюФормуПечатьДокументовУПД(СсылкаВозврат)
	
	//берем из типовой конфигурации
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаВозврат);
	СтруктураТипов  = ОбщегоНазначенияРТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	ОбъектыПечати   = Новый СписокЗначений;
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
	
	ТабДокумент = Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуУПД(СтруктураТипов,ОбъектыПечати,ПараметрыПечати);
	
	Возврат ТабДокумент; 
	
КонецФункции // ВывестиВОбщуюФормуПечатьДокументовУПДНаСервере()

Функция ВывестиВОбщуюФормуПечатьДокументовПриложение(СсылкаВозврат)
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
	
	ДанныеДляПечати = Документы.ВозвратТоваровПоставщику.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СсылкаВозврат);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Создаем табличный документ, выводим в него все, что нам необходимо.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина; // вариант масштаба "по ширине страницы"
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД_Приложение2";
	Макет = Документы.ВозвратТоваровПоставщику.ПолучитьМакет("УПД_Приложение");
	
	Если ДанныеПечати.Следующий() Тогда
		//заголовок приложения
		ШапкаОбл=Макет.ПолучитьОбласть("Шапка_Пр");
		ШапкаОбл.параметры.номер = ДанныеПечати.номер;
		ШапкаОбл.параметры.Дата  = Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+ " г.";
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОКонтрагенте  = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		
		Пр_Отправитель = ДанныеПечати.Грузоотправитель.Наименование;
		Пр_Отправитель = Пр_Отправитель + ", адрес: "+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес");
		ШапкаОбл.параметры.Пр_Отправитель = Пр_Отправитель;
		Пр_Получатель  = ДанныеПечати.Грузополучатель.Наименование;
		Пр_Получатель = Пр_Получатель + ", адрес: "+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ФактическийАдрес");
		ШапкаОбл.параметры.Пр_Получатель = Пр_Получатель;
		
		ШапкаОбл.параметры.ИНН_КПП_Отправитель = ДанныеПечати.Организация.ИНН+"/"+ДанныеПечати.Организация.КПП;										
		ШапкаОбл.параметры.ИНН_КПП_Получатель  = ДанныеПечати.Контрагент.ИНН+"/"+ДанныеПечати.Контрагент.КПП;					
		
		ТабДокумент.вывести(ШапкаОбл);
		
		ШапкаТаблицы=Макет.ПолучитьОбласть("ЗаголовокТаблицы_Пр");
		ТабДокумент.вывести(ШапкаТаблицы);
				
		// Инициализация итогов в документе.
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		
		Пока СтрокаТовары.Следующий() Цикл
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);	
		КонецЦикла;		
		
		// Выводим многострочную часть приложения.
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка_Пр");
		
		СтрокаПриложения = ВыборкаПоДокументам.Выбрать();
		НомерСтр = 0;
		ПодробноПоНДС = Новый Соответствие;
		
		Пока СтрокаПриложения.Следующий() Цикл
			
			//СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия - Ссылка на Поступление
			
			//ПервДок  = "№ " + СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия.Номер + //здесь внутренний номер!
			ПервДок    = "№ " + СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия.НомерВходящегоДокумента + // индекс нумеруется с 0
			//" от " + Формат(СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия.Дата, "ДФ='дд ММММ гггг'")+ " г.";
			" от "   + Формат(СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'")+ " г.";
			
			ПервичСФ = "№ " + СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия.НомерСчетаФактуры +
			" от " + Формат(СтрокаПриложения.Ссылка.Товары[НомерСтр].Партия.ДатаСчетаФактуры, "ДФ='дд ММММ гггг'")+ " г.";
			
			НомерСтр = НомерСтр + 1; // строка нумеруется с 1
			Кочетов_ЗаполнитьРеквизитыСтрокиТовара(СтрокаПриложения, ОбластьСтрока, НомерСтр);
			СтруктураПараметров = Новый Структура;
			Если СтрокаПриложения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'"));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'"));
			ИначеЕсли СтрокаПриложения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
			ОбластьСтрока.Параметры.НомерДатаПерДок = ПервДок;
			ОбластьСтрока.Параметры.НомерДатаПервСФ = ПервичСФ; 
			
			// Создаем массив для проверки вывода.
			МассивВыводимыхОбластей = Новый Массив; 
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда //строка не поместилась на страницу
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ШапкаТаблицы);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьСтрока);
			
			//Пытаемся получить значение соответствия по ключу (по первичному СФ)
			ЗначенияПоНДС = ПодробноПоНДС.Получить(ПервичСФ); 
			Если ЗначенияПоНДС = Неопределено Тогда //еще не создано
				СтруктураРесурсовДляНДС = СтруктураРесурсовДляНДС();
				
				Если ОбластьСтрока.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					
					СтруктураРесурсовДляНДС.СуммаБезНДС10 = ОбластьСтрока.Параметры.СуммаБезНДС;	
					СтруктураРесурсовДляНДС.СуммаНДС10    = ОбластьСтрока.Параметры.СуммаНДС;
					СтруктураРесурсовДляНДС.СуммаСНДС10   = ОбластьСтрока.Параметры.СуммаСНДС;
					
				ИначеЕсли ОбластьСтрока.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					
					СтруктураРесурсовДляНДС.СуммаБезНДС20 = ОбластьСтрока.Параметры.СуммаБезНДС;	
					СтруктураРесурсовДляНДС.СуммаНДС20    = ОбластьСтрока.Параметры.СуммаНДС;
					СтруктураРесурсовДляНДС.СуммаСНДС20   = ОбластьСтрока.Параметры.СуммаСНДС;
				КонецЕсли;
				СтруктураРесурсовДляНДС.СуммаБезНДС_СФ = ОбластьСтрока.Параметры.СуммаБезНДС;
				СтруктураРесурсовДляНДС.СуммаНДС_СФ    = ОбластьСтрока.Параметры.СуммаНДС;
				СтруктураРесурсовДляНДС.СуммаСНДС_СФ   = ОбластьСтрока.Параметры.СуммаСНДС;
				
				//Создаем соответсвие: пара ключ (произвольного типа) - значение (произвольного типа)
				ПодробноПоНДС.Вставить(ПервичСФ, СтруктураРесурсовДляНДС);
			Иначе
				//плюсуем к ранее созданному
				Если ОбластьСтрока.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					
					ЗначенияПоНДС.СуммаБезНДС10 = ЗначенияПоНДС.СуммаБезНДС10 + ОбластьСтрока.Параметры.СуммаБезНДС;	
					ЗначенияПоНДС.СуммаНДС10    = ЗначенияПоНДС.СуммаНДС10    + ОбластьСтрока.Параметры.СуммаНДС;
					ЗначенияПоНДС.СуммаСНДС10   = ЗначенияПоНДС.СуммаСНДС10   + ОбластьСтрока.Параметры.СуммаСНДС;
					
				ИначеЕсли ОбластьСтрока.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					
					ЗначенияПоНДС.СуммаБезНДС20 = ЗначенияПоНДС.СуммаБезНДС20 + ОбластьСтрока.Параметры.СуммаБезНДС;	
					ЗначенияПоНДС.СуммаНДС20    = ЗначенияПоНДС.СуммаНДС20    + ОбластьСтрока.Параметры.СуммаНДС;
					ЗначенияПоНДС.СуммаСНДС20   = ЗначенияПоНДС.СуммаСНДС20   + ОбластьСтрока.Параметры.СуммаСНДС;
				КонецЕсли;
				ЗначенияПоНДС.СуммаБезНДС_СФ = ЗначенияПоНДС.СуммаБезНДС_СФ + ОбластьСтрока.Параметры.СуммаБезНДС;
				ЗначенияПоНДС.СуммаНДС_СФ    = ЗначенияПоНДС.СуммаНДС_СФ    + ОбластьСтрока.Параметры.СуммаНДС;
				ЗначенияПоНДС.СуммаСНДС_СФ   = ЗначенияПоНДС.СуммаСНДС_СФ   + ОбластьСтрока.Параметры.СуммаСНДС;						
				//изменяем значение соответствия по ключу
				ПодробноПоНДС.Вставить(ПервичСФ, ЗначенияПоНДС);
			КонецЕсли;
			
		КонецЦикла;	
		
		//Всего в приложении
		ОбластьВсего = Макет.ПолучитьОбласть("Всего_Пр");
		ОбластьВсего.Параметры.Заполнить(ИтоговыеСуммы);
		//берутся: ИтоговыеСуммы.ИтогоСуммаБезНДС, ИтоговыеСуммы.ИтогоСуммаНДС, ИтоговыеСуммы.ИтогоСуммаСНДС
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ОбластьВсего);
		
		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда //строка не поместилась на страницу
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ШапкаТаблицы);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьВсего);
		
		ОбластьЗаголовокНДС = Макет.ПолучитьОбласть("Заголовок_НДС_10_20");
		ОбластьНДС = Макет.ПолучитьОбласть("НДС_10_20");
		//обойдем все элементы соответствия
		Для Каждого Элемент Из ПодробноПоНДС Цикл
			ОбластьНДС.Параметры.НомерДатаСФ   = Элемент.Ключ;
			ЗаполнитьЗначенияСвойств(ОбластьНДС.Параметры,Элемент.Значение);
			//Сообщить(Строка(Элемент.Ключ) + " " + Элемент.Значение); //отладка
			
			//Примечание для поставщика, если нет партий
			Если Элемент.Ключ = "№  от  г." Тогда
				ОбластьНДС.Параметры.Примечание = "Просим поставщика данный товар распределить по партиям самостоятельно!";
			КонецЕсли;
			
			// Создаем массив для проверки вывода.
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьНДС);
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда //строка не поместилась на страницу
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьЗаголовокНДС);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьНДС);
		КонецЦикла;
	КонецЕсли; // ДанныеПечати.Следующий()
	
	//ТабДокумент.КоличествоЭкземпляров = 2;
	
	Возврат ТабДокумент;	
	
КонецФункции // ВывестиВОбщуюФормуПечатьДокументовПриложение()

Функция ВывестиВОбщуюФормуПечатьДокументовПретензия(СсылкаВозврат)
	
	//Сформируем претензии по количеству первичных документов
	ПретензииПоПартиям = Новый Соответствие;
	
	ИндексДефис = СтрНайти(СсылкаВозврат.Номер,"-");
	Если ИндексДефис > 0 Тогда
		НомерКраткий = Сред(СсылкаВозврат.Номер,ИндексДефис+1);
	Иначе
		НомерКраткий = СсылкаВозврат.Номер;
	КонецЕсли;
	
	Для Каждого СтрТЧ Из СсылкаВозврат.Товары Цикл	
		СтруктураОтбора = Новый  Структура;
		СтруктураОтбора.Вставить("Номенклатура" , СтрТЧ.Номенклатура);
		СтруктураОтбора.Вставить("Сумма" ,        СтрТЧ.Сумма);
		СтруктураОтбора.Вставить("Партия" ,       СтрТЧ.Партия);
		// выгружаем строку табл. части в Таблицу значений
		ТабЗнач = СсылкаВозврат.Товары.Выгрузить(СтруктураОтбора, "Партия,СтавкаНДС,СуммаНДС,Сумма,Цена,Количество,Номенклатура");	
		//пересчитаем Цену без НДС
		Для Каждого текСтрока Из ТабЗнач Цикл		
			текСтрока.Цена = (текСтрока.Сумма - текСтрока.СуммаНДС)/текСтрока.Количество;				
		КонецЦикла;
		
		ПервДок = "№ " + СтрТЧ.Партия.НомерВходящегоДокумента + " от " + Формат(СтрТЧ.Партия.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'")+ " г.";
		//Пытаемся получить значение соответствия (Табл. значений) по ключу (по первичному документу)
		ДанныеПретензии = ПретензииПоПартиям.Получить(ПервДок); 
		
		Если ДанныеПретензии = Неопределено Тогда //еще не создано		
			//Создаем соответсвие: пара ключ (произвольного типа) - значение (произвольного типа)
			ПретензииПоПартиям.Вставить(ПервДок, ТабЗнач);	
		Иначе //плюсуем к ранее созданному	
			Для Каждого текСтрока Из ТабЗнач Цикл		
				нСтр = ДанныеПретензии.Добавить();
				ЗаполнитьЗначенияСвойств(нСТр,текСтрока);
			КонецЦикла;
			//изменяем значение соответствия по ключу
			ПретензииПоПартиям.Вставить(ПервДок, ДанныеПретензии);
		КонецЕсли;
	КонецЦикла;
	
	//создаем табличный документ
	СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(СсылкаВозврат.Организация, СсылкаВозврат.Дата);
	АдресМагазина = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес");	
	Организация   = СсылкаВозврат.Организация.Наименование;
	КонтрагентИмя = СсылкаВозврат.Контрагент.НаименованиеПолное;
	
	//Создаем табличный документ, выводим в него все, что нам необходимо.
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.Автомасштаб = Истина; //аналогично настройкам масштаба  "по ширине страницы"
	
	ТабДокПостав = Новый ТабличныйДокумент; // отдельно для поставщика
	ТабДокПостав.Автомасштаб = Истина;
	
	Макет = Документы.ВозвратТоваровПоставщику.ПолучитьМакет("УПД_Претензия");
	ОблШапка       = Макет.ПолучитьОбласть("ПретензияШапка");
	ОблЗаголовок   = Макет.ПолучитьОбласть("ПретензияЗаголовок");
	ОблСтрока      = Макет.ПолучитьОбласть("ПретензияСтр");
	ОблПодвал      = Макет.ПолучитьОбласть("ПретензияПодвал");
	ОблРазделитель = Макет.ПолучитьОбласть("ПретензияРазделитель");
	
	// Обойдем все элементы соответствия  
	Для Каждого ЭлементПретензия Из ПретензииПоПартиям Цикл
		
		//МассивТоваров = ЭлементПретензия.Значение.ВыгрузитьКолонку("Номенклатура"); // выгрузка номенклатуры в массив
		//ЕстьСкоропортВПартии = ПоискДопСвойстваСкоропортВНоменклатуре(МассивТоваров);
		//Если НЕ ЕстьСкоропортВПартии Тогда
		//	Продолжить; //Если у товара не установлено свойство Скоропорт, тогда пропускаем
		//КонецЕсли;
		
		ТабДокумент2 = Новый ТабличныйДокумент; //для проверки вывода
		ТабДокумент2.Автомасштаб = Истина;
		//Сообщить(Строка(ЭлементПретензия.Ключ) +  // первичный документ
		//" " + ЭлементПретензия.Значение);         // Таб. Знач. с товарами
		ОблШапка.Параметры.ПредставлениеКонтрагента = КонтрагентИмя  + ", ИНН " + СсылкаВозврат.Контрагент.ИНН;	
		ОблШапка.Параметры.ПредставлениеОрганизации = Организация    + ", ИНН " + СсылкаВозврат.организация.ИНН;
		ОблШапка.Параметры.АдресМагазина = АдресМагазина;
		ОблШапка.Параметры.НомерДатаВх   = ЭлементПретензия.Ключ; //первичный документ 
		ОблШапка.Параметры.СуммаВозврата = ЭлементПретензия.Значение.Итог("Сумма");
		ОблШапка.Параметры.СуммаНДС      = ЭлементПретензия.Значение.Итог("СуммаНДС");
		
		ИндексДефис = СтрНайти(ЭлементПретензия.Ключ, " от ");
		ДатаАкта = Сред(ЭлементПретензия.Ключ, ИндексДефис+4); 
		ОблШапка.Параметры.ДатаАкта = ДатаАкта;
		
		ОблШапка.Параметры.НашИлиПоставщика = "Наш экземпляр";
		ТабДокумент.Вывести(ОблШапка);
		ТабДокумент2.Вывести(ОблШапка);
		ОблШапка.Параметры.НашИлиПоставщика = "Экземпляр поставщика";
		ТабДокПостав.Вывести(ОблШапка);
		
		ТабДокумент.Вывести(ОблЗаголовок);
		ТабДокумент2.Вывести(ОблЗаголовок);
		ТабДокПостав.Вывести(ОблЗаголовок);

		КоличествоСтрок = ЭлементПретензия.Значение.Количество();	
		ИтогоСтоимостьБезНДС = 0;
		НомерСтрочкиТЧ       = 0;
		// Перечислим все строки в таблице значений 
		Для Каждого СтрочкаТЧ Из ЭлементПретензия.Значение Цикл
			//МассивТоваров.Очистить();
			//МассивТоваров.Добавить(СтрочкаТЧ.Номенклатура);
			//ЕстьСкоропортВПартии = ПоискДопСвойстваСкоропортВНоменклатуре(МассивТоваров);
			//Если НЕ ЕстьСкоропортВПартии Тогда
			//	Продолжить; //Если у товара не установлено свойство Скоропорт, тогда пропускаем
			//КонецЕсли;		
			НомерСтрочкиТЧ = НомерСтрочкиТЧ + 1;			
			ОблСтрока.Параметры.НомерСтроки  = НомерСтрочкиТЧ;
			//ОблСтрока.Параметры.Номенклатура = СтрТЧ.Номенклатура;
			ОблСтрока.Параметры.Номенклатура = СтрочкаТЧ.Номенклатура.ххх_НаименованиеЦенник;
			ОблСтрока.Параметры.ЕдИзм        = СтрочкаТЧ.Номенклатура.ЕдиницаИзмерения;
			ОблСтрока.Параметры.Количество   = СтрочкаТЧ.Количество;
			ОблСтрока.Параметры.Цена         = СтрочкаТЧ.Цена;
			ОблСтрока.Параметры.СтавкаНДС    = СтрочкаТЧ.СтавкаНДС;
			ОблСтрока.Параметры.СуммаНДС     = СтрочкаТЧ.СуммаНДС;
			ОблСтрока.Параметры.Сумма        = СтрочкаТЧ.Сумма;
			СтоимостьБезНДС = СтрочкаТЧ.Сумма - СтрочкаТЧ.СуммаНДС;
			ОблСтрока.Параметры.СтоимостьБезНДС = СтоимостьБезНДС;			
			ИтогоСтоимостьБезНДС = ИтогоСтоимостьБезНДС + СтоимостьБезНДС;		
			
			ТабДокумент.Вывести(ОблСтрока);	
			ТабДокумент2.Вывести(ОблСтрока);
			ТабДокПостав.Вывести(ОблСтрока);
		КонецЦикла;
		
		ОблПодвал.Параметры.ИтогоСтоимостьБезНДС    = ИтогоСтоимостьБезНДС;
		ОблПодвал.Параметры.ИтогоСуммаНДС           = ЭлементПретензия.Значение.Итог("СуммаНДС");
		ОблПодвал.Параметры.ИтогоСтоимостьВсегоСНДС = ЭлементПретензия.Значение.Итог("Сумма");
		ОблПодвал.Параметры.СуммаПодвал    = ЭлементПретензия.Значение.Итог("Сумма");
		ОблПодвал.Параметры.СуммаНДСПодвал = ЭлементПретензия.Значение.Итог("СуммаНДС");
		ОблПодвал.Параметры.ОтОрганизации       = Организация;
		ОблПодвал.Параметры.ОрганизацияВПодписи = Организация;
		ОблПодвал.Параметры.КонтрагентВПодписи  = КонтрагентИмя;
		
		ОблПодвал.Параметры.НомерКраткий = "Ф."+НомерКраткий;
		
		ТабДокумент.Вывести(ОблПодвал);	
		ТабДокумент2.Вывести(ОблПодвал);
		ТабДокПостав.Вывести(ОблПодвал);
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ТабДокумент2);
		МассивВыводимыхОбластей.Добавить(ОблРазделитель);
		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда // не поместилось на страницу
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //между экземлярами
			ТабДокПостав.ВывестиГоризонтальныйРазделительСтраниц();
			НоваяСтраница = Ложь;
		Иначе
			ТабДокумент.Вывести(ОблРазделитель);
			ТабДокПостав.Вывести(ОблРазделитель);
			НоваяСтраница = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НоваяСтраница Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //между нашими экземлярами и экземплярами поставщика
	КонецЕсли;
	ТабДокумент.Вывести(ТабДокПостав); // экземпляры для поставщика
	
	Возврат ТабДокумент;
	
КонецФункции // ВывестиВОбщуюФормуПечатьДокументовНаСервере()

Функция СтруктураРесурсовДляНДС()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС10", 0);
	Структура.Вставить("СуммаНДС10",    0);
	Структура.Вставить("СуммаСНДС10",   0);
	
	Структура.Вставить("СуммаБезНДС20", 0);
	Структура.Вставить("СуммаНДС20",    0);
	Структура.Вставить("СуммаСНДС20",   0);
	
	Структура.Вставить("СуммаБезНДС_СФ", 0);
	Структура.Вставить("СуммаНДС_СФ",    0);
	Структура.Вставить("СуммаСНДС_СФ",   0);	
	
	Возврат Структура;
	
КонецФункции

Процедура Кочетов_ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки)
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
	СтрокаТовары.НоменклатураНаименование,
	СтрокаТовары.ХарактеристикаНаименование));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ОбластьМакета.Параметры.ПредставлениеНоменклатуры = СтрокаТовары.Номенклатура.ххх_НаименованиеЦенник;
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
			ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоискДопСвойстваСкоропортВВозврате(СсылкаВозврат)
	
	//ДопСвойство = Справочники.ххх_Справочник.ДопСвойствоНоменклатуры_Скоропорт.Значение;
	ДопСвойство   = Справочники.ххх_Справочник.НоменклатураДопСвойствоСкоропорт.Значение;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = ДополнительныеСведения.Объект
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Ссылка", СсылкаВозврат);
	Запрос.УстановитьПараметр("Свойство", ДопСвойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		ЕстьСкоропорт = Ложь;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НРег(ВыборкаДетальныеЗаписи.Значение) = "true" Тогда
				ЕстьСкоропорт = Истина;	
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат ЕстьСкоропорт;
		
	КонецЕсли;
	
КонецФункции // ПоискДопСвойстваСкоропортВВозврате()

Функция ПоискДопСвойстваСкоропортВНоменклатуре(СписокТоваров)

	//ДопСвойство = Справочники.ххх_Справочник.ДопСвойствоНоменклатуры_Скоропорт.Значение;
	ДопСвойство   = Справочники.ххх_Справочник.НоменклатураДопСвойствоСкоропорт.Значение;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Объект В (&Товары)";
	Запрос.УстановитьПараметр("Товары", СписокТоваров);
	Запрос.УстановитьПараметр("Свойство", ДопСвойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		ЕстьСкоропорт = Ложь;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НРег(ВыборкаДетальныеЗаписи.Значение) = "true" Тогда
				ЕстьСкоропорт = Истина;	
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат ЕстьСкоропорт;
		
	КонецЕсли;	

КонецФункции // ПоискДопСвойстваСкоропортВНоменклатуре()





&НаКлиенте
Процедура КочетовТоварыСправка2ПриИзмененииПосле(Элемент)
	элементы.Товары.ТекущиеДанные.партия=КочетовТоварыСправка2ПриИзмененииПослеСервер(элементы.Товары.ТекущиеДанные.справка2);
КонецПроцедуры




Функция КочетовТоварыСправка2ПриИзмененииПослеСервер(справка2)
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("справка2",справка2);
	Запрос.Текст="ВЫБРАТЬ
	             |	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	             |ГДЕ
	             |	ТТНВходящаяЕГАИС.Товары.Справка2 = &Справка2
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТТНВходящаяЕГАИС.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПоступлениеТоваров.Ссылка КАК Ссылка
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	             |		ПО йцу.Ссылка = ПоступлениеТоваров.ТТНВходящаяЕГАИС
	             |ГДЕ
	             |	ПоступлениеТоваров.Проведен";
	
	выборка=Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	возврат выборка.ссылка;
	
	
КонецФункции






































