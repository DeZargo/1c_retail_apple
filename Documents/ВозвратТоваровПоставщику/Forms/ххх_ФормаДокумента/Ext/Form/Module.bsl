
// Используется механизмом обработки изменения реквизитов ТЧ.
&НаКлиенте
Перем КэшированныеЗначения;

// Используется для передачи текущей строки в обработчик ожидания.
&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Структура, ДополнительныеПараметры) Экспорт	
	Если ЗначениеЗаполнено(Структура) Тогда
		штрихкод=Структура.штрихкод;
		Если Структура.ПоискПоВесовомуТовару=Ложь тогда
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			ТекущаяСтрокаЕГАИС = Неопределено;
		Иначе			
			Элементы.Товары.ТекущаяСтрока=ПоискПоВесовомуШтрихКоду(штрихкод);
			ТоварыНоменклатураПриИзменении("");
		КонецЕсли;
		//Zorius
		ПоискПоШтрихкоду("");
		//Zorius
	КонецЕсли;
КонецПроцедуры

Функция ПоискПоВесовомуШтрихКоду(штрихкод)
	номка=ххх_Сервер.ПолучитьВесовойШтрихкод(штрихкод);  //23 12647 00182 0
	Если значениеЗаполнено(номка) Тогда
		
		вес=Число(Лев(Прав(штрихкод,6),5)/1000);
		
		строки=Объект.товары.НайтиСтроки(Новый структура("Номенклатура",номка));
		
		стр=?(ЗначениеЗаполнено(строки),строки[0],неопределено);
		Если стр<>Неопределено Тогда
			стр.количество=стр.количество+вес;
			стр.количествоУпаковок=стр.количество;
		Иначе
			стр=Объект.товары.добавить();
			стр.Номенклатура=номка;
			стр.количество=вес;
			стр.количествоУпаковок=стр.количество;
		КонецЕсли;
		возврат стр.ПолучитьИдентификатор();
	Иначе
		Сообщить("Данные по коду не найдены: "+штрихкод);
		возврат Неопределено;
	КонецЕсли;
КонецФункции



&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ПодключаемоеОборудованиеРТВызовСервера.УстановитьКонтрагентаПоДисконтнойКарте(ЭтотОбъект, СтруктураРезультат, СтрокаРезультата);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	КонецЕсли;
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбновитьИтоговыеПоказатели();
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ЕГАИС

&НаКлиенте
Процедура ПередатьДанныеВЕГАИСПодтверждениеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		//РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		//Zorius
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
		//Zorius
		Если НЕ РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
		ПередачаДанныхВЕГАИСНачало(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИСПослеЗаполненияТранспортногоРаздела(РезультатОповещения, ВходящиеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
		// Подготовить данные
		ТранспортныйМодуль = ТранспортныйМодуль(Объект.Магазин, Объект.Организация);
		
		Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
			СтрокаСообщения = НСтр("ru = 'Не определен транспортный модуль передачи данных в ЕГАИС'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВидДокумента", ВходящиеПараметры.ВидДокумента);
		ДополнительныеПараметры.Вставить("Магазин", Объект.Магазин);
		ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
		ДополнительныеПараметры.Вставить("ДокументОснование", Объект.Ссылка);
		
		ПараметрыПередачиВЕГАИС = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВходящиеПараметры.ВидДокумента);
		
		Если ВходящиеПараметры.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН") Тогда
			ПараметрыПередачиВЕГАИС.ДокументСсылка = СоздатьТТНИсходящую(Объект.Ссылка, ТранспортныйМодуль.ОрганизацияЕГАИС, РезультатОповещения);
		Иначе
			ПараметрыПередачиВЕГАИС.ДокументСсылка = Объект.ТТНИсходящаяЕГАИС;
		КонецЕсли;
		
		Если ВходящиеПараметры.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН") Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыПередачиВЕГАИС.ДокументСсылка) Тогда
				СохранитьВременныеДанныеТранспортногоРаздела(РезультатОповещения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ДокументСсылка", ПараметрыПередачиВЕГАИС.ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИСЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ВходящиеПараметры.ВидДокумента,
			ПараметрыПередачиВЕГАИС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИСЗавершение(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДанныеОтЕГАИС = Неопределено Тогда
		Если НЕ ДанныеОтЕГАИС.Результат Тогда
			СтрокаСообщения = НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") 
							  + Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Модифицированность = Истина;
		Иначе
			ОповещениеПередачаДанныхВЕГАИСЗавершениеСервер(ДанныеОтЕГАИС, ДополнительныеПараметры);
		КонецЕсли;
		
		УстановитьВидимостьИДоступностьЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Обработчик механизма "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Печать
		УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");

	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	УправлениеЭлементамиФормыНаСервере();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровПоставщику.ПараметрыУказанияСерий(Объект));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			УстановитьПризнакиУчетаНДСПоОснованию(Объект.ДокументОснование);
		КонецЕсли;
		
		УстановитьДоступностьЦенаВключаетНДС();
		УстановитьДоступностьЭлементовНаСервере();
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары);
		УстановитьВидимостьИДоступностьЕГАИС();
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Вызывать необходимо после обновления сумм подвала.
		ОбновитьИтоговыеПоказатели(Истина);
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;

	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если  ЗначениеЗаполнено(объект.Контрагент) Тогда
			Запрос=Новый запрос;
			Запрос.УстановитьПараметр("Орг",объект.Организация);
			Запрос.Текст="ВЫБРАТЬ
							|	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
							|ИЗ
							|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Орг) КАК СистемыНалогообложенияОрганизацийСрезПоследних";	
			Выборка=Запрос.Выполнить().Выбрать();
			Если выборка.Следующий() и выборка.СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная или не объект.Контрагент.ххх_ПлательщикНДС тогда
				объект.УчитыватьНДС=ложь;
				объект.ЦенаВключаетНДС=ложь;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	ЭтаФорма.Доступность=истина;
	ЭтаФОрма.ТолькоПросмотр=Ложь;
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр=истина;


КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтотОбъект, ВыбранноеЗначение);

	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
 	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И НЕ ЗначениеЗаполнено(СтатусОбработкиЕГАИС) Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	УстановитьДоступностьЦенаВключаетНДС();
	УстановитьДоступностьЭлементовНаСервере();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	ОбновитьИтоговыеПоказатели(Истина);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтотОбъект,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
		
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	ХранилищеТранспортногоРаздела = Объект.Ссылка.ДанныеТранспортногоРаздела;
	УстановитьВидимостьИДоступностьЕГАИС();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер();
	
	ПриЧтенииСозданииНаСервере();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	ТекущийОбъект.ДанныеТранспортногоРаздела = ХранилищеТранспортногоРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры




&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	ХранилищеТранспортногоРаздела = Объект.Ссылка.ДанныеТранспортногоРаздела;
	УстановитьВидимостьИДоступностьЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//
	//Если Объект.Проведен и ПроверкаНеобходимостиСчетФактуры() Тогда 
	//	ВвестиСчетФактуру();
	//КонецЕсли;
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	ОбновитьИтоговыеПоказатели(Истина);
	
КонецПроцедуры

функция ПроверкаНеобходимостиСчетФактуры() 
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Орг",Объект.Организация);
	запрос.УстановитьПараметр("СистемаНалогообложения",Перечисления.СистемыНалогообложения.Общая);
	Запрос.УстановитьПараметр("ссылка",Объект.ссылка);
	Запрос.Текст="ВЫБРАТЬ
	|СчетФактураВыданный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|		ПО СчетФактураВыданный.Организация = СистемыНалогообложенияОрганизацийСрезПоследних.Организация
	|ГДЕ
	|	СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.ДокументОснование = &ссылка
	|	И СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения = &СистемаНалогообложения";
	Выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		возврат ложь и Объект.контрагент.ххх_ПлательщикНДС;		
	Иначе
		возврат истина и Объект.контрагент.ххх_ПлательщикНДС;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();

КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	Иначе
		Объект.Склад = Неопределено;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Склад",
			"ТолькоПросмотр",
			НЕ ЗначениеЗаполнено(Объект.Магазин));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетКонтрагента", "ТолькоПросмотр",
																	НЕ ЗначениеЗаполнено(Объект.Контрагент));
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекВызовСервера.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	//Zorius
	Если КонтрагентПлательщикНДС() Тогда
		Объект.УчитыватьНДС=истина;
		Объект.ЦенаВключаетНДС=истина;
	Иначе
		Объект.УчитыватьНДС=ложь;
		Объект.ЦенаВключаетНДС=ложь;
	КонецЕсли;
	ЦенаВключаетНДСПриИзменении("");
	УчитыватьНДСПриИзменении("");
КонецПроцедуры

функция КонтрагентПлательщикНДС ()
	возврат ?(ЗначениеЗаполнено(объект.Контрагент),объект.Контрагент.ххх_ПлательщикНДС и Осно(),ложь)
КонецФункции

функция Осно()
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Упрощенная",перечисления.СистемыНалогообложения.Упрощенная);
	Запрос.УстановитьПараметр("Орг",Объект.Организация);
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.Текст="ВЫБРАТЬ
	             |	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	             |ИЗ
	             |	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Орг) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	выборка=Запрос.Выполнить().Выбрать();
	выборка.Следующий();
	Если выборка.СистемаНалогообложения=перечисления.СистемыНалогообложения.Упрощенная тогда
		возврат ложь;
	Иначе
		возврат истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
																	НЕ ЗначениеЗаполнено(Объект.Организация));
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекВызовСервера.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		Объект.Организация,
		,
		Объект.БанковскийСчетОрганизации);
	
	ОрганизацияПриИзмененииСервер();
	
	
	//Для каждого стр из Объект.Товары Цикл
	//	Элементы.Товары.ТекущаяСтрока=стр.Индекс();
	//	ТоварыНоменклатураПриИзменении("");
	//КонецЦикла;
	//		
	ЦенаВключаетНДСПриИзменении("");
	ПриИзмененииУчитыватьНДССервер();
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр=Истина;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СуммаПоступило) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОбОплате", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимозачетПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВзаимозачетПоДокументу) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОВзаимозачете", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
		
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено
			И (ТекущиеДанные.ИспользоватьСерийныеНомера
			ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		ТекущаяСтрока.СправкаБ = Неопределено;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если НоваяСтрока Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить(
		"ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	//Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Партия) Тогда
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма.ТолькоПросмотр=Истина;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаСНДС.ТолькоПросмотр=Истина;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаНДС.ТолькоПросмотр=Истина;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр=Истина;
	//	возврат;
	//Иначе
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма.ТолькоПросмотр=Ложь;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаСНДС.ТолькоПросмотр=Ложь;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаНДС.ТолькоПросмотр=Ложь;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр=Ложь;
	//КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент, СправкаБ=неопределено)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.партия=неопределено;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока,
		Объект.СерийныеНомера));
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ТекущаяСтрока.СправкаБ = СправкаБ;
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	ТоварыСуммаПриИзменении()
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	ТоварыСуммаПриИзменении()
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено
				И (ТекущиеДанные.ИспользоватьСерийныеНомера
				ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправкаБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ПараметрыОткрытия.Вставить("ПоставщикИНН", получитьИНН());
		ПараметрыОткрытия.Вставить("ПоставщикКПП", получитьКПП());
		ПараметрыОткрытия.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		ОткрытьФорму("Справочник.СправкиБЕГАИС.Форма.ФормаВыбораРТ",
			ПараметрыОткрытия,
			Элемент,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

функция получитьИНН()
	возврат Объект.контрагент.ИНН;
КонецФункции

функция получитьКПП()
	возврат Объект.контрагент.КПП;
КонецФункции


#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'возврат товаров поставщику'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("РежимПодбораВЗакупки", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоПрошлымЗакупкам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Поставщик"" не заполнено'"),
			Объект,
			"Объект.Контрагент");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"),
			Объект,
			"Объект.Магазин");
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоПрошлымЗакупкамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоПрошлымЗакупкам(ЦеныРассчитаны);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область КомандыЕГАИС

&НаКлиенте
Процедура ПередатьДанныеВЕГАИС(Команда)
	
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДокумента", ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН"));
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные изменены. Записать документ?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПередатьДанныеВЕГАИСПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПередачаДанныхВЕГАИСНачало(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры



Функция СуществуетПринатыйЕгаисомВозвратИзТоргЗалла()
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("возврат",Объект.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки",Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПереданВЕГАИС);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВозвратИзТорговогоЗалаЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ВозвратИзТорговогоЗалаЕГАИС КАК ВозвратИзТорговогоЗалаЕГАИС
	             |ГДЕ
	             |	ВозвратИзТорговогоЗалаЕГАИС.Проведен
	             |	И ВозвратИзТорговогоЗалаЕГАИС.ДокументОснование = &возврат
	             |	И ВозвратИзТорговогоЗалаЕГАИС.СтатусОбработки = &СтатусОбработки";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат Истина;
	КонецЕсли;
	возврат ложь;
	
КонецФункции
&НаКлиенте
Процедура ПередатьОтменуПроведенияВЕГАИС(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДокумента", ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН"));
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные изменены. Записать документ?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПередатьДанныеВЕГАИСПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПередачаДанныхВЕГАИСНачало(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьОтказОтАктаЕГАИС(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДокумента", ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН"));
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные изменены. Записать документ?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПередатьДанныеВЕГАИСПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПередачаДанныхВЕГАИСНачало(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьПодтверждениеАктаЕГАИС(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДокумента", ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН"));
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные изменены. Записать документ?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПередатьДанныеВЕГАИСПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПередачаДанныхВЕГАИСНачало(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиЕГАИСНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСРТКлиент.СтатусОбработкиНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСправки2(Команда)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), 
			Объект, 
			"Объект.Магазин",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Организация"" не заполнено'"), 
			Объект, 
			"Объект.Организация",
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьСправки2НаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
			
		//Zorius
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("СисНалог",Перечисления.СистемыНалогообложения.Упрощенная);
	Запрос.УстановитьПараметр("Дата",объект.дата);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.Текст="ВЫБРАТЬ
	             |	СистемыНалогообложенияОрганизацийСрезПоследних.Период КАК Период,
	             |	СистемыНалогообложенияОрганизацийСрезПоследних.Организация КАК Организация,
	             |	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	             |ИЗ
	             |	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	             |			&Дата,
	             |			Организация = &Организация
	             |				И СистемаНалогообложения = &СисНалог) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		Объект.УчитыватьНДС=Ложь;
		Объект.ЦенаВключаетНДС=Ложь;
	Иначе
		Объект.УчитыватьНДС=Истина;
		Объект.ЦенаВключаетНДС=Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоПрошлымЗакупкамСервер()
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Объект, 
		"Товары", 
		Элементы.Товары.ВыделенныеСтроки, 
		Истина);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтотОбъект.ПоложениеКоманднойПанели = ?(ВидимостьЭлементов, 
		ПоложениеКоманднойПанелиФормы.Авто, 
		ПоложениеКоманднойПанелиФормы.Нет);
	
	Элементы.ГруппаОснование.Видимость                = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость            = ВидимостьЭлементов;
	Элементы.СтраницаДополнительно.Видимость          = ВидимостьЭлементов;
	Элементы.ГруппаОплата.Видимость                   = ВидимостьЭлементов;
	Элементы.ГруппаВзаиморасчеты.Видимость            = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов,
		БиблиотекаКартинок.РазвернутьТабличнуюЧасть,
		БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры 
		И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,
		ПараметрыУказанияСерий,
		ВводСерийРазрешен);
	
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
		ПараметрыФормыУказанияСерий, 
		ЭтотОбъект,,,, 
		ОбработчикУказанияСерий, 
		РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера,
		ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.Склад.Организация;
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
																		НЕ ЗначениеЗаполнено(Объект.Организация));
		
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.Организация,
			,
			Объект.БанковскийСчетОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,, 
		Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровПоставщику.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Если Объект.Магазин.СкладУправляющейСистемы Тогда
		Элементы.Склад.ТолькоПросмотр = Истина;
	Иначе
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Склад", 
			"ТолькоПросмотр", 
			НЕ ЗначениеЗаполнено(Объект.Магазин));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	БезНДС = НСтр("ru = 'Без НДС'");
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.ДокументОснование.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Объект.Магазин.СкладУправляющейСистемы Тогда
		
		Элементы.Склад.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БанковскийСчетКонтрагента",
		"ТолькоПросмотр",
		НЕ ЗначениеЗаполнено(Объект.Контрагент));
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БанковскийСчетОрганизации",
		"ТолькоПросмотр",
		НЕ ЗначениеЗаполнено(Объект.Организация));
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), 
			Объект, 
			"Объект.Магазин",
			,
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Поставщик"" не заполнено'"), 
			Объект,
			"Объект.Контрагент",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |КоличествоУпаковок,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(
				СтрокаТовара.КлючСвязиСерийныхНомеров,
				ТаблицаСерийныхНомеров);
			
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(
				Объект.СерийныеНомера,
				МассивСерийныхНомеров,
				0);
			
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;		
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр,
																				 ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаВсего.ТолькоПросмотр,
																				 ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаСНДС.ТолькоПросмотр, 
																				 ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере()

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																	"Склад",
																	"ТолькоПросмотр", 
																	НЕ ЗначениеЗаполнено(Объект.Магазин));

КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
																		ТекущаяСтрока,
																		СтруктураДействий, 
																		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиУчетаНДСПоОснованию(Основание)

	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ЦенаВключаетНДС, УчитыватьНДС");
	
	Объект.УчитыватьНДС 	= РеквизитыОснования.УчитыватьНДС;
	Объект.ЦенаВключаетНДС 	= РеквизитыОснования.ЦенаВключаетНДС;

КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура ОбновитьИтоговыеПоказатели(ЗапросДанных = Ложь)
	
	Если ЗапросДанных Тогда
		
		ИтоговыеПоказатели = ЗакупкиСервер.ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(Объект.Ссылка);
		
		СуммаПоступило = 					ИтоговыеПоказатели.СуммаПоступило;
		ВзаимозачетПоДокументу = 			ИтоговыеПоказатели.ВзаимозачетПоДокументу;
		ДоступноКВзаимозачетуПоДокументу = 	ИтоговыеПоказатели.ДоступноКВзаимозачетуПоДокументу;
		НашДолг = 							ИтоговыеПоказатели.НашДолг;
	КонецЕсли;
	
	СуммаКПоступлению = СуммаВсего - СуммаПоступило - ВзаимозачетПоДокументу;
	
	СформироватьСвертываемыеИтоги();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСвертываемыеИтоги()
	
	ФорматСуммовыхПоказателей = ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей();
	
	Если СуммаКПоступлению > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'К поступлению:'") + " " + Формат(СуммаКПоступлению, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаПоступило > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Поступило:'") + " " + Формат(СуммаПоступило, ФорматСуммовыхПоказателей);
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'К поступлению:'") + " " + Формат(0, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если НашДолг <> 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Наш долг:'") + " " + Формат(НашДолг, ФорматСуммовыхПоказателей);
	ИначеЕсли ВзаимозачетПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Взаимозачет (по документу):'") + " " + Формат(ВзаимозачетПоДокументу, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Элементы.СвертываемыеИтоги.ЗаголовокСвернутогоОтображения = ЗаголовокГруппы;
	
	Если НашДолг < 0 ИЛИ ВзаимозачетПоДокументу > 0 Тогда
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,
																ПараметрыФормыУказанияСерий,СтруктураДействий);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий,
																		ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении()

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, 
																		СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПродажиКлиент.ВвестиСчетФактуру(ЭтотОбъект, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтотОбъект, Объект, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ДокументОснование", Объект.Ссылка);
	СтруктураОтбор.Вставить("Организация",       Объект.Организация);
	СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
	Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
	Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Справки А и Б
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСправкаА");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСправкаБ");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НеобходимостьВводаСправкиНаАлкоголь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<только для алкогольной продукции>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	УстановитьВидимостьИДоступностьЕГАИС();
	
КонецПроцедуры

#Область СлужебныеЕГАИС

&НаСервере
Процедура УстановитьВидимостьИДоступностьЕГАИС()
	
	УчетАлкоголя = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	Элементы.ГруппаСтатусЕГАИС.Видимость = УчетАлкоголя;
	Элементы.ДекорацияРазделительИтогов.Видимость = НЕ УчетАлкоголя;
	
	Элементы.ТоварыСправкаА.Видимость = УчетАлкоголя;
	Элементы.ТоварыСправкаБ.Видимость = УчетАлкоголя;
	
	//Элементы.ФормаПередатьДанныеВЕГАИС.Видимость = УчетАлкоголя;
	//Элементы.ФормаОтменитьПроведениеВЕГАИС.Видимость = УчетАлкоголя;
	Элементы.ТоварыПодобратьСправки2.Видимость = УчетАлкоголя;
	
	СтатусОбработкиЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.ТТНИсходящаяЕГАИС) Тогда
		СтатусОбработкиЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТТНИсходящаяЕГАИС, "СтатусОбработки");
	КонецЕсли;
	
	ДоступностьКоманды = Объект.Проведен;
	ВидимостьКоманды = Истина;
	ВидимостьДополнительныхКоманд = Ложь;
	ВидимостьКолонкиФакт = Ложь;
	ТолькоПросмотрФормы = Ложь;
	Если ЗначениеЗаполнено(СтатусОбработкиЕГАИС) Тогда
		Если СтатусОбработкиЕГАИС <> Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС Тогда
			ДоступностьКоманды = Ложь;
			ТолькоПросмотрФормы = Истина;
		КонецЕсли;
	КонецЕсли;
	//Элементы.ФормаПередатьДанныеВЕГАИС.Доступность = ДоступностьКоманды;
	//Элементы.ФормаОтменитьПроведениеВЕГАИС.Доступность = ДоступностьКоманды;
	ЭтотОбъект.ТолькоПросмотр = ТолькоПросмотрФормы;
	
	ПустойСтатус = НЕ ЗначениеЗаполнено(СтатусОбработкиЕГАИС);
	Если СтатусОбработкиЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений Тогда
		ВидимостьДополнительныхКоманд = Истина;
		ВидимостьКоманды = Ложь;
		ВидимостьКолонкиФакт = Истина;
	ИначеЕсли СтатусОбработкиЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеАктаРасхождений Тогда
		ВидимостьКоманды = Истина;
		ВидимостьКолонкиФакт = Истина;
	ИначеЕсли СтатусОбработкиЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтАктаРасхождений Тогда
		ВидимостьКоманды = Истина;
		ВидимостьКолонкиФакт = Истина;
	КонецЕсли;
	
	Если ПустойСтатус Тогда
		Элементы.ГруппаСтраницыСтатусы.ТекущаяСтраница = Элементы.ГруппаСтраницаПустойСтатус;
	Иначе
		Элементы.ГруппаСтраницыСтатусы.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатус;
	КонецЕсли;
	
	Элементы.ФормаПередатьДанныеВЕГАИС.Видимость = ВидимостьКоманды И УчетАлкоголя;
	Элементы.ФормаПередатьДанныеВЕГАИС.Видимость = УчетАлкоголя И ДоступностьКоманды И ВидимостьКоманды;
	Элементы.ФормаОтменитьПроведениеВЕГАИС.Видимость = не Элементы.ФормаПередатьДанныеВЕГАИС.Видимость
		и СтатусОбработкиЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС;
	Элементы.ГруппаТТНЕГАИС.Видимость = УчетАлкоголя И ЗначениеЗаполнено(Объект.ТТНИсходящаяЕГАИС);
	Элементы.ГруппаДополнительныхКомандЕГАИС.Видимость = ВидимостьДополнительныхКоманд И УчетАлкоголя;
	Элементы.ТоварыКоличествоФакт.Видимость = ВидимостьКолонкиФакт И УчетАлкоголя;
	
	//
	////Zorius
	//Элементы.ФормаВернутьИзТорговогоЗала.Видимость = УчетАлкоголя И ДоступностьКоманды И ВидимостьКоманды;
	//Элементы.ФормаВернутьИзТорговогоЗала.Доступность=ДоступностьКоманды;
	Если ЗначениеЗаполнено(Объект.ТТНИсходящаяЕГАИС) и 
		(объект.ТТНИсходящаяЕГАИС.СтатусОбработки=Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС или 
				объект.ТТНИсходящаяЕГАИС.СтатусОбработки=Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктПодтверждения) тогда
		Элементы.ФормаПередатьДанныеВЕГАИС.Видимость=ложь;
	Иначе
		Элементы.ФормаПередатьДанныеВЕГАИС.Видимость=Истина;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПередачаДанныхВЕГАИСНачало(ДополнительныеПараметры)
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОткрытиеДляЕГАИС", Истина);
	
	Если ДополнительныеПараметры.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН") Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИСПослеЗаполненияТранспортногоРаздела", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПечатьТТН.Форма",
					ПараметрыФормы,
					ЭтотОбъект,
					УникальныйИдентификатор,
					,
					,
					ОбработчикОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПустойРезультат = Новый Структура;
		ОповещениеПередачаДанныхВЕГАИСПослеЗаполненияТранспортногоРаздела(ПустойРезультат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТранспортныйМодуль(Магазин, Организация);
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСРТ.ИспользуемыйТранспортныйМодуль(Организация, Магазин);
	Возврат ТранспортныйМодуль;
	
КонецФункции

&НаСервере
Функция СоздатьТТНИсходящую(ДокументСсылка, ОрганизацияЕГАИС, СтруктураТранспортногоРаздела)
	
	ХранилищеТранспортногоРаздела = Новый ХранилищеЗначения(СтруктураТранспортногоРаздела);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Возврат.Номер КАК Номер,
	|	Возврат.Дата КАК Дата,
	|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС КАК Грузополучатель,
	|	Возврат.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Возврат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|		ПО Возврат.Контрагент = СоответствиеОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	Возврат.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СправкаБ.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.СправкаБ КАК СправкаБ,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА Товары.Количество * Товары.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ Товары.КоличествоУпаковок
	|	КОНЕЦ КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ) КАК ПродаетсяВРозлив
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Товары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаДокумент = Результат[0].Выбрать();
	ВыборкаТовары = Результат[1].Выбрать();
	Если ВыборкаДокумент.Следующий() Тогда
		ТТН = Документы.ТТНИсходящаяЕГАИС.СоздатьДокумент();
		ТТН.Дата = ТекущаяДатаСеанса();
		ТТН.ВидОперации = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику;
		ТТН.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
		ТТН.НомерТТН = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокумент.Номер, Ложь, Истина);
		ТТН.ДатаОтгрузки = ВыборкаДокумент.Дата;
		ТТН.ДатаТТН = ВыборкаДокумент.Дата;
		ТТН.Грузополучатель = ВыборкаДокумент.Грузополучатель;
		ТТН.Грузоотправитель = ОрганизацияЕГАИС;
		ТТН.Поставщик = ОрганизацияЕГАИС;
		ТТН.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый;
		ТТН.Упакована = Истина;
		
		ЕстьОшибкиВШапке = Ложь;
		Если НЕ ЗначениеЗаполнено(ВыборкаДокумент.Грузополучатель) Тогда
			ЕстьОшибкиВШапке = Истина;
			СтрокаОшибки = НСтр("ru = 'Невозможно определить соответствие контрагента классификатору ЕГАИС.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаОшибки,
				ДокументСсылка,
				"Объект.Контрагент");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ЕстьОшибкиВШапке = Истина;
			СтрокаОшибки = НСтр("ru = 'Невозможно определить соответствие организации классификатору ЕГАИС.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаОшибки,
				ДокументСсылка,
				"Объект.Организация");
		КонецЕсли;
			
		// Транспортный раздел.
		ТТН.ТипДоставки = "";
		ТТН.Перевозчик = СтруктураТранспортногоРаздела.Перевозчик;
		ТТН.Автомобиль = СтруктураТранспортногоРаздела.МаркаАвтомобиля + " " + СтруктураТранспортногоРаздела.ГосНомерАвтомобиля;
		ТТН.Прицеп = СтруктураТранспортногоРаздела.МаркаПрицепа + " " + СтруктураТранспортногоРаздела.ГосНомерПрицепа;
		ТТН.Заказчик = СтруктураТранспортногоРаздела.Заказчик;
		ТТН.Водитель = СтруктураТранспортногоРаздела.ВодительскоеУдостоверение;
		ТТН.ПунктПогрузки = СтруктураТранспортногоРаздела.ПунктПогрузки;
		ТТН.ПунктРазгрузки = СтруктураТранспортногоРаздела.ПунктРазгрузки;
		ТТН.Экспедитор = "";
		ТТН.Перенаправление = "";
		
		КоличествоСтрок = ВыборкаТовары.Количество();
		Если КоличествоСтрок = 0 Тогда
			ЕстьОшибкиВШапке = Истина;
			СтрокаОшибки = НСтр("ru = 'Нет строк с алкогольной продукцией для передачи в ЕГАИС.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаОшибки,
				ДокументСсылка,
				"Объект.Товары");
		КонецЕсли;
		// Товары.
		Пока ВыборкаТовары.Следующий() Цикл
			
			ЕстьОшибкиВСтроке = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТовары.СправкаБ) Тогда
				ЕстьОшибкиВСтроке = Истина;
				СтрокаОшибки = НСтр("ru = 'В строке %1 не заполнена справка 2.'");
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, ВыборкаТовары.НомерСтроки);
				ИмяПоляТоваров = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ВыборкаТовары.НомерСтроки, "СправкаБ");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаОшибки,
					ДокументСсылка,
					ИмяПоляТоваров);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаТовары.АлкогольнаяПродукция) Тогда
				ЕстьОшибкиВСтроке = Истина;
				СтрокаОшибки = НСтр("ru = 'В строке %1 не заполнена алкогольная продукция в справке 2.'");
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, ВыборкаТовары.НомерСтроки);
				ИмяПоляТоваров = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ВыборкаТовары.НомерСтроки, "СправкаБ");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаОшибки,
					ДокументСсылка,
					ИмяПоляТоваров);
			КонецЕсли;
			
			Если (НЕ ЕстьОшибкиВСтроке)
				И (НЕ ЕстьОшибкиВШапке) Тогда
				СтрокаТЧ = ТТН.Товары.Добавить();
				СтрокаТЧ.АлкогольнаяПродукция = ВыборкаТовары.АлкогольнаяПродукция;
				СтрокаТЧ.Количество = ВыборкаТовары.Количество;
				Если ВыборкаДокумент.ЦенаВключаетНДС Тогда
					Если ВыборкаТовары.Количество = 0 Тогда
						СтрокаТЧ.Цена = ВыборкаТовары.Сумма;
					Иначе
						СтрокаТЧ.Цена = Окр(ВыборкаТовары.Сумма / ВыборкаТовары.Количество, 4);
					КонецЕсли;
				Иначе
					Если ВыборкаТовары.Количество = 0 Тогда
						СтрокаТЧ.Цена = ВыборкаТовары.Сумма + ВыборкаТовары.СуммаНДС;
					Иначе
						СтрокаТЧ.Цена = Окр((ВыборкаТовары.Сумма + ВыборкаТовары.СуммаНДС) / ВыборкаТовары.Количество, 4);
					КонецЕсли;
				КонецЕсли;
				СтрокаТЧ.СправкаБ = ВыборкаТовары.СправкаБ;
				Если ВыборкаТовары.ПродаетсяВРозлив Тогда
					ТТН.Упакована = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТТН.СуммаДокумента = ТТН.Товары.Итог("Сумма");
		
		Если НЕ ЕстьОшибкиВШапке И НЕ ЕстьОшибкиВСтроке Тогда
			ТекстОшибки = "";
			Если НЕ ИнтеграцияЕГАИС.ЗаписатьОбъект(ТТН, ТекстОшибки, РежимЗаписиДокумента.Проведение) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ТТН.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОповещениеПередачаДанныхВЕГАИСЗавершениеСервер(ДанныеОтЕГАИС, ДополнительныеПараметры)
	
	РежимЗаписиТекущего = РежимЗаписиДокумента.Запись;
	
	Если ДополнительныеПараметры.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН Тогда
		Если Объект.Проведен Тогда
			РежимЗаписиТекущего = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН Тогда
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.КоличествоФакт = 0 Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТовары);
			Иначе
				СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоФакт;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличество");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
											ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
				СтруктураДействий.Вставить("ПересчитатьСумму");
				ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(Новый Структура("СтрокиТЧ", Объект.Товары),
																					СтрокаТовары,
																					СтруктураДействий);
				
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТовары, Объект.ЦенаВключаетНДС);
			КонецЕсли;
			Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				Объект.Товары.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
			ОбновитьИтоговыеПоказатели();
		КонецЦикла;
	Иначе
		Объект.ТТНИсходящаяЕГАИС = ДополнительныеПараметры.ДокументСсылка;
	КонецЕсли;
	
	РезультатЗаписи = Ложь;
	Попытка
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиТекущего));
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ по причине:'") + Символы.ПС + СтрокаОшибки.Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Если НЕ РезультатЗаписи Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВременныеДанныеТранспортногоРаздела(РезультатОповещения)
	ХранилищеТранспортногоРаздела = Новый ХранилищеЗначения(РезультатОповещения);
	РезультатЗаписи = Ложь;
	Попытка
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить транспортный раздел ТТН по причине:'") + Символы.ПС + СтрокаОшибки.Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТТНИсходящаяЕГАИСНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ТТНИсходящаяЕГАИС) Тогда
		ПоказатьЗначение(, Объект.ТТНИсходящаяЕГАИС);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодобратьСправки2НаСервере()
	
	ТранспортныйМодуль = ТранспортныйМодуль(Объект.Магазин, Объект.Организация);
	Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СправкаБ КАК СправкаБ,
	|	ТаблицаТоваров.КоличествоУпаковок КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ТаблицаТоваров.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаТоваров.НеобходимостьВводаСправкиНаАлкоголь КАК НеобходимостьВводаСправкиНаАлкоголь,
	|	ТаблицаТоваров.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусыСерийИПодарочныхСертификатов КАК СтатусыСерийИПодарочныхСертификатов
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.СправкаБ,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Цена,
	|	ТаблицаТоваров.Сумма,
	|	ТаблицаТоваров.СуммаВсего,
	|	ТаблицаТоваров.СуммаНДС,
	|	ТаблицаТоваров.ХарактеристикиИспользуются,
	|	ТаблицаТоваров.ИспользоватьСерийныеНомера,
	|	ТаблицаТоваров.НеобходимостьВводаСправкиНаАлкоголь,
	|	ТаблицаТоваров.КлючСвязиСерийныхНомеров,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусыСерийИПодарочныхСертификатов,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))) КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ ТаблицаТоваровСАлкогольнойПродукцией
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаТоваров.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И ТаблицаТоваров.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|			И ТаблицаТоваров.Упаковка = СоответствиеНоменклатурыЕГАИС.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Цена,
	|	ТаблицаТоваров.Сумма,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.СуммаВсего,
	|	ТаблицаТоваров.СправкаБ,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.КлючСвязиСерийныхНомеров,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусыСерийИПодарочныхСертификатов,
	|	ТаблицаТоваров.ХарактеристикиИспользуются,
	|	ТаблицаТоваров.ИспользоватьСерийныеНомера,
	|	ТаблицаТоваров.НеобходимостьВводаСправкиНаАлкоголь,
	|	ТаблицаТоваров.СуммаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСАлкогольнойПродукцией.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Номенклатура,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Характеристика,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Упаковка,
	|	ТаблицаТоваровСАлкогольнойПродукцией.СтавкаНДС,
	|	ТаблицаТоваровСАлкогольнойПродукцией.СправкаБ,
	|	СУММА(ТаблицаТоваровСАлкогольнойПродукцией.Количество) КАК Количество,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Цена,
	|	СУММА(ТаблицаТоваровСАлкогольнойПродукцией.Сумма) КАК Сумма,
	|	СУММА(ТаблицаТоваровСАлкогольнойПродукцией.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ТаблицаТоваровСАлкогольнойПродукцией.СуммаНДС) КАК СуммаНДС,
	|	ТаблицаТоваровСАлкогольнойПродукцией.ХарактеристикиИспользуются,
	|	ТаблицаТоваровСАлкогольнойПродукцией.ИспользоватьСерийныеНомера,
	|	ТаблицаТоваровСАлкогольнойПродукцией.НеобходимостьВводаСправкиНаАлкоголь,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваровСАлкогольнойПродукцией.КлючСвязиСерийныхНомеров
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючСвязиСерийныхНомеров,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваровСАлкогольнойПродукцией.СтатусУказанияСерий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваровСАлкогольнойПродукцией.СтатусыСерийИПодарочныхСертификатов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусыСерийИПодарочныхСертификатов,
	|	ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция
	|ИЗ
	|	ТаблицаТоваровСАлкогольнойПродукцией КАК ТаблицаТоваровСАлкогольнойПродукцией
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровСАлкогольнойПродукцией.Номенклатура,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Характеристика,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Упаковка,
	|	ТаблицаТоваровСАлкогольнойПродукцией.Цена,
	|	ТаблицаТоваровСАлкогольнойПродукцией.СтавкаНДС,
	|	ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваровСАлкогольнойПродукцией.КлючСвязиСерийныхНомеров
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваровСАлкогольнойПродукцией.СтатусУказанияСерий
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСАлкогольнойПродукцией.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваровСАлкогольнойПродукцией.СтатусыСерийИПодарочныхСертификатов
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаТоваровСАлкогольнойПродукцией.СправкаБ,
	|	ТаблицаТоваровСАлкогольнойПродукцией.ХарактеристикиИспользуются,
	|	ТаблицаТоваровСАлкогольнойПродукцией.ИспользоватьСерийныеНомера,
	|	ТаблицаТоваровСАлкогольнойПродукцией.НеобходимостьВводаСправкиНаАлкоголь,
	|	ТаблицаТоваровСАлкогольнойПродукцией.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ДатаОстатков = ?(ЗначениеЗаполнено(Объект.Ссылка), Новый Граница(Объект.Дата, ВидГраницы.Исключая), Неопределено);
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	
	ИнтеграцияЕГАИС.ПодобратьСправкиБДляСписания(ТаблицаРаспределения, ТранспортныйМодуль.ОрганизацияЕГАИС, ДатаОстатков);
	
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		СтрокаТЧ = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы,, "Количество");
		
		СтрокаТЧ.КоличествоУпаковок = СтрокаТаблицы.Количество;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АлкогольнаяПродукция) Тогда
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииГИСМСервер()
	
	ИнтеграцияГИСМ_РТ.СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукции(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентРТ.ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИС()
	
	Если НапоминаниеЕГАИСВыведено < ТекущаяДата() - 3*60 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания()
	
	ТекстНапоминания = ПолучитьТекстНапоминания();
	
	Если ЗначениеЗаполнено(ТекстНапоминания) Тогда
		ПоказатьОповещениеПользователя("Обмен данными с ЕГАИС:",, ТекстНапоминания, БиблиотекаКартинок.Изменить);
		НапоминаниеЕГАИСВыведено = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНапоминания()
	
	Возврат ИнтеграцияЕГАИСРТ.ПолучитьНапоминаниеЕГАИС(Объект);
	
КонецФункции

#КонецОбласти

#КонецОбласти


&НаКлиенте
Процедура ПодобратьЦену()
	Если ЭтаФорма.ТекущийЭлемент=Элементы.Товары 
			и ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент=Элементы.Товары.ПодчиненныеЭлементы.ТоварыЦена тогда
		струк=Новый структура;
		Струк.Вставить("Номка",ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ххх_ФормаВыбораЦены",Струк,ЭтаФорма.ТекущийЭлемент,,ВариантОткрытияОкна.ОтдельноеОкно,,Новый ОписаниеОповещения("ТоварыЦенаОбработкаВыбора",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОбработкаВыбора(Элемент, ВыбранноеЗначение) экспорт
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Цена=Элемент;
	ТоварыЦенаПриИзменении(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные=Неопределено или 
		Элементы.Товары.ТекущиеДанные<>Неопределено и не ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Сообщить("Заполните номенклатуру!");
		возврат;
	КонецЕсли;
	СтандартнаяОбработка=ложь;
	струк=Новый структура();
	струк.Вставить("Номенклатура",Элементы.Товары.ТекущиеДанные.Номенклатура);
	струк.Вставить("Магазин",Объект.Магазин);
	струк.Вставить("Организация",Объект.Организация);
	струк.Вставить("Склад",Объект.Склад);
	струк.Вставить("Дата",Объект.Дата);
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаВыбораПартииПоступВозврат",струк,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Объект.Товары[Элементы.Товары.ТекущаяСтрока].Партия=ВыбранноеЗначение.ПартияТоваров;
	Объект.Товары[Элементы.Товары.ТекущаяСтрока].Цена=ВыбранноеЗначение.Цена;
	
	Объект.Товары[Элементы.Товары.ТекущаяСтрока].СправкаБ=ВыбранноеЗначение.СправкаБ;
		
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));	
	СтруктураДействий.Вставить("ПересчитатьСумму");	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ВернутьИзТорговогоЗала(Команда)
	
	Если СуществуетВозвратИзТоргЗалла() Тогда
		Сообщить("Возврат из торгового зала уже существует, нельзя создать еще один.");
		возврат;
	КонецЕсли;

	Док=ВернутьИзТорговогоЗалаСервер();
	
	Если не ЗначениеЗаполнено(док) Тогда
		Сообщить("В возврате отсутсвует алкоголь! Оформить возврат из торгового зала невозможно.");
	Иначе
		Форма=ПолучитьФорму("Документ.ВозвратИзТорговогоЗалаЕГАИС.Форма.ФормаДокументаРТ");
		Форма.Параметры.Ключ=Док;
		Форма.Прочитать();
		Форма.ВместоОповещениеПередачаДанныхВЕГАИСНачалоКочетов();
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьИзТорговогоЗалаСервер()
	
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("ДокументОснование",Объект.ссылка);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВозвратИзТорговогоЗалаЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ВозвратИзТорговогоЗалаЕГАИС КАК ВозвратИзТорговогоЗалаЕГАИС
	             |ГДЕ
	             |	ВозвратИзТорговогоЗалаЕГАИС.ДокументОснование = &ДокументОснование
	             |	И ВозвратИзТорговогоЗалаЕГАИС.ПометкаУдаления = ЛОЖЬ";
	Выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		Док=Выборка.ссылка.ПолучитьОбъект();
	Иначе
		Док=Документы.ВозвратИзТорговогоЗалаЕГАИС.СоздатьДокумент();
	КонецЕсли;
	Док.Заполнить(Объект.Ссылка);
	Наб=РегистрыСведений.НастройкиОбменаЕГАИС.СоздатьНаборЗаписей();
	Наб.отбор.Организация.Установить(Док.Организация);
	//ОргЕГАИС=Наб[0].
	
	Если Док.Товары.Количество()=0 Тогда		
		возврат неопределено;		
	КонецЕсли;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат док.Ссылка;
	
КонецФункции

Функция СуществуетВозвратИзТоргЗалла()
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("возврат",Объект.ссылка);
	Запрос.УстановитьПараметр("статус",Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПереданВЕГАИС);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВозвратИзТорговогоЗалаЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ВозвратИзТорговогоЗалаЕГАИС КАК ВозвратИзТорговогоЗалаЕГАИС
	             |ГДЕ
	             |	ВозвратИзТорговогоЗалаЕГАИС.Проведен
	             |	И ВозвратИзТорговогоЗалаЕГАИС.ДокументОснование = &возврат";
	выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		возврат истина;
	КонецЕсли;
	Возврат ложь;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи, флагНеобходимостиПроверкиБылилиПоступления=истина)
	Если Параметрызаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение и не Параметрызаписи.свойство("нетНеобходимостиПроверкиБылилиПоступления") Тогда
		Предупреждение=ПроверитьБылилиПоступленияПоНоменклатуре(); 
		Если ЗначениеЗаполнено(Предупреждение) тогда
			Предупреждение=Предупреждение+Символы.ВК+"Вы уверены что хотите провести накладную?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаОПроведении",ЭтаФОрма,),Предупреждение,РежимДиалогаВопрос.ДаНет);
			Отказ=истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОПроведении(Ответ,йцу)  экспорт
	Если Ответ=КодВозвратаДиалога.Да тогда
		Параметрызаписи=Новый структура;
		Параметрызаписи.Вставить("РежимЗаписи",РежимЗаписиДокумента.Проведение);
		Параметрызаписи.Вставить("нетНеобходимостиПроверкиБылилиПоступления",ложь);
		ЭтаФорма.Записать(Параметрызаписи);
	КонецЕсли;
КонецПроцедуры


Функция ПроверитьБылилиПоступленияПоНоменклатуре()
	предупреждение="";
	товары=Объект.Товары.Выгрузить();
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Поставщик",Объект.Контрагент);
	Запрос.УстановитьПараметр("товары",Товары);
	Запрос.Текст="ВЫБРАТЬ
	             |	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ НомПоставщиков
	             |ИЗ
	             |	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	             |ГДЕ
	             |	НоменклатураПоставщиков.Поставщик = &Поставщик
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураПоставщиков.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Товары.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ НомДок
	             |ИЗ
	             |	&Товары КАК Товары
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НомДок.Номенклатура КАК Номенклатура
	             |ИЗ
	             |	НомДок КАК НомДок
	             |		ЛЕВОЕ СОЕДИНЕНИЕ НомПоставщиков КАК НомПоставщиков
	             |		ПО НомПоставщиков.Номенклатура = НомДок.Номенклатура
	             |ГДЕ
	             |	НомПоставщиков.Номенклатура ЕСТЬ NULL
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НомДок.Номенклатура";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		предупреждение=предупреждение+"По карточке: "+ выборка.Номенклатура+" от поставщика: "+Объект.Контрагент+" приходов небыло!"+символы.ВК;
	КонецЦикла;
	возврат предупреждение;
КонецФункции

&НаКлиенте
Процедура ПоискПоАкцизнойМарке()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоАкцизнойМарке", ЭтаФорма);
	Парам=Новый структура;
	Парам.Вставить("ВернутьБСправку",Истина);
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаПоискаПоАкцизнойМарке",Парам,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоАкцизнойМарке(Итог,куйня) Экспорт
	Если Значениезаполнено(Итог) и ЗначениеЗаполнено(Итог.Номка) Тогда
		Если Объект.АкцизныеМарки.НайтиСтроки(Новый структура("АкцизнаяМарка",итог.АкцизнаяМарка)).Количество()=0 Тогда
			
			СтрокиВТоварах=Объект.Товары.НайтиСтроки(Новый структура("СправкаБ,ххх_АлкогольнаяПродукция",Итог.БСправка,Итог.АлкоНомка));
			Если СтрокиВТоварах.количество()> 0 Тогда
				СтрокаВТоварах=СтрокиВТоварах[0];
				СтрокаВТоварах.КоличествоУпаковок=СтрокаВТоварах.КоличествоУпаковок+1;
				СтрокаВТоварах.Количество=СтрокаВТоварах.КоличествоУпаковок;
			Иначе
				СтрокаВТоварах=Объект.товары.добавить();
				СтрокаВТоварах.Номенклатура=итог.номка;
				СтрокаВТоварах.КоличествоУпаковок=1;	
				СтрокаВТоварах.Количество=1;
				СтрокаВТоварах.СправкаБ=Итог.БСправка;
				СтрокаВТоварах.ххх_АлкогольнаяПродукция=Итог.АлкоНомка;
			КонецЕсли;
			
			строкаАкцизныхМарок=Объект.АкцизныеМарки.Добавить();
			строкаАкцизныхМарок.АкцизнаяМарка=итог.АкцизнаяМарка;
			строкаАкцизныхМарок.СправкаБ=итог.БСправка;
			Элементы.Товары.ТекущаяСтрока=строкаАкцизныхМарок.ПолучитьИдентификатор();
			ТоварыНоменклатураПриИзменении("",Итог.БСправка);

		Иначе
			Сообщить("Нельзя считывать одну и ту же акцизную марку!!!");
			Возврат;
		КонецЕсли;
	//	НомкаПоДаннымПоставщика=Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("Номенклатура",итог.номка));
	//	Если ЗначениеЗаполнено(Итог.Номка) и ЗначениеЗаполнено(НомкаПоДаннымПоставщика) Тогда
	//		строки=Объект.товары.НайтиСтроки(Новый структура("АлкогольнаяПродукция",итог.АлкоНомка));		
	//		стр=?(ЗначениеЗаполнено(строки),
	//			ПолучитьСтрокуВЗависимостиОтТогоЧтоХватаетЛиКоличестваПриСверкеПоИдентификаторуСтроки(строки),
	//			неопределено);
	//		Если стр<>Неопределено Тогда
	//			стр.КоличествоУпаковок=стр.КоличествоУпаковок+1;
	//			стр.Количество=стр.Количество+1;
	//		Иначе
	//			Если Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("АлкогольнаяПродукция",итог.АлкоНомка)).количество()=0 Тогда
	//				сообщить("По коду ФСРАР: "+итог.Алкокод+" не найдена номенклатура в накладной ЕГАИС");
	//			Иначе
	//				стрПоДаннымПоставщика=Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("АлкогольнаяПродукция",итог.АлкоНомка))[0];  
	//				стр=Объект.товары.добавить();
	//				стр.Номенклатура=итог.номка;
	//				стр.КоличествоУпаковок=1;	
	//				стр.Количество=1;
	//				стр.АлкогольнаяПродукция=стрПоДаннымПоставщика.АлкогольнаяПродукция;
	//				стр.ИдентификаторСтроки=стрПоДаннымПоставщика.ИдентификаторСтроки;
	//				стр.ИдентификаторУпаковки=стрПоДаннымПоставщика.ИдентификаторУпаковки;
	//				стр.ДатаРозлива=стрПоДаннымПоставщика.ДатаРозлива;
	//			КонецЕсли;
	//		КонецЕсли;
	//		строкаАкцизныхМарок.СправкаБ=НайтиБСправкуВТТН(стр.ИдентификаторСтроки);
	//		строкаАкцизныхМарок.ИдентификаторСтроки=стр.ИдентификаторСтроки;
	//		Если Не ЗначениеЗаполнено(строкаАкцизныхМарок.СправкаБ) Тогда
	//			Объект.ххх_АкцизныеМарки.Удалить(строкаАкцизныхМарок.ПолучитьИдентификатор());
	//		КонецЕсли;
	//		попытка
	//			стр.ПолучитьИдентификатор();
	//			Элементы.Товары.ТекущаяСтрока=стр.ПолучитьИдентификатор();
	//			ТоварыНоменклатураПриИзменении("");	
	//		исключение
	//		КонецПопытки;
	//	ИначеЕсли не ЗначениеЗаполнено(НомкаПоДаннымПоставщика) Тогда
	//		Сообщить("Данной позиции нет в ТТН из ЕГАИСа! "+Итог.Алкокод);
	ПоискПоАкцизнойМарке();
	Иначе
		Если ЗначениеЗаполнено(Итог) Тогда
			Сообщить("Не найдена связка номенклатура с алкокодом: "+Итог.Алкокод+". Обратитесь к менеджерам");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоАкцизнойМарке(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоАкцизнойМаркеУдаление", ЭтаФорма);
	Парам=Новый структура;
	Парам.Вставить("ВернутьБСправку",Истина);
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаПоискаПоАкцизнойМарке",Парам,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ОповещениеПоискаПоАкцизнойМаркеУдаление(Итог,куйня) Экспорт

	УдалитьСтрокиПоАкцизу(итог)
	
КонецПроцедуры

Процедура УдалитьСтрокиПоАкцизу(итог)

	Если Значениезаполнено(Итог) Тогда
		//ххх_АкцизныеМарки=Объект.ххх_АкцизныеМарки.Выгрузить();
		//СтрокаМарок=ххх_АкцизныеМарки.Найти(итог.АкцизнаяМарка);
		СтрокаМарок=Объект.АкцизныеМарки.НайтиСтроки(Новый структура("АкцизнаяМарка",итог.АкцизнаяМарка));
		Если СтрокаМарок.количество()>0 Тогда
			СтрокаМарок=СтрокаМарок[0];
			//товары=Объект.Товары.Выгрузить();
			//СтрокаТовары=товары.найти(СтрокаМарок.ИдентификаторСтроки);
			СтрокаТоваров=Объект.Товары.НайтиСтроки(Новый структура("СправкаБ,ххх_АлкогольнаяПродукция",СтрокаМарок.СправкаБ,Итог.АлкоНомка))[0];
			Если строкаТоваров.количество>1 Тогда
				строкаТоваров.количество=строкаТоваров.количество-1;
				строкаТоваров.КоличествоУпаковок=строкаТоваров.количество;
				Объект.АкцизныеМарки.Удалить(Объект.ххх_АкцизныеМарки.индекс(СтрокаМарок));
			Иначе
				Объект.Товары.Удалить(Объект.Товары.индекс(строкаТоваров));
				Объект.АкцизныеМарки.Удалить(Объект.ххх_АкцизныеМарки.индекс(СтрокаМарок));
			КонецЕсли;
		Иначе
			Сообщить("Данная марка отсутствует в накладной!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	










































