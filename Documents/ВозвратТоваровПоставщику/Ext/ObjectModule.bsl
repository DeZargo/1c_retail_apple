
&После("ОбработкаЗаполнения")
Процедура КочетовОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Для каждого стр из товары Цикл
			стр.Партия=ДанныеЗаполнения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

функция ПолучитьСтатусОбработкиЕГАИС()
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("док",ссылка);
	Запрос.текст="ВЫБРАТЬ
	             |	СтатусыДокументовЕГАИС.Статус КАК Статус
	             |ИЗ
	             |	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	             |		ПО ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	             |ГДЕ
	             |	ТТНИсходящаяЕГАИС.ДокументОснование = &док
	             |	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления";
	выборка=запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		возврат выборка.статус;
	КонецЕСли;
	возврат неопределено;
КонецФункции

&Перед("ОбработкаПроведения")
Процедура КочетовОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ПолучитьФорматВозврата() Тогда
//	Если Контрагент.ххх_НовыйФорматВозвратов Тогда
		
		ЕстьТара=Ложь;
		ЕстьНЕТара=Ложь;
	
		Тара=Справочники.ххх_Справочник.ВидНоменклатурыТара.Значение;
		

		Для каждого стр из Товары  цикл
			
			Если стр.Номенклатура.ВидНоменклатуры=тара Тогда
				ЕстьТара=истина;
			Иначе
				ЕстьНЕТара=истина;
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если ЕстьТара и ЕстьНеТара Тогда
			Сообщить("Нельзя провести тару с другой номенклатурой");
			отказ=истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьАлкоголь=Ложь;
	ЕстьНЕАлкоголь=Ложь;
	Алкоголь=Справочники.ххх_Справочник.ВидНоменклатурыАлкоголь.Значение;
	
	

	Для каждого стр из Товары  цикл
		
		Если стр.Номенклатура.ВидНоменклатуры=Алкоголь Тогда
			ЕстьАлкоголь=истина;
		Иначе
			ЕстьНЕАлкоголь=истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ЕстьАлкоголь и ЕстьНЕАлкоголь Тогда
		Сообщить("Нельзя провести алкоголь с другой номенклатурой");
		отказ=истина;
	КонецЕсли;

		

		
	ФлагНеобходимостиПроверкиСуществованияИскходящейТТН_ЕГАИС=Ложь;
	Для каждого стр из Товары цикл
		
		Если не ЗначениеЗаполнено(стр.Партия) и контрагент.ххх_НовыйФорматВозвратов тогда 
			сообщить("В строке: "+стр.НомерСтроки+" не заполнена партия!");	
			//Отказ=истина;
		КонецЕсли;

		если стр.Номенклатура.АлкогольнаяПродукция Тогда
			ФлагНеобходимостиПроверкиСуществованияИскходящейТТН_ЕГАИС=Истина;
			Если не ЗначениеЗаполнено(стр.Справка2) тогда 
				сообщить("Не заполнена справка Б в строке: "+стр.НомерСтроки);	
				Отказ=истина;
			КонецЕсли;
			//Если не ЗначениеЗаполнено(стр.Партия) и контрагент.ххх_НовыйФорматВозвратов тогда 
			//	сообщить("У данного поставщика должны быть заполнены все партии.");	
			//	Отказ=истина;
			//КонецЕсли;
		КонецЕсли;				
	КонецЦикла;
	
	ПроверитьНаНовыйФорматВозвратов(Отказ); 

	
	Если ФлагНеобходимостиПроверкиСуществованияИскходящейТТН_ЕГАИС Тогда
		СтатусОбработки=ПолучитьСтатусОбработкиЕГАИС();
		Если не (СтатусОбработки=Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден или
			СтатусОбработки=Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят или 
			СтатусОбработки=Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом)Тогда
			Сообщить("Документ нельзя провести, так как не получен ответ от ЕГАИС");
			отказ = истина;
		КонецЕсли;
	КонецЕсли;
		
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Орг",Организация);
	//запрос.УстановитьПараметр("СистемаНалогообложения",Перечисления.СистемыНалогообложения.Общая);
	запрос.УстановитьПараметр("СистемаНалогообложения",Перечисления.УдалитьСистемыНалогообложения.Общая);
	Запрос.УстановитьПараметр("ссылка",ссылка);
	Запрос.Текст="ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК Ссылка,
				|	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
				|ИЗ
				//|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Орг) КАК СистемыНалогообложенияОрганизацийСрезПоследних
				|	РегистрСведений.УдалитьСистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Орг) КАК СистемыНалогообложенияОрганизацийСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|		ПО (СчетФактураВыданный.Организация = СистемыНалогообложенияОрганизацийСрезПоследних.Организация)
				|			И (СчетФактураВыданный.Проведен)
				|			И (СчетФактураВыданный.ДокументОснование = &ссылка)";

	Выборка=Запрос.Выполнить().Выбрать();
	выборка.Следующий();
	Если не ЗначениеЗаполнено(выборка.Ссылка) 
		и контрагент.ххх_ПлательщикНДС 
		//и выборка.СистемаНалогообложения=Перечисления.СистемыНалогообложения.Общая Тогда
		и выборка.СистемаНалогообложения=Перечисления.УдалитьСистемыНалогообложения.Общая Тогда
		
		//Сообщить("Заполните счет-фактуру!");
		//отказ=истина;
		//возврат;		
		СчетФАктура=Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Дата=Дата;
		СчетФактура.Номер=номер;
		СчетФактура.ДокументОснование=ссылка;
		СчетФактура.Номер=Номер;
		СчетФактура.ДатаВыставления=дата;
		СчетФактура.Контрагент=Контрагент;
		СчетФактура.валюта="RUB";
		СчетФактура.КодВидаОперации="03";
		СчетФактура.Организация=Организация;
		СчетФактура.ТипСчетаФактуры=Перечисления.ТипыВыданныхСчетовФактур.НаРеализацию;
		
		СчетФАктура.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	выборка.Сбросить();
	выборка.Следующий();
	Если ЗначениеЗаполнено(выборка.Ссылка) Тогда
		СчетФАктура=выборка.ссылка.ПолучитьОбъект();
		СчетФактура.Дата=Дата;
		СчетФактура.установитьПометкуУдаления(Ложь);
		СчетФАктура.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
КонецПроцедуры


Процедура ПроверитьНаНовыйФорматВозвратов(Отказ)
	
	флаг=Ложь;
	Для каждого стр из товары цикл
		Если Не ЗначениеЗаполнено(стр.Партия) Тогда
			флаг=Истина;
		КонецЕсли;
	КонецЦикла;
	Если флаг Тогда
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("дата",дата);
		//Запрос.УстановитьПараметр("ПустаяСсылкаПоступление",Документы.ПоступлениеТоваров.ПустаяСсылка());
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.Текст="ВЫБРАТЬ
		             |	ххх_ДатыНовыхФорматовВозвратовСрезПоследних.Введено КАК Введено
		             |ИЗ
		             |	РегистрСведений.ххх_ДатыНовыхФорматовВозвратов.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ххх_ДатыНовыхФорматовВозвратовСрезПоследних";

		выборка=Запрос.Выполнить().Выбрать();

		Если выборка.Следующий() и выборка.введено Тогда  
			
			//Сообщить("Есть незаполненые партии необходимо их заполнить.");
			//отказ=Истина;
	
	
			Запрос=Новый запрос;
			Запрос.УстановитьПараметр("тз",Товары.Выгрузить());
			Запрос.УстановитьПараметр("дата",дата);
			Запрос.УстановитьПараметр("ПустаяСсылкаПоступление",Документы.ПоступлениеТоваров.ПустаяСсылка());
			Запрос.УстановитьПараметр("номка",Товары.Выгрузить().ВыгрузитьКолонку("номенклатура"));
			Запрос.УстановитьПараметр("Контрагент",Контрагент);
			Запрос.УстановитьПараметр("магазин",Магазин);
			
			Запрос.УстановитьПараметр("ссылка",ссылка);
			
			Если Движения.ххх_ПартииТоваровПоступВозврат.Количество()=0 Тогда
				Запрос.УстановитьПараметр("проведен",Ложь);
			Иначе
				Запрос.УстановитьПараметр("проведен",Истина);
			КонецЕсли;

			Запрос.Текст="ВЫБРАТЬ
			             |	тз.номенклатура КАК номенклатура,
			             |	тз.Количество КАК Количество
			             |ПОМЕСТИТЬ йцу
			             |ИЗ
			             |	&тз КАК тз
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	йцу.номенклатура КАК номенклатура,
			             |	СУММА(йцу.Количество) КАК Количество
			             |ПОМЕСТИТЬ схлопнуть
			             |ИЗ
			             |	йцу КАК йцу
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	йцу.номенклатура
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	схлопнуть.номенклатура КАК номенклатура,
			             |	СУММА(ххх_ПартииТоваровПоступВозвратОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			             |	ВЫБОР
			             |		КОГДА схлопнуть.Количество < 0
			             |			ТОГДА -схлопнуть.Количество
			             |		ИНАЧЕ схлопнуть.Количество
			             |	КОНЕЦ КАК Количество
			             |ПОМЕСТИТЬ йцуйцу
			             |ИЗ
			             |	РегистрНакопления.ххх_ПартииТоваровПоступВозврат.Остатки(
			             |			&Дата,
			             |			Магазин = &магазин
			             |				И ПартияТоваров.Контрагент = &Контрагент
			             |				И Номенклатура В (&номка)) КАК ххх_ПартииТоваровПоступВозвратОстатки
			             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ схлопнуть КАК схлопнуть
			             |		ПО ххх_ПартииТоваровПоступВозвратОстатки.Номенклатура = схлопнуть.номенклатура
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	схлопнуть.номенклатура,
			             |	ВЫБОР
			             |		КОГДА схлопнуть.Количество < 0
			             |			ТОГДА -схлопнуть.Количество
			             |		ИНАЧЕ схлопнуть.Количество
			             |	КОНЕЦ
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	йцуйцу.номенклатура КАК номенклатура,
			             |	йцуйцу.КоличествоОстаток КАК КоличествоОстаток,
			             |	йцуйцу.Количество КАК Количество
			             |ИЗ
			             |	йцуйцу КАК йцуйцу
			             |ГДЕ
			             |	ВЫБОР
			             |			КОГДА &проведен
			             |				ТОГДА йцуйцу.КоличествоОстаток + йцуйцу.Количество >= йцуйцу.Количество
			             |			ИНАЧЕ йцуйцу.КоличествоОстаток > йцуйцу.Количество
			             |		КОНЕЦ";
			
			выборка=Запрос.Выполнить().Выбрать();
			
			пока выборка.Следующий() цикл
				
				
				струк=Новый структура;
				струк.Вставить("номенклатура",выборка.номенклатура);
				
				строки=Товары.НайтиСтроки(струк);
				Для каждого стр из строки цикл
					Если не ЗначениеЗаполнено(стр.партия) и выборка.номенклатура.ВидНоменклатуры<>Справочники.ххх_Справочник.ВидНоменклатурыАлкоголь.Значение Тогда
						Сообщить("По номенклатуре: "+выборка.номенклатура +" есть остатки по партиям. Нельзя провести накладную пока у указанных номенклатур не выбрана партия");
						отказ=Истина;
					КонецЕсли;
				КонецЦикла;
				//--
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаПроведения")
Процедура КочетовОбработкаПроведенияПосле(Отказ, РежимПроведения)
	//Движения.ххх_АкцизныеМарки.записывать=истина;	
	//Для каждого стр из ххх_АкцизныеМарки Цикл
	//	Движение=Движения.ххх_АкцизныеМарки.добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//	Движение.Период = Дата;
	//	Движение.Регистратор=ссылка;
	//	Движение.АкцизнаяМарка = стр.АкцизнаяМарка;
	//	Движение.СправкаБ = стр.СправкаБ;
	//	Движение.Количество = 1;
	//КонецЦикла;
КонецПроцедуры


&После("ОбработкаУдаленияПроведения")
Процедура КочетовОбработкаУдаленияПроведения(Отказ)
Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Орг",Организация);
	//запрос.УстановитьПараметр("СистемаНалогообложения",Перечисления.СистемыНалогообложения.Общая);
	запрос.УстановитьПараметр("СистемаНалогообложения",Перечисления.УдалитьСистемыНалогообложения.Общая);
	Запрос.УстановитьПараметр("ссылка",ссылка);
	Запрос.Текст="ВЫБРАТЬ
	             |	СчетФактураВыданный.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	             |ГДЕ
	             |	СчетФактураВыданный.ДокументОснование = &ссылка";
	Выборка=Запрос.Выполнить().Выбрать();
	выборка.Следующий();
	Если ЗначениеЗаполнено(выборка.Ссылка)Тогда
		//Сообщить("Заполните счет-фактуру!");
		//отказ=истина;
		//возврат;		
		СчетФАктура=выборка.Ссылка.получитьОбъект();;
		СчетФактура.установитьПометкуУдаления(истина);
	КонецЕсли;

КонецПроцедуры

&После("ПередЗаписью")
Процедура КочетовПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Для каждого стр из товары цикл
		Если стр.СуммаНДС=0 и стр.СтавкаНДС=перечисления.СтавкиНДС.НДС20 Тогда
			стр.СуммаНДС=стр.Сумма*20/120;
		ИначеЕсли стр.СуммаНДС=0 и стр.СтавкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
			стр.СуммаНДС=стр.Сумма*10/110;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


функция ПолучитьФорматВозврата()
	
	Отбор = Новый Структура("Контрагент", Контрагент.Ссылка);
	ДатыНовыхВозвратов = РегистрыСведений.ххх_ДатыНовыхФорматовВозвратов.СрезПоследних(?(РольДоступна("ПолныеПрава"),Дата,ТекущаяДата()), Отбор);
	
	возврат ?(ДатыНовыхВозвратов.Количество()=0,ложь,ДатыНовыхВозвратов[0].Введено);
	
КонецФункции

//функция ПроверкаПоступалаНоменклатураОтПоставщика()
//	Запрос=Новый Запрос;
//	Запрос.УстановитьПараметр("номка",Товары.ВыгрузитьКолонку("Номенклатура"));
//	Запрос.УстановитьПараметр("Контр",Контрагент);
//	Запрос.Текст="ВЫБРАТЬ
//	             |	ВложенныйЗапрос.Ссылка КАК Ссылка
//	             |ИЗ
//	             |	(ВЫБРАТЬ
//	             |		Номенклатура.Ссылка КАК Ссылка
//	             |	ИЗ
//	             |		Справочник.Номенклатура КАК Номенклатура
//	             |	ГДЕ
//	             |		Номенклатура.Ссылка В(&номка)) КАК ВложенныйЗапрос
//	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	             |			НоменклатураПоставщиков.Номенклатура КАК Номенклатура
//	             |		ИЗ
//	             |			РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
//	             |		ГДЕ
//	             |			НоменклатураПоставщиков.Поставщик = &контр) КАК номкапост
//	             |		ПО ВложенныйЗапрос.Ссылка = номкапост.Номенклатура
//	             |ГДЕ
//	             |	номкапост.Номенклатура ЕСТЬ NULL";
//	выборка=Запрос.Выполнить().Выбрать();
//	Пока выборка.Следующий() Цикл
//		Сообщить("По номенклатуре: "+выборка.ссылка+" не было приходов!");
//	КонецЦикла;
//КонецФункции

//&После("ПередЗаписью")
//Процедура КочетовПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
//	ПроверкаПоступалаНоменклатураОтПоставщика();
//КонецПроцедуры








































