&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораТТН(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ПоступлениеТоваровПриСоздании = СоздатьНайтиПоступлениеНаСервере(РезультатОткрытияФормы, Ложь, ДополнительныеПараметры.ЗаказПоставщику);
		ПодключитьОбработчикОжидания("ОткрытьФормуПоступленияТоваровПриСоздании", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоступленияТоваровПриСоздании()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ПоступлениеТоваровПриСоздании);
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры


#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ПодключаемоеОборудованиеРТВызовСервера.УстановитьКонтрагентаПоДисконтнойКарте(ЭтотОбъект, СтруктураРезультат, СтрокаРезультата);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.УчитыватьНДС);
		
		Если ИспользоватьАссортимент Тогда
			СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект);
			СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ДатаПоступления),
				Объект.ДатаПоступления,
				Объект.Дата);
			СтруктураПроверкиАссортимента.ТекстСообщения =
				НСтр("ru = 'Номенклатура ""%1"" не включена в ассортимент магазина или запрещена к закупке. Заказывать ее не рекомендуется.'");
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбновитьИтоговыеПоказатели();
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область ОбработчикиСобытийФормы



// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки".
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	// СтандартныеПодсистемы.Печать
		//УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Изменить", "Доступность", Ложь);
		ПолучитьДокументПоступления();
		УстановитьДоступностьЦенаВключаетНДС();
		УстановитьДоступностьЭлементовНаСервере();
		УправлениеЭлементамиФормыНаСервере();
		
		УстановитьСостояниеОплатыПоступленияНаФорме();
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Вызывать необходимо после обновления сумм подвала.
		ОбновитьИтоговыеПоказатели(Истина, Истина);
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	НастроитьФормуПоДополнительнымПравам();
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если НеобходимоСкорректироватьДатыПлатежей И ЕстьПравоРедактировать Тогда
		ТекстСообщения = НСтр("ru = 'Желаемая дата поступления не совпадает с фактической.
							|Рекомендуется скорректировать даты платежей этапов с видом: отсрочка платежа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	Элементы.ЗаказПокупателя.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей") 
										 И ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	
	ПриИзмененииУчитыватьНДССервер();
	ЗаполнитьСтавкиНДС();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, Объект.Дата);
	
КонецПроцедуры

//zorius
&НаКлиенте
процедура ЗаполнитьТаблицуПоОстаткамВБазеКлиент()
	ЗаполнитьТаблицуПоОстаткамВБазе()
КонецПроцедуры

процедура ЗаполнитьТаблицуПоОстаткамВБазе()
	
	Запрос=Новый Запрос;
	Запрос.Текст="";
	
	
	Если Объект.Контрагент=Справочники.ххх_Справочник.КонтрагентБаза1.Значение Тогда
		база=Справочники.ххх_Справочник.id_b1;
	ИначеЕсли Объект.Контрагент=Справочники.ххх_Справочник.КонтрагентБаза2.Значение Тогда
		база=Справочники.ххх_Справочник.id_b2;
	ИначеЕсли Объект.Контрагент=Справочники.ххх_Справочник.КонтрагентБаза3.Значение тогда
		база=Справочники.ххх_Справочник.id_b3;
	КонецЕсли;	
	Если не ЗначениеЗаполнено(база)Тогда
		Элементы.Товары.ПодчиненныеЭлементы.ОстаткиВБазе.Видимость=Ложь;
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоробки.Видимость=Ложь;
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыУпаковки.Видимость=Ложь;
		Элементы.ПериодАнализаПродаж.Видимость=Ложь;
		возврат;
	КонецЕсли;
	
	Элементы.ПериодАнализаПродаж.Видимость=Истина;
	Элементы.Товары.ПодчиненныеЭлементы.ОстаткиВБазе.Видимость=истина;
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоробки.Видимость=истина;
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыУпаковки.Видимость=истина;
	запрос=новый запрос;
	Запрос.УстановитьПараметр("Свойство",ЭтотОбъект.Объект.Контрагент.ДополнительныеРеквизиты.Найти(Справочники.ххх_Справочник.СвязкаКонтрагентаСИдТовараВЕгоБазе.Значение).Свойство);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("ДатаНАч",ПериодАнализаПродаж.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон",ПериодАнализаПродаж.ДатаОкончания);
	Запрос.УстановитьПараметр("База",база);   
	Запрос.УстановитьПараметр("ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаЗаказа",КонецДня(Объект.Дата));
	Если Объект.Товары.Количество()=0 Тогда
		Запрос.Текст="ВЫБРАТЬ
		             |	ДополнительныеСведения.Объект КАК Объект
		             |ПОМЕСТИТЬ ОтборНомкиПоБаззам
		             |ИЗ
		             |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		             |		ПО КонтрагентыДополнительныеРеквизиты.Значение = ДополнительныеСведения.Свойство
		             |			И (КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство)
		             |			И (КонтрагентыДополнительныеРеквизиты.Ссылка = &Контрагент)
		             |			И (ЕСТЬNULL(ДополнительныеСведения.Значение, ""0"") <> ""0"")
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ДополнительныеСведения.Объект
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
		             |	СУММА(ЗаказПоставщикуТовары.Коробки) КАК Коробки,
		             |	СУММА(ЗаказПоставщикуТовары.Упаковки) КАК Упаковки,
		             |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура
		             |ПОМЕСТИТЬ Заказы
		             |ИЗ
		             |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			МАКСИМУМ(ЗаказПоставщику.ххх_ИдЦентр) КАК ххх_ИдЦентр
		             |		ИЗ
		             |			Документ.ЗаказПоставщику КАК ЗаказПоставщику
		             |		ГДЕ
		             |			ЗаказПоставщику.Проведен = ИСТИНА
		             |			И ЗаказПоставщику.Контрагент = &Контрагент
		             |			И ЗаказПоставщику.Дата <= &ДатаЗаказа) КАК ВложенныйЗапрос
		             |		ПО ЗаказПоставщикуТовары.Ссылка.ххх_ИдЦентр = ВложенныйЗапрос.ххх_ИдЦентр
		             |ГДЕ
		             |	ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ЗаказПоставщикуТовары.Номенклатура
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ххх_ОстаткиВБазахСрезПоследних.Номенклатура КАК Номенклатура,
		             |	ххх_ОстаткиВБазахСрезПоследних.Коробки КАК КоробкиОстатки,
		             |	ххх_ОстаткиВБазахСрезПоследних.Упаковки КАК УпаковкиОстатки,
		             |	ххх_ОстаткиВБазахСрезПоследних.Штуки КАК ШтукиОстатки,
		             |	ххх_ОстаткиВБазахСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		             |	Заказы.Коробки КАК Коробки1,
		             |	Заказы.Упаковки КАК Упаковки1,
		             |	Заказы.Количество КАК Количество1,
		             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК ОстатокНаш,
		             |	ПродажиОбороты.КоличествоОборот КАК КоличествоПродано
		             |ИЗ
		             |	ОтборНомкиПоБаззам КАК ОтборНомкиПоБаззам
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ОстаткиВБазах.СрезПоследних КАК ххх_ОстаткиВБазахСрезПоследних
		             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Период, ДокументПродажи ССЫЛКА Документ.ЧекККМ) КАК ПродажиОбороты
		             |			ПО ххх_ОстаткиВБазахСрезПоследних.Номенклатура = ПродажиОбороты.Номенклатура
		             |			ЛЕВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы
		             |			ПО ххх_ОстаткиВБазахСрезПоследних.Номенклатура = Заказы.Номенклатура
		             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		             |			ПО ххх_ОстаткиВБазахСрезПоследних.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		             |		ПО (ххх_ОстаткиВБазахСрезПоследних.Номенклатура = ОтборНомкиПоБаззам.Объект)
		             |ГДЕ
		             |	(ххх_ОстаткиВБазахСрезПоследних.Коробки > 0
		             |			ИЛИ ххх_ОстаткиВБазахСрезПоследних.Упаковки > 0
		             |			ИЛИ ххх_ОстаткиВБазахСрезПоследних.Штуки > 0)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ххх_ОстаткиВБазахСрезПоследних.Номенклатура,
		             |	ххх_ОстаткиВБазахСрезПоследних.Коробки,
		             |	ххх_ОстаткиВБазахСрезПоследних.Упаковки,
		             |	ххх_ОстаткиВБазахСрезПоследних.Штуки,
		             |	ххх_ОстаткиВБазахСрезПоследних.Номенклатура.СтавкаНДС,
		             |	Заказы.Коробки,
		             |	Заказы.Упаковки,
		             |	Заказы.Количество,
		             |	ТоварыНаСкладахОстатки.КоличествоОстаток,
		             |	ПродажиОбороты.КоличествоОборот
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ххх_ОстаткиВБазахСрезПоследних.Номенклатура.Наименование
		             |ИТОГИ ПО
		             |	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	
	Иначе
		Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());			 
		Запрос.Текст="ВЫБРАТЬ
		             |	товары.Номенклатура КАК Номенклатура,
		             |	товары.Характеристика КАК Характеристика,
		             |	товары.Количество КАК Количество,
		             |	товары.Упаковка КАК Упаковка,
		             |	товары.КоличествоУпаковок КАК КоличествоУпаковок,
		             |	товары.Цена КАК Цена,
		             |	товары.Сумма КАК Сумма,
		             |	товары.СтавкаНДС КАК СтавкаНДС,
		             |	товары.СуммаНДС КАК СуммаНДС,
		             |	товары.СУммаВСего КАК СУммаВСего,
		             |	товары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		             |	товары.Коробки КАК Коробки,
		             |	товары.Упаковки КАК Упаковки
		             |ПОМЕСТИТЬ товары
		             |ИЗ
		             |	&товары КАК товары
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
		             |	СУММА(ЗаказПоставщикуТовары.Коробки) КАК Коробки,
		             |	СУММА(ЗаказПоставщикуТовары.Упаковки) КАК Упаковки,
		             |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура
		             |ПОМЕСТИТЬ Заказы
		             |ИЗ
		             |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			МАКСИМУМ(ЗаказПоставщику.ххх_ИдЦентр) КАК ххх_ИдЦентр
		             |		ИЗ
		             |			Документ.ЗаказПоставщику КАК ЗаказПоставщику
		             |		ГДЕ
		             |			ЗаказПоставщику.Проведен = ИСТИНА
		             |			И ЗаказПоставщику.Контрагент = &Контрагент
		             |			И ЗаказПоставщику.Дата <= &ДатаЗаказа
		             |			И ЗаказПоставщику.Ссылка <> &Ссылка) КАК ВложенныйЗапрос
		             |		ПО ЗаказПоставщикуТовары.Ссылка.ххх_ИдЦентр = ВложенныйЗапрос.ххх_ИдЦентр
		             |ГДЕ
		             |	ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
		             |	И ЗаказПоставщикуТовары.Ссылка <> &ссылка
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ЗаказПоставщикуТовары.Номенклатура
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ЕСТЬNULL(ххх_ОстаткиВБазахСрезПоследних.Коробки, 0) КАК КоробкиОстатки,
		             |	ЕСТЬNULL(ххх_ОстаткиВБазахСрезПоследних.Упаковки, 0) КАК УпаковкиОстатки,
		             |	ЕСТЬNULL(ххх_ОстаткиВБазахСрезПоследних.Штуки, 0) КАК ШтукиОстатки,
		             |	товары.Номенклатура КАК Номенклатура,
		             |	товары.Характеристика КАК Характеристика,
		             |	товары.Количество КАК Количество,
		             |	товары.Упаковка КАК Упаковка,
		             |	товары.КоличествоУпаковок КАК КоличествоУпаковок,
		             |	товары.Цена КАК Цена,
		             |	товары.Сумма КАК Сумма,
		             |	товары.СтавкаНДС КАК СтавкаНДС,
		             |	товары.СуммаНДС КАК СуммаНДС,
		             |	товары.СУммаВСего КАК СУммаВСего,
		             |	товары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК ОстатокНаш,
		             |	товары.Коробки КАК Коробки,
		             |	товары.Упаковки КАК Упаковки,
		             |	Заказы.Количество КАК Количество1,
		             |	Заказы.Коробки КАК Коробки1,
		             |	Заказы.Упаковки КАК Упаковки1,
		             |	ПродажиОбороты.КоличествоОборот КАК КоличествоПродано
		             |ИЗ
		             |	товары КАК товары
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ОстаткиВБазах.СрезПоследних(, База = &База) КАК ххх_ОстаткиВБазахСрезПоследних
		             |		ПО товары.Номенклатура = ххх_ОстаткиВБазахСрезПоследних.Номенклатура
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Период, ДокументПродажи ССЫЛКА Документ.ЧекККМ) КАК ПродажиОбороты
		             |		ПО товары.Номенклатура = ПродажиОбороты.Номенклатура
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы
		             |		ПО товары.Номенклатура = Заказы.Номенклатура
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		             |		ПО товары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	товары.СУммаВСего,
		             |	товары.Коробки,
		             |	товары.Цена,
		             |	товары.ХарактеристикиИспользуются,
		             |	товары.Номенклатура,
		             |	товары.Упаковки,
		             |	товары.КоличествоУпаковок,
		             |	товары.СуммаНДС,
		             |	товары.Количество,
		             |	товары.Упаковка,
		             |	товары.Сумма,
		             |	товары.СтавкаНДС,
		             |	товары.Характеристика,
		             |	ЕСТЬNULL(ххх_ОстаткиВБазахСрезПоследних.Коробки, 0),
		             |	ЕСТЬNULL(ххх_ОстаткиВБазахСрезПоследних.Упаковки, 0),
		             |	ЕСТЬNULL(ххх_ОстаткиВБазахСрезПоследних.Штуки, 0),
		             |	Заказы.Количество,
		             |	Заказы.Коробки,
		             |	Заказы.Упаковки,
		             |	ТоварыНаСкладахОстатки.КоличествоОстаток,
		             |	ПродажиОбороты.КоличествоОборот
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	товары.Номенклатура.наименование
		             |ИТОГИ ПО
		             |	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	
	КонецЕсли;

				 
	Флаг=ложь;
	Если Объект.Товары.количество()>0 тогда			 
		Флаг=Истина;
	КонецЕсли;
	Тз=Запрос.Выполнить().Выгрузить();
	Тз.Колонки.Добавить("Заказано");
	й=0;
	Пока й < Тз.Количество() цикл
		Тз[й].заказано=Строка(Тз[й].Коробки1)+" к, "+Строка(Тз[й].Упаковки1)+" у, "+Строка(Тз[й].Количество1)+" ш";
		Если Тз[й].номенклатура.Этогруппа тогда
			Тз.Удалить(Тз[й]);
			й=й-1;
		КонецЕсли;
		й=й+1;
	КонецЦикла;
	Объект.Товары.Загрузить(Тз);
	Если не Флаг Тогда
		мас=Новый массив;
		Для каждого стр из Объект.Товары Цикл
			мас.Добавить(стр.ПолучитьИдентификатор());
		КонецЦикла;       
		
		СтруктураПараметров                   = ЗапасыСервер.СтруктураПараметровЗаполненияПоВидуЦен();
		СтруктураПараметров.Объект            = Объект;
		СтруктураПараметров.ИмяТабличнойЧасти = "Товары";
		СтруктураПараметров.ВидЦен            = Справочники.ххх_Справочник.ЗакупочнаяЦена.Значение;
		СтруктураПараметров.ВыделенныеСтроки  = мас;
		СтруктураПараметров.Дата              = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
		СтруктураПараметров.ЕстьНДС           = истина;
		
		ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров);
			
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбновитьИтоговыеПоказатели();
	КонецЕсли;
КонецПроцедуры
//zorius
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	//zorius
	ПериодАнализаПродаж.ДатаНачала=НачалоДня(ТекущаяДата()-60*60*24*2);
	ПериодАнализаПродаж.ДатаОкончания=КонецДня(ТекущаяДата());

	ЗаполнитьТаблицуПоОстаткамВБазе();

	Если Элементы.Товары.ПодчиненныеЭлементы.ОстаткиВБазе.Видимость Тогда
		Элементы.ТоварыПерезаполнитьОстатки.Видимость=истина;
	Иначе
		Элементы.ТоварыПерезаполнитьОстатки.Видимость=Ложь;
	//	Для каждого стр из Объект.Товары Цикл
	//		Элементы.Товары.ТекущаяСтрока=стр.номерСтроки;
	//		ТоварыНоменклатураПриИзменении("");	
	//	КонецЦикла;
	КонецЕсли;

	//zorius

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборДокументовВзаимозачета.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВзаимозачетовНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗачтенаОплата" Тогда 
		ОбновитьИтоговыеПоказатели(Истина);
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_ЗаявкаНаВыпускКиЗГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ПолучитьДокументПоступления();
	УстановитьДоступностьЭлементовНаСервере();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели(Истина, Истина);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	УстановитьСостояниеОплатыПоступленияНаФорме();
	
	Если ДокументПоступленияСуществует И СуммаКОплате > 0 Тогда
		ДатаПоступленияФакт = СписокРеквизитовДокументаПоступления[1].Значение;
		
		Если НЕ ДатаПоступленияФакт = Объект.ДатаПоступления Тогда
			НеобходимоСкорректироватьДатыПлатежей = НеобходимоСкорректироватьДатыПлатежей(ДатаПоступленияФакт);
			ЗаполнитьРасчетныеДатыПлатежей(ДатаПоступленияФакт);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	УстановитьСостояниеОплатыПоступленияНаФорме();
	
	// ИнтеграцияГИСМ
	СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	ОбновитьИтоговыеПоказатели(Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	Если ДокументПоступленияСуществует Тогда
		ДатаПоступления = СписокРеквизитовДокументаПоступления[1].Значение;
	Иначе
		ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		
		Для каждого СтрокаОплаты Из Объект.ЭтапыОплат Цикл
			
			Если СтрокаОплаты.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа") Тогда
				
				СтрокаОплаты.ДатаПлатежа = ДатаПоступления + СтрокаОплаты.ОтсрочкаПлатежа * 86400;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИтоговыеПоказатели();
	УстановитьСостояниеОплатыПоступленияНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СуммаОплачено) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОбОплате", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимозачетПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВзаимозачетПоДокументу) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОВзаимозачете", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	Иначе
		ДоступноКВзаимозачету = 0;
	КонецЕсли;
	
	//zorius
	ЗаполнитьТаблицуПоОстаткамВБазе();
	Если Элементы.Товары.ПодчиненныеЭлементы.ОстаткиВБазе.Видимость Тогда
		Элементы.ТоварыПерезаполнитьОстатки.Видимость=истина;
	Иначе
		Элементы.ТоварыПерезаполнитьОстатки.Видимость=Ложь;
	//	Для каждого стр из Объект.Товары Цикл
	//		Элементы.Товары.ТекущаяСтрока=стр.номерСтроки;
	//		ТоварыНоменклатураПриИзменении("");	
	//	КонецЦикла;
	КонецЕсли;
	//zorius
КонецПроцедуры

&НаКлиенте
Процедура БессрочныйПриИзменении(Элемент)
	
	Если Объект.Бессрочный Тогда
		Элементы.ДнейПросрочкиПоставки.Доступность = Ложь;
		Объект.ДнейПросрочкиПоставки = 0;
	Иначе
		Элементы.ДнейПросрочкиПоставки.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект);
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ДатаПоступления),
			Объект.ДатаПоступления,
			Объект.Дата);
		СтруктураПроверкиАссортимента.ТекстСообщения =
			НСтр("ru = 'Номенклатура ""%1"" не включена в ассортимент магазина или запрещена к закупке. Заказывать ее не рекомендуется.'");
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(
		ДанныеВыбора,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	
	ТоварыСуммаПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиЭтапыОплат

&НаКлиенте
Процедура ЭтапыОплатПриИзменении(Элемент)
	ОбновитьИтоговыеПоказатели(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		
		ТекстОшибки = НСтр("ru = 'Перед формированием этапов оплат
		|необходимо указать дату поступления'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		,
		"Объект.ДатаПоступления",
		,
		Отказ);
		
	Иначе
		
		ЗапрашиватьДатуПлатежа = Истина;
		Если Копирование
			И Элемент.ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
			
			ЗапрашиватьДатуПлатежа = Ложь;
		КонецЕсли;
		
		Если ДокументПоступленияСуществует Тогда
			СуммаЗаказа = СписокРеквизитовДокументаПоступления[2].Значение;
		Иначе
			СуммаЗаказа = СуммаВсего;
		КонецЕсли;
		
		ЗакупкиКлиент.ДобавитьЭтапОплаты(
			Объект,
			Элементы,
			СуммаЗаказа,
			ДокументПоступленияСуществует,
			Отказ,
			Копирование,
			ЗапрашиватьДатуПлатежа);
		
		Отказ = Истина;

	КонецЕсли;
	
	ОбновитьИтоговыеПоказатели(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатДатаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ДокументПоступленияСуществует Тогда
		ДатаПоступления = СписокРеквизитовДокументаПоступления[1].Значение;
	Иначе
		ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаПлатежа) И ЗначениеЗаполнено(ДатаПоступления) Тогда
		
		ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
		ТекущаяСтрока.ОтсрочкаПлатежа = 0;
		
		Если НачалоДня(ТекущаяСтрока.ДатаПлатежа) < НачалоДня(ДатаПоступления) Тогда
			
			ТекущаяСтрока.ОтсрочкаПлатежа = 0;
			
		Иначе
			
			ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа");
			
			ТекущаяСтрока.ОтсрочкаПлатежа = (ТекущаяСтрока.ДатаПлатежа - ДатаПоступления) / 86400;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатОтсрочкаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ДокументПоступленияСуществует Тогда
		ДатаПоступления = СписокРеквизитовДокументаПоступления[1].Значение;
	Иначе
		ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидПлатежа) Тогда
		ТекущаяСтрока.ДатаПлатежа = ?(ЗначениеЗаполнено(ДатаПоступления),
			ДатаПоступления + ТекущаяСтрока.ОтсрочкаПлатежа * 86400,
			Дата('00010101'));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатВидПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ДокументПоступленияСуществует Тогда
		ДатаПоступления = СписокРеквизитовДокументаПоступления[1].Значение;
	Иначе
		ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата") Тогда
		
		ТекущаяСтрока.ОтсрочкаПлатежа = 0;
		
	ИначеЕсли ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа") Тогда
		
		ТекущаяСтрока.ДатаПлатежа = ?(ЗначениеЗаполнено(ДатаПоступления),
			ДатаПоступления + ТекущаяСтрока.ОтсрочкаПлатежа * 86400,
			Дата('00010101'));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ДокументПоступленияСуществует Тогда
		СуммаИтог = СписокРеквизитовДокументаПоступления[2].Значение;
	Иначе
		СуммаИтог = СуммаВсего;
	КонецЕсли;

	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаИтог, ТекущаяСтрока, ТекущаяСтрока.ПроцентОплаты, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ДокументПоступленияСуществует Тогда
		СуммаИтог = СписокРеквизитовДокументаПоступления[2].Значение;
	Иначе
		СуммаИтог = СуммаВсего;
	КонецЕсли;
	
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаИтог, ТекущаяСтрока, ТекущаяСтрока.Сумма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатФормаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		ТекущиеДанные.ДатаПлатежа = Дата("00010101");
		ТекущиеДанные.ОтсрочкаПлатежа = 0;
		ТекущиеДанные.ВидПлатежа = 0;
	Иначе
		ТекущиеДанные.ДокументВзаимозачета = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоПрошлымЗакупкам(ЦеныРассчитаны);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ поставщику'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораВЗакупки", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныЗакупки");
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВзаимозачет(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	СуммаКПодбору = 0;
	
	Если ДокументПоступленияСуществует Тогда
		СуммаЗаказа = СписокРеквизитовДокументаПоступления[2].Значение;
	Иначе
		СуммаЗаказа = СуммаВсего;
	КонецЕсли;
	
	ИтогПоЭтапамОплат = Объект.ЭтапыОплат.Итог("Сумма");
	СуммаКПодбору = СуммаЗаказа - ИтогПоЭтапамОплат;
	
	АдресХранилищаЭтапаОплат = ПоместитьЭтапыОплатВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",       Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент",    Объект.Контрагент);
	ПараметрыФормы.Вставить("СуммаКПодбору", СуммаКПодбору);
	ПараметрыФормы.Вставить("ДокументРасчета", Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресХранилищаЭтапаОплат", АдресХранилищаЭтапаОплат);
	
	ОткрытьФорму("Обработка.ПодборДокументовВзаимозачета.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	УстановитьДоступностьЭлементовПоСтатусуСервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровНаОснованииТТН(Команда)
		
	ПараметрыФормы = Новый Структура;
	ЗаказПоставщику = Объект.Ссылка;
	ТекстСообщения = "";
	Если НЕ ВозможностьВводаПоступленияНаОснованииТТН(ЗаказПоставщику, ПараметрыФормы, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Документ изменен необходимо провести документ'");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаказПоставщику", ЗаказПоставщику);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораТТН", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.ТТНВходящаяЕГАИС.Форма.ФормаВыбораРТ", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработчикОповещения, Режим);
		
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СкорректироватьДаты(Команда)
	
	СкорректироватьДатыПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьСвертываемыеИтоги()
	
	ФорматСуммовыхПоказателей = ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей();
	
	Если СуммаКОплате > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'К оплате:'") + " " + Формат(СуммаКОплате, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаОплачено > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Оплачено:'") + " " + Формат(СуммаОплачено, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаВзаимозачет > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Взаимозачет:'") + " " + Формат(СуммаВзаимозачет, ФорматСуммовыхПоказателей);
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'К оплате:'") + " " + Формат(0, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если ДоступноКВзаимозачету > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Долг поставщика:'") + " " + Формат(ДоступноКВзаимозачету, ФорматСуммовыхПоказателей);
	ИначеЕсли ДоступноКВзаимозачетуПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Долг поставщика (по документу):'") + " " + Формат(ДоступноКВзаимозачетуПоДокументу, ФорматСуммовыхПоказателей);
	ИначеЕсли ВзаимозачетПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Взаимозачет (по документу):'") + " " + Формат(ВзаимозачетПоДокументу, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если ДоступноКВзаимозачету > 0 ИЛИ ДоступноКВзаимозачетуПоДокументу > 0 ИЛИ ВзаимозачетПоДокументу > 0 Тогда
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = Новый Цвет;
	КонецЕсли;
	
	Элементы.СвертываемыеИтоги.ЗаголовокСвернутогоОтображения = ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтотОбъект.ПоложениеКоманднойПанели = ?(ВидимостьЭлементов,
		ПоложениеКоманднойПанелиФормы.Авто,
		ПоложениеКоманднойПанелиФормы.Нет);
	
	Элементы.ГруппаОснование.Видимость            = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                      = ВидимостьЭлементов;
	Элементы.СтраницаЭтапыОплат.Видимость         = ВидимостьЭлементов;
	Элементы.СтраницаДополнительно.Видимость      = ВидимостьЭлементов;
	Элементы.СвертываемыеИтоги.Видимость          = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость        = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов,
		БиблиотекаКартинок.РазвернутьТабличнуюЧасть,
		БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	БезНДС = НСтр("ru = 'Без НДС'");
	
	Если ДокументПоступленияСуществует Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Поступление товаров №%Номер% от %ДатаПоступления%'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,
			"%Номер%",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СписокРеквизитовДокументаПоступления[0].Значение.Номер,
			Ложь,
			Истина));
		
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,
			"%ДатаПоступления%",
			Формат(СписокРеквизитовДокументаПоступления[1].Значение, "ДЛФ=D"));
		
		Элементы.ДанныеДокументаПоступления.Заголовок = ТекстЗаголовка;
		
	ИначеЕсли Объект.Закрыт И НЕ ДокументПоступленияСуществует Тогда
		
		Элементы.ДанныеДокументаПоступления.Заголовок = НСтр("ru = 'Отменен'");
		
	Иначе
		
		Элементы.ДанныеДокументаПоступления.Заголовок = "";
		
	КонецЕсли; 
	
	Элементы.ЭтапыОплатСкорректироватьДаты.Доступность = НеобходимоСкорректироватьДатыПлатежей;
	Элементы.ДнейПросрочкиПоставки.Доступность = НЕ Объект.Бессрочный;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер(РазрешитьРедактирование = Ложь)
	
	УправлениеЭлементамиФормыНаСервере();
	
	ТолькоПросмотрЭлементов = Объект.Закрыт;
	Если РазрешитьРедактирование Тогда
		ТолькоПросмотрЭлементов = Ложь;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
		
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("Магазин");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("УчитыватьНДС");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("ДатаПоступления");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Закрыт");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ДнейПросрочкиПоставки");
	МассивЭлементов.Добавить("Бессрочный");
	
	// Элементы управления, связанные с оплатой.
	МассивЭлементов.Добавить("ЭтапыОплат");
	
	// Элементы управления, связанные с товарами.
	МассивЭлементов.Добавить("Товары");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"ТолькоПросмотр",
		ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ЭтапыОплатПодобратьВзаимозачет");
	
	Если НеобходимоСкорректироватьДатыПлатежей Тогда
		МассивЭлементов.Добавить("ЭтапыОплатСкорректироватьДаты");
	КонецЕсли;
	
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыПолучитьВес");
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоПрошлымЗакупкам");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		Не ТолькоПросмотрЭлементов);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Изменить",
		"Доступность",
		ТолькоПросмотрЭлементов);
	
	Если Не ТолькоПросмотрЭлементов Тогда
		УстановитьДоступностьЦенаВключаетНДС();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовНаСервере(ТолькоПросмотрЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДокументПоступления()
	
	СписокРеквизитовДокументаПоступления.Очистить();
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ДокументПоступленияСуществует = Ложь;
		СписокРеквизитовДокументаПоступления.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка());
		СписокРеквизитовДокументаПоступления.Добавить(Дата('00010101'));
		СписокРеквизитовДокументаПоступления.Добавить(0);
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваров.Ссылка,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ПоступлениеТоваров.Дата, ДЕНЬ)) КАК ДатаПоступления,
		|	ЕСТЬNULL(СУММА(ПоступлениеТоваровТовары.Сумма + ВЫБОР
		|				КОГДА ПоступлениеТоваров.ЦенаВключаетНДС
		|					ТОГДА 0
		|				ИНАЧЕ ПоступлениеТоваровТовары.СуммаНДС
		|			КОНЕЦ), 0) КАК СуммаПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ПО ПоступлениеТоваров.Ссылка = ПоступлениеТоваровТовары.Ссылка
		|ГДЕ
		|	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
		|	И ПоступлениеТоваров.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваров.Ссылка");
		Запрос.УстановитьПараметр("ЗаказПоставщику", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			ДокументПоступленияСуществует = Ложь;
			СписокРеквизитовДокументаПоступления.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка());
			СписокРеквизитовДокументаПоступления.Добавить(Дата('00010101'));
			СписокРеквизитовДокументаПоступления.Добавить(0);
			
		Иначе
			
			ВыборкаДокументов = РезультатЗапроса.Выбрать();
			ВыборкаДокументов.Следующий();
			ДокументПоступленияСуществует = Истина;
			СписокРеквизитовДокументаПоступления.Добавить(ВыборкаДокументов.Ссылка);
			СписокРеквизитовДокументаПоступления.Добавить(ВыборкаДокументов.ДатаПоступления);
			СписокРеквизитовДокументаПоступления.Добавить(ВыборкаДокументов.СуммаПоступления);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по прошлым закупкам в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкамСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(
		Объект,
		"Товары",
		Элементы.Товары.ВыделенныеСтроки,
		Истина);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Магазин"" не заполнено'"),
			Объект, "Объект.Магазин", , Отказ);
		
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Поставщик"" не заполнено'"),
			Объект, "Объект.Контрагент", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,
			СтрокаТовара,
			"Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();

	
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		                                              
		Объект.Организация = Объект.Склад.Организация;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,
		Объект.Склад, 
		Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаСуммыНДС", "Видимость", Истина);
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаСуммыНДС", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеПоказатели(ЗапросДанных = Ложь, ПересчитатьВзаимозачет = Ложь)
	
	СуммаПоступило = СписокРеквизитовДокументаПоступления[2].Значение;
	
	СуммаКОплатеИтого = ?(ЗначениеЗаполнено(СуммаПоступило), СуммаПоступило, СуммаВсего);
	
	Если ЗапросДанных Тогда
		
		ИтоговыеПоказатели = ЗакупкиСервер.ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(Объект);
		
		СуммаОплачено = 					ИтоговыеПоказатели.СуммаОплачено;
		ДоступноКВзаимозачету = 			ИтоговыеПоказатели.ДоступноКВзаимозачету;
		ВзаимозачетПоДокументу = 			ИтоговыеПоказатели.ВзаимозачетПоДокументу;
		ДоступноКВзаимозачетуПоДокументу = 	ИтоговыеПоказатели.ДоступноКВзаимозачетуПоДокументу;
		
	КонецЕсли;
	
	Если ПересчитатьВзаимозачет Тогда
		НайденныеСтроки = Объект.ЭтапыОплат.НайтиСтроки(Новый Структура("ФормаОплаты", Перечисления.ФормыОплаты.Взаимозачет));
		СуммаВзаимозачет = 0;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Строка Из НайденныеСтроки Цикл
				СуммаВзаимозачет = СуммаВзаимозачет + Строка.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ЗакупкиСервер.РассчитатьСтатусОплатыПоЭтапамОплаты(Объект);
	КонецЕсли;
	
	Если Объект.Закрыт И НЕ ДокументПоступленияСуществует Тогда
		СуммаКОплате = 0;
	Иначе
		СуммаКОплате = СуммаКОплатеИтого - СуммаОплачено - СуммаВзаимозачет;
	КонецЕсли;
	
	СформироватьСвертываемыеИтоги();
	
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере(ТолькоПросмотрЭлементов = Ложь)
	
	Если НЕ ТолькоПросмотрЭлементов Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Склад",
			"ТолькоПросмотр",
			НЕ ЗначениеЗаполнено(Объект.Магазин));
	КонецЕсли;
	
	Элементы.ДнейПросрочкиПоставки.Доступность = НЕ Объект.Бессрочный;
	Элементы.Изменить.Видимость = НЕ ТолькоПросмотр;
	
КонецПроцедуры

// Процедура заполняет этапы оплат из подбора взаимозачета.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборВзаимозачетовНаСервере(ВыбранноеЗначение)
	
	Если ДокументПоступленияСуществует Тогда
		СуммаЗаказа = СписокРеквизитовДокументаПоступления[2].Значение;
	Иначе
		СуммаЗаказа    = СуммаВсего;
	КонецЕсли;
	
	ЗакупкиСервер.ОбработкаВыбораПодборВзаимозачетовНаСервере(Объект, ВыбранноеЗначение, СуммаЗаказа);
	ОбновитьИтоговыеПоказатели(, Истина);
КонецПроцедуры

&НаСервере
Функция ПоместитьЭтапыОплатВХранилище()
	
	ТаблицаОплат = Объект.ЭтапыОплат.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаОплат, УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

// МеханизмВнешнегоОборудования

&НаСервере
Процедура СкорректироватьДатыПлатежей()
	
	ДатаПоступленияФакт = СписокРеквизитовДокументаПоступления[1].Значение;
	СкорректироватьДатыПлатежейЭтаповОплат(ДатаПоступленияФакт);
	Модифицированность = Истина;
	НеобходимоСкорректироватьДатыПлатежей = Ложь;
КонецПроцедуры

&НаСервере
Функция НеобходимоСкорректироватьДатыПлатежей(ДатаПоступления)
	
	Корректировать = Ложь;
	ЕстьПравоРедактировать = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПоставщику);
	
	ЭтапыОплат = Объект.ЭтапыОплат;
	НайденныеСтроки = ЭтапыОплат.НайтиСтроки(Новый Структура("ВидПлатежа", Перечисления.ВидПлатежа.ОтсрочкаПлатежа));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		РасчетнаяДата = ДатаПоступления + (Строка.ОтсрочкаПлатежа * 86400);
		
		Если НЕ РасчетнаяДата = Строка.ДатаПлатежа Тогда
			Корректировать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Корректировать;
	
КонецФункции

&НаСервере
Процедура СкорректироватьДатыПлатежейЭтаповОплат(ДатаПоступления) 
	
	ЭтапыОплат = Объект.ЭтапыОплат;
	НайденныеСтроки = ЭтапыОплат.НайтиСтроки(Новый Структура("ВидПлатежа", Перечисления.ВидПлатежа.ОтсрочкаПлатежа));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		РасчетнаяДата = ДатаПоступления + (Строка.ОтсрочкаПлатежа * 86400);
		Строка.ДатаПлатежа = РасчетнаяДата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетныеДатыПлатежей(ДатаПоступления)
	
	ЭтапыОплат = Объект.ЭтапыОплат;
	НайденныеСтроки = ЭтапыОплат.НайтиСтроки(Новый Структура("ВидПлатежа", Перечисления.ВидПлатежа.ОтсрочкаПлатежа));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.РасчетнаяДатаПлатежа = ДатаПоступления + (Строка.ОтсрочкаПлатежа * 86400);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеОплатыПоступленияНаФорме()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеОплатыПоступления.ПросроченаПоставка,
	|	СостояниеОплатыПоступления.ПросроченаОплата
	|ИЗ
	|	РегистрСведений.СостояниеОплатыПоступления КАК СостояниеОплатыПоступления
	|ГДЕ
	|	СостояниеОплатыПоступления.ПросроченныйДокумент = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КартинкаСостоянияПросроченаПоставка = 1;
		КартинкаСостоянияПросроченаОплата   = 1;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		КартинкаСостоянияПросроченаПоставка = Выборка.ПросроченаПоставка;
		КартинкаСостоянияПросроченаОплата = Выборка.ПросроченаОплата;
	КонецЕсли;
	
	Если Объект.Закрыт Тогда 
		КартинкаСостоянияПросроченаПоставка = 1;
	КонецЕсли;
	
	Если Объект.Закрыт И НЕ ДокументПоступленияСуществует Тогда
		КартинкаСостоянияПросроченаОплата   = 1;
	КонецЕсли;
	
	Элементы.КартинкаСостоянияПросроченаОплата.Видимость = КартинкаСостоянияПросроченаОплата = 0;
	Элементы.КартинкаСостоянияПросроченаПоставка.Видимость = КартинкаСостоянияПросроченаПоставка = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ТоварыКоличествоУпаковокПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	Иначе
		ДоступноКВзаимозачету = 0;
	КонецЕсли;

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Склад",
		"ТолькоПросмотр",
		НЕ ЗначениеЗаполнено(Объект.Магазин));

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Функция ВозможностьВводаПоступленияНаОснованииТТН(ЗаказПоставщику, ПараметрыФормы, ТекстСообщения)
	
	Возврат ИнтеграцияЕГАИСРТ.ВозможностьВводаПоступленияНаОснованииТТН(ЗаказПоставщику, ПараметрыФормы, ТекстСообщения);
	
КонецФункции // ВозможностьВвоодаТТН()

&НаСервере
Функция СоздатьНайтиПоступлениеНаСервере(ТТН, ТолькоПоиск, ЗаказПоставщику)
	
	ПоступлениеТоваров = ИнтеграцияЕГАИСРТ.СоздатьНайтиПоступление(ТТН, ТолькоПоиск, ЗаказПоставщику);
	
	Возврат ПоступлениеТоваров;
	
КонецФункции

#Область ГИСМ
	
&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	СформироватьТекстЗаявкаНаВыпускКиЗГИСМ();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстЗаявкаНаВыпускКиЗГИСМ()
	
	ИнтеграцияГИСМ_РТ.СформироватьТекстЗаявкаНаВыпускКиЗ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗаявкаНаВыпускКиЗОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентРТ.ТекстЗаявкаНаВыпускКиЗОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
КонецПроцедуры
//Zorius
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	й=0;
	Пока й<Объект.Товары.Количество() Цикл
		если Объект.Товары[й].количество=0 и Объект.Товары[й].Коробки=0 и Объект.Товары[й].Упаковки=0 Тогда
			Объект.Товары.Удалить(й);
			й=й-1;
		КонецЕсли;
		й=й+1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	//Элементы.ИмяВБазе.Заголовок=ВозвратИмениВБазе(Элементы.Товары.ТекущиеДанные.номенклатура);
КонецПроцедуры

&наСервереБезКонтекста
Функция ВозвратИмениВБазе(номенклатура)
	//возврат номенклатура.ххх_НаименованиеВБазе;
КонецФункции

&НаКлиенте
Процедура ПериодАнализаПродажПриИзменении(Элемент)
	ЗаполнитьТаблицуПоОстаткамВБазе();
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьЗаказПоставщикуКнопка(Команда)
	ПараметрыВыполненияКоманды=Новый структура;
	ПараметрыВыполненияКоманды.Вставить("Источник",ЭтаФорма);
	ОбработкаКоманды("", ПараметрыВыполненияКоманды);
КонецПроцедуры

#КонецОбласти






//Zorius
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	Если ПараметрыВыполненияКоманды.Источник.ИмяФормы="Документ.ЗаказПоставщику.Форма.ххх_ФормаДокумента" тогда
		МассивСтрок=Новый массив;
		МассивСтрок.Добавить(ПараметрыВыполненияКоманды.Источник.Объект.Ссылка);
		ПроверкаВыбранныхДокументов(МассивСтрок);
		ВыгрузитьЗаказПоставщику(МассивСтрок);	
	ИначеЕсли ПараметрыВыполненияКоманды.Источник.ИмяФормы="Документ.ЗаказПоставщику.Форма.ххх_ФормаСписка" тогда
		Если ПараметрыВыполненияКоманды.Источник.Элементы.Список.ВыделенныеСтроки.количество()<>0 Тогда
			йцу=ПараметрыВыполненияКоманды.Источник.Элементы.Список.ВыделенныеСтроки;
			ПроверкаВыбранныхДокументов(йцу);
			МассивСтрок=Новый массив;
			Для каждого ссыль из ПараметрыВыполненияКоманды.Источник.Элементы.Список.ВыделенныеСтроки Цикл
				МассивСтрок.Добавить(ссыль);
			КонецЦикла;
			ВыгрузитьЗаказПоставщику(МассивСтрок);
		Иначе
			Сообщить("Для выгрузки заявок необходимо выделить строку/строки.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ПроверкаВыбранныхДокументов(МассивСтрок)
	й=0;
	Пока й<МассивСтрок.количество() Цикл
		Если Формат(МассивСтрок[й].Дата,"ДФ=dd.MM.yyyy")<>Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") Тогда
			вызватьИсключение("Нельзя выгружать заказы за предыдущие дни");
		КонецЕсли;
		
		Если не МассивСтрок[й].проведен тогда
			вызватьИсключение("Документ: "+Строка(МассивСтрок[й])+". Нельзя выгружать не проведённый документ!");	
		КонецЕсли;
		//Заказ=Документы.ЗаказПоставщику.СоздатьДокумент();
		Путь=МассивСтрок[й].контрагент.ДополнительныеРеквизиты.Найти(Справочники.ххх_Справочник.ПутьВыгрузкиЗаявок.Значение,"Свойство");
		Если не значениеЗаполнено(Путь)или не значениеЗаполнено(Путь.Значение) тогда
			вызватьИсключение("Не заполнен путь выгрузки файла для контрагента: "
				+Строка(МассивСтрок[й].Контрагент));
		КонецЕсли;
		ЗначениеДопСведенияИдНоменклатурыВБазеПоставщика=
			МассивСтрок[й].контрагент.ДополнительныеРеквизиты.Найти(
			Справочники.ххх_Справочник.ПутьВыгрузкиЗаявок.Значение,"Свойство");
		Если не значениеЗаполнено(ЗначениеДопСведенияИдНоменклатурыВБазеПоставщика)
			или не значениеЗаполнено(ЗначениеДопСведенияИдНоменклатурыВБазеПоставщика.Значение) тогда
				вызватьИсключение("Не заполнено значение допполнительного сведения: "
				+Справочники.ххх_Справочник.СвязкаКонтрагентаСИдТовараВЕгоБазе.Значение.Наименование
				+" Контрагент:"+Строка(МассивСтрок[й].Контрагент));
		КонецЕсли;
		й=й+1;
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузитьЗаказПоставщику(Заказы)	
	
	Для каждого Заказ из заказы Цикл
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ссыль",Заказ.ссылка);
		Запрос.УстановитьПараметр("ИдТов1",Справочники.ххх_Справочник.id_b1.Значение);
		Запрос.УстановитьПараметр("ИдТов2",Справочники.ххх_Справочник.id_b2.Значение);
		Запрос.УстановитьПараметр("ИдТов3",Справочники.ххх_Справочник.id_b3.Значение);
		Запрос.УстановитьПараметр("ДопСвойствоПутьДляВыгрузкиЗаявок",Справочники.ххх_Справочник.ПутьВыгрузкиЗаявок.Значение);
		Запрос.УстановитьПараметр("УказательНаУказательИдТовараПоставщика",Справочники.ххх_Справочник.СвязкаКонтрагентаСИдТовараВЕгоБазе.Значение);
		Запрос.Текст = 
		    "ВЫБРАТЬ
		    |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		    |	ЗаказПоставщикуТовары.Количество КАК Количество,
		    |	ЗаказПоставщикуТовары.Ссылка.Контрагент КАК Контрагент,
		    |	ЗаказПоставщикуТовары.Коробки КАК Коробки,
		    |	ЗаказПоставщикуТовары.Упаковки КАК Упаковки
		    |ПОМЕСТИТЬ номка
		    |ИЗ
		    |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		    |ГДЕ
		    |	ЗаказПоставщикуТовары.Ссылка = &ссыль
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	номка.Номенклатура КАК Номенклатура,
		    |	номка.Количество КАК Количество,
		    |	КонтрагентыДополнительныеРеквизиты.Значение КАК ЗначениеУказателяНаУказатель,
		    |	номка.Контрагент КАК Контрагент,
		    |	NULL КАК УказательНаУказатель,
		    |	номка.Коробки КАК Коробки,
		    |	номка.Упаковки КАК Упаковки
		    |ПОМЕСТИТЬ УазатаелиНаИдТоваровПоставщиков
		    |ИЗ
		    |	номка КАК номка
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		    |		ПО номка.Контрагент = КонтрагентыДополнительныеРеквизиты.Ссылка
		    |			И (КонтрагентыДополнительныеРеквизиты.Свойство = &УказательНаУказательИдТовараПоставщика)
		    |			И (КонтрагентыДополнительныеРеквизиты.Значение = &ИдТов1)
		    |
		    |ОБЪЕДИНИТЬ ВСЕ
		    |
		    |ВЫБРАТЬ
		    |	номка.Номенклатура,
		    |	номка.Количество,
		    |	КонтрагентыДополнительныеРеквизиты.Значение,
		    |	номка.Контрагент,
		    |	КонтрагентыДополнительныеРеквизиты.Свойство,
		    |	номка.Коробки,
		    |	номка.Упаковки
		    |ИЗ
		    |	номка КАК номка
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		    |		ПО номка.Контрагент = КонтрагентыДополнительныеРеквизиты.Ссылка
		    |			И (КонтрагентыДополнительныеРеквизиты.Свойство = &УказательНаУказательИдТовараПоставщика)
		    |			И (КонтрагентыДополнительныеРеквизиты.Значение = &ИдТов2)
		    |
		    |ОБЪЕДИНИТЬ ВСЕ
		    |
		    |ВЫБРАТЬ
		    |	номка.Номенклатура,
		    |	номка.Количество,
		    |	КонтрагентыДополнительныеРеквизиты.Значение,
		    |	номка.Контрагент,
		    |	КонтрагентыДополнительныеРеквизиты.Свойство,
		    |	номка.Коробки,
		    |	номка.Упаковки
		    |ИЗ
		    |	номка КАК номка
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		    |		ПО номка.Контрагент = КонтрагентыДополнительныеРеквизиты.Ссылка
		    |			И (КонтрагентыДополнительныеРеквизиты.Свойство = &УказательНаУказательИдТовараПоставщика)
		    |			И (КонтрагентыДополнительныеРеквизиты.Значение = &ИдТов3)
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	УказателиНаИдТоваровПоставщиков.Номенклатура КАК Номенклатура,
		    |	УказателиНаИдТоваровПоставщиков.Количество КАК Количество,
		    |	УказателиНаИдТоваровПоставщиков.ЗначениеУказателяНаУказатель КАК ЗначениеУказателяНаУказатель,
		    |	УказателиНаИдТоваровПоставщиков.Контрагент КАК Контрагент,
		    |	ДополнительныеСведения.Значение КАК КодТовараПоставщика,
		    |	УказателиНаИдТоваровПоставщиков.Коробки КАК Коробки,
		    |	УказателиНаИдТоваровПоставщиков.Упаковки КАК Упаковки
		    |ПОМЕСТИТЬ КодыТоваровПоставщиков
		    |ИЗ
		    |	УазатаелиНаИдТоваровПоставщиков КАК УказателиНаИдТоваровПоставщиков
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		    |		ПО УказателиНаИдТоваровПоставщиков.ЗначениеУказателяНаУказатель = ДополнительныеСведения.Свойство
		    |			И УказателиНаИдТоваровПоставщиков.Номенклатура = ДополнительныеСведения.Объект
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	КодыТоваровПоставщиков.Количество КАК Количество,
		    |	КодыТоваровПоставщиков.Номенклатура.Наименование КАК НоменклатураНаименование,
		    |	КонтрагентыДополнительныеРеквизиты.Значение КАК ПутьДляВыгрузки,
		    |	КодыТоваровПоставщиков.Номенклатура.ххх_ИдЦентр КАК КодВЦентре,
		    |	КодыТоваровПоставщиков.КодТовараПоставщика КАК КодТовараПоставщика,
		    |	КодыТоваровПоставщиков.ЗначениеУказателяНаУказатель КАК ЗначениеУказателяНаУказатель,
		    |	КодыТоваровПоставщиков.Коробки КАК Коробки,
		    |	КодыТоваровПоставщиков.Упаковки КАК Упаковки
		    |ИЗ
		    |	КодыТоваровПоставщиков КАК КодыТоваровПоставщиков
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		    |		ПО КодыТоваровПоставщиков.Контрагент = КонтрагентыДополнительныеРеквизиты.Ссылка
		    |			И (КонтрагентыДополнительныеРеквизиты.Свойство = &ДопСвойствоПутьДляВыгрузкиЗаявок)
		    |ИТОГИ ПО
		    |	ПутьДляВыгрузки,
		    |	ЗначениеУказателяНаУказатель";
		//Результат = Запрос.Выполнить();
		//ТаблицаЗначений = Результат.Выгрузить();
		УказателиНаУказатели=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока УказателиНаУказатели.Следующий() Цикл
			ПутиДляВыгрузки=УказателиНаУказатели.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ПутиДляВыгрузки.Следующий() Цикл	
				разделитель = "|";
				й=0;
				мас=Новый массив;
				мас.Добавить(10);
				мас.Добавить(10);
				мас.Добавить(10);
				мас.Добавить(10);                  
				мас.Добавить(10);
				мас.Добавить(70);
				колонкиТЗ=Новый Массив;
				колонкиТЗ.Добавить("id");
				Если ПутиДляВыгрузки.ЗначениеУказателяНаУказатель=Справочники.ххх_Справочник.id_b1.Значение тогда
					колонкиТЗ.Добавить("id_b1");
				ИначеЕсли ПутиДляВыгрузки.ЗначениеУказателяНаУказатель=Справочники.ххх_Справочник.id_b2.Значение тогда
					колонкиТЗ.Добавить("id_b2");
				ИначеЕсли ПутиДляВыгрузки.ЗначениеУказателяНаУказатель=Справочники.ххх_Справочник.id_b3.Значение тогда
					колонкиТЗ.Добавить("id_b3");
				КонецЕсли;
				колонкиТЗ.Добавить("kor");
				колонкиТЗ.Добавить("up");
				колонкиТЗ.Добавить("sh");
				колонкиТЗ.Добавить("naim");
				Для каждого колонка Из колонкиТЗ Цикл
				        стрКолонки =""+ стрКолонки + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(колонка,мас[й]," ","Справа") + разделитель;
					й=й+1;
				КонецЦикла; 
				//
				//Запрос=Новый запрос;
				//Запрос.Текст="ВЫБРАТЬ
				//             |	КассыККМ.ПутьКПапкеВыгрузки
				//             |ИЗ
				//             |	Справочник.КассыККМ КАК КассыККМ
				//             |ГДЕ
				//             |	КассыККМ.ПометкаУдаления = ЛОЖЬ";
				//Кассы=Запрос.Выполнить().Выбрать();
				//В иделае писать 1 файл в ТЕМП и копипастить его в внужные папки, но возможно ебалайка с правами доступа(ХЗ, как то такая хуерга помнится)
				//Пока Кассы.Следующий() Цикл
				
				Номка=ПутиДляВыгрузки.Выбрать();
				НаименованиеДляФайлов=Справочники.ххх_Справочник.Магазин.Значение.ххх_НаименованиеДляФайлов;
				Если Номка.Количество()>0 тогда
				    кодировка = КодировкаТекста.ANSI;
				    ТекстовыйФайлЗапись = Новый ЗаписьТекста(ПутиДляВыгрузки.ПутьДляВыгрузки+НаименованиеДляФайлов+".txt",Кодировка);             
					
					текст="";
					//текст=стрКолонки+Символы.ВК;
					ТекстовыйФайлЗапись.ЗаписатьСтроку(стрКолонки);
					ТекстовыйФайлЗапись.ЗаписатьСтроку("****************************************");
				    Пока Номка.Следующий() Цикл                    
				        текст = //текст
						 СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номка.КодВЦентре,10," ","Справа")+разделитель
						+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номка.КодТовараПоставщика,10," ","Справа")+разделитель
						+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номка.коробки,10," ","Справа")+разделитель
						+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номка.упаковки,10," ","Справа")+разделитель
						+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номка.Количество,10," ","Справа")+разделитель
						+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номка.НоменклатураНаименование,70," ","Справа")+разделитель;
						ТекстовыйФайлЗапись.ЗаписатьСтроку(текст);//+Символы.ВК;
					КонецЦикла;	
					//ТекстовыйФайлЗапись.ЗаписатьСтроку(текст);
					ТекстовыйФайлЗапись.Закрыть();
					Если Заказ.Контрагент.ххх_ЗадваиватьФайлВыгрузки Тогда
						КопироватьФайл(ПутиДляВыгрузки.ПутьДляВыгрузки+НаименованиеДляФайлов+".txt",ПутиДляВыгрузки.ПутьДляВыгрузки+НаименованиеДляФайлов+"a.txt");
					КонецЕсли;

				КонецЕсли;
				//КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры







//Zorius
#КонецОбласти



















