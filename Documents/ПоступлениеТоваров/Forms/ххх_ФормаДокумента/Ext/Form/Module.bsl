&НаКлиенте
Перем КэшированныеЗначения;

// Используется для передачи текущей строки в обработчик ожидания.
&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Структура, ДополнительныеПараметры) Экспорт	
	Если ЗначениеЗаполнено(Структура) Тогда
		штрихкод=Структура.штрихкод;
		Если Структура.ПоискПоВесовомуТовару=Ложь тогда
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			ТекущаяСтрокаЕГАИС = Неопределено;
		Иначе			
			Элементы.Товары.ТекущаяСтрока=ПоискПоВесовомуШтрихКоду(штрихкод);
			ТоварыНоменклатураПриИзменении("");
		КонецЕсли;
		//Zorius
		//УдалитьТоварВнеАсортиментаИзТаблицы();
		ПоискПоШтрихкоду("");
		//Zorius
	КонецЕсли;
КонецПроцедуры

Функция ПоискПоВесовомуШтрихКоду(штрихкод)
	номка=ххх_Сервер.ПолучитьВесовойШтрихкод(штрихкод);
	Если значениеЗаполнено(номка) Тогда
		строки=Объект.товары.НайтиСтроки(Новый структура("Номенклатура",номка));
		
		стр=?(ЗначениеЗаполнено(строки),строки[0],неопределено);
		Если стр<>Неопределено Тогда
			стр.количество=стр.количество+1;
		Иначе
			стр=Объект.товары.добавить();
			стр.Номенклатура=номка;
			стр.количество=1;
		КонецЕсли;
		возврат стр.ПолучитьИдентификатор();
	Иначе
		Сообщить("Данные по коду не найдены: "+штрихкод);
		возврат Неопределено;
	КонецЕсли;
КонецФункции


процедура УдалитьТоварВнеАсортиментаИзТаблицы()
	ххх_Сервер.УдалитьТоварВнеАсортиментаИзТаблицы(Объект.Товары,Объект.Дата)
КонецПроцедуры



&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ПодключаемоеОборудованиеРТВызовСервера.УстановитьКонтрагентаПоДисконтнойКарте(ЭтотОбъект, СтруктураРезультат, СтрокаРезультата);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока, ИмяТаблицыВыборки);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	Если ДобавленаСтрока Тогда
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
		Если СравниватьСЦенамиПрошлыхЗакупок Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия);
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Объект.УчитыватьНДС);
		Если ИспользоватьАссортимент Тогда
			СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику");
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	РассчитатьОтклонениеЦенСервер(ТекущаяСтрока);
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	Если ИмяТаблицыВыборки = "Товары" Тогда
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Иначе
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура очистки количества/количества упаковок в табличной части.
&НаСервере
Процедура ОчиститьКоличество() Экспорт
	
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьКолонкиТабличнойЧасти(ЭтаФорма, "Товары", "Количество, КоличествоУпаковок, Сумма");
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьТабличнуюЧасть(ЭтаФорма,"СерийныеНомера");
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьТабличнуюЧасть(ЭтаФорма, "Серии");
	
КонецПроцедуры

#Область ЕГАИС

&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИС(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДанныеОтЕГАИС = Неопределено Тогда
		Если ДанныеОтЕГАИС.Результат Тогда
			АктПереданВЕГАИС = Истина;
			Оповестить("ОбновитьСписокЗапросовЕГАИС");
		КонецЕсли;
		
		УстановитьДоступностьЭлементовЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоДанныеЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДанныеЕГАИССервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораНоменклаутрыВАлкогольнойСтроке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ДополнительныеПараметры.ИдентификаторСтроки);
	
	МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если Не МассивНайденныхСтрок.Количество() = 0 Тогда
		
		Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(МассивНайденныхСтрок[0], РезультатЗакрытия);
		Иначе
			МассивНайденныхСтрок[0].Номенклатура = РезультатЗакрытия;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Товары.ТекущаяСтрока = МассивНайденныхСтрок[0].ПолучитьИдентификатор();
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
	ТоварыНоменклатураПриИзменении(Элементы.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	БезНДС = НСтр("ru = 'Без НДС'");
	
	ВосстановитьНастройки();
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(Объект));
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
			ПолученИзЕГАИС = Истина;
			ОбновитьПризнакПередачиАктаВЕГАИС(Объект.ТТНВходящаяЕГАИС);
		КонецЕсли;
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер();
		Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
			УстановитьПризнакиУчетаНДСПоЗаказуПоставщику(Объект.ЗаказПоставщику);
		КонецЕсли;
		
		УстановитьДоступностьЦенаВключаетНДС();
		УстановитьДоступностьЭлементовНаСервере();
		
		УстановитьСостояниеОплатыПоступленияНаФорме();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
		УстановитьДоступностьЭлементовЕГАИС();
		
		// ИнтеграцияГИСМ
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		// Конец ИнтеграцияГИСМ
		
	КонецЕсли;
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Вызывать необходимо после обновления сумм подвала.
		ОбновитьИтоговыеПоказатели(Истина, Истина);
	КонецЕсли;
	
	Если Объект.ЕстьРасхождения Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("ТоварыВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивКомандПО.Добавить("ТоварыПолучитьВес");
	МассивКомандПО.Добавить("ТоварыПоДаннымПоставщикаВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ТоварыПоДаннымПоставщикаЗагрузитьДанныеИзТСД");
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма, МассивКомандПО);
	
	УправлениеЭлементамиФормыНаСервере();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	НастроитьФормуПоДополнительнымПравам();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	//Zorius
	//Объект.ПредъявленСчетФактура=истина;     
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр=Ложь;
	
	Если не РольДоступна("ПолныеПрава") и ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда	
		Элементы.Контрагент.ТолькоПросмотр=Истина;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда
		Элементы.ЕстьРасхождения.ТолькоПросмотр=Ложь;
	КонецЕсли;
	
	Для каждого стр из Объект.Товары цикл
		стр.весовой=стр.номенклатура.весовой;
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС)Тогда
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаРозлива.Видимость=Истина;
		//Если Объект.ЕстьРасхождения Тогда
			Для каждого стр из Объект.ТоварыПоДаннымПоставщика цикл
				ПроставитьДатыРозлива(стр);//Запрос в цикле - гавно переделать.
			КонецЦикла;
		//Иначе
			Для каждого стр из Объект.Товары цикл
				ПроставитьДатыРозлива(стр);//Запрос в цикле - гавно переделать.
				
				стр.маркируемый=стр.АлкогольнаяПродукция.ВидПродукции.Маркируемый;
				
			КонецЦикла;
		//КонецЕсли;
	Иначе
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаРозлива.Видимость=Ложь;
	КонецЕсли;
	
	//Zorius

	//
	Если РольДоступна("ПолныеПрава") или НетМаркируемойПродукции()  Тогда
		Элементы.ЕстьРасхождения.Доступность=Истина;
	Иначе
		Элементы.ЕстьРасхождения.Доступность=Ложь;
	Конецесли;
	Если РольДоступна("ПолныеПрава") Тогда
		Элементы.АкцизныеМарки.ТолькоПросмотр=Ложь;
	КонецЕсли;
	//
	//Zorius

	
КонецПроцедуры

функция НетМаркируемойПродукции()
	
	Если ЗначениеЗАполнено(Объект.ТТНВходящаяЕГАИС) Тогда
		Для каждого стр из Объект.ТТНВходящаяЕГАИС.Товары Цикл
			Если стр.АлкогольнаяПродукция.ВидПродукции.Маркируемый Тогда
				возврат ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	возврат истина;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
	//Zorius	
	Если не ЗначениеЗаполнено(ТекстСчетФактура) и не Параметры.Ключ.Пустая() Тогда
		Элементы.ВвестиСчетФактуру.Доступность=Истина;
	Иначе
		Элементы.ВвестиСчетФактуру.Доступность=Ложь;
	КонецЕсли;
	ПроверитьСвязкуЕГАИСномкаНашаНомка();
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр=истина;
	//ЭтаФорма.ТолькоПросмотр=не ПроверкаРоли();
	//ЭтаФорма.Элементы.ЕстьРасхождения.ТолькоПросмотр=не ПроверкаРоли();
	//ЭтаФорма.Элементы.ЕстьРасхождения.Доступность=ПроверкаРоли();
	//Zorius
КонецПроцедуры


ФУнкция ПроверкаРоли()
	Если РольДоступна("ПолныеПрава") Тогда
		возврат истина
	Конецесли;
	возврат ложь;
КонецФункции



	
Процедура ПроверитьСвязкуЕГАИСномкаНашаНомка()	
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) и ТипЗнч(Объект.ТТНВходящаяЕГАИС) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда	
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("ссылка",Объект.ТТНВходящаяЕГАИС);
		Запрос.Текст="ВЫБРАТЬ
		             |	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		             |ПОМЕСТИТЬ ТТНномка
		             |ИЗ
		             |	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		             |ГДЕ
		             |	ТТНВходящаяЕГАИСТовары.Ссылка = &ссылка
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ТТНномка.АлкогольнаяПродукция.Код КАК АлкогольнаяПродукцияКод,
		             |	ТТНномка.АлкогольнаяПродукция.Представление КАК АлкогольнаяПродукцияПредставление
		             |ИЗ
		             |	ТТНномка КАК ТТНномка
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		             |		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ТТНномка.АлкогольнаяПродукция)
		             |ГДЕ
		             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL";
		выборка=Запрос.Выполнить().Выбрать();
		строкаКодов="";
		Пока выборка.Следующий() Цикл		
			строкаКодов=строкаКодов+Выборка.АлкогольнаяПродукцияКод+"  "+Выборка.АлкогольнаяПродукцияПредставление+", ";
		КонецЦикла;
		
		Если строкаКодов<>"" Тогда
			Сообщить("По нижеследующим ФСРАР кодам, возможно, отсутсвует сввязка Номенклатуры ЕГАИС с нашей номенклатурой. Обратитесь к менеджеру алкоголя. Спросите есть ли связки по кодам ФСРАР, и если есть пусть отправят вам коды карточек из нашей базы");
			Сообщить("Если алкоменеджер ответит что связка есть. Тогда необходимо обратится к менеджеру ответственному за допуски, отправить ей те коды что прислал алкоменеджер. После того как она проставит допуски и отправит обновления, необходимо их принять");
			Сообщить("Если вышеперечисленные действия были выполнены, необходимо перефоформить поступление товаров");
			Сообщить(строкаКодов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если АктПереданВЕГАИС Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РаспределениеТоваровПоХарактеристикам.Форма.Форма" Тогда
		
		ОбработкаВыбораРаспределениеПоХарактеристикамНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборДокументовВзаимозачета.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВзаимозачетовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
	 	
	 	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение);

	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗачтенаОплата" Тогда 
		ОбновитьИтоговыеПоказатели(Истина);
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ"
		Или ИмяСобытия = "Запись_УведомлениеОбИмпортеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И ЗначениеЗаполнено(ИмяТаблицыВыборки)
		И НЕ АктПереданВЕГАИС Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПредъявленСчетФактура И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры",
			ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
				Неопределено,
				ТекущийОбъект.Организация,
				ТекущийОбъект.Контрагент,
				ТекущийОбъект.НомерСчетаФактуры,
				ТекущийОбъект.ДатаСчетаФактуры));
		ТекущийОбъект.ПредъявленСчетФактура = Ложь;
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры", Неопределено);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	//Zorius
	//Если (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
	//		и не ЗначениеЗаполнено(ТекущийОбъект.НомерСчетаФактуры)
	//		и Объект.Контрагент.ххх_ПлательщикНДС) 
	//		и не Объект.ххх_ФиктивнаяНакладная	
	//		и не ПроверитьТараЛиЭто()         тогда
	//	Сообщить("Контрагент: "+ Объект.Контрагент+" является плательщиком НДС, заведите счет-фактуру");
	//	Сообщить("Если поставщик не является плательщиком НДС: обратитесь к менеджерам.");
	//	Отказ=Истина;
	//конецЕсли;
КонецПроцедуры

//Функция ПроверитьТараЛиЭто()
//	Запрос=Новый запрос;                                                 // ВидНоменклатуры
//	Запрос.УстановитьПараметр("тч",Объект.Товары.выгрузить());
//	Запрос.Текст="ВЫБРАТЬ
//	             |	тч.Номенклатура КАК вид
//	             |ПОМЕСТИТЬ йцу
//	             |ИЗ
//	             |	&тч КАК тч
//	             |;
//	             |
//	             |////////////////////////////////////////////////////////////////////////////////
//	             |ВЫБРАТЬ
//	             |	йцу.вид.ВидНоменклатуры КАК вид
//	             |ИЗ
//	             |	йцу КАК йцу
//	             |
//	             |СГРУППИРОВАТЬ ПО
//	             |	йцу.вид.ВидНоменклатуры";	
//	мас=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("вид");
//	Если мас.Количество()=1 Тогда
//		Если мас[0]=Справочники.ххх_Справочник.ВидНоменклатурыТара.Значение Тогда
//			возврат Истина
//		КонецЕсли
//	КонецЕсли;
//	возврат ложь;
//КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
		ПолученИзЕГАИС = Истина;
		ОбновитьПризнакПередачиАктаВЕГАИС(Объект.ТТНВходящаяЕГАИС);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	Если Объект.ЕстьРасхождения ИЛИ НЕ Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
	КонецЕсли;
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбновитьИтоговыеПоказатели(Истина, Истина);
	УстановитьДоступностьЭлементовНаСервере();
	УстановитьСостояниеОплатыПоступленияНаФорме();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	УстановитьДоступностьЭлементовЕГАИС();
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецПроцедуры

//Zorius	
&НаКлиенте
Процедура СформироватьАнализРасхождений()
	ОткрытьФорму("Отчет.АнализРасхожденийПриПоступленииТоваров.Форма",
		Новый Структура("Отбор,СформироватьПриОткрытии, КлючВарианта, Основание",
		Новый Структура("ПоступлениеТоваров", Объект.Ссылка), Истина, "АнализРасхождений"), 
		,
		"Поступление товаров=" + Объект.Ссылка,
		неопределено
		);		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	УстановитьСостояниеОплатыПоступленияНаФорме();
	
	Если Объект.ЕстьРасхождения ИЛИ НЕ Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
	КонецЕсли;
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И ПараметрыЗаписи.ДанныеСчетаФактуры <> Неопределено Тогда
		
		ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			ТекущийОбъект.Ссылка,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Организация,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Контрагент,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Номер,
			ПараметрыЗаписи.ДанныеСчетаФактуры.ДатаСоставления);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина));
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УстановитьДоступностьЭлементовЕГАИС();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ОбновитьИтоговыеПоказатели(Истина, Истина);
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	//Zorius
	Если Объект.ЕстьРасхождения и ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		СформироватьАнализРасхождений()
	КонецЕсли;
	//	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаказПоставщикуПриИзменении(Элемент)
	
	УправлениеЭлементамиФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	Если Объект.ЕстьРасхождения Тогда //ИЛИ ПолученИзЕГАИС 
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, , СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
																	НЕ ЗначениеЗаполнено(Объект.Организация));
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекВызовСервера.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	//Zorius
	Если КонтрагентПлательщикНДС() Тогда
		Объект.УчитыватьНДС=истина;
		Объект.ЦенаВключаетНДС=истина;
	Иначе
		Объект.УчитыватьНДС=ложь;
		Объект.ЦенаВключаетНДС=ложь;
	КонецЕсли;
	ЦенаВключаетНДСПриИзменении("");
	УчитыватьНДСПриИзменении("");
	Элементы.УчитыватьНДС.ТолькоПросмотр=истина;
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр=истина;
КонецПроцедуры

функция КонтрагентПлательщикНДС ()
	возврат ?(ЗначениеЗаполнено(объект.Контрагент),объект.Контрагент.ххх_ПлательщикНДС,ложь)
КонецФункции


&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияПриИзменении(Элемент)
	
	Если (НЕ Объект.ЕстьРасхождения)
		И (Объект.ТоварыПоДаннымПоставщика.Количество() > 0)
		//И (НЕ ПолученИзЕГАИС) 
		Тогда
		
		Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
			ТекстВопроса = НСтр("ru='Список ""Товары по данным поставщика"" будет очищен. Продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru='Список ""Товары по данным поставщика"" будет очищен, Алкогольные строки списка ""Товары"" будут перезаполнены. Продолжить?'");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЕстьРасхожденияСброс", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ПриИзмененииФлагаЕстьРасхождения() Тогда
			
			Если Объект.ЕстьРасхождения Тогда
				ТекущийЭлемент = Элементы.СтраницаТоварыПоДаннымПоставщика;
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
			НСтр("ru = 'Список перезаполнен'"),
			,
			НСтр("ru='Товары по данным поставщика заполнены по списку ""Товары"".'"),
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыПоДаннымПоставщика
		И НЕ Объект.ЕстьРасхождения Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	КонецЕсли;
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияСброс(ОтветНаВопрос, Параметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ЕстьРасхождения = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПриИзмененииФлагаЕстьРасхождения() Тогда
		
		Если Объект.ЕстьРасхождения Тогда
			ТекущийЭлемент = Элементы.СтраницаТоварыПоДаннымПоставщика;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Список перезаполнен'"),
		,
		НСтр("ru='Товары по данным поставщика заполнены по списку ""Товары"".'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СуммаОплачено) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРасчета = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", ДокументРасчета);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОбОплате", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимозачетПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВзаимозачетПоДокументу) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРасчета = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", ДокументРасчета);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОВзаимозачете", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураПолученный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
		 //Zorius
	//Если не Элементы.Товары.ТекущиеДанные = Неопределено и ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		//ДоступностьЦены(Элементы.Товары.ТекущиеДанные.Номенклатура)
		//Если не Элементы.Товары.ТекущиеДанные.Весовой  тогда
		//	Элементы.ТоварыЦена.ТолькоПросмотр=Истина;
		//Иначе
		//	Элементы.ТоварыЦена.ТолькоПросмотр=Ложь;
		//КонецЕсли;
	//КонецЕсли;
//Zorius

	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		Если не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
			Отказ = Истина;
			ВыполнитьРедактированиеАлкогольнойСтроки(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() И Не Объект.ЕстьРасхождения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока                          = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если НоваяСтрока Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьОтклонениеЦен(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();  

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	РассчитатьОтклонениеЦен(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры


Функция  ПолучитьПризнакВеса(Номенклатура)
	возврат Номенклатура.весовой;
КонецФункции
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	//Zorius
	Элементы.Товары.ТекущиеДанные.Весовой=ПолучитьПризнакВеса(Элементы.Товары.ТекущиеДанные.Номенклатура);
	//Zorius
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
								ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Дата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		СтруктураПараметровДействия.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику");
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьОтклонениеЦен(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	
	ТоварыСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
		
	Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовТабличнойЧастиТоварыКлиент(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры
//Zorius
Процедура ДоступностьЦены(Номенклатура)		
	//Если не Номенклатура.Весовой  тогда
	//	Элементы.ТоварыЦена.ТолькоПросмотр=Истина;
	//Иначе
	//	Элементы.ТоварыЦена.ТолькоПросмотр=Ложь;
	//КонецЕсли;	
Конецпроцедуры
//Zorius
&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыполнитьРедактированиеАлкогольнойСтроки(СтандартнаяОбработка);
	СтандартнаяОбработка=Ложь;	
	//Zorius
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("РазрешеныЗакупки", Истина);
	ПараметрыВыбора1 = Новый Структура;
	ПараметрыВыбора1.Вставить("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыВыбора1,элемент);
	//Zorius
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыполнитьРедактированиеАлкогольнойСтроки(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРедактированиеАлкогольнойСтроки(СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСопоставления = Новый Структура();
	ПараметрыСопоставления.Вставить("АлкогольнаяПродукция", Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция);
	ПараметрыСопоставления.Вставить("ИдентификаторУпаковки", Элементы.Товары.ТекущиеДанные.ИдентификаторУпаковки);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ПараметрыСопоставления));
	ПараметрыОткрытия.Вставить("РежимСопоставленияИВыбора", Истина);
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеВыбораНоменклаутрыВАлкогольнойСтроке", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", ПараметрыОткрытия,,,,, ОповещениеОЗАкрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТоварыПоДаннымПоставщика

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораТоварыПоДаннымПоставщикаПодборНаСервере(ВыбранноеЗначение);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПослеУдаления(Элемент)
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику", "ТоварыПоДаннымПоставщика");
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаХарактеристикаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСуммаВсегоПриИзменении(Элемент)
	ТоварыПоДаннымПоставщикаСуммаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСуммаСНДСПриИзменении(Элемент)
	
	ТоварыПоДаннымПоставщикаСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПриАктивизацииСтроки(Элемент)
	
	Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовТабличнойЧастиТоварыПоДаннымПоставщикаКлиент(Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПередУдалением(Элемент, Отказ)
	
	Если Не Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиЭтапыОплат

&НаКлиенте
Процедура ЭтапыОплатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		
		ЗапрашиватьДатуПлатежа = Истина;
		Если Копирование И Элемент.ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
			ЗапрашиватьДатуПлатежа = Ложь;
		КонецЕсли;
		
		СуммаИтого    = Объект.Товары.Итог("Сумма");
		СуммаНДСИтого = Объект.Товары.Итог("СуммаНДС");
		СуммаИтого    = СуммаИтого + ?(Объект.ЦенаВключаетНДС, 0, СуммаНДСИтого);
		
		ЗакупкиКлиент.ДобавитьЭтапОплаты(Объект, Элементы, СуммаИтого, Истина, Отказ, Копирование, ЗапрашиватьДатуПлатежа);
		Отказ = Истина;
		
		ОбновитьИтоговыеПоказатели(, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПриИзменении(Элемент)
	ОбновитьИтоговыеПоказатели(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатФормаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		ТекущиеДанные.ДатаПлатежа = Дата("00010101");
		ТекущиеДанные.ОтсрочкаПлатежа = 0;
		ТекущиеДанные.ВидПлатежа = 0;
	Иначе
		ТекущиеДанные.ДокументВзаимозачета 	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаВсего, ТекущаяСтрока, ТекущаяСтрока.ПроцентОплаты, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаВсего, ТекущаяСтрока, ТекущаяСтрока.Сумма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатОтсрочкаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидПлатежа) Тогда
		ТекущаяСтрока.ДатаПлатежа = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата + ТекущаяСтрока.ОтсрочкаПлатежа * 86400, Дата('00010101'));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатДатаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаПлатежа) И ЗначениеЗаполнено(Объект.Дата) Тогда
		
		ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
		ТекущаяСтрока.ОтсрочкаПлатежа = 0;
		
		Если НачалоДня(ТекущаяСтрока.ДатаПлатежа) < НачалоДня(Объект.Дата) Тогда
			
			ТекущаяСтрока.ОтсрочкаПлатежа = 0;
			
		Иначе
			
			ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа");
			
			ТекущаяСтрока.ОтсрочкаПлатежа = (ТекущаяСтрока.ДатаПлатежа - НачалоДня(Объект.Дата)) / 86400;
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		ДополнительныеПараметры.Вставить("ОчиститьКоличество", Истина);
		ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СравнитьСЦенамиПрошлыхЗакупок(Команда)
	
	СравниватьСЦенамиПрошлыхЗакупок = НЕ СравниватьСЦенамиПрошлыхЗакупок;
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
		Элементы.СравниватьЦеныЗакупки.Пометка = Истина;
	Иначе
		Элементы.СравниватьЦеныЗакупки.Пометка = Ложь;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоХарактеристикам(Команда)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	
	ПараметрыФормы = Новый Структура("АдресТоваровВХранилище, Документ", АдресТоваровВХранилище, Объект.Ссылка);
	
	ОткрытьФорму("Обработка.РаспределениеТоваровПоХарактеристикам.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоПрошлымЗакупкам(ЦеныРассчитаны);
			
		КонецЕсли;
		
		ОбновитьПоказателиТабличнойЧастиТовары(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'поступление товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("СсылкаНаПоступление", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораВЗакупки", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныЗакупки");
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПодобратьТовары(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'поступление товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",				Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент",			Объект.Контрагент);
	ПараметрыФормы.Вставить("СсылкаНаПоступление",	Объект.Ссылка);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",		Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораВЗакупки", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад",				Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок",			ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",					Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма.Элементы.ТоварыПоДаннымПоставщика, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоДаннымПоставщикаПоФакту(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не введено ни одной строки в список ""Товары""'"),
			Объект.Ссылка,
			"Объект.Товары");
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПерезаполнена = ПерезаполнитьТоварыПоДаннымПоставщикаПоФактуСервер();
	
	Если ТаблицаПерезаполнена Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Список перезаполнен'"),
			,
			НСтр("ru='Товары по данным поставщика перезаполнены.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрдерам(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОрдерамОповещения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Список ""Товары"" будет перезаполнен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЕстьИзменения = ЗаполнитьПоОрдерамСервер();
		
		Если ЕстьИзменения Тогда
			
			ПоказатьОповещениеПользователя(
			НСтр("ru = 'Список перезаполнен'"),
			,
			НСтр("ru='Товары перезаполнены по данным приходных ордеров.'"),
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрдерамОповещения(ОтветНаВопрос, Параметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = ЗаполнитьПоОрдерамСервер();
	
	Если ЕстьИзменения Тогда
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Список перезаполнен'"),
		,
		НСтр("ru='Товары перезаполнены по данным приходных ордеров.'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	Иначе
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоДаннымПоставщикаСервер();
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоДаннымПоставщика(ЦеныРассчитаны);
		ОбновитьПоказателиТабличнойЧастиТовары(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВзаимозачет(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	СуммаОплаты = Объект.ЭтапыОплат.Итог("Сумма");
	
	Если СуммаВсего <> 0 И СуммаОплаты = СуммаВсего Тогда
		
		ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
		|сумма оплат %СуммаОплаты% соответствует сумме 
		|поступления товаров %СуммаЗаказа%'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОплаты%",СуммаОплаты);
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаЗаказа%",СуммаВсего);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		,
		"Объект.ЭтапыОплат",
		,
		Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СуммаКПодбору = 0;
	
	СуммаИтого    = СуммаВсего;
	
	ИтогПоЭтапамОплат = Объект.ЭтапыОплат.Итог("Сумма");
	СуммаКПодбору = СуммаИтого - ИтогПоЭтапамОплат;
	
	АдресХранилищаЭтапаОплат = ПоместитьЭтапыОплатВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",       Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент",    Объект.Контрагент);
	ПараметрыФормы.Вставить("СуммаКПодбору", СуммаКПодбору);
	ПараметрыФормы.Вставить("ДокументРасчета", Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресХранилищаЭтапаОплат", АдресХранилищаЭтапаОплат);
	
	ОткрытьФорму("Обработка.ПодборДокументовВзаимозачета.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Ложь, Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ОбработчикиКомандЕГАИС

&НаКлиенте
Процедура ПередатьДанныеВЕГАИС(Команда)	
	Если ЭтотОбъект.Модифицированность Тогда
		Сообщить("Данные документа были изменены. Перед отправкой в ЕГАИС необходимо записать документ!");
		возврат;
	КонецЕсли;
	
	Если Объект.ТоварыПоДаннымПоставщика.Количество()>0 и Объект.Товары.Итог("Количество")<>Объект.ТоварыПоДаннымПоставщика.Итог("Количество") Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ОповещениеНачалоПередачиДанныхВЕГАИС",ЭтаФОрма,),"Вы собираетесь передать акт расхождений!",РежимДиалогаВопрос.ДаНет);
	Иначе
		ПодтвердитьТТН();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеНачалоПередачиДанныхВЕГАИС(Ответ,йцу) экспорт
	
	Если Ответ=КодВозвратаДиалога.Да тогда
		ПодтвердитьТТН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьТТН()
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИС", ЭтотОбъект);
	
	ПараметрыПередачиВЕГАИС = ПараметрыПередачиВЕГАИС(Объект.Ссылка);
	
	Если НЕ ПараметрыПередачиВЕГАИС.Отказ Тогда
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ПараметрыПередачиВЕГАИС.ВидДокумента);
		ВходныеПараметры.ДокументСсылка = ПараметрыПередачиВЕГАИС.ДокументСсылка;
		ПересортитьАкцизиСАкцизамиПоставщика();
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(ОбработчикОповещения, ПараметрыПередачиВЕГАИС.ВидДокумента, ВходныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура ПересортитьАкцизиСАкцизамиПоставщика()
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели             = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость                  = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                            = ВидимостьЭлементов;
	Элементы.СтраницаТоварыПоДаннымПоставщика.Видимость = ВидимостьЭлементов;
	Элементы.СтраницаЭтапыОплат.Видимость               = ВидимостьЭлементов;
	Элементы.СтраницаДополнительно.Видимость            = ВидимостьЭлементов;
	Элементы.ИтогоПоДаннымПоставщика.Видимость          = ВидимостьЭлементов;
	Элементы.СвертываемыеИтоги.Видимость                = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость              = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтаФорма,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиТабличнойЧастиТовары(ОбновитьВсеСтроки = Ложь)
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ НЕ СравниватьСЦенамиПрошлыхЗакупок Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.ПоказателиРассчитаны = Ложь;
		СтрокаТЧ.ЦенаПрошлойЗакупки = 0;
		СтрокаТЧ.ОтношениеЦенВПроцентах = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваровОбъекта.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровОбъекта.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровОбъекта.Характеристика КАК Характеристика,
	|	ТаблицаТоваровОбъекта.Цена КАК Цена,
	|	ВЫРАЗИТЬ(ТаблицаТоваровОбъекта.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТоваровОбъекта КАК ТаблицаТоваровОбъекта
	|ГДЕ
	|	НЕ ТаблицаТоваровОбъекта.ПоказателиРассчитаны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПрошлыеЗакупки.ДатаПрошлойЗакупки) КАК ДатаПрошлойЗакупки
	|ПОМЕСТИТЬ ВТ_ТаблицаСтрокЗакупки
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваровТовары.Ссылка.Дата КАК ДатаПрошлойЗакупки
	|		ИЗ
	|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|		ГДЕ
	|			ПоступлениеТоваровТовары.Ссылка.Дата <= &Период
	|			И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|			И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|			И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик
	|			И ПоступлениеТоваровТовары.Ссылка.Проведен) КАК ПрошлыеЗакупки
	|		ПО Товары.Номенклатура = ПрошлыеЗакупки.Номенклатура
	|			И Товары.Характеристика = ПрошлыеЗакупки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтрокЗакупкиСДатами.Номенклатура КАК Номенклатура,
	|	ТаблицаСтрокЗакупкиСДатами.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТаблицаСтрокЗакупкиСЦенами.Цена) КАК Цена
	|ПОМЕСТИТЬ ВТ_ПрошлыеЗакупки
	|ИЗ
	|	ВТ_ТаблицаСтрокЗакупки КАК ТаблицаСтрокЗакупкиСДатами
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваров.Дата КАК ДатаПрошлойЗакупки,
	|			ПоступлениеТоваровТовары.Цена / ВЫБОР
	|				КОГДА ПоступлениеТоваровТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ПоступлениеТоваровТовары.Упаковка.Коэффициент
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК Цена
	|		ИЗ
	|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|				ПО ПоступлениеТоваровТовары.Ссылка = ПоступлениеТоваров.Ссылка
	|		ГДЕ
	|			ПоступлениеТоваров.Дата < &Период
	|			И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|			И ПоступлениеТоваров.Проведен
	|			И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|			И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик) КАК ТаблицаСтрокЗакупкиСЦенами
	|		ПО ТаблицаСтрокЗакупкиСДатами.Номенклатура = ТаблицаСтрокЗакупкиСЦенами.Номенклатура
	|			И ТаблицаСтрокЗакупкиСДатами.Характеристика = ТаблицаСтрокЗакупкиСЦенами.Характеристика
	|			И ТаблицаСтрокЗакупкиСДатами.ДатаПрошлойЗакупки = ТаблицаСтрокЗакупкиСЦенами.ДатаПрошлойЗакупки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСтрокЗакупкиСДатами.Номенклатура,
	|	ТаблицаСтрокЗакупкиСДатами.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК ПоказателиРассчитаны,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦеныПрошлыхЗакупок.Цена, 0) > 0
	|				И Товары.Цена > 0
	|			ТОГДА (Товары.Цена / (ВЫБОР
	|					КОГДА Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА Товары.Упаковка.Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ * ЕСТЬNULL(ЦеныПрошлыхЗакупок.Цена, 0)) - 1) * 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтношениеЦенВПроцентах,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЕСТЬNULL(ЦеныПрошлыхЗакупок.Цена, 0) КАК ЦенаПрошлойЗакупки
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПрошлыеЗакупки.Номенклатура КАК Номенклатура,
	|			ПрошлыеЗакупки.Характеристика КАК Характеристика,
	|			ПрошлыеЗакупки.Цена КАК Цена
	|		ИЗ
	|			ВТ_ПрошлыеЗакупки КАК ПрошлыеЗакупки) КАК ЦеныПрошлыхЗакупок
	|		ПО Товары.Номенклатура = ЦеныПрошлыхЗакупок.Номенклатура
	|			И Товары.Характеристика = ЦеныПрошлыхЗакупок.Характеристика";
	
	ТаблицаТоваровОбъекта = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,НомерСтроки,Цена,Упаковка,ПоказателиРассчитаны");
	Если ОбновитьВсеСтроки Тогда
		ТаблицаТоваровОбъекта.ЗаполнитьЗначения( Ложь, "ПоказателиРассчитаны"); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваровОбъекта", ТаблицаТоваровОбъекта);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("Период",ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("Период",Объект.Дата);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.Товары[Выборка.НомерСтроки-1];
		Если СтрокаТЧ <> Неопределено Тогда
			СтрокаТЧ.ПоказателиРассчитаны = Истина;
			СтрокаТЧ.ЦенаПрошлойЗакупки   = Выборка.ЦенаПрошлойЗакупки;
			СтрокаТЧ.ОтношениеЦенВПроцентах = Выборка.ОтношениеЦенВПроцентах;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет показатель "ОтношениеЦенВПроцентах" в отдельной строке ТЧ.
//
&НаКлиенте
Процедура РассчитатьОтклонениеЦен(ТекущаяСтрока)
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		Если ТекущаяСтрока.ЦенаПрошлойЗакупки > 0
			И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОтношениеЦенВПроцентах = (ТекущаяСтрока.Цена / ТекущаяСтрока.ЦенаПрошлойЗакупки - 1) * 100;
		Иначе
			ТекущаяСтрока.ОтношениеЦенВПроцентах = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет показатель "ОтношениеЦенВПроцентах" в отдельной строке ТЧ.
//
&НаСервере
Процедура РассчитатьОтклонениеЦенСервер(СтрокаТЧ)
		
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		Если СтрокаТЧ.ЦенаПрошлойЗакупки > 0
			И СтрокаТЧ.Цена > 0 Тогда
			СтрокаТЧ.ОтношениеЦенВПроцентах = (СтрокаТЧ.Цена / СтрокаТЧ.ЦенаПрошлойЗакупки - 1) * 100;
		Иначе
			СтрокаТЧ.ОтношениеЦенВПроцентах = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока)
	
	ТекущаяСтрока.ОтношениеЦенВПроцентах = 0;
	ТекущаяСтрока.ЦенаПрошлойЗакупки     = 0;
	ТекущаяСтрока.ПоказателиРассчитаны   = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРаспределениеПоХарактеристикамНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Характеристика) 
			И НЕ СтрокаТовара.Удалить Тогда
					
			Если (СтрокаТовара.НомерСтроки-1) < Объект.Товары.Количество() Тогда
				
				ТекущаяСтрока = Объект.Товары[СтрокаТовара.НомерСтроки -1];
				
				Если ТекущаяСтрока.Номенклатура = СтрокаТовара.Номенклатура Тогда
					
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Количество, КоличествоУпаковок, Упаковка, Цена");
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
					
					ТекущаяСтрока.ОтношениеЦенВПроцентах = 0;
					ТекущаяСтрока.ЦенаПрошлойЗакупки     = 0;
					ТекущаяСтрока.ПоказателиРассчитаны   = Ложь;
					
					КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
					ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
		
	МассивСтрокКУдалению = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Характеристика) 
			И СтрокаТовара.Удалить Тогда
			
			Если (СтрокаТовара.НомерСтроки-1) < Объект.Товары.Количество() Тогда
				
				МассивСтрокКУдалению.Добавить(Объект.Товары[СтрокаТовара.НомерСтроки -1]);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		
		Объект.Товары.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	
		Если ЗначениеЗаполнено(СтрокаТовара.Характеристика) Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.УчитыватьНДС);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.Склад.Организация;
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
		
		Элементы.БанковскийСчетОрганизации.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
																		НЕ ЗначениеЗаполнено(Объект.Организация));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	УстановитьДоступностьКомандыЗаполнитьПоОрдерам();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	ОбновитьИтоговыеПоказатели(Истина);
	
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказПоставщику", "Видимость",
																	ЗначениеЗаполнено(Объект.ЗаказПоставщику)
	);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЕГАИС", "Видимость",
																	ПолученИзЕГАИС);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапыОплат", "Видимость",
																	НЕ ЗначениеЗаполнено(Объект.ЗаказПоставщику));
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапыОплатИнфоСтрока", "Видимость",
																	ЗначениеЗаполнено(Объект.ЗаказПоставщику));

	
	Если Объект.Магазин.СкладУправляющейСистемы Тогда
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		Элементы.СравниватьЦеныЗакупки.Пометка = Истина;
	Иначе
		Элементы.СравниватьЦеныЗакупки.Пометка = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетКонтрагента", "ТолькоПросмотр", 
																	НЕ ЗначениеЗаполнено(Объект.Контрагент));
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетОрганизации", "ТолькоПросмотр", 
																	НЕ ЗначениеЗаполнено(Объект.Организация));
	
	УстановитьДоступностьКомандыЗаполнитьПоОрдерам();
	УстановитьДоступностьКомандЗаполнитьПоЦенамДанныхПоставщикаСевер();
	
КонецПроцедуры

// Процедура управляет доступностью команды ЗаполнитьПоОрдерам.
//
&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьПоОрдерам()

	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		Элементы.ТоварыЗаполнитьПоОрдерам.Доступность = Объект.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении;
	Иначе
		Элементы.ТоварыЗаполнитьПоОрдерам.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет доступностью команды ЗаполнитьПоЦенамДанныхПоставщика и
// ЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика на сервере.
//
&НаСервере
Процедура УстановитьДоступностьКомандЗаполнитьПоЦенамДанныхПоставщикаСевер()
	
	Элементы.ТоварыЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика.Доступность = Объект.ЕстьРасхождения;
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по прошлым закупкам в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкамСервер()
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Объект, "Товары", Элементы.Товары.ВыделенныеСтроки, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену выделенных строк по ценам тч "Товары по данным поставщика" в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
//
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоДаннымПоставщикаСервер()

	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоЦенамДанныхПоставщика(Объект, "Товары", Элементы.Товары.ВыделенныеСтроки, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

	Возврат ЦеныРассчитаны;

КонецФункции

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Поставщик"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |Сумма,
															  |КоличествоУпаковок,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект.Магазин,
																	Объект.Товары.Выгрузить(),
																	Объект.ЗаказПоставщику,
																	Объект.Дата,
																	"Товары");
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	Для каждого стр из Объект.Товары Цикл
		стр.весовой=стр.номенклатура.весовой;
	КонецЦикла;
	
КонецПроцедуры

// Получает из временного хранилища подобранные товары по данным поставщика.
//
&НаСервере
Процедура ОбработкаВыбораТоварыПоДаннымПоставщикаПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.ТоварыПоДаннымПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект.Магазин,
																	Объект.ТоварыПоДаннымПоставщика.Выгрузить(),
																	Объект.ЗаказПоставщику,
																	Объект.Дата,
																	"ТоварыПоДаннымПоставщика");
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаСуммыНДС", "Видимость", Истина);
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаСуммыНДС", "Видимость", Ложь);
	КонецЕсли;
	
	Если Объект.ЕстьРасхождения Тогда
		Если Объект.УчитыватьНДС Тогда
			Элементы.ГруппаПодвалСтраницыПоДаннымПоставщика.ТекущаяСтраница = Элементы.ИтогоПоДаннымПоставщикаСуммаНДС;
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИтогоПоДаннымПоставщикаСуммаНДС", "Видимость", Истина);
		Иначе
			Элементы.ГруппаПодвалСтраницыПоДаннымПоставщика.ТекущаяСтраница = Элементы.ИтогоПоДаннымПоставщикаСумма;
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИтогоПоДаннымПоставщикаСуммаНДС", "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Если Объект.ЕстьРасхождения Тогда
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ТоварыПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Процедура восстанавливает ранее заданные настройки.
//
&НаСервере
Процедура ВосстановитьНастройки()
	Перем ЗначениеНастроек;
	
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документы.ПоступлениеТоваров", "НастройкиСравненияЦен");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗначениеНастроек.Свойство("СравниватьСЦенамиПрошлыхЗакупок", СравниватьСЦенамиПрошлыхЗакупок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет ранее заданные настройки.
//
&НаСервере
Процедура СохранитьНастройки()
	Перем Настройки;

	Настройки = Новый Структура;
	Настройки.Вставить("СравниватьСЦенамиПрошлыхЗакупок", СравниватьСЦенамиПрошлыхЗакупок);
	ХранилищеОбщихНастроек.Сохранить("Документы.ПоступлениеТоваров", "НастройкиСравненияЦен", Настройки);

КонецПроцедуры

// Процедура установки видимости элементов по признаку "Есть расхождения".
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СтраницаТоварыПоДаннымПоставщика");
	МассивЭлементов.Добавить("ГруппаПодвалСтраницыПоДаннымПоставщика");

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Объект.ЕстьРасхождения);
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииФлагаЕстьРасхождения()
	
	УстановитьДоступностьКомандЗаполнитьПоЦенамДанныхПоставщикаСевер();
	
	Если Объект.ЕстьРасхождения Тогда
		ТаблицаПерезаполнена = ПерезаполнитьТоварыПоДаннымПоставщикаПоФактуСервер();
	Иначе
		ТаблицаПерезаполнена = ПерезаполнитьАлкогольныеСтрокиТоваровПоТТН();
	КонецЕсли;
	
	ОбработатьИзменениеФлагаЕстьРасхожденияСервер();
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Возврат ТаблицаПерезаполнена;

КонецФункции

&НаСервере
Процедура ОбработатьИзменениеФлагаЕстьРасхожденияСервер()
	
	Если НЕ Объект.ЕстьРасхождения Тогда
		Объект.ТоварыПоДаннымПоставщика.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер();
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьТоварыПоДаннымПоставщикаПоФактуСервер()
	
	Объект.ТоварыПоДаннымПоставщика.Очистить();
		
		Товары = Объект.Товары.Выгрузить(
		,
		"Номенклатура,
		|Характеристика,
		|КоличествоУпаковок,
		|Количество,
		|Упаковка,
		|Цена,
		|Сумма,
		|СтавкаНДС,
		|СуммаНДС,
		|ХарактеристикиИспользуются,
		|АлкогольнаяПродукция,
		|ИдентификаторУпаковки,
		|ИдентификаторСтроки");
		
	Товары.Свернуть(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|Цена,
		|СтавкаНДС,
		|ХарактеристикиИспользуются,
		|АлкогольнаяПродукция,
		|ИдентификаторУпаковки,
		|ИдентификаторСтроки"
		,
		"КоличествоУпаковок,
		|Количество,
		|Сумма,
		|СуммаНДС");
	
	Для каждого ТекСтрока Из Товары Цикл
		НоваяСтрока = Объект.ТоварыПоДаннымПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПерезаполнитьАлкогольныеСтрокиТоваровПоТТН()
	
	Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТоварыПоступленияПоТТН();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Возврат Истина;
	
КонецФункции

// Заполняет количество в тч Товары по фактически принятому на сервере.
//
&НаСервере
Функция ЗаполнитьПоОрдерамСервер()

	ЗаполнитьТоварыПоФактическойПриемке();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

// Заполняет количество в тч Товары по фактически принятому.
//
Процедура ЗаполнитьТоварыПоФактическойПриемке()
	
	ДокументОснование = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект.Ссылка);
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	Объект.Товары.Очистить();
	Объект.СерийныеНомера.Очистить();
	
	ТЗТовары = Объект.Товары.Выгрузить();
	ТЗСерийныеНомера = Объект.СерийныеНомера.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПриходныйОрдерНаТоварыТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.Проведен
	|	И ПриходныйОрдерНаТоварыТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыСерийныеНомера.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ПриходныйОрдерНаТоварыСерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.СерийныеНомера КАК ПриходныйОрдерНаТоварыСерийныеНомера
	|ГДЕ
	|	ПриходныйОрдерНаТоварыСерийныеНомера.Ссылка.ДокументОснование = &ДокументОснование
	|	И ПриходныйОрдерНаТоварыСерийныеНомера.Ссылка.Проведен
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатур
	|	ИЗ &ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатур.Номенклатура
	|ИЗ
	|	ТаблицаНоменклатур КАК ТаблицаНоменклатур
	|ГДЕ
	|	ТаблицаНоменклатур.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТоварыПоОрдерам = Результат[0].Выгрузить();
	ТоварыПоОрдерам.Колонки.Добавить("НоменклатураДобавлена");
	ТоварыПоОрдерам.ЗаполнитьЗначения( Ложь, "НоменклатураДобавлена");
	
	ВыборкаСерийныеНомера = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаУслуг = Результат[3].Выбрать();
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		ВыборкаУслуг.Сбросить();
		Если ВыборкаУслуг.НайтиСледующий(СтрокаТовары.Номенклатура, "Номенклатура") Тогда
			НоваяСтрокаТовары = ТЗТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(
		"Номенклатура,Характеристика,НоменклатураДобавлена",
		СтрокаТовары.Номенклатура,
		СтрокаТовары.Характеристика, Ложь);
		
		СтрокиТаблицыПоОрдерам = ТоварыПоОрдерам.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицыПоОрдерам.Количество() > 0 Тогда
			СтрокаТаблицыПоОрдерам = СтрокиТаблицыПоОрдерам[0];
			СтрокаТаблицыПоОрдерам.НоменклатураДобавлена = Истина;
			ДобавитьСтрокуПоОрдеру(ТЗТовары, ТЗСерийныеНомера, ВыборкаСерийныеНомера, СтрокаТаблицыПоОрдерам, КлючСвязи);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("НоменклатураДобавлена", Ложь);
	НеДобавленныеСтрокиТаблицыПоОрдерам = ТоварыПоОрдерам.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТаблицыПоОрдерам Из НеДобавленныеСтрокиТаблицыПоОрдерам Цикл
		СтрокаТаблицыПоОрдерам.НоменклатураДобавлена = Истина;
		ДобавитьСтрокуПоОрдеру(ТЗТовары, ТЗСерийныеНомера, ВыборкаСерийныеНомера, СтрокаТаблицыПоОрдерам, КлючСвязи);
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТЗТовары);
	Объект.СерийныеНомера.Загрузить(ТЗСерийныеНомера);
	
	ЗапасыСервер.ЗаполнитьЦеныПоПроизвольнойТаблицеЦен(Объект, "Товары", ТаблицаТовары, Ложь, Ложь);
	
КонецПроцедуры

// Добавляет строку в тч Товары. Сервис "Заполнить по ордерам".
//
&НаСервере
Процедура ДобавитьСтрокуПоОрдеру(ТЗТовары, ТЗСерийныеНомера, ВыборкаСерийныеНомера, СтрокаТаблицыПоОрдерам, КлючСвязи)
	
	НоваяСтрокаТовары = ТЗТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицыПоОрдерам);
	
	Если ЗначениеЗаполнено(СтрокаТаблицыПоОрдерам.КлючСвязиСерийныхНомеров) Тогда
		НоваяСтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
		
		ВыборкаСерийныеНомера.Сбросить();
		Если ВыборкаСерийныеНомера.НайтиСледующий(СтрокаТаблицыПоОрдерам.Ссылка, "Ссылка") Тогда
			ВыборкаСерийныеНомераДетальная = ВыборкаСерийныеНомера.Выбрать();
			
			Пока ВыборкаСерийныеНомераДетальная.НайтиСледующий(СтрокаТаблицыПоОрдерам.КлючСвязиСерийныхНомеров, "КлючСвязиСерийныхНомеров") Цикл
				СтрокаСерийныеНомера = ТЗСерийныеНомера.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСерийныеНомера, ВыборкаСерийныеНомераДетальная);
				СтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = КлючСвязи;
			КонецЦикла;
			
		КонецЕсли;
		КлючСвязи = КлючСвязи + 1;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает сумму документа по табличной части и помещает рассчитанное значение в реквизит формы.
//
// Параметры:
// ТабличнаяЧасть - тч документа для подсчета суммы документа.
// ЦенаВключаетНДС - Признак включения НДС в цену документа.
// РеквизитСумма - Реквизит формы документа, в который будет помещена сумма.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуВсегоПоДаннымПоставщика(ТабличнаяЧасть, ЦенаВключаетНДС, РеквизитСумма)

	РеквизитСумма = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ТабличнаяЧасть, ЦенаВключаетНДС);

КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере()

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));

КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

// Функция помещает список товаров во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(
		Объект.Товары.Выгрузить(),
		УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакиУчетаНДСПоЗаказуПоставщику(ЗаказуПоставщику)
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказуПоставщику, "ЦенаВключаетНДС, УчитыватьНДС");
	
	Объект.УчитыватьНДС 	= РеквизитыЗаказа.УчитыватьНДС;
	Объект.ЦенаВключаетНДС 	= РеквизитыЗаказа.ЦенаВключаетНДС;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПередачиАктаВЕГАИС(ТТН)
	
	//СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТН, "СтатусОбработки");
	//
	//АктПереданВЕГАИС = СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения
	//	ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения
	//	ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений
	//	ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЭтапыОплатВХранилище()
	
	ТаблицаОплат = Объект.ЭтапыОплат.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаОплат, УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ОбновитьИтоговыеПоказатели(ЗапросДанных = Ложь, ПересчитатьВзаимозачет = Ложь)
	
	Если ЗапросДанных Тогда
		
		ДокументРасчета = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект);
		
		ИтоговыеПоказатели = ЗакупкиСервер.ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(ДокументРасчета);
		
		СуммаОплачено = 					ИтоговыеПоказатели.СуммаОплачено;
		СуммаВзаимозачет = 					ИтоговыеПоказатели.СуммаВзаимозачет;
		ДоступноКВзаимозачету = 			ИтоговыеПоказатели.ДоступноКВзаимозачету;
		ВзаимозачетПоДокументу = 			ИтоговыеПоказатели.ВзаимозачетПоДокументу;
		ДоступноКВзаимозачетуПоДокументу = 	ИтоговыеПоказатели.ДоступноКВзаимозачетуПоДокументу;
		
	КонецЕсли;
	
	Если ПересчитатьВзаимозачет И НЕ ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		НайденныеСтроки = Объект.ЭтапыОплат.НайтиСтроки(Новый Структура("ФормаОплаты", Перечисления.ФормыОплаты.Взаимозачет));
		СуммаВзаимозачет = 0;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Строка Из НайденныеСтроки Цикл
				СуммаВзаимозачет = СуммаВзаимозачет + Строка.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ЗакупкиСервер.РассчитатьСтатусОплатыПоЭтапамОплаты(Объект);
	
	КонецЕсли;
	
	СуммаКОплате = СуммаВсего - СуммаОплачено - СуммаВзаимозачет;
	
	СформироватьСвертываемыеИтоги();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСвертываемыеИтоги()
	
	ФорматСуммовыхПоказателей = ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей();
	
	Если СуммаКОплате > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'К оплате: '")+ Формат(СуммаКОплате, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаОплачено > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Оплачено: '")+ Формат(СуммаОплачено, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаВзаимозачет > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Взаимозачет: '")+ Формат(СуммаВзаимозачет, ФорматСуммовыхПоказателей);
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'К оплате: '") + Формат(0, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если ДоступноКВзаимозачету > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Долг поставщика: '") + Формат(ДоступноКВзаимозачету, ФорматСуммовыхПоказателей);
	ИначеЕсли ДоступноКВзаимозачетуПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Долг поставщика (по документу): '") + Формат(ДоступноКВзаимозачетуПоДокументу, ФорматСуммовыхПоказателей);
	ИначеЕсли ВзаимозачетПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Взаимозачет (по документу): '") + Формат(ВзаимозачетПоДокументу, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если ДоступноКВзаимозачету > 0 ИЛИ ДоступноКВзаимозачетуПоДокументу > 0 ИЛИ ВзаимозачетПоДокументу > 0 Тогда
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = Новый Цвет;
	КонецЕсли;
	
	Элементы.СвертываемыеИтоги.ЗаголовокСвернутогоОтображения = ЗаголовокГруппы;
	
КонецПроцедуры

// Процедура заполняет этапы оплат из подбора взаимозачета.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборВзаимозачетовНаСервере(ВыбранноеЗначение)
	
	СуммаИтого    = Объект.Товары.Итог("Сумма");
	СуммаНДСИтого = Объект.Товары.Итог("СуммаНДС");
	СуммаИтого    = СуммаИтого + ?(Объект.ЦенаВключаетНДС, 0, СуммаНДСИтого);
	
	ЗакупкиСервер.ОбработкаВыбораПодборВзаимозачетовНаСервере(Объект, ВыбранноеЗначение, СуммаИтого);
	ОбновитьИтоговыеПоказатели(, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетКонтрагента", "ТолькоПросмотр",
																	НЕ ЗначениеЗаполнено(Объект.Контрагент));
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	Иначе
		ДоступноКВзаимозачету = 0;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	Иначе
		УстановитьДоступностьКомандыЗаполнитьПоОрдерам();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	Иначе
		ДоступноКВзаимозачету = 0;
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, ИмяТаблицыВыборки);
	
КонецПроцедуры

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(Объект));
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСуммаПриИзменении()
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеОплатыПоступленияНаФорме()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеОплатыПоступления.ПросроченаОплата
	|ИЗ
	|	РегистрСведений.СостояниеОплатыПоступления КАК СостояниеОплатыПоступления
	|ГДЕ
	|	СостояниеОплатыПоступления.ПросроченныйДокумент = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КартинкаСостоянияПросроченаОплата = 1;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		КартинкаСостоянияПросроченаОплата = Выборка.ПросроченаОплата;
	КонецЕсли;
	
	Элементы.КартинкаСостоянияПросроченаОплата.Видимость = КартинкаСостоянияПросроченаОплата = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления = Неопределено)
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Если ПараметрыПредставления.РазрешенВводНового Тогда
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры;
		Иначе
			Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
			Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
			Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстСчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры Тогда
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("НомерСчетаФактуры");
		ИменаЭлементов.Добавить("ДатаСчетаФактуры");
		
		Если Форма.Объект.ПредъявленСчетФактура Тогда
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Истина);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Истина);
		Иначе
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Ложь);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Ложь);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыВыборки(ИмяСтраницы)
	
	ИмяТаблицыВыборки = "";
	Если ИмяСтраницы = "СтраницаТоварыПоДаннымПоставщика" Тогда
		ИмяТаблицыВыборки = "ТоварыПоДаннымПоставщика";
		
	Иначе
		ИмяТаблицыВыборки = "Товары";
	КонецЕсли;

	Возврат ИмяТаблицыВыборки;
	
КонецФункции

#Область СлужебныеЕГАИС

&НаСервере
Процедура ЗаполнитьПоДанныеЕГАИССервер()
	
	Объект.Товары.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыПоДаннымПоставщика Цикл
		
		СтрокаТаблицыТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, СтрокаТаблицы);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПередачиВЕГАИС(ДокументСсылка)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ЕстьРасхождения, ТТНВходящаяЕГАИС");
	
	Результат = Новый Структура;
	Результат.Вставить("ВидДокумента"  , Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН);
	Результат.Вставить("ДокументСсылка", ЗначенияРеквизитов.ТТНВходящаяЕГАИС);
	Результат.Вставить("Отказ"         , Ложь);
	
	Если НЕ ЗначенияРеквизитов.ЕстьРасхождения Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок КАК Количество
	|ПОМЕСТИТЬ ТаблицаПоступленияДанныеПоставщика
	|ИЗ
	|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
	|ГДЕ
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка = &Ссылка
	|	И НЕ ПоступлениеТоваровТоварыПоДаннымПоставщика.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИСТовары.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ТаблицаТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &СсылкаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоступленияДанныеПоставщика.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоступленияДанныеПоставщика.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаПоступленияДанныеПоставщика.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаПоступленияДанныеПоставщика.Количество КАК Количество,
	|	ТаблицаТТН.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ТаблицаТТНПоДаннымПоставщика
	|ИЗ
	|	ТаблицаПоступленияДанныеПоставщика КАК ТаблицаПоступленияДанныеПоставщика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТТН КАК ТаблицаТТН
	|		ПО ТаблицаПоступленияДанныеПоставщика.ИдентификаторСтроки = ТаблицаТТН.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ ПоступлениеТоваровТовары.КоличествоУпаковок
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ТоварыПоФакту
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	|	И НЕ ПоступлениеТоваровТовары.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыПоФакту.НомерСтроки, 0) КАК НомерСтроки,
	|	ТаблицаТТНПоДаннымПоставщика.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТТНПоДаннымПоставщика.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТТНПоДаннымПоставщика.Количество КАК Количество,
	|	ТаблицаТТНПоДаннымПоставщика.СправкаБ КАК СправкаБ,
	|	ЕСТЬNULL(ТоварыПоФакту.Количество, 0) КАК КоличествоФакт
	|ПОМЕСТИТЬ ТаблицаСравнения
	|ИЗ
	|	ТаблицаТТНПоДаннымПоставщика КАК ТаблицаТТНПоДаннымПоставщика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоФакту КАК ТоварыПоФакту
	|		ПО ТаблицаТТНПоДаннымПоставщика.ИдентификаторСтроки = ТоварыПоФакту.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСравнения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСравнения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаСравнения.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаСравнения.СправкаБ КАК СправкаБ,
	|	ТаблицаСравнения.Количество КАК Количество,
	|	ТаблицаСравнения.КоличествоФакт КАК КоличествоФакт
	|ИЗ
	|	ТаблицаСравнения КАК ТаблицаСравнения
	|ГДЕ
	|	ТаблицаСравнения.Количество <> ТаблицаСравнения.КоличествоФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСравнения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСравнения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаСравнения.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаСравнения.СправкаБ КАК СправкаБ,
	|	ТаблицаСравнения.Количество КАК Количество,
	|	ТаблицаСравнения.КоличествоФакт КАК КоличествоФакт
	|ИЗ
	|	ТаблицаСравнения КАК ТаблицаСравнения";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СсылкаТТН", ЗначенияРеквизитов.ТТНВходящаяЕГАИС);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Отказ = Ложь;
	
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	ТаблицаРасхождений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаРасхождений.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаРасхождений.Колонки.Добавить("КоличествоФакт", Новый ОписаниеТипов("Число"));
	
	ВыборкаПроверкиРасхождений = МассивРезультатов[5].Выбрать();
	Если ВыборкаПроверкиРасхождений.Количество() > 0 Тогда
		Выборка = МассивРезультатов[6].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН;
			
			Если Выборка.КоличествоФакт > Выборка.Количество Тогда
				СтрокаОшибки = НСтр("ru = 'В строке %1 фактическое количество %2 превышает количество поставщика %3, передача такого расхождения в ЕГАИС не допускается.'");
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаОшибки,
					Выборка.НомерСтроки,
					Выборка.КоличествоФакт,
					Выборка.Количество);
				Если Выборка.НомерСтроки > 0 Тогда
					ИмяПоляТоваров = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Выборка.НомерСтроки, "КоличествоУпаковок");
				Иначе
					ИмяПоляТоваров = "Объект.Товары";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаОшибки,
					ДокументСсылка,
					ИмяПоляТоваров);
					
				Отказ = Истина;
			КонецЕсли;
			
			СтрокаРасхождений = ТаблицаРасхождений.Добавить();
			СтрокаРасхождений.НомерСтроки = Выборка.НомерСтроки;
			СтрокаРасхождений.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			СтрокаРасхождений.КоличествоФакт = Выборка.КоличествоФакт;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаРасхождений.Количество() > 0 Тогда
		ТТН = ЗначенияРеквизитов.ТТНВходящаяЕГАИС.ПолучитьОбъект();
		ТТН.Товары.ЗагрузитьКолонку(Новый Массив(ТТН.Товары.Количество()), "КоличествоФакт");
		
		Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
			СтрокаТЧ = ТТН.Товары.Найти(СтрокаРасхождений.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаОшибки = НСтр("ru = 'В строке %1 указан неизвестный идентификатор %2 строки ТТН.'");
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаОшибки,
					СтрокаРасхождений.НомерСтроки,
					СтрокаРасхождений.ИдентификаторСтроки);
				
				Если СтрокаРасхождений.НомерСтроки > 0 Тогда
					ИмяПоляТоваров = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаРасхождений.НомерСтроки, "Номенклатура");
				Иначе
					ИмяПоляТоваров = "Объект.Товары";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаОшибки,
					ДокументСсылка,
					ИмяПоляТоваров,,
					Отказ);
			Иначе
				СтрокаТЧ.КоличествоФакт = СтрокаРасхождений.КоличествоФакт;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			ТТН.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Результат.Отказ = Отказ;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовЕГАИС()
	
	ТолькоПросмотрЕстьРасхождения = АктПереданВЕГАИС;
	
	//Если НЕ ТолькоПросмотрЕстьРасхождения И ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТТНВходящаяЕГАИС.СтатусОбработки,
	//	|	ТТНВходящаяЕГАИС.Ссылка
	//	|ИЗ
	//	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	//	|ГДЕ
	//	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	//	|	И ТТНВходящаяЕГАИС.СтатусОбработки В(&СтатусыОбработки)";
	//	
	//	СтатусыПодтверждения = Новый Массив;
	//	СтатусыПодтверждения.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
	//	СтатусыПодтверждения.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
	//	
	//	Запрос.УстановитьПараметр("Ссылка", Объект.ТТНВходящаяЕГАИС);
	//	Запрос.УстановитьПараметр("СтатусыОбработки", СтатусыПодтверждения);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	
	//	Если Выборка.Следующий() Тогда
	//		ТолькоПросмотрЕстьРасхождения = Истина;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	// Шапка
	Элементы.ФормаПередатьДанныеВЕГАИС.Видимость = ПолученИзЕГАИС;
	Элементы.ФормаПередатьДанныеВЕГАИС.Доступность = истина;//Объект.Проведен И НЕ АктПереданВЕГАИС;
	Элементы.ЕстьРасхождения.ТолькоПросмотр = ТолькоПросмотрЕстьРасхождения;
	
	// Товары
	//Если АктПереданВЕГАИС Тогда
	//	Элементы.Товары.ТолькоПросмотр = Истина;
	//КонецЕсли;
	//
	//Элементы.ТоварыПоискПоШтрихкоду.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыПоискПоМагнитномуКоду.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыОткрытьПодбор.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыЗаполнитьПоОрдерам.Доступность = НЕ АктПереданВЕГАИС;
	//
	//Элементы.ТоварыЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика.Доступность = НЕ АктПереданВЕГАИС;
	//
	//// ТоварыПоДаннымПоставщика
	//Элементы.ТоварыПоДаннымПоставщика.ТолькоПросмотр = АктПереданВЕГАИС;
	//
	//Элементы.ТоварыПоДаннымПоставщикаПоискПоШтрихкоду.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыПоДаннымПоставщикаПоискПоМагнитномуКоду.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыПоДаннымПоставщикаЗагрузитьДанныеИзТСД.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыПоДаннымПоставщикаПодобратьТовары.Доступность = НЕ АктПереданВЕГАИС;
	//Элементы.ТоварыПоДаннымПоставщикаЗаполнитьТоварыПоДаннымПоставщикаПоФакту.Доступность = НЕ АктПереданВЕГАИС;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьДоступностьЭлементовТабличнойЧастиТоварыКлиент(ТекущиеДанные)
	
	ДоступностьЭлементовСтроки = Ложь;
	ДоступностьРедактированияНоменклатуры = Ложь;
	ДоступностьРедактированияХарактеристики = Ложь;
	
	Если ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда // если это не алкогольная строка, доступно
		ДоступностьЭлементовСтроки = Истина;
		ДоступностьРедактированияНоменклатуры = Истина;
		ДоступностьРедактированияХарактеристики = Истина;
	Иначе
		Если ТекущиеДанные.Номенклатура.Пустая() Тогда
			ДоступностьРедактированияНоменклатуры = Истина;
		КонецЕсли;
		Если ТекущиеДанные.Характеристика.Пустая() Тогда
			ДоступностьРедактированияХарактеристики = Истина;
		КонецЕсли;
		Если Объект.ЕстьРасхождения Тогда
			ДоступностьЭлементовСтроки = не АктПереданВЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	МассивДоступныхЭлементовСтроки = Новый Массив();
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыЦена);
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСумма);
	//Zorius
	МассивДоступныхЭлементовСтроки.Добавить(элементы.товары.ПодчиненныеЭлементы.ТоварыСуммаВсего);
	МассивДоступныхЭлементовСтроки.Добавить(элементы.товары.ПодчиненныеЭлементы.ТоварыСуммаСНДС);
	//Zorius
	//МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСтавкаНДС);
//	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСуммаНДС);
	//Zorius
	
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр = Не ДоступностьРедактированияНоменклатуры;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Не ДоступностьРедактированияХарактеристики;
	Для Каждого ЭлементТаблицы Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		Если ЭлементТаблицы = Элементы.ТоварыНоменклатура или ЭлементТаблицы = Элементы.ТоварыХарактеристика Тогда
			Продолжить;
		КонецЕсли;
		Если МассивДоступныхЭлементовСтроки.Найти(ЭлементТаблицы) = Неопределено Тогда
			ЭлементТаблицы.ТолькоПросмотр = Не ДоступностьЭлементовСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция УстановитьДоступностьЭлементовТабличнойЧастиТоварыПоДаннымПоставщикаКлиент(ТекущиеДанные)
	
	ДоступностьРедактированияХарактеристики = Ложь;
	Если ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		ДоступностьЭлементовСтроки = Истина;
	Иначе
		Если ТекущиеДанные.Характеристика.Пустая() Тогда
			ДоступностьРедактированияХарактеристики = не АктПереданВЕГАИС;
		КонецЕсли;
		ДоступностьЭлементовСтроки = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыПоДаннымПоставщикаХарактеристика.ТолькоПросмотр = Не ДоступностьРедактированияХарактеристики;
	Для Каждого ЭлементТаблицы Из Элементы.ТоварыПоДаннымПоставщика.ПодчиненныеЭлементы Цикл
		Если ЭлементТаблицы = Элементы.ТоварыПоДаннымПоставщикаХарактеристика Тогда
			Продолжить;
		КонецЕсли;
		ЭлементТаблицы.ТолькоПросмотр = Не ДоступностьЭлементовСтроки;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИС()
	
	Если НапоминаниеЕГАИСВыведено < ТекущаяДата() - 3*60 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания()
	
	ТекстНапоминания = ПолучитьТекстНапоминания();
	
	Если ЗначениеЗаполнено(ТекстНапоминания) Тогда
		ПоказатьОповещениеПользователя("Обмен данными с ЕГАИС:",, ТекстНапоминания, БиблиотекаКартинок.Изменить);
		НапоминаниеЕГАИСВыведено = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНапоминания()
	
	Возврат ИнтеграцияЕГАИСРТ.ПолучитьНапоминаниеЕГАИС(Объект);
	
КонецФункции

#КонецОбласти

#Область ГИСМ

// ИнтеграцияГИСМ

&НаСервере
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер()
	
	ИнтеграцияГИСМ_РТ.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентРТ.ТекстУведомленияОбИмпортеВвозеИзЕАЭСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

















//Zorius
&НаКлиенте
Процедура ххх_ПроверитьНаличиеНоменклатуры(Команда)
	Штрихкод = "";
	ТекстЗаголовка = НСтр("ru = 'Введите штрихкод'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкодуНоменклатуры", ЭтаФорма);	
	ПоказатьВводСтроки(ОписаниеОповещения, Штрихкод, ТекстЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкодуНоменклатуры(Штрихкод, ДополнительныеПараметры) Экспорт	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкод(Штрихкод);
		Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество()>0 тогда
			УстановитьСтатусПоиска(СтруктураПараметровКлиента.ЗначенияПоиска[0].Номенклатура);
		Иначе
			Сообщить("Номенклатура не найдена!");
		КонецЕсли;
		ххх_ПроверитьНаличиеНоменклатуры("");		
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПолученШтрихкод(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции


Процедура УстановитьСтатусПоиска(Номенклатура)
	Отбор=Новый структура;
	Отбор.Вставить("Номенклатура",Номенклатура);
	Товары=РеквизитФормыВЗначение("Объект.Товары");
	Строки=Товары.НайтиСтроки(Отбор);
	Для каждого стр из строки Цикл
		стр.СтатусПоискаНаличияНоменклатуры=Истина;
		Сообщить("Найдена номенклатура в строке: "+стр.номерСтроки);
	КонецЦикла;
КонецПроцедуры


функция получитьПапкуПоставщики()
	возврат справочники.ххх_Справочник.КонтрагентыПапкаПОСТАВЩИКИ.Значение;
КонецФункции

&НаКлиенте
Процедура ТоварыКоличествоУпаковок1ПриИзменении(Элемент)
	ПриИзмененииТоварыКоличестваУпаковок();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСчетФактуру(Команда)
	ВвестиСчетФактуруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВвестиСчетФактуруНаСервере()
	ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Объект.НомерСчетаФактуры,
			Объект.ДатаСчетаФактуры);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина))
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЦенамЗакупаНаСервере()
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("тз",объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Розница",Справочники.ххх_Справочник.ЗакупочнаяЦена.Значение);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.Номенклатура КАК Номенклатура,
	             |	тз.НомерСтроки КАК НомерСтроки
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	йцу.Номенклатура КАК Номенклатура,
	             |	йцу.НомерСтроки КАК НомерСтроки
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &Розница) КАК ЦеныНоменклатурыСрезПоследних
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ йцу КАК йцу
	             |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = йцу.Номенклатура";
				 
	Выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() цикл
		Объект.товары[выборка.НомерСтроки-1].цена=выборка.цена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦенамЗакупа(Команда)
	ЗаполнитьПоЦенамЗакупаНаСервере();
	Для каждого стр из Объект.Товары Цикл
		ТекущаяСтрока = стр;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбновитьИтоговыеПоказатели();
		
		РассчитатьОтклонениеЦен(ТекущаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоАкцизнойМарке()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоАкцизнойМарке", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаПоискаПоАкцизнойМарке",,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ОповещениеПоискаПоАкцизнойМарке(Итог,куйня) Экспорт
	Если значениеЗаполнено(Итог) и значениеЗаполнено(Итог.Номка) и Не значениеЗаполнено(Итог.штрихКод) Тогда
		Сообщить("У номенклатуры: "+Строка(Итог.Номка)+" не найден штрихкод!");
	КонецЕсли;

	стр=Неопределено;
	
	Если Значениезаполнено(Итог) Тогда
		Если Не ЗначениеЗаполнено(Объект.АкцизныеМарки.НайтиСтроки(Новый структура("АкцизнаяМарка",итог.АкцизнаяМарка))) Тогда
			//строкаАкцизныхМарок=Объект.ххх_АкцизныеМарки.Добавить();
			//строкаАкцизныхМарок.АкцизнаяМарка=итог.АкцизнаяМарка;
		Иначе
			Сообщить("Нельзя считывать одну и ту же акцизную марку!!!");
			Возврат;
		КонецЕсли;
		НомкаПоДаннымПоставщика=Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("Номенклатура",итог.номка));
		Если ЗначениеЗаполнено(Итог.Номка) и ЗначениеЗаполнено(НомкаПоДаннымПоставщика) Тогда
			строки=Объект.товары.НайтиСтроки(Новый структура("АлкогольнаяПродукция",итог.АлкоНомка));		
			стр=?(ЗначениеЗаполнено(строки),
				ПолучитьСтрокуВЗависимостиОтТогоЧтоХватаетЛиКоличестваПриСверкеПоИдентификаторуСтроки(строки),
				неопределено);
			Если стр<>Неопределено Тогда
				стр.КоличествоУпаковок=стр.КоличествоУпаковок+1;
				стр.Количество=стр.Количество+1;
			Иначе
				Если Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("АлкогольнаяПродукция",итог.АлкоНомка)).количество()=0 Тогда
					сообщить("По коду ФСРАР: "+итог.Алкокод+" не найдена номенклатура в накладной ЕГАИС");
				Иначе
					стрПоДаннымПоставщика=Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("АлкогольнаяПродукция",итог.АлкоНомка))[0];  
					стр=Объект.товары.добавить();
					стр.Номенклатура=итог.номка;
					стр.КоличествоУпаковок=1;	
					стр.Количество=1;
					стр.АлкогольнаяПродукция=стрПоДаннымПоставщика.АлкогольнаяПродукция;
					стр.ИдентификаторСтроки=стрПоДаннымПоставщика.ИдентификаторСтроки;
					стр.ИдентификаторУпаковки=стрПоДаннымПоставщика.ИдентификаторУпаковки;
					стр.ДатаРозлива=стрПоДаннымПоставщика.ДатаРозлива;
					стр.маркируемый=Итог.Маркируемый;
				КонецЕсли;
			КонецЕсли;
			попытка
				стр.ПолучитьИдентификатор();
				Элементы.Товары.ТекущаяСтрока=стр.ПолучитьИдентификатор();
				ТоварыНоменклатураПриИзменении("");	
			исключение
			КонецПопытки;
		ИначеЕсли не ЗначениеЗаполнено(НомкаПоДаннымПоставщика) Тогда
			Сообщить("Данной позиции нет в ТТН из ЕГАИСа! "+Итог.Алкокод);
		Иначе
			Сообщить("Не найдена связка номенклатура с алкокодом: "+Итог.Алкокод+". Обратитесь к менеджерам");
		КонецЕсли;
		
		Если не стр=неопределено Тогда
			строкаАкцизныхМарок=Объект.АкцизныеМарки.Добавить();
			строкаАкцизныхМарок.АкцизнаяМарка=итог.АкцизнаяМарка;
			строкаАкцизныхМарок.СправкаБ=НайтиБСправкуВТТН(стр.ИдентификаторСтроки);
			строкаАкцизныхМарок.ИдентификаторСтроки=стр.ИдентификаторСтроки;
		//	Если Не ЗначениеЗаполнено(строкаАкцизныхМарок.СправкаБ) Тогда
		//		Объект.ххх_АкцизныеМарки.Удалить(строкаАкцизныхМарок.ПолучитьИдентификатор());
		//	КонецЕсли;
		//Иначе
		//	Объект.ххх_АкцизныеМарки.Удалить(строкаАкцизныхМарок.ПолучитьИдентификатор());
		КонецЕсли;
		НайтиПоАкцизнойМарке();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуВЗависимостиОтТогоЧтоХватаетЛиКоличестваПриСверкеПоИдентификаторуСтроки(строки)
	Для каждого стр из строки цикл
		строкиПоДаннымПоставщика=Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("ИдентификаторСтроки",стр.ИдентификаторСтроки));
		если строкиПоДаннымПоставщика[0].КоличествоУпаковок>стр.КоличествоУпаковок Тогда
			стр.ИдентификаторСтроки=строкиПоДаннымПоставщика[0].ИдентификаторСтроки;
			возврат стр;
		Иначе
			строкиПоДаннымПоставщика=Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(Новый структура("АлкогольнаяПродукция",строки[0].АлкогольнаяПродукция)); 
			Для каждого строкаПоДаннымПоставщика из строкиПоДаннымПоставщика цикл
				Если не ЗначениеЗаполнено(Объект.товары.НайтиСтроки(Новый структура("АлкогольнаяПродукция,ИдентификаторСтроки",строки[0].АлкогольнаяПродукция,строкаПоДаннымПоставщика.ИдентификаторСтроки))) Тогда
					стр1=Объект.товары.добавить();
					стр1.Номенклатура=стр.Номенклатура;
					стр1.АлкогольнаяПродукция=строкаПоДаннымПоставщика.АлкогольнаяПродукция;
					стр1.ИдентификаторСтроки=строкаПоДаннымПоставщика.ИдентификаторСтроки;
					стр1.ИдентификаторУпаковки=строкаПоДаннымПоставщика.ИдентификаторУпаковки;
					стр1.ДатаРозлива=строкаПоДаннымПоставщика.ДатаРозлива;
					стр1.маркируемый=Истина;
					возврат стр1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	вызватьисключение "Количество товара в наклодной меньше, чем вы пытаетесь завести!";
КонецФункции
//Zorius


Процедура ПроставитьДатыРозлива(стр)
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("ид",стр.ИдентификаторСтроки);
	Запрос.УстановитьПараметр("ТТН",Объект.ТТНВходящаяЕГАИС);
	Запрос.Текст="ВЫБРАТЬ
	             |	ТТНВходящаяЕГАИСТовары.СправкаБ.НомерСправкиА КАК СправкаБНомерСправкиА,
	             |	ТТНВходящаяЕГАИСТовары.СправкаБ КАК СправкаБ
	             |ПОМЕСТИТЬ Асправка
	             |ИЗ
	             |	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	             |ГДЕ
	             |	ТТНВходящаяЕГАИСТовары.Ссылка = &ттн
	             |	И ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки = &ид
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	СправкаБНомерСправкиА
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СправкиАЕГАИС.ДатаРозлива КАК ДатаРозлива,
	             |	Асправка.СправкаБ КАК СправкаБ
	             |ИЗ
	             |	Асправка КАК Асправка
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправкиАЕГАИС КАК СправкиАЕГАИС
	             |		ПО Асправка.СправкаБНомерСправкиА = СправкиАЕГАИС.РегистрационныйНомер
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СправкиАЕГАИС.ДатаРозлива,
	             |	Асправка.СправкаБ";
	выборка=запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		стр.ДатаРозлива=выборка.ДатаРозлива;
	КонецЕсли;
	
КонецПроцедуры





функция НайтиБСправкуВТТН(ид)
	тз=Объект.ТТНВходящаяЕГАИС.Товары;
	возврат тз.Найти(ид,"ИдентификаторСтроки").СправкаБ;
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьАкцизныеМарки(Команда)
	
	Если не МожноЗафиксироватьАкцизныеМарки()Тогда
		сообщить("отсутствует положительный ответ от поставщика! Прежде чем фиксировать акцизы, необходимо подтвердит ТТН.");
		возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность Тогда
		Сообщить("Данные документа были изменены. Перед отправкой в ЕГАИС необходимо записать документ!");
		возврат;
	КонецЕсли;
	
	Объект.ххх_АкцизныеМаркиЗафиксированы=истина;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИС", ЭтотОбъект);
	
	ПараметрыПередачиВЕГАИС = ПараметрыПередачиВЕГАИС(Объект.Ссылка);
	
	ПараметрыПередачиВЕГАИС.ВидДокумента=ВидДокументаФиксацияАкцизов();
	
	Если НЕ ПараметрыПередачиВЕГАИС.Отказ Тогда
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ПараметрыПередачиВЕГАИС.ВидДокумента);
		ВходныеПараметры.ДокументСсылка = ПараметрыПередачиВЕГАИС.ДокументСсылка;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(ОбработчикОповещения, ПараметрыПередачиВЕГАИС.ВидДокумента, ВходныеПараметры);
	КонецЕсли;

КонецПроцедуры

функция МожноЗафиксироватьАкцизныеМарки()
	
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) и 
		(Объект.ТТНВходящаяЕГАИС.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения или
		Объект.ТТНВходящаяЕГАИС.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений) Тогда
		возврат истина;
	Иначе
		возврат ложь;
	КонецЕсли;
	
КонецФункции


Функция ВидДокументаФиксацияАкцизов()
	возврат перечисления.ВидыДокументовЕГАИС.ххх_АктФиксацииМарок;
КонецФункции

&НаКлиенте
Процедура РазфиксироватьАкцизныеМарки()
	
	Если ЭтотОбъект.Модифицированность Тогда
		Сообщить("Данные документа были изменены. Перед отправкой в ЕГАИС необходимо записать документ!");
		возврат;
	КонецЕсли;
	
	Объект.ххх_АкцизныеМаркиЗафиксированы=истина;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИС", ЭтотОбъект);
	
	ПараметрыПередачиВЕГАИС = ПараметрыПередачиВЕГАИС(Объект.Ссылка);
	
	ПараметрыПередачиВЕГАИС.ВидДокумента=ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ххх_АктРазфиксацииМарок");
	
	Если НЕ ПараметрыПередачиВЕГАИС.Отказ Тогда
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ПараметрыПередачиВЕГАИС.ВидДокумента);
		ВходныеПараметры.ДокументСсылка = ПараметрыПередачиВЕГАИС.ДокументСсылка;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(ОбработчикОповещения, ПараметрыПередачиВЕГАИС.ВидДокумента, ВходныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоАкцизнойМарке(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоАкцизнойМаркеУдаление", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ххх_ФормаПоискаПоАкцизнойМарке",,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ОповещениеПоискаПоАкцизнойМаркеУдаление(Итог,куйня) Экспорт

	УдалитьСтрокиПоАкцизу(итог)
	
КонецПроцедуры

Процедура УдалитьСтрокиПоАкцизу(итог)

	Если Значениезаполнено(Итог) Тогда
		//ххх_АкцизныеМарки=Объект.ххх_АкцизныеМарки.Выгрузить();
		//СтрокаМарок=ххх_АкцизныеМарки.Найти(итог.АкцизнаяМарка);
		СтрокаМарок=Объект.АкцизныеМарки.НайтиСтроки(Новый структура("АкцизнаяМарка",итог.АкцизнаяМарка));
		Если СтрокаМарок.количество()>0 Тогда
			СтрокаМарок=СтрокаМарок[0];
			//товары=Объект.Товары.Выгрузить();
			//СтрокаТовары=товары.найти(СтрокаМарок.ИдентификаторСтроки);
			СтрокаТоваров=Объект.Товары.НайтиСтроки(Новый структура("ИдентификаторСтроки",СтрокаМарок.ИдентификаторСтроки))[0];
			Если строкаТоваров.количество>1 Тогда
				строкаТоваров.количество=строкаТоваров.количество-1;
				строкаТоваров.КоличествоУпаковок=строкаТоваров.количество;
				Объект.АкцизныеМарки.Удалить(Объект.ххх_АкцизныеМарки.индекс(СтрокаМарок));
			Иначе
				Объект.Товары.Удалить(Объект.Товары.индекс(строкаТоваров));
				Объект.АкцизныеМарки.Удалить(Объект.ххх_АкцизныеМарки.индекс(СтрокаМарок));
			КонецЕсли;
		Иначе
			Сообщить("Данная марка отсутствует в накладной!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	






























