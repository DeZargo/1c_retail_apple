#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получение данных для формирования электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.РеализацияТоваровУслуг - ссылка на документ.
// 
// Возвращаемое значение:
//  Структура - структура данных для печати.
//
Функция ПолучитьДанныеДляЭД(СсылкаНаОбъект) Экспорт
	
	СсылкаНаОбъектОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	
	Если ЗначениеЗаполнено(СсылкаНаОбъектОснование) 
		И ТипЗнч(СсылкаНаОбъектОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Ссылка.Контрагент КАК Владелец,
		|	Товары.ИдентификаторНоменклатурыПоставщика КАК Идентификатор,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъектОснование);
		ТаблицаОтбора = Запрос.Выполнить().Выгрузить();
		
		МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
		ОбменСКонтрагентами.СоздатьВременнуюТаблицуСоответствияНоменклатуры(ТаблицаОтбора, "втНоменклатураКонтрагента", МенеджерТаблиц);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура.Код КАК НоменклатураКод,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.Артикул, Товары.Номенклатура.Артикул) КАК НоменклатураАртикул,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.Наименование, Товары.Номенклатура.Наименование) КАК НоменклатураНаименование,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиница,
		|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмерения, ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
		|			ИНАЧЕ Товары.Упаковка
		|		КОНЕЦ) КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
		|		ИНАЧЕ Товары.Упаковка.Наименование
		|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмеренияКод, ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
		|			ИНАЧЕ ""0000""
		|		КОНЕЦ) КАК ЕдиницаИзмеренияКод,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмеренияКод, ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
		|			ИНАЧЕ ""0000""
		|		КОНЕЦ) КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика.Наименование) КАК ХарактеристикаНаименование,
		|	Товары.Номенклатура КАК НоменклатураДляМОТП,
		|	Товары.Характеристика КАК ХарактеристикаДляМОТП,
		|	&ПустаяСерия КАК СерияДляМОТП,
		|	Товары.КоличествоУпаковок КАК Количество,
		|	Товары.Количество КАК МассаНетто,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	0 КАК СуммаСкидки,
		|	0 КАК ПроцентСкидки,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
		|			ТОГДА Товары.Сумма
		|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|	КОНЕЦ КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
		|			ТОГДА Товары.Сумма - Товары.СуммаНДС
		|		ИНАЧЕ Товары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ВЫБОР
		|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
		|			ТОГДА Товары.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	КОНЕЦ КАК НоменклатураИБ,
		|	ВЫБОР
		|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
		|			ТОГДА Товары.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК ХарактеристикаИБ,
		|	ВЫБОР
		|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
		|			ТОГДА Товары.Упаковка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК УпаковкаИБ,
		|	Товары.НомерГТД КАК НомерГТД,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА &СтранаПоУмолчаниюКод
		|		ИНАЧЕ Товары.Номенклатура.СтранаПроисхождения.Код
		|	КОНЕЦ КАК СтранаПроисхожденияКод,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА &СтранаПоУмолчанию
		|		ИНАЧЕ Товары.Номенклатура.СтранаПроисхождения.Наименование
		|	КОНЕЦ КАК СтранаПроисхожденияНаименование,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.Идентификатор, """") КАК ИдентификаторНоменклатурыПоставщика
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагента КАК втНоменклатураКонтрагента
		|		ПО Товары.Номенклатура = втНоменклатураКонтрагента.Номенклатура
		|			И Товары.Характеристика = втНоменклатураКонтрагента.Характеристика
		|			И Товары.Упаковка = втНоменклатураКонтрагента.Упаковка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.ИдентификаторНоменклатурыПоставщика = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура.Код,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.Артикул, Товары.Номенклатура.Артикул),
		|	ЕСТЬNULL(втНоменклатураКонтрагента.Наименование, Товары.Номенклатура.Наименование),
		|	Товары.Номенклатура,
		|	Товары.Номенклатура.ТипНоменклатуры,
		|	Товары.Номенклатура.ЕдиницаИзмерения,
		|	Товары.Номенклатура.ЕдиницаИзмерения,
		|	Товары.Номенклатура.ЕдиницаИзмерения.Код,
		|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование,
		|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное,
		|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмерения, ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
		|			ИНАЧЕ Товары.Упаковка
		|		КОНЕЦ),
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
		|		ИНАЧЕ Товары.Упаковка.Наименование
		|	КОНЕЦ,
		|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмеренияКод, ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
		|			ИНАЧЕ ""0000""
		|		КОНЕЦ),
		|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмеренияКод, ВЫБОР
		|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
		|			ИНАЧЕ ""0000""
		|		КОНЕЦ),
		|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика),
		|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика.Наименование),
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	&ПустаяСерия,
		|	Товары.КоличествоУпаковок,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	0,
		|	0,
		|	Товары.СтавкаНДС,
		|	Товары.Ссылка.ЦенаВключаетНДС,
		|	Товары.СуммаНДС,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
		|			ТОГДА Товары.Сумма
		|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
		|			ТОГДА Товары.Сумма - Товары.СуммаНДС
		|		ИНАЧЕ Товары.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
		|			ТОГДА Товары.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
		|			ТОГДА Товары.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
		|			ТОГДА Товары.Упаковка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ,
		|	Товары.НомерГТД,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА &СтранаПоУмолчаниюКод
		|		ИНАЧЕ Товары.Номенклатура.СтранаПроисхождения.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА &СтранаПоУмолчанию
		|		ИНАЧЕ Товары.Номенклатура.СтранаПроисхождения.Наименование
		|	КОНЕЦ,
		|	Товары.ИдентификаторНоменклатурыПоставщика
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагента КАК втНоменклатураКонтрагента
		|		ПО Товары.ИдентификаторНоменклатурыПоставщика = втНоменклатураКонтрагента.Идентификатор
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.ИдентификаторНоменклатурыПоставщика <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
		|	ВозвратТоваровПоставщику.Номер КАК Номер,
		|	ВозвратТоваровПоставщику.Дата КАК Дата,
		|	ВозвратТоваровПоставщику.Организация КАК Организация,
		|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
		|	ВозвратТоваровПоставщику.Номер КАК НомерПоДаннымПоставщика,
		|	ВозвратТоваровПоставщику.Дата КАК ДатаПоДаннымПоставщика,
		|	"""" КАК Грузоотправитель,
		|	"""" КАК Грузополучатель,
		|	"""" КАК АдресДоставки,
		|	"""" КАК АдресДоставкиЗначенияПолей,
		|	"""" КАК Перевозчик,
		|	"""" КАК НомерТранспортнойНакладной,
		|	"""" КАК ДатаТранспортнойНакладной,
		|	"""" КАК СведенияОТранспортировкеИГрузе,
		|	"""" КАК ДатаОтгрузки,
		|	ВозвратТоваровПоставщику.СуммаДокумента КАК СуммаДокумента,
		|	ВозвратТоваровПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВозвратТоваровПоставщику.Комментарий КАК ДополнительнаяИнформация,
		|	ВозвратТоваровПоставщику.ДокументОснование КАК ДокументОснование,
		|	&ВалютаКод КАК ВалютаКод,
		|	&Валюта КАК Валюта,
		|	ВозвратТоваровПоставщику.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	"""" КАК НомерСчета,
		|	&Доставка КАК СпособДоставки
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокМаркируемойПродукции.Ссылка           КАК Ссылка,
		|	ШтрихкодыУпаковокМаркируемойПродукции.ШтрихкодУпаковки КАК Штрихкод
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК ШтрихкодыУпаковокМаркируемойПродукции
		|ГДЕ
		|	ШтрихкодыУпаковокМаркируемойПродукции.Ссылка В (&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъектОснование);
		Запрос.УстановитьПараметр("ВалютаКод", НСтр("ru = '643'"));
		Запрос.УстановитьПараметр("Валюта", НСтр("ru = 'руб.'"));
		Запрос.УстановитьПараметр("Доставка", НСтр("ru = 'Доставка'"));
		Запрос.УстановитьПараметр("СтранаПоУмолчанию", Справочники.СтраныМира.Россия.Наименование);
		Запрос.УстановитьПараметр("СтранаПоУмолчаниюКод", Справочники.СтраныМира.Россия.Код);
		Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаТоваров = МассивРезультатов[0].Выбрать();
		ВыборкаШапки = МассивРезультатов[1].Выбрать();
		
		ШтрихкодыУпаковок = МассивРезультатов[2].Выгрузить();
		Маркировка = ЭлектронноеВзаимодействиеМОТП.ЧастичноеСодержимое(ШтрихкодыУпаковок);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ВыборкаШапки",   ВыборкаШапки);
		СтруктураДанных.Вставить("ВыборкаТоваров", ВыборкаТоваров);
		СтруктураДанных.Вставить("Маркировка", Маркировка);
		
		Возврат СтруктураДанных;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция находит счета-фактуры заданного документа.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти счет-фактуру.
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура.
//	РеквизитыСчетФактуры - Структура - Возвращаемый. Данные счета-фактуры (Ссылка, Номер, Дата, Организация, Валюта).
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных счетов-фактур (Ссылка, Номер, Дата, Организация, Валюта).
//
Функция СчетаФактурыПоОснованию(Основание, Организация = Неопределено, РеквизитыСчетаФактуры = Неопределено, Проведен = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.Валюта КАК Валюта
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &Основание
	|	И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|	И СчетФактураВыданный.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.НомерИсправления УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(НЕ СчетФактураВыданный.ПометкаУдаления)", "СчетФактураВыданный.Проведен");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, ТаблицаСчетовФактур[0]);
	КонецЕсли;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

// Помечает на удаление счет-фактуру, если:
// - организация счета-фактуры не соответствует указанной,
// - или если документ-основание помечен на удаление.
//
// Параметры:
//	Основание		- ДокументСсылка - документ-основание счета-фактуры.
//	ПометкаУдаления - Булево - пометка удаления документа-основания.
//	Организация		- СправочникСсылка.Организации - Организация, для которой формируется счет-фактура.
//
Процедура ПроверитьРеквизитыСчетФактуры(Основание, ПометкаУдаления, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСчетовФактур = СчетаФактурыПоОснованию(Основание, Организация);
	
	Для Каждого РеквизитыСчетаФактуры Из ТаблицаСчетовФактур Цикл
		
		Если (Организация <> Неопределено И РеквизитыСчетаФактуры.Организация <> Организация)
		 ИЛИ ПометкаУдаления Тогда
			ДокументОбъект = РеквизитыСчетаФактуры.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//// Возвращает реквизиты исправляемого счета-фактуры.
////
//// Параметры:
////	Основание		 - ДокументСсылка - документ-основание счета-фактуры.
////	Организация		 - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура.
////
//// Возвращаемое значение:
////	Структура - Реквизиты счета-фактуры.
////
Функция ИсправляемыйСчетФактураПоОснованию(Ссылка, Основание, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсправляемыйСчетФактура = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Валюта КАК Валюта,
	|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Ссылка <> &Ссылка
	|	И (СчетФактураВыданный.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И НЕ СчетФактураВыданный.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.МоментВремени";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыСчетаФактуры;
	
КонецФункции

//// Заполняет номера и даты платежно-расчетных документов.
////
//// Параметры:
////	ПлатежноРасчетныеДокументы - Табличная часть - заполняемая табличная часть документа.
////	Основание - ДокументСсылка - документ-основание счета-фактуры.
////	Дата - Дата - дата счета-фактуры.
////
Процедура ЗаполнитьПлатежноРасчетныеДокументы(ПлатежноРасчетныеДокументы, Основание, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка.Дата КАК Дата,
	|	ДанныеДокумента.Ссылка.Номер КАК Номер,
	|	0 КАК ДатаВходящегоДокумента,
	|	0 КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
	|	И ДанныеДокумента.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка.Дата,
	|	ДанныеДокумента.Ссылка.Номер,
	|	0,
	|	0
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
	|	И ДанныеДокумента.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("ДокументРасчетовСКонтрагентом", Основание);
	
	ПлатежноРасчетныеДокументы.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		
		Если ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента) Тогда
			НоваяСтрока.НомерПлатежноРасчетногоДокумента = Выборка.НомерВходящегоДокумента;
		Иначе
			НоваяСтрока.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				Выборка.Номер,
				Ложь,
				Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента) Тогда
			НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Выборка.ДатаВходящегоДокумента;
		Иначе
			НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Выборка.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	ПлатежноРасчетныеДокументы.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента", "");
	ПлатежноРасчетныеДокументы.Сортировать("ДатаПлатежноРасчетногоДокумента Возр, НомерПлатежноРасчетногоДокумента Возр");
	
КонецПроцедуры

// Возвращает список кодов видов операций,
//	предусмотренных законодательством.
//
// Возвращаемое значение:
//	СписокЗначений - Список кодов видов операций.
//
Функция СписокКодовВидовОпераций() Экспорт
	
	СписокКодов = Новый СписокЗначений;
	
	СписокКодов.Добавить("01", НСтр("ru='01 Реализованные товары, работы, услуги'"));
	СписокКодов.Добавить("02", НСтр("ru='02 Авансы полученные'"));
	СписокКодов.Добавить("03", НСтр("ru='03 Возврат поставщику'"));
	СписокКодов.Добавить("04", НСтр("ru='04 Реализованные товары, работы, услуги комитента'"));
	СписокКодов.Добавить("05", НСтр("ru='05 Авансы полученные за товары, работы, услуги комитента'"));
	СписокКодов.Добавить("06", НСтр("ru='06 Налоговый агент, статья 161 НК'"));
	СписокКодов.Добавить("07", НСтр("ru='07 Списание за счет прибыли, пп.2 п.1 статьи 146 НК'"));
	СписокКодов.Добавить("08", НСтр("ru='08 Строительно-монтажные работы, пп.3 п.1 статьи 146 НК'"));
	СписокКодов.Добавить("09", НСтр("ru='09 Суммы, связанные с расчетами по оплате, статья 162 НК'"));
	СписокКодов.Добавить("10", НСтр("ru='10 Переданные безвозмездно товары, работы, услуги'"));
	СписокКодов.Добавить("11", НСтр("ru='11 Реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	СписокКодов.Добавить("12", НСтр("ru='12 Авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	СписокКодов.Добавить("13", НСтр("ru='13 Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
	
	Возврат СписокКодов;
	
КонецФункции

// Приводит состояние проведения счета-фактуры в соответствие с документом-основанием.
//
// Параметры:
//	Основание				- Документ - документ-основание счета-фактуры.
//	Проведен 				- Булево - Состояние проведения документа-основания.
//	ТребуетсяСчетФактура	- Булево - Потребность в наличии счета-фактуры для документа-основания.
//
Процедура АктуализироватьСчетФактуру(Основание, Проведен, ТребуетсяСчетФактура = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Проведен И ТребуетсяСчетФактура Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	КонецЕсли;
		
	ТаблицаСчетовФактур = СчетаФактурыПоОснованию(Основание);
	Если ТаблицаСчетовФактур.Количество() > 0 Тогда
		ТаблицаСчетовФактур.Сортировать("Дата Возр")
	КонецЕсли;
	
	Для Каждого РеквизитыСчетаФактуры Из ТаблицаСчетовФактур Цикл
		
		ДокументОбъект = РеквизитыСчетаФактуры.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				,);
		КонецПопытки
	КонецЦикла
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
