
&НаСервере
Процедура КочетовПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	Для каждого стр из Объект.Товары цикл
		Если ЗначениеЗаполнено(стр.номенклатура) Тогда
			продолжить;
		КонецЕсли;
		Запрос=Новый запрос;
		запрос.УстановитьПараметр("АлкогольнаяПродукция",стр.АлкогольнаяПродукция);
		Запрос.Текст="ВЫБРАТЬ
		             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
		             |ИЗ
		             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		             |ГДЕ
		             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция";
		выборка=Запрос.Выполнить().Выбрать();
		ЭтаФорма.Модифицированность=истина;
		Если выборка.Следующий() Тогда
			стр.номенклатура=выборка.номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	НеобходимоВыбратьЗаказТогда(); 
	
	проверитьШтрихкода();
	
КонецПроцедуры


процедура проверитьШтрихкода()
	
	Запрос=новый запрос;
	запрос.УстановитьПараметр("товары",объект.Товары.Выгрузить(,"номенклатура"));
	запрос.Текст="ВЫБРАТЬ
	             |	товары.номенклатура КАК номенклатура
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&товары КАК товары
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.номенклатура КАК номенклатура
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	             |		ПО йцу.номенклатура = Штрихкоды.Владелец
	             |ГДЕ
	             |	Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	
	выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		сообщить("Нет штрихкода у номенклатуры: "+выборка.номенклатура+"!");
	КонецЦикла;
	
	
КонецПроцедуры

процедура НеобходимоВыбратьЗаказТогда()
	
	наб=РегистрыСведений.ххх_НоменклатураВключеннаяВЗаказы.СоздатьНаборЗаписей();
	наб.Прочитать();
	
	запрос=новый Запрос;
	запрос.УстановитьПараметр("Номенклатура",Объект.товары.Выгрузить(,"номенклатура"));
	запрос.УстановитьПараметр("ПоЗаказам",наб.Выгрузить());
	запрос.Текст="ВЫБРАТЬ
	             |	йццу.номенклатура КАК номенклатура
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&Номенклатура КАК йццу
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.номенклатура КАК номенклатура
	             |ИЗ
	             |	йцу КАК йцу
	             |ГДЕ
	             |	йцу.номенклатура В ИЕРАРХИИ(&ПоЗаказам)";
	
	выборка=запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() Тогда	
		НеобходимоВыбратьЗаказТогда=истина;
	Иначе
		НеобходимоВыбратьЗаказТогда=ложь;
	КонецЕСли;
	
КонецПроцедуры

Процедура ЗаполнитьСравнениеСЗаказом()
	
	СравнениеСЗаказом.Очистить();
	
	тов=Объект.Товары.Выгрузить();
	тов.Свернуть("номенклатура","КоличествоФакт,Количество");
	тов.Колонки.Добавить("КоличествоПоЗаказу");
	тов.Колонки.Добавить("ОтклонениеФакт");
	тов.Колонки.Добавить("ОтклонениеНакладная");
	
	
	ЗакТов=Объект.ххх_Заказ.Товары.Выгрузить(,"номенклатура,количество");
	ЗакТов.Свернуть("номенклатура","количество");
	
	Для каждого стр из тов цикл
		
		стрЗак=ЗакТов.Найти(стр.номенклатура);
		Если ЗначениеЗаполнено(стрЗак)Тогда
			стр.КоличествоПоЗаказу=стрЗак.количество;
			стр.ОтклонениеФакт=стр.КоличествоПоЗаказу-стр.КоличествоФакт;
			стр.ОтклонениеНакладная=стр.КоличествоПоЗаказу-стр.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	СравнениеСЗаказом.Загрузить(тов);

КонецПроцедуры             


&НаКлиенте
Процедура КочетовТекстПоступлениеТоваровОбработкаНавигационнойСсылкиВместо(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
	Если "ОткрытьПоступление" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Объект.ДокументОснование);
		
	ИначеЕсли "ОформитьПоступление" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		Записать();
		Если МожноВводитьПоступление() Тогда
			СтандартнаяОбработка = Ложь;
			СоздатьДокументПоступления(Истина);
		Иначе
			Сообщить("Подтвердите ТТН в ЕГАИСе!");
		КонецЕсли;
		
	ИначеЕсли "СвязатьСПоступлением" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		ВызватьИсключение ("Нельзя связывать с поступлением!");
		//СтандартнаяОбработка = Ложь;
		//ВыбратьДокументПоступления(Истина);
		
	КонецЕсли;

КонецПроцедуры


Функция МожноВводитьПоступление() 
	Если ЭтаФорма.СтатусЕГАИС=Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден или 
		ЭтаФорма.СтатусЕГАИС=Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями Тогда
			Возврат истина;
	КонецЕсли;
	Возврат ложь;
КонецФункции

&НаКлиенте
&Вместо("ОбработатьНажатиеНавигационнойСсылки")
Процедура КочетовОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПроверку" Тогда
		
		ДекорацияОтсканироватьТоварыОбработкаНавигационнойСсылки(
			Элементы.ДекорацияОтсканироватьПроверитьАлкогольнуюПродукцию,
			"ОткрытьФормуСканированияИПроверкиАлкогольнойПродукции",
			Ложь);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение" Тогда
		
		Если ЗавершенаПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
			
			ОбработатьНесопоставленнуюНоменклатуру();
			
		Иначе
			Если ВыполняетсяПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
				СообщениеПользователю = НСтр("ru = 'В документе выполняется проверка поступившей алкогольной продукции.'");
			Иначе
				СообщениеПользователю = НСтр("ru = 'В документе не выполнялась проверка поступившей алкогольной продукции.'");
			КонецЕсли;
			СообщениеПользователю = СообщениеПользователю + " " + НСтр("ru = 'Отправка подтверждения возможна только после завершения проверки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной"));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОтменуПроведения" Тогда
		
		Сообщить("Эту кнопку нажимать нельзя!");
		//ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
		//	Объект.Ссылка,
		//	ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения"));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНесопоставленнуюНоменклатуру()
	
	Если ЕстьНесопоставленнаяНоменклатура() Тогда	
		Оповещение=Новый ОписаниеОповещения("ОбработкаОтветаОбработатьНесопоставленнуюНоменклатуру",ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Обнаружена несопоставленная номенклатура, на неё будет составлен акт расхождений. Вы уверены? Если нет, то вам необходимо обратиться к менеджерам, что бы вам связали карточки, принять обновления и перезайти в накладную.",РежимДиалогаВопрос.ДаНет,0);	
	Иначе
		ОбработкаОтветаОбработатьНесопоставленнуюНоменклатуру(КодВозвратаДиалога.Да,"")
	КонецЕсли;
		
КонецПроцедуры




&НаКлиенте
Процедура ОбработкаОтветаОбработатьНесопоставленнуюНоменклатуру(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Если Объект.ЕстьРасхождения Тогда
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучениеАктРасхождений"));
	Иначе
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучениеАктПодтверждения"));
	КонецЕсли;

	
КонецПроцедуры


Функция ЕстьНесопоставленнаяНоменклатура()
	
	Для каждого стр из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(стр.номенклатура) Тогда
			возврат истина;
		КонецЕсли;
		
	КонецЦикла;
	
	возврат ложь;
	
КонецФункции

&НаКлиенте
Процедура Кочетовххх_ЗаказПриИзмененииВместо(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ххх_Заказ) Тогда
		Элементы.ГруппаДокументПоступления.Доступность=истина;
	Иначе
		Элементы.ГруппаДокументПоступления.Доступность=ложь;
	КонецЕсли;
	
	ЗаполнитьСравнениеСЗаказом();

КонецПроцедуры

&НаСервере
&После("ОбработатьОкончаниеПроверкиАлкогольнойПродукции")
Процедура КочетовОбработатьОкончаниеПроверкиАлкогольнойПродукции(АдресВременногоХранилища)
	ЗаполнитьСравнениеСЗаказом();
КонецПроцедуры

&НаКлиенте
Процедура КочетовПриОткрытииПосле(Отказ)
	
	Если НеобходимоВыбратьЗаказТогда Тогда
		Кочетовххх_ЗаказПриИзмененииВместо("");
	Иначе
		Элементы.ххх_Заказ.Видимость=ложь;
	КОнецЕсли;

КонецПроцедуры

&НаКлиенте
&Вместо("СоздатьДокументПоступления")
Процедура КочетовСоздатьДокументПоступления(СопоставлятьКлассификаторы)
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
&Вместо("ОткрытьФормуСканированияАлкогольнойПродукции")
Процедура КочетовОткрытьФормуСканированияАлкогольнойПродукции()
	
	мас=Новый массив;
	Для каждого стр из Объект.Товары цикл
		если не ЗначениеЗаполнено(стр.номенклатура) Тогда
			мас.Добавить(стр.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого эл из мас цикл
		сообщить("В строке №" +эл+" не сопоставлена номенклатура. Обратитесь к менеджерам.");
		возврат;
	КонецЦикла;
	
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина,
		"Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента.ОткрытьФормуСканированияАлкогольнойПродукции");
	
	Параметрыоткрытия = ИнтеграцияЕГАИСКлиент.ПараметрыПроверкиИПодбораАлкогольнойПродукции(Объект.Грузополучатель, Объект.Ссылка);
	ПараметрыОткрытия.РежимПодбораСуществующихУпаковок         = Ложь;
	ПараметрыОткрытия.ПриЗавершенииСохранятьРезультатыПроверки = Истина;
	ПараметрыОткрытия.РедактированиеФормыНедоступно            = ЗавершенаПроверкаИПодбор(Объект.СтатусПроверкиИПодбора);
	
	Если ЗавершенаПроверкаИПодбор(Объект.СтатусПроверкиИПодбора)
		Или Не ЕстьПравоИзменение Тогда
		
		ПараметрыОткрытия.РежимПросмотра                                    = Истина;
		ПараметрыОткрытия.ПроверятьНеобходимостьПеремаркировки              = Ложь;
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки();

	ИначеЕсли ВыполняетсяПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
		
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки();
		
	КонецЕсли;
	
	ОписаниеОповещенияОкончаниеПроверки = Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииПослеЗакрытия", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор,,,
		ОписаниеОповещенияОкончаниеПроверки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);


КонецПроцедуры




















