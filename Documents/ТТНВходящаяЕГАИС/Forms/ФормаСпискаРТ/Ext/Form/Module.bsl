
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	
	Документы.ТТНВходящаяЕГАИС.УстановитьУсловноеОформлениеСтатусаОбработки(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	ИсключаемыеОперации = Новый Массив;
	ИсключаемыеОперации.Добавить(Перечисления.ВидыОперацийТТНВходящейЕГАИС.УдалитьВозвратПоставщику);
	ИсключаемыеОперации.Добавить(Перечисления.ВидыОперацийТТНВходящейЕГАИС.УдалитьРасходнаяНакладная);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ВидОперации",
		ИсключаемыеОперации,
		ВидСравненияКомпоновкиДанных.НеВСписке,
		НСтр("ru='Неиспользуемые виды операций'"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокЗапросовЕГАИС" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПоступлениеТоваров Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПоступлениеТоваров) Тогда
			ПоказатьЗначение(,ТекущаяСтрока.ПоступлениеТоваров);
		ИначеЕсли ТекущаяСтрока.СтатусОбработки <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа")
			И ТекущаяСтрока.СтатусОбработки <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа") Тогда
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("НовоеПоступление", НСтр("ru='Новое поступление'"), Ложь);
			СписокКнопок.Добавить("ВыбратьПоступление", НСтр("ru='Выбрать поступление'"), Ложь);
			СписокКнопок.Добавить("ВыбратьПеремещение", НСтр("ru='Выбрать перемещение'"), Ложь);
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена'"), Ложь);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьСвязатьПоступлениеТоваров_Подтверждение",
					ЭтотОбъект,
					Новый Структура("ТТНСсылка", ТекущаяСтрока.Ссылка)),
					НСтр("ru='Входящую ТТН можно связать с имеющимся поступлением или перемещением или создать новое поступление'"), 
					СписокКнопок);
		ИначеЕсли ТекущаяСтрока.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа")
				ИЛИ ТекущаяСтрока.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа") Тогда
			ПоказатьПредупреждениеПоступлениеНеТребуется();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьТТН(Команда)
	
	ТранспортныйМодуль = ТранспортныйМодуль(Организация, Магазин);
	
	Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Заполните транспортный модуль'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Магазин"    , Магазин);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузкаДокументов_Завершение", ЭтотОбъект);
	ИнтеграцияЕГАИСКлиент.НачатьЗагрузкуДокументов(ОповещениеПриЗавершении, ТранспортныйМодуль,,, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьТТН(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТТН = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументСсылка", ТТН);
	
	ТекстВопроса = НСтр("ru = 'Передать подтверждение накладной в ЕГАИС?'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПодтверждениеТТН_Подтверждение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтТТН(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТТН = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументСсылка", ТТН);
	
	ТекстВопроса = НСтр("ru = 'Передать отказ от накладной в ЕГАИС?'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтказОтТТН_Подтверждение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОтменуПроведения(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТТН = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументСсылка", ТТН);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ЗапросОтменыПроведения_Подтверждение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='Отправить грузоотправителю запрос на отмену проведения ТТН?'"),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		НСтр("ru='Подтверждение запроса'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СтатусыОтказа = Новый СписокЗначений;
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоступлениеТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПоступлениеТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусОбработки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыОтказа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<требуется оформить>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоступлениеТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПоступлениеТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусОбработки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыОтказа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиПередается);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОтменыПроведения_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачатьВыгрузкуДокумента(
			ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН"),
			ДополнительныеПараметры.ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДокументов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	ТекстСообщения = НСтр("ru = 'Загрузка завершена.
								|Загружено документов: %ЗагруженоДокументов%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗагруженоДокументов%", Результат.ЗагруженоДокументов);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказОтТТН_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачатьВыгрузкуДокумента(
			ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН"),
			ДополнительныеПараметры.ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеТТН_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачатьВыгрузкуДокумента(
			ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН"),
			ДополнительныеПараметры.ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыгрузкуДокумента(ВидДокумента, ТТН)
	
	Если НЕ ПроверитьВозможностьОтправки(ТТН) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ПараметрыЗапроса.ДокументСсылка = ТТН;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДокумента", ВидДокумента);
	ДополнительныеПараметры.Вставить("ДокументСсылка", ТТН);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыгрузкаДокумента_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		ОповещениеПриЗавершении,
		ВидДокумента,
		ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаДокумента_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		Элементы.Список.Обновить();
		Если ДополнительныеПараметры.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН") Тогда
			ЗаписатьПоступлениеПриОтказе(ДополнительныеПараметры.ДокументСсылка);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ успешно подтвержден.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковПриИзмененииКлиент(ЗаполнитьОтборы = Ложь)
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер(ЗаполнитьОтборы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписковПриИзмененииСервер(ЗаполнитьОтборы = Ложь)
	
	Если ЗаполнитьОтборы Тогда
		ЗаполнитьОтборы();
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков("Магазин");
	УстановитьОтборДинамическихСписков("Организация");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборы()
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Магазины.Ссылка
		|ИЗ
		|	Справочник.Магазины КАК Магазины";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Магазин = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	ТранспортныйМодуль = ТранспортныйМодуль(Организация, Магазин);
	ЕстьТранспортныйМодуль = ЗначениеЗаполнено(ТранспортныйМодуль);
	
	Если ЗначениеЗаполнено(Магазин)
		И ЗначениеЗаполнено(Организация)
		И ЕстьТранспортныйМодуль Тогда
		Элементы.ЗагрузитьТТН.Доступность = Истина;
	Иначе
		Элементы.ЗагрузитьТТН.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТранспортныйМодуль(Организация, Магазин);
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСРТ.ИспользуемыйТранспортныйМодуль(Организация, Магазин);
	
	Возврат ТранспортныйМодуль;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПоступлениеПриОтказе(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ТТНВходящаяЕГАИС = &ТТНВходящаяЕГАИС";
	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПоступлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоступлениеОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьОтправки(ДокументСсылка)
	
	ИдентификаторЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИдентификаторЕГАИС");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЕГАИС) Тогда
		СтрокаСообщения = НСтр("ru = 'Не заполнен идентификатор ТТН, накладная загружена из ЕГАИС не полностью, передать ее нельзя.'")
			+ Символы.ПС + НСтр("ru = 'Выполните загрузку накладных позже и повторите попытку передачи.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеПоступлениеНеТребуется()
	
	ПоказатьПредупреждение( , НСтр("ru='Поступление товаров для данной ТТН ЕГАИС не требуется.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязатьПоступлениеТоваров_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "НовоеПоступление" Тогда
		
		СоздатьПоступлениеНаОснованииТТН(ДополнительныеПараметры.ТТНСсылка);
		
	ИначеЕсли ОтветНаВопрос = "ВыбратьПоступление" Тогда
		
		СвязатьСПоступлениемТТН(ДополнительныеПараметры.ТТНСсылка);
		
	ИначеЕсли ОтветНаВопрос = "ВыбратьПеремещение" Тогда
		
		СвязатьСПеремещениемТТН(ДополнительныеПараметры.ТТНСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПоступлениемТТН(ТТНВходящаяЕГАИС)
	
	СтруктураОтбора = СтруктураОтбораПоступлений(ТТНВходящаяЕГАИС);
	
	ОткрытьФорму(
			"Документ.ПоступлениеТоваров.ФормаВыбора",
			Новый Структура("Отбор", СтруктураОтбора),
			ЭтотОбъект,
			,,, Новый ОписаниеОповещения("СвязатьСПоступлениемТТН_Завершение", ЭтотОбъект, Новый Структура("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС)));
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПоступлениемТТН_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СвязатьСПоступлениемТТННаСервере(ДополнительныеПараметры.ТТНВходящаяЕГАИС, Результат);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СвязатьСПоступлениемТТННаСервере(ТТНВходящаяЕГАИС, ПоступлениеТоваров)
	
	// поиск ранее имевшихся связей
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ТТНВходящаяЕГАИС = &ТТНВходящаяЕГАИС
	|	И НЕ ПоступлениеТоваров.Ссылка = &ПоступлениеТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.ТТНВходящаяЕГАИС = &ТТНВходящаяЕГАИС";
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПоступлениеТоваров", ПоступлениеТоваров);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПоступлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПоступлениеОбъект.ТТНВходящаяЕГАИС = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
			Попытка
				ПоступлениеОбъект.Записать();
				ШаблонСообщения = НСтр("ru = 'Удалена связь %1 c %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТТНВходящаяЕГАИС, ПоступлениеОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// создание новой связи
	ПоступлениеОбъект = ПоступлениеТоваров.ПолучитьОбъект();
	ПоступлениеОбъект.ТТНВходящаяЕГАИС = ТТНВходящаяЕГАИС;
	ПоступлениеОбъект.ЗаполнитьТоварыПоступленияПоТТН();
	Попытка
		ПоступлениеОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура СвязатьСПеремещениемТТН(ТТНВходящаяЕГАИС)
	
	СтруктураОтбора = СтруктураОтбораПеремещений(ТТНВходящаяЕГАИС);
	
	ОткрытьФорму(
			"Документ.ПеремещениеТоваров.ФормаВыбора",
			Новый Структура("Отбор", СтруктураОтбора),
			ЭтотОбъект,
			,,, Новый ОписаниеОповещения("СвязатьСПеремещениемТТН_Завершение", ЭтотОбъект, Новый Структура("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС)));
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПеремещениемТТН_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СвязатьСПеремещениемТТННаСервере(ДополнительныеПараметры.ТТНВходящаяЕГАИС, Результат);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СвязатьСПеремещениемТТННаСервере(ТТНВходящаяЕГАИС, ПеремещениеТоваров)
	
	// поиск ранее имевшихся связей
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ТТНВходящаяЕГАИС = &ТТНВходящаяЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.ТТНВходящаяЕГАИС = &ТТНВходящаяЕГАИС
	|	И НЕ ПеремещениеТоваров.Ссылка = &ПеремещениеТоваров";
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПеремещениеТоваров", ПеремещениеТоваров);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПеремещениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПеремещениеОбъект.ТТНВходящаяЕГАИС = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
			Попытка
				ПеремещениеОбъект.Записать();
				ШаблонСообщения = НСтр("ru = 'Удалена связь %1 c %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТТНВходящаяЕГАИС, ПеремещениеОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// создание новой связи
	ПеремещениеОбъект = ПеремещениеТоваров.ПолучитьОбъект();
	ПеремещениеОбъект.ТТНВходящаяЕГАИС = ТТНВходящаяЕГАИС;
	Попытка
		ПеремещениеОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаОснованииТТН(ТТНВходящаяЕГАИС)
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.Форма.ФормаДокумента", Новый Структура("Основание", ТТНВходящаяЕГАИС));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураОтбораПоступлений(ТТНВходящаяЕГАИС)
	
	РеквизитыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяЕГАИС, "Организация, Магазин, Грузоотправитель");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТолькоБезТТН_ЕГАИС", Истина);
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", РеквизитыТТН.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Магазин) Тогда
		СтруктураОтбора.Вставить("Магазин", РеквизитыТТН.Магазин);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Грузоотправитель) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", РеквизитыТТН.Грузоотправитель);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОрганизацийЕГАИС.Контрагент
		|ИЗ
		|	РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
		|ГДЕ
		|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтруктураОтбора.Вставить("Контрагент", РезультатЗапроса.Выгрузить()[0].Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОтбораПеремещений(ТТНВходящаяЕГАИС)
	
	РеквизитыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяЕГАИС, "Организация, Магазин, Грузоотправитель");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТолькоБезТТН_ЕГАИС", Истина);
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Организация) Тогда
		СтруктураОтбора.Вставить("ОрганизацияПолучатель", РеквизитыТТН.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Магазин) Тогда
		СтруктураОтбора.Вставить("МагазинПолучатель", РеквизитыТТН.Магазин);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Грузоотправитель) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", РеквизитыТТН.Грузоотправитель);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОрганизацийЕГАИС.Контрагент
		|ИЗ
		|	РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
		|ГДЕ
		|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтруктураОтбора.Вставить("Организация", РезультатЗапроса.Выгрузить()[0].Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

#КонецОбласти