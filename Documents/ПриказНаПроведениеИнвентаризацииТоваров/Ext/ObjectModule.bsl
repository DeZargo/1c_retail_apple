
&Вместо("ОбработкаПроведения")
Процедура КочетовОбработкаПроведения(Отказ, РежимПроведения)
	
	
	ПолеКомпоновки=Новый ПолеКомпоновкиДанных("Номенклатура");
	МассивГрупп=Новый массив;
	Настройки=НастройкиКомпоновкиДанных.получить();		
	Для каждого эл из Настройки.Отбор.Элементы Цикл
		Если эл.ЛевоеЗначение=ПолеКомпоновки Тогда
			Если ТипЗнч(эл.ПравоеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
			Иначе
				Для каждого группа из эл.ПравоеЗначение Цикл
					МассивГрупп.Добавить(группа.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос=Новый запрос;
	//запрос.УстановитьПараметр("мас",МассивГрупп);

	Запрос=новый запрос;
	Запрос.УстановитьПараметр("МассивГрупп",МассивГрупп);
	Запрос.УстановитьПараметр("ДатаПерезаполненияПоУчету",Дата+Константы.ххх_КоличествоЧасовНаРевизию.Получить()*60*60);
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваровТовары.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	             |ГДЕ
	             |	ПоступлениеТоваровТовары.Ссылка.Проведен = ЛОЖЬ
	             |	И ПоступлениеТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	             |	И ПоступлениеТоваровТовары.Номенклатура В ИЕРАРХИИ(&МассивГрупп)
	             |	И ПоступлениеТоваровТовары.Ссылка.Дата <= &ДатаПерезаполненияПоУчету
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПоступлениеТоваровТовары.Ссылка
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Ссылка";
	выборка=Запрос.Выполнить().Выбрать();
	флаг=ложь;
	СтрокаОшибки="";
	Пока выборка.Следующий() Цикл
		СтрокаОшибки=СтрокаОшибки+("Во входящей накладной: "+выборка.ссылка+", присутствует номенклатура учавствующая в текущем пересчете.")+символы.ВК;
		флаг=истина;
	КонецЦикла;
	Если флаг тогда
		отказ=истина;
		ВызватьИсключение СтрокаОшибки+символы.ВК+"Формирование пересчета отменено. Закройте перечисленные накладные, или исключите группу с номенклатурой из отбора в приказе на пересчет товаров";
	КонецЕсли;
		
		
	Если Статус=Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
		
		Оприходование=Документы.ОприходованиеТоваров.НайтиПоРеквизиту("ДокументОснование",Ссылка);
		Если не ЗначениеЗаполнено(Оприходование)Тогда
			Оприходование=Документы.ОприходованиеТоваров.СоздатьДокумент();
		Иначе
			Оприходование=Оприходование.получитьОбъект();
			Оприходование.УстановитьПометкуУдаления(Ложь);
			Оприходование.товары.очистить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
				Оприходование, 
				ЭтотОбъект,
				"Склад, Магазин, Организация");
		Оприходование.АналитикаХозяйственнойОперации=Справочники.ххх_Справочник.АналитикаХозОперОприходованиеПоРезультатамРевизии.Значение;
		Оприходование.Дата=ТекущаяДата();
		Оприходование.ДокументОснование=Ссылка;
		
		Оприходование.ЗаполнитьТабличнуюЧастьТовары();
		Оприходование.Записать(РежимЗаписиДокумента.Проведение);
	
		
		Списание=Документы.СписаниеТоваров.НайтиПоРеквизиту("ДокументОснование",Ссылка);
		Если не ЗначениеЗаполнено(Списание)Тогда
			Списание=Документы.СписаниеТоваров.СоздатьДокумент();
		Иначе
			Списание=Списание.получитьОбъект();
			Списание.УстановитьПометкуУдаления(Ложь);
			Списание.товары.очистить();
		КонецЕсли;

		
		ЗаполнитьЗначенияСвойств(
				Списание, 
				ЭтотОбъект,
				"Склад, Магазин, Организация");
		Списание.АналитикаХозяйственнойОперации=Справочники.ххх_Справочник.АналитикаХозОперСписаниеПоРезультатамРевизии.значение;
		Списание.Дата=ТекущаяДата();
		Списание.ДокументОснование=Ссылка;
		Списание.ЗаполнитьТабличнуюЧастьТовары();
		Списание.Записать(РежимЗаписиДокумента.Проведение);
		
	ИначеЕсли Статус=Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.ВРаботе Тогда		
		
		Оприходование=Документы.ОприходованиеТоваров.НайтиПоРеквизиту("ДокументОснование",Ссылка);
		Если ЗначениеЗаполнено(Оприходование)Тогда
			Оприходование=Оприходование.получитьОбъект();
			Оприходование.установитьПометкуУдаления(Истина);
		КонецЕсли;
		
		Списание=Документы.СписаниеТоваров.НайтиПоРеквизиту("ДокументОснование",Ссылка);
		Если ЗначениеЗаполнено(Списание)Тогда
			Списание=Списание.получитьОбъект();
			Списание.установитьПометкуУдаления(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ОбработкаУдаленияПроведения")
Процедура КочетовОбработкаУдаленияПроведения(Отказ)
	Оприходование=Документы.ОприходованиеТоваров.НайтиПоРеквизиту("ДокументОснование",Ссылка);
	Если ЗначениеЗаполнено(Оприходование)Тогда
		Оприходование=Оприходование.получитьОбъект();
		Оприходование.установитьПометкуУдаления(Истина);
	КонецЕсли;
	
	Списание=Документы.СписаниеТоваров.НайтиПоРеквизиту("ДокументОснование",Ссылка);
	Если ЗначениеЗаполнено(Списание)Тогда
		Списание=Списание.получитьОбъект();
		Списание.установитьПометкуУдаления(Истина);
	КонецЕсли;
КонецПроцедуры

&Перед("ПередЗаписью")
Процедура КочетовПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если не ПараметрыСеанса.АвторизованныйПользователь.ххх_Ревизор и Ответственный.ххх_Ревизор Тогда
		Сообщить("Нельзя редактировать ревизию!");
		отказ=Истина;	
	КонецЕсли;
КонецПроцедуры
	
//	
//КонецПроцедуры

//&После("ПриЗаписи")
//Процедура КочетовОбработкаПроведения(Отказ, РежимПроведения)
//	Если  не УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
//				справочники.ххх_Справочник.РазрешитьПерепроведениеДокументов.Значение, ложь)
//				или ЭтотОбъект.Статус=Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
//				
//					Отказ=Истина;
//					Сообщить("Документ уже посчитан, исправление невозможно.");
//	КонецЕсли;	
//КонецПроцедуры
//	

