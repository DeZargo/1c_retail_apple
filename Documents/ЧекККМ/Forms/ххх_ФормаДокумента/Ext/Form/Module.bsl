#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииПродажа;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииВозврат;

&НаКлиенте
Перем ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Изменение продавца при возврате не предусмотрено.'"));
			Иначе
				Объект.Продавец = СтрокаРезультата.ВладелецКарты;
				Модифицированность = Истина;
			КонецЕсли;
		Иначе
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Изменение дисконтной карты при возврате не предусмотрено.'"));
			Иначе
				Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
				СтруктураРезультат.Вставить("НайденаДисконтнаяКарта", СтрокаРезультата.Карта);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
	//	ОткрытаБлокирующаяФорма = Истина;
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
		Если СтрокаТовара <> Неопределено Тогда
			// Интерфейс ЕГАИС
			ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТовара);
	//		ВвестиАкцизнуюМарку(
	//			СтруктураПараметровКлиента.АктивизироватьСтроку,
	//			СтрокаТовара,
	//			"",
	//			СтруктураПараметровКлиента);
		КонецЕсли;
		
	Иначе
		
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ОбработкаТабличнойЧастиТоварыСервер.СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
		КонецЕсли;
		СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			СтруктураПараметров.Вставить("НеобходимостьВводаАкцизнойМарки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

// Процедура вызывается обработкой оповещения после открытия формы вывода сообщений
// либо непосредственно при исполнении процедур расчета скидок,
// если сообщений для вывода нет.
&НаКлиенте
Процедура ОповещениеРасчетСкидокКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыдатьПодаркиНаВыбор
		И ЗначениеЗаполнено(АдресПодарковНаВыбор) Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыдатьПодаркиНаВыбор", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПодарковНаВыбор);
		ОткрытьФорму("ОбщаяФорма.ПодаркиНаВыбор",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеВыдатьПодаркиНаВыбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыдатьПодаркиНаВыбор(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	ОбновитьИтоговыеПоказатели();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		?(Объект.Ссылка.Пустая(), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)),
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Процедура вызывается обработкой оповещения после ответа на вопрос
// о необходимости отмены проведения документа
// перед оплатой бонусами.
&НаКлиенте
Процедура ОповещениеОплатаБонусамиВопросОбОтменеПроведения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отменить проведение документа'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеСертификатовОплаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПогашениеПодарочныхСертификатов.Очистить();
		УдалитьСтрокуОплатыПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПотеряДанныхОтправленныхВБанк(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокуОплатыПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			// Отмена передачи
			УдалитьОплатуКартой(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОтменыОперацииНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросЗаполнениеПоЗаказу(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьЗаполнениеПоЗаказу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьИОткрытьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Модифицированность = Истина;
		РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры);
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		УправляемыеСкидки = Результат;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
		СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ВывестиСообщения Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
			ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОповещениеРасчетСкидокКлиент();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(Результат);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, "RUB");
		
		ОбновитьИтоговыеПоказатели();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ДобавитьНайденныеПозицииТоваров(РезультатОткрытияФормы);
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораИнформационнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Объект.ДисконтнаяКарта = РезультатОткрытияФормы.ИнформационнаяКарта;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораОплатыЧекаККМ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	НоваяСтрока = Неопределено;
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = РезультатОткрытияФормы;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ДополнительныеПараметры.ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказатели();
	Если ДополнительныеПараметры.Свойство("УстановитьЭквайринговыйТерминалПоУмолчанию") Тогда
		УстановитьЭквайринговыйТерминалПоУмолчанию(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПогашенияПодарочныхСертификатов(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		ПолучитьПогашениеВХранилище(РезультатОткрытияФормы);
		ОбновитьИтоговыеПоказатели();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		
		Если НЕ ПараметрДействия.ИспользоватьБезПодключенияОборудованияЭТ Тогда
			
			ЭтотОбъект.Доступность = Ложь;
				
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
				ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации, Ложь);
		
		Иначе
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводаПодарочныхСертификатов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	АдресВХранилище = ПоместитьПогашениеВХранилище();
	ПараметрыФормы.Вставить("АдресВременногоХранилища_ПогашениеПодарочныхСертификатов", АдресВХранилище);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПогашенияПодарочныхСертификатов", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаТабличнойЧастиПогашениеПодарочныхСертификатов", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	НоваяСтрока = Неопределено;
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	ВидОплатыПлатежнаяКарта = ПолучитьВидОплатыПоТипу(ТипОплаты);
	
	
	Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказатели();
		УстановитьЭквайринговыйТерминалПоУмолчанию(НоваяСтрока);
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		ДополнительныеПараметры.Вставить("УстановитьЭквайринговыйТерминалПоУмолчанию");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыБанковскимКредитом(Результат, ДополнительныеПараметры) Экспорт
	
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит");
	ВидОплатыБанковскийКредит = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	
	Если НЕ ВидОплатыБанковскийКредит = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыБанковскийКредит;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказатели();
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыЧерезТерминал(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			МаксимальнаяСуммаОплатыБезналичными = СуммаВсего - (СуммаБезналичнойОплаты() + СуммаОплатыПодарочнымиСертификатами()) + ТекущаяСтрока.Сумма;
			
			Если МаксимальнаяСуммаОплатыБезналичными <= 0 Тогда
				
				СтрокаСообщения = НСтр("ru = 'Безналичная оплата не требуется'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаСообщения,
					Объект,
					"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
				Возврат;
			КонецЕсли;
			
			
			Если ТекущаяСтрока.Сумма > МаксимальнаяСуммаОплатыБезналичными Тогда
				
				СтрокаСообщения = НСтр("ru = 'Сумма оплаты картой больше возможной суммы безналичной оплаты'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаСообщения,
					Объект,
					"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
				Возврат;
			КонецЕсли;
			
			РасчетнаяСумма = ?(ТекущаяСтрока.Сумма = 0 , МаксимальнаяСуммаОплатыБезналичными, ТекущаяСтрока.Сумма);
			// Передача данных в банк
			ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ТекущаяСтрока, РасчетнаяСумма, МаксимальнаяСуммаОплатыБезналичными)
			
		Иначе
			// Вопрос
			ТекстВопроса = НСтр("ru = 'Данные об оплате уже переданы в банк'") + Символы.ПС; 
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите отменить эту операцию?'"); 
			
			ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			// Передача данных в банк
			УдалитьОплатуКартой(ТекущаяСтрока);
		Иначе
			СтрокаСообщения = НСтр("ru = 'Данные об отмене оплаты в банк уже переданы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,
				Объект,
				"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "]");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеДобавитьОплатуНаличными(Результат, ДополнительныеПараметры) Экспорт
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
	НоваяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
	
	НоваяСтрока.Сумма = 0;
	
	Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
	
	Элементы.Оплата.ИзменитьСтроку();
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыБонусами(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	Иначе
		ОбработатьОплатуБонусами(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводСуммыАгентскогоПлатежа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		РедактируемаяСтрока = ДополнительныеПараметры.РедактируемаяСтрока;
		РедактируемаяСтрока.Цена = Результат;
		РедактируемаяСтрока.КоличествоУпаковок = 1;
		ТоварыКоличествоУпаковокПриИзменении(Неопределено);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		ОбновитьИтоговыеПоказатели();
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// Интерфейс ЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если не ТекущаяСтрока = Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ПереноситьВПродажи = Ложь;
	ТаблицаПодарков = ПолучитьИзВременногоХранилища(Результат);
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
	    НоваяСтрока = Объект.Подарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу Тогда
			ПереноситьВПродажи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереноситьВПродажи Тогда
		КоличествоПеренесенных = 0;
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, , КоличествоПеренесенных);
		Если КоличествоПеренесенных > 0 Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
			СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		РедактированиеТЧТовары = Ложь;
		Возврат;
	КонецЕсли;
	
	НуженПересчетСкидок = Ложь;
	
	ИзмененоКоличествоУпаковок = Ложь;
	Если Не Результат = Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			
			МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
				Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
			КонецЦикла;
			
			СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
			СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
			СтрокаАкцизнаяМарка.КодАкцизнойМарки = Результат;
			
			Если Не СтрокаТЧ.Количество = 1 Тогда
				СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
				СтрокаТЧ.КоличествоУпаковок = 1;
				СтрокаТЧ.Количество = 0;
				ИзмененоКоличествоУпаковок = Истина;
				НуженПересчетСкидок = Истина;
			КонецЕсли;
			Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("АдресВХранилище") Тогда
				КоличествоУпаковокОтсканировано = ЗаполнитьМаркиНаСервере(Результат.АдресВХранилище, ДополнительныеПараметры);
				Если не КоличествоУпаковокОтсканировано = СтрокаТЧ.Количество Тогда
					СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
					СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
					СтрокаТЧ.Количество = 0;
					Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
						Объект.Товары.Удалить(СтрокаТЧ);
						СтрокаТЧ = Неопределено;
					КонецЕсли;
					ИзмененоКоличествоУпаковок = Истина;
					НуженПересчетСкидок = Истина;
				КонецЕсли;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ <> Неопределено и ИзмененоКоличествоУпаковок Тогда
			Если СтрокаТЧ.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			ИначеЕсли СтрокаТЧ.СтатусУказанияСерий <> 0 Тогда
				УказатьСерии("КоличествоУпаковок");
			Иначе
				ТоварыУпаковкаПриИзменении(СтрокаТЧ);
				ПриИзмененииТоварыКоличестваУпаковок(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКлиента")
		И СтрокаТЧ <> Неопределено Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	ИначеЕсли НуженПересчетСкидок Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	РедактированиеТЧТовары = Ложь;
	
	// Интерфейс ЕГАИС
	Если СтрокаТЧ <> Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарокВСтроке(СтрокаТЧ, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа);
	ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.СкидкиХарактеристика.Видимость = ИспользоватьХарактеристики;
	Элементы.БонусныеБаллыКНачислениюХарактеристика.Видимость = ИспользоватьХарактеристики;
	
	ИспользоватьБонусныеПрограммыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		АвтоматическийРасчетСкидок = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
										ПланыВидовХарактеристик.ПраваПользователей.АвтоматическийРасчетСкидокПриРедактированииДокументаПродажи, Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда // Это новый 
			
			Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда // Это новый 
			
			Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	Иначе
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиСервер();
	
	ТолькоПросмотр = ТолькоПросмотр 
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
	
	УстановитьДоступностьКнопокПроведенияСервер();
	
	РабочееМесто = Объект.КассаККМ.РабочееМесто;
	
	НастроитьФормуПоДополнительнымПравам(Ложь);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
	Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	КонтролироватьОстаткиТоваров = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении, Ложь);
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	УстановитьВидимостьИДоступностьЗаказаПокупателя();
	
	УстановитьКомандыВидовОплаты();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	Элементы.ГруппаБонусныеБаллы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	Элементы.ТоварыСуммаСкидкиОплатыБонусом.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	Элементы.ОплатаГруппаБонусы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Элементы.СкидкиКоманднаяПанель.Доступность = Ложь;
		Элементы.ГруппаТоварыСкидкиНаценки.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		Элементы.ОткрытьОтчетОРозничныхПродажах.Видимость = Истина;
		СтруктураОРП = Новый Структура;
		СтруктураОРП.Вставить("Дата");
		СтруктураОРП.Вставить("Номер");
		РеквизитыОРП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, СтруктураОРП);
		ЗаголовокОРП = НСтр("ru = 'Отчет о продажах №%1 от %2'");
		ЗаголовокОРП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ЗаголовокОРП,
							РеквизитыОРП.Номер,
							РеквизитыОРП.Дата);
		Элементы.ОткрытьОтчетОРозничныхПродажах.Заголовок = ЗаголовокОРП;
	Иначе
		Элементы.ОткрытьОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗначениеПеречислениеВидОперацииПродажа = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	ЗначениеПеречислениеВидОперацииВозврат = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		СтрокиИзменены = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТабличнойЧасти);
		Если СтрокиИзменены Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
		
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ФормаОпросаВладельцаКарт" Тогда
		ПриИзмененииДисконтнаяКартаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И ВозможностьВводаПоШК() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
	
	ОбновитьИтоговыеПоказателиСервер();
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	МассивОплатБонусами = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
	Если МассивОплатБонусами.Количество() > 0 Тогда
		ЕстьОплатаБонусами = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если документ проводится, рассчитаем скидки.
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи.РежимЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	ОбновитьИтоговыеПоказателиСервер();
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
																
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЧекККМПродажаПриИзменении(Элемент)
	
	ПриИзмененииЧекККМПродажаСервер();
	Если АвтоматическийРасчетСкидок Тогда
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассаККМСервер();
	
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	УстановитьЭквайринговыйТерминалПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ОбщегоНазначенияКлиент.ДатаСеанса());
		
	КонецЕсли;
	
	ПриИзмененииДисконтнаяКартаСервер();
	Если Элемент <> Неопределено Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Объект.ЧекККМПродажа = "";
	
	ВидОперацииПриИзмененииСервер();
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	
	НастроитьФормуПоДополнительнымПравам(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Интерфейс ЕГАИС
	ДатаПриИзмененииНаСервере();
	
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТоварыВводДополнительнойИнформации(Элемент);
	// Интерфейс ЕГАИС
	Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок 
		И не Элементы.Товары.ТекущиеДанные = Неопределено
		и не Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок = 0 Тогда
		ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ВвестиАкцизнуюМарку(ИдентификаторСтроки, Элементы.Товары.ТекущиеДанные, "КоличествоУпаковок");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		ТоварыВводДополнительнойИнформации(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"           , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ПриИзмененииТоварыКоличестваУпаковок();

	// Интерфейс ЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"           ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров    = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаСкидкиОплатыБонусом    = 0;
		
		ТекущаяСтрока.КлючСвязи                   = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Продавец = Объект.Продавец;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,
				КэшированныеЗначения,
				ПараметрыУказанияСерий,
				Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоговыеПоказатели();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбновитьИтоговыеПоказателиСервер();
	
	Если ПродажаПоЗаказу Тогда
		Если УдаляемыйКлючСвязи > 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
			
			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
				
				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
				
			КонецЦикла;
			УдаляемыйКлючСвязи = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	УдалитьНесвязанныеАкцизы();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если АвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ДобавитьОплатуНаличными();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроцентКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	УстановитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока);
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ВопросОбУдаленииСтрокиОплатыУжеЗадан Тогда
			Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом") 
				  И Объект.ПогашениеПодарочныхСертификатов.Количество() > 0 Тогда
				
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Удаляется оплата подарочным сертификатом, при этом удалятся все сертификаты оплаты. Продолжить?'"); 
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеСертификатовОплаты", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
				
			ИначеЕсли ТекущиеДанные.ДанныеПереданыВБанк Тогда
				
				Отказ = Истина;
				
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
					
					СтрокаСообщения = НСтр("ru = 'Данные об оплате отправлены в банк.'") + Символы.ПС;
					СтрокаСообщения = СтрокаСообщения + НСтр("ru = 'Необходимо отменить операцию.'"); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"ОплатаОплатаЧерезТерминал");
				Иначе
					ТекстВопроса = НСтр("ru = 'Данные об отмене отправлены в банк.'") + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите удалить строку с потерей данных?'");
					
					ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПотеряДанныхОтправленныхВБанк", ЭтотОбъект);
					ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой")
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
		
		ТекущиеДанные.СсылочныйНомер      = "";
		ТекущиеДанные.НомерЧекаЭТ         = "";
		ТекущиеДанные.НомерПлатежнойКарты = "";
		ТекущиеДанные.ДанныеПереданыВБанк = Ложь;
		
	КонецЕсли;
	
	СуммаПродажи = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
	СуммаОплат   = Объект.Оплата.Итог("Сумма");
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ТекущаяСумма  = ТекущаяСтрока.Сумма;
	
	ОплатаБезТекущейСтроки = СуммаОплат - ТекущаяСумма;
	ОстатокОплаты = СуммаПродажи - ОплатаБезТекущейСтроки;
	
	Элементы.ОплатаСумма.СписокВыбора.Очистить();
	
	Если ОстатокОплаты > 0 Тогда
		
		Элементы.ОплатаСумма.СписокВыбора.Добавить(ОстатокОплаты, Формат(ОстатокОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=; ЧГ=3,0"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарки

&НаКлиенте
Процедура ПодаркиЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ПробитьЧекНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура("ВыбиратьНенайденные", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВвестиПодарочныеСертификатыПогашения(Команда)
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеВводаПодарочныхСертификатов");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеВводаПодарочныхСертификатов(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыПлатежнойКартой");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыПлатежнойКартой(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБанковскимКредитом(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыБанковскимКредитом");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыБанковскимКредитом(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОплатыПоДокументуПродажи(Команда)
	
	ЗаполнитьОплатыПоДокументуПродажиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи));
	ОткрытьФорму("ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьРучнуюСкидкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.НазначениеРучнойСкидкиНаценки", ПараметрыДляРучнойСкидки, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуЧерезТерминал(Команда)
	Перем Отказ;
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СтрокаСообщения = НСтр("ru = 'Необходимо выбрать строку с платежной картой'");
		ПоказатьПредупреждение(, СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		СтрокаСообщения = НСтр("ru = 'Выберите строку с платежной картой'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВидОплаты");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЭквайринговыйТерминал) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не выбран эквайринговый терминал'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ЭквайринговыйТерминал");
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыЧерезТерминал");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыЧерезТерминал(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодаркиВТовары(Команда);
	
	ПеренестиСкидкиПодаркиВТоварыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'чек'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "Подарки");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда)
	Перем Отказ, Объект_Ссылка;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Ложь, Объект_Ссылка);
		
		Модифицированность = Отказ;
		Если НЕ Отказ Тогда
			Закрыть();
			ОтобразитьИзменениеДанных(Объект_Ссылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИзФормы(Команда)
	Перем Отказ;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Истина);
		
		ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																	"ФормаПробитьЧек",
																	"Доступность", 
																	Объект.Проведен И НЕ ТолькоПросмотр);
		
		ОбновитьОтображениеДанных();
		Модифицированность = Отказ;
		
		ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'чек'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
		ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныПродажи");
	КонецЕсли;
	Если СкидкиНаценкиВызовСервера.ПолучитьФункциональнуюОпциюИспользованияЗапретаРозничнойПродажиАлкоголя() Тогда
		ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);
		ПараметрыФормы.Вставить("ПродажиОптовые", Ложь);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрНакоплений(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка", Объект.Ссылка);
	РеквизитыДокумента.Вставить("Дата",  Объект.Дата);
	РеквизитыДокумента.Вставить("Проведен", Объект.Проведен);
	РеквизитыДокумента.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	РеквизитыДокумента.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	РеквизитыДокумента.Вставить("ОтчетОРозничныхПродажах", ПредопределенноеЗначение("Документ.ОтчетОРозничныхПродажах.ПустаяСсылка"));
	
	ПараметрыОткрытия.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	ПараметрыОткрытия.Вставить("ВыборИнформационнойКартыТолькоПоКоду", Ложь);
	ПараметрыОткрытия.Вставить("ВводКартДоступен", Ложь);
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВозможнаОплата = ВозможнаОплатаБонусами(ДополнительныеПараметры);
	Если ВозможнаОплата Тогда
		Если Объект.Проведен Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОплатаБонусамиВопросОбОтменеПроведения", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Оплата бонусами возможна только в не проведенном документе, отменить проведение?'");
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.Свойство("ТекстПредупреждения") Тогда
			ПоказатьПредупреждение(,ДополнительныеПараметры.ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОРозничныхПродажах(Команда)
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта",
			Новый Структура("Ключ", Объект.ЗаказПокупателя));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Список ""Товары"" будет перезаполнен. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросЗаполнениеПоЗаказу", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗавершитьЗаполнениеПоЗаказу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВОтчетеОРозничныхПродажах(Команда)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		
		ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанныеТовары = Неопределено Тогда
			Если Объект.Товары.Количество() > 0  Тогда
				ТекущиеДанныеТовары = Объект.Товары[0];
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПараметрыФормы.Вставить("ТекущийЭлемент", "Товары");
			
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "Товары");
				ПараметрыТекущейСтроки = Новый Структура;
				ПараметрыТекущейСтроки.Вставить("Склад"          , ТекущиеДанныеТовары.Склад);
				ПараметрыТекущейСтроки.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыТекущейСтроки.Вставить("Номенклатура"   , ТекущиеДанныеТовары.Номенклатура);
				ПараметрыТекущейСтроки.Вставить("Характеристика" , ТекущиеДанныеТовары.Характеристика);
				ПараметрыТекущейСтроки.Вставить("СтавкаНДС"      , ТекущиеДанныеТовары.СтавкаНДС);
				ПараметрыТекущейСтроки.Вставить("Продавец"       , ТекущиеДанныеТовары.Продавец);
				ПараметрыТекущейСтроки.Вставить("Упаковка"       , ТекущиеДанныеТовары.Упаковка);
				ПараметрыТекущейСтроки.Вставить("Цена"           , ТекущиеДанныеТовары.Цена);
				ПараметрыТекущейСтроки.Вставить("КодСтроки"      , ТекущиеДанныеТовары.КодСтроки);
				ПараметрыТекущейСтроки.Вставить("ЗаказПокупателя", ТекущиеДанныеТовары.ЗаказПокупателя);
				ПараметрыТекущейСтроки.Вставить("Резервировать"  , ТекущиеДанныеТовары.Резервировать);
				
				ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
				
			КонецЕсли;
			
		Иначе
			ПараметрыФормы.Вставить("ТекущийЭлемент", "ВозвращенныеТовары");
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ВозвращенныеТовары");
				ПараметрыТекущейСтроки = Новый Структура;
				ПараметрыТекущейСтроки.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыТекущейСтроки.Вставить("Склад"          , ТекущиеДанныеТовары.Склад);
				ПараметрыТекущейСтроки.Вставить("Номенклатура"   , ТекущиеДанныеТовары.Номенклатура);
				ПараметрыТекущейСтроки.Вставить("Характеристика" , ТекущиеДанныеТовары.Характеристика);
				ПараметрыТекущейСтроки.Вставить("Продавец"       , ТекущиеДанныеТовары.Продавец);
				ПараметрыТекущейСтроки.Вставить("СтавкаНДС"      , ТекущиеДанныеТовары.СтавкаНДС);
				ПараметрыТекущейСтроки.Вставить("Упаковка"       , ТекущиеДанныеТовары.Упаковка);
				ПараметрыТекущейСтроки.Вставить("Цена"           , ТекущиеДанныеТовары.Цена);
				
				ПараметрыТекущейСтроки.Вставить("АналитикаХозяйственнойОперации", Объект.АналитикаХозяйственнойОперации);
				
				ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
				
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ВозможностьВводаПоШК()
	
	Результат = Истина;
	
	Если ТолькоПросмотр Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Форма заблокирована. Ввод невозможен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтотОбъект.ПоложениеКоманднойПанели             = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость            = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                      = ВидимостьЭлементов;
	Элементы.ИтогоОплата.Видимость                = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()

	ПриИзмененииЧекККМПродажаСервер();
	ОбновитьСтатусыУказанияСерий();
	
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПустаяСсылка();
	
	// ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		// ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя").
		Объект.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Объект.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	Иначе
		Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;//ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров");
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()

	Если НЕ Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты Тогда
	
		Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты
	
	КонецЕсли;
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассаККМСервер()

	НДСПересчитан = Ложь;
	
	Если НЕ Объект.Магазин = Объект.КассаККМ.Магазин Тогда
		
		Объект.Магазин = Объект.КассаККМ.Магазин;
		
		Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			
			ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
			
			Если НЕ Объект.ЦенаВключаетНДС = ЦенаВключаетНДС Тогда
			
				Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
			
				СтруктураДействий = Новый Структура;
				
				СтруктураПараметровСтавкиНДС = Новый Структура;
				СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
				СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
				СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
				
				СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
				
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				СтруктураТЧ = Новый Структура;
				СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
				ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
				
				ОбновитьИтоговыеПоказателиСервер();
				
				НДСПересчитан = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		
	КонецЕсли;
	
	Если НЕ Объект.Организация = Объект.КассаККМ.Владелец Тогда
		
		Объект.Организация = Объект.КассаККМ.Владелец;
		
		Если НЕ НДСПересчитан Тогда
			СтруктураДействий = Новый Структура;
			
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			СтруктураТЧ = Новый Структура;
			СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
			ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
			
			ОбновитьИтоговыеПоказателиСервер();
			
		КонецЕсли;
	КонецЕсли;
	
	РабочееМесто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "РабочееМесто");
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	Если ПродажаПоЗаказу Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(
			Объект.СкидкиНаценки, 
			ТекущаяСтрока.КлючСвязи, 
			ТекущаяСтрока.СуммаАвтоматическойСкидки)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЧекККМПродажаСервер()
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
		Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Ложь;
	Иначе
		Объект.ЦенаВключаетНДС = Объект.ЧекККМПродажа.ЦенаВключаетНДС;
		Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = ЗначениеЗаполнено(Объект.ЧекККМПродажа);
		
		Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			Объект.ДисконтнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ДисконтнаяКарта");
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				ПриИзмененииДисконтнаяКартаСервер();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

// Запрашивает у пользователя скидку и применяет ее к табличной части Товары.
//
&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер()
	
	ЕстьОшибки = Ложь;
	СкидкиНаценкиСерверПереопределяемый.СообщитьОбОстающихсяПодарках(Объект, ЕстьОшибки);
	Если НЕ ЕстьОшибки Тогда
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСкидки(Отказ, ДополнительныеПараметры = Неопределено, ПроверятьРасчет = Истина)
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И ((НЕ Объект.СкидкиРассчитаны) ИЛИ (НЕ ПроверятьРасчет))
		И НЕ ПродажаПоЗаказу
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И Объект.Товары.Количество() > 0 Тогда
		
		РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСообщенияПослеОформленияЧека()

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Истина);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры = Неопределено)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОтменитьСкидки();
		ОтменитьОплатуБонусами();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("БудетОплатаБонусами") Тогда
			СтруктураПараметры.Вставить("БудетОплатаБонусами", ДополнительныеПараметры.БудетОплатаБонусами);
		КонецЕсли;
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОбработкиОповещения, ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.Вставить("ВыведеныСообщения", Истина);
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
КонецПроцедуры
	
// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	ВывестиСообщения = Ложь;
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ПримененныеСкидки.ТаблицаПодарковНаВыбор, УникальныйИдентификатор);
		ВыдатьПодаркиНаВыбор = Истина;
	Иначе
		АдресПодарковНаВыбор = "";
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;
	
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	Если НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Проведение

&НаСервере
Процедура ПровестиИзФормыСервер(Отказ, ЗапускатьОбработкуПослеЗаписи = Ложь, Объект_Ссылка = Неопределено)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	СтрокаОшибки = "";
	Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Иначе
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Отказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
			И ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПопыткиПродажПревышающихОстаток") Тогда
			
			ПродажиСервер.ОтразитьПопыткиПродаж(ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПопыткиПродажПревышающихОстаток, ЗаписываемыйОбъект.Дата);
			
		КонецЕсли;
		
		Объект_Ссылка = ЗаписываемыйОбъект.Ссылка;
		
		Если Отказ Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести ""%1"".'"),
					Строка(ЗаписываемыйОбъект)
					);
			
			ВызватьИсключение Текст;
		ИначеЕсли ЗапускатьОбработкуПослеЗаписи Тогда
			
			ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
			
			ПослеЗаписиНаСервере(Объект, РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ПродажаПоЗаказу Тогда
		СтруктураПересчетаСкидок = Новый Структура;
		СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
		СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатыПоДокументуПродажиСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	КонецЕсли;
	
	ТаблицаОплатыПродажи = Объект.ЧекККМПродажа.Оплата.Выгрузить();
	ТаблицаОплатыПродажи.ЗаполнитьЗначения(Ложь, "ДанныеПереданыВБанк");
	МассивСтрокБонусов = ТаблицаОплатыПродажи.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
	Для Каждого СтрокаБонуса Из МассивСтрокБонусов Цикл
		ТаблицаОплатыПродажи.Удалить(СтрокаБонуса);
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ДанныеПереданыВБанк", Истина);
	
	СтрокиПереданныеВБанк = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("ВидОплаты, ЭквайринговыйТерминал, Сумма, ПроцентКомиссии, СуммаКомиссии, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты");
	
	Индекс = 0 ;
	Для каждого СтрокаПереданнаяВБанк Из СтрокиПереданныеВБанк Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереданнаяВБанк);
		
		СтрокиТаблицыОплатыПродажи = ТаблицаОплатыПродажи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицыОплатыПродажи.Количество() > 0 Тогда
			Для каждого СтрокаТаблицыОплатыПродажи Из СтрокиТаблицыОплатыПродажи Цикл
				СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			КонецЦикла;
		Иначе
			
			СтрокаТаблицыОплатыПродажи = ТаблицаОплатыПродажи.Вставить(Индекс);
			Индекс = Индекс + 1;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОплатыПродажи, СтруктураПоиска);
			СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Оплата.Загрузить(ТаблицаОплатыПродажи);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам(ТолькоЦенообразование)

	Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр   = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыНазначитьРучнуюСкидку.Доступность  = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыОтменитьРучныеСкидки.Доступность   = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыЦена.ТолькоПросмотр                = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыСумма.ТолькоПросмотр               = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ПодаркиЦена.ТолькоПросмотр               = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ПодаркиСумма.ТолькоПросмотр              = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыНазначитьРучнуюСкидку.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыОтменитьРучныеСкидки.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
	Если НЕ ТолькоЦенообразование Тогда
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеПоказатели()

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Оплата, Истина, СуммаОплачено);
	
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаСкидкиОплатыБонусом = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
	СкидкиНаценкиИтогСумма = СуммаАвтоматическойСкидки + СуммаРучнойСкидки + СуммаСкидкиОплатыБонусом;
	
	СуммаБезСкидки = СуммаВсего + СкидкиНаценкиИтогСумма;
	СуммаКОплате = СуммаВсего - СуммаОплачено;
	
	РассчитатьСдачу();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеПоказателиСервер()

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Оплата, Истина, СуммаОплачено);
	
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаСкидкиОплатыБонусом = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
	СкидкиНаценкиИтогСумма = СуммаАвтоматическойСкидки + СуммаРучнойСкидки + СуммаСкидкиОплатыБонусом;
	
	СуммаБезСкидки = СуммаВсего + СкидкиНаценкиИтогСумма;
	СуммаКОплате = СуммаВсего - СуммаОплачено;
	
	РассчитатьСдачуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока, СуммаОперации, ПределСуммы)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	НомерЧека           = Объект.Номер;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ИндексСтроки = Объект.Оплата.Индекс(ВыбраннаяСтрока);
	
	Если Объект.Проведен Тогда
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	Иначе
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный));
	КонецЕсли;
	
	Если НЕ РезультатПроведения Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = Объект.Оплата[ИндексСтроки];
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Сумма"      , СуммаОперации);
	ПараметрыФормы.Вставить("ПределСуммы", ПределСуммы);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	
	Если ИспользоватьБезПодключенияОборудованияЭТ Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);   
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ВыбраннаяСтрока.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерКарты", НомерКарты);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	ПараметрДействия.Вставить("НомерЧека", НомерЧека);
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, РежимЗаписи)
	
	// Если документ проводится, рассчитаем скидки.
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьСкидки(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает доступность элементов по виду операции.
//
// Параметры:
//  ТекущаяСтрока - Строка табличной части "Оплата".
//
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПогашениеВХранилище(АдресВременногоХранилища)
	
	Таблица_ПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ПогашениеПодарочныхСертификатов.Загрузить(Таблица_ПогашениеПодарочныхСертификатов);
	
	
	Если Таблица_ПогашениеПодарочныхСертификатов.Количество() = 0 Тогда
	
		СтрокиКУдалению = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
			Объект.Оплата.Удалить(Объект.Оплата.Индекс(СтрокаКУдалению));
		
		КонецЦикла;
	Иначе
		ИтогоПоНоминалу = Таблица_ПогашениеПодарочныхСертификатов.Итог("Номинал");
		СтрокиТаблицы = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Если СтрокиТаблицы.Количество() = 0  Тогда
			СтрокаТаблицы = Объект.Оплата.Добавить();
			СтрокаТаблицы.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
		Иначе
			СтрокаТаблицы = СтрокиТаблицы[0];
		КонецЕсли;
		
		СуммаДокумента = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
		
		СтрокаТаблицы.Сумма = Мин(СуммаДокумента, ИтогоПоНоминалу);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтруктураДанныхЭТ(Терминал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Терминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Структура("ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Иначе
		СтруктураВозврата = Неопределено; 
		СтруктураВозврата.ИспользоватьБезПодключенияОборудования = Истина;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная безналичными.
//
Функция СуммаБезналичнойОплаты() 

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные 
		И НЕ ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции

&НаСервере
// Функция считает сумму, оплаченную подарочными сертификатами.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная подарочными сертификатами.
//
Функция СуммаОплатыПодарочнымиСертификатами() 

	СуммаОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаОплаты = СуммаОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаОплаты;

КонецФункции

&НаСервере
Функция ТипОплатыПоВиду(ВидОплаты)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплаты, "ТипОплаты");

КонецФункции

&НаСервере
Функция ПоместитьПогашениеВХранилище()

	Возврат ОбщегоНазначенияРТ.ПоместитьВоВременноеХранилищеТабличнуюЧастьОбъекта(Объект, "ПогашениеПодарочныхСертификатов", УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьСкидкиВХранилище()

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
	СтруктураТаблиц.Вставить("Подарки", Объект.Подарки.Выгрузить());
	СтруктураТаблиц.Вставить("БонусныеБаллыКНачислению", Объект.БонусныеБаллыКНачислению.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Функция МассивОплатПриПробитииЧекаККМ()
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Сумма,
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|ГДЕ
	|	НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаСТипамиОплат
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) КАК Сумма,
	|	ТаблицаСТипамиОплат.ТипОплаты
	|ИЗ
	|	ТаблицаСТипамиОплат КАК ТаблицаСТипамиОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСТипамиОплат.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОплат = Результат.Выгрузить();
	
	МассивОплат = Новый Массив();
	
	// Наличные
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.Наличные, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(0);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Наличная оплата");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(1);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Платежная карта");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Банковский кредит
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(2);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Банковский кредит");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(3);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Подарочный сертификат");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат МассивОплат;
	
КонецФункции // МассивОплатПриПробитииЧекаККМ()

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		Объект.НомерЧекаККМ  = РезультатВыполнения.ВыходныеПараметры[1];
		
		Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
		Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = ПорядковыйНомерПродажи;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		РезультатЗаписи = Записать(ПараметрыЗаписи);
		
		Если РезультатЗаписи Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Ссылка", Объект.Ссылка);
			ДанныеДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийПоКарте(ДанныеДокумента);
			Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗаписи);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры[2];
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека[8] = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека[9] = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
		Новый ОписаниеОповещения("ПечатьЧека_ПослеПолученияПодписиВЕГАИС", ЭтотОбъект, ПараметрыВыполнения),
		ПараметрыВыполнения.ВходныеПараметры,
		ДополнительныеПараметры.ТранспортныйМодуль,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеПолученияПодписиВЕГАИС(Результат, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.ПродолжитьПечать = Результат.Результат;
	ПараметрыВыполнения.ОписаниеОшибки = Результат.ОписаниеОшибки;
	
	Если Результат.Результат Тогда
		ПараметрыВыполнения.Вставить("АдресЧека"  , Результат.АдресЧека);
		ПараметрыВыполнения.Вставить("ПодписьЧека", Результат.ПодписьЧека);
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если Результат.ТранспортныйМодуль <> Неопределено Тогда
			ИННОрганизации = Результат.ТранспортныйМодуль.ИНН;
			КППОрганизации = Результат.ТранспортныйМодуль.КПП;
			
			НаименованиеОрганизации = СокрЛП(Результат.ТранспортныйМодуль.ОрганизацияЕГАИС);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры[2][18];
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		
		Объект.АдресЧекаЕГАИС = Результат.АдресЧека;
		Объект.ПодписьЧекаЕГАИС = Результат.ПодписьЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры[2];
	ШапкаЧека[9] = ШапкаЧека[9] + 1000000;
	
	Если ШапкаЧека[0] = 1 Тогда
		ШапкаЧека[0] = 0;
	Иначе
		ШапкаЧека[0] = 1;
	КонецЕсли;
	
	Объект.АдресЧекаЕГАИС = "";
	Объект.ПодписьЧекаЕГАИС = "";
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
		Неопределено,
		ПараметрыВыполнения.ВходныеПараметры,
		ДополнительныеПараметры.ТранспортныйМодуль,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнить(ОповещениеПриЗавершении)
	Перем Отказ;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьСкидки(Отказ);
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Чек не проведен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ         = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		Объект.НомерСменыККМ = 0;
		Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
		Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Модифицированность = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Если РезультатЗаписи = Истина Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Ссылка", Объект.Ссылка);
			ДанныеДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийПоКарте(ДанныеДокумента);
			Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатЗаписи = Истина);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;

		// Готовим данные
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		ВходныеПараметры  = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны);
		
		Если НЕ ДанныеЕГАИСДостаточны Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		
		Контекст = Новый Структура();
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьПечатьЧека(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваФР, 
			ВходныеПараметры, Ложь, , ПослеОткрытияЧека, ПослеОшибкиПечатиЧека);
			
			
	Иначе
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "НапечататьЧек" командной панели.
//
&НаКлиенте
Процедура ПробитьЧекНаКлиенте()
	
	Результат = Ложь;
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		
		ЭтотОбъект.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
		ПробитьЧекВыполнить(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеЗавершение(ЧекПробит, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если ЧекПробит Тогда
		ТолькоПросмотр = Истина;
		УстановитьДоступностьКнопокПроведенияКлиент();
		ПроверитьСообщенияПослеОформленияЧека();
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСдачу()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл
		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;
	КонецЦикла;
	
	Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего, 0);
	Сдача = Мин(Сдача, СуммаНаличных);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСдачуСервер();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", Справочники.ВидыОплатЧекаККМ.Наличные);
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл
		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;
	КонецЦикла;
	
	Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего, 0);
	Сдача = Мин(Сдача, СуммаНаличных);
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартойЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР  = ПараметрыКассыККМ.ИдентификаторУстройства;
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	
	Если НЕ ИспользоватьБезПодключенияОборудованияЭТ Тогда
		
		ЭтотОбъект.Доступность = Ложь;
			
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерКарты     = НомерКарты;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("УдалитьОплатуКартойЗавершение", ЭтотОбъект, ПараметрДействия);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации, Ложь);
	
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОтменыОперацииНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокПроведенияКлиент()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокПроведенияСервер()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
КонецПроцедуры

// Устанавливает доступность элементов по виду операции.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьДоступностьПоВидуОперацииКлиент()
	
	ЭтоВозврат = Объект.ВидОперации = ЗначениеПеречислениеВидОперацииВозврат;
	
	Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр = НЕ ЭтоВозврат;
	Элементы.ЧекККМПродажа.ТолькоПросмотр                  = НЕ ЭтоВозврат;
	Элементы.ДисконтнаяКарта.ТолькоПросмотр                = ЭтоВозврат;
	
КонецПроцедуры

// Устанавливает значение выбора чека возврата.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораЧекаККМПродажиКлиент()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаККМ"   , Объект.КассаККМ));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации",ЗначениеПеречислениеВидОперацииПродажа));
	
	МассивСтатусовЧекаККМ = Новый Массив;
	
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СтатусЧекаККМ",Новый ФиксированныйМассив(МассивСтатусовЧекаККМ)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Проведен", Истина));
	
	Элементы.ЧекККМПродажа.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОплатуНаличными()
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеДобавитьОплатуНаличными");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеДобавитьОплатуНаличными(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомандыВидовОплаты()

	ПлатежнаяКарта = ЗначениеНастроекПовтИсп.ПолучитьВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Если ПлатежнаяКарта = Неопределено Тогда
		Элементы.ОплатаПлатежнаяКарта.Заголовок = Элементы.ОплатаПлатежнаяКарта.Заголовок + "...";
	КонецЕсли;
	
	БанковскийКредит = ЗначениеНастроекПовтИсп.ПолучитьВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	
	Если БанковскийКредит = Неопределено Тогда
		Элементы.ОплатаБанковскийКредит.Заголовок = Элементы.ОплатаБанковскийКредит.Заголовок + "...";
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОплатыПоТипу(ТипыОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипыОплаты";
	Запрос.УстановитьПараметр("ТипыОплаты", ТипыОплаты);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(Неопределено);
		Для Каждого ТекущаяСтрока Из Объект.Оплата Цикл 
			
			ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
			ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
			ПересчитатьСуммуКомиссии(ТекущаяСтрока);
			ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
			
		КонецЦикла;
		
	Иначе
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока.ВидОплаты);
		ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
		ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
		ПересчитатьСуммуКомиссии(ТекущаяСтрока);
		ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(ВидОплаты)
	
	Результат = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		Результат = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ, Объект.Организация, Объект.Магазин, ВидОплаты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступностьЗаказаПокупателя()
	
	Если НЕ ПродажаПоЗаказу Тогда
		
		Элементы.ОткрытьЗаказПокупателя.Видимость   = Ложь;
		Элементы.ТоварыГруппаЗаказКлиента.Видимость = Ложь;
		Элементы.ТоварыЗаказПокупателя.Видимость    = Ложь;
		Элементы.ТоварыКодСтроки.Видимость          = Ложь;
		Элементы.ТоварыРезервировать.Видимость      = Ложь;
		
	Иначе
		
		Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ЗаказПокупателя);
		Элементы.ТоварыРассчитатьСкидкиНаценки.Доступность       = Ложь;
		Элементы.ТоварыНазначитьАвтоматическиеСкидки.Доступность = Ложь;
		Элементы.ТоварыПеренестиПодаркиВТовары.Доступность       = Ложь;
		Элементы.ТоварыНазначитьРучнуюСкидку.Доступность         = Ложь;
		Элементы.ТоварыОтменитьРучныеСкидки.Доступность          = Ложь;
		Элементы.ПодаркиПеренестиПодаркиВТовары.Доступность      = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамЗаказа()
	
	РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(Объект, Объект.ЗаказПокупателя);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей")
	 ИЛИ НЕ ПродажаПоЗаказу Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Видимость = Ложь;
	ИначеЕсли Объект.Проведен ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Ложь;
	Иначе
		Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресТабличнойЧастиТовары()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьОплатуБонусами(Параметр)
	
	ТаблицаРаспределения = ПолучитьИзВременногоХранилища(Параметр.АдресВоВременномХранилище);
	КоличествоБонусовОплачено = ТаблицаРаспределения.Итог("КоличествоБонусовОплачено");
	СуммаОплачено = ТаблицаРаспределения.Итог("СуммаОплачено");
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.БонуснаяПрограммаЛояльности = Параметр.БонуснаяПрограмма;
	НоваяСтрока.ВидОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр.БонуснаяПрограмма, "ВидОплаты");
	
	Если НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
		НоваяСтрока.КоличествоБонусовВСкидках = КоличествоБонусовОплачено;
		НоваяСтрока.СуммаБонусовВСкидках = СуммаОплачено;
		
		//
		ОчиститьОплатуБонусамиВТоварах();
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			СтрокаТоваров = Объект.Товары[СтрокаРаспределения.НомерСтроки - 1];
			СтрокаТоваров.СуммаСкидкиОплатыБонусом = СтрокаРаспределения.СуммаОплачено;
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СтрокаТоваров.СуммаСкидкиОплатыБонусом;
			СтрокаТоваров.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтрокаТоваров.СтавкаНДС, Объект.ЦенаВключаетНДС);
		КонецЦикла;
	Иначе
		НоваяСтрока.КоличествоБонусов = КоличествоБонусовОплачено;
		НоваяСтрока.Сумма = СуммаОплачено;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если НЕ ПродажаПоЗаказу Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	ОбновитьИтоговыеПоказателиСервер();
	ЕстьОплатаБонусами = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БонуснаяПрограммаКарты(ДисконтнаяКарта)
	
	БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
	Возврат БонуснаяПрограмма;
	
КонецФункции

&НаСервере
Функция ВозможнаОплатаБонусами(ДополнительныеПараметры)
	Результат = Ложь;
	ТекстПредупреждения = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ЕстьОплатаБонусами = Ложь;
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
				ТекстПредупреждения = НСтр("ru = 'Оплата бонусами уже выбрана.'")
					   + Символы.ПС + НСтр("ru = 'Повторная оплата бонусами не возможна.'");
				
				ЕстьОплатаБонусами = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОплатаБонусами Тогда
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				БонуснаяПрограммаЛояльности = БонуснаяПрограммаКарты(Объект.ДисконтнаяКарта);
				Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
					ДополнительныеПараметры.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
					Результат = Истина;
				Иначе
					ТекстПредупреждения = НСтр("ru = 'Дисконтная карта не участвует в бонусных программах.'")
						   + Символы.ПС + НСтр("ru = 'Оплата бонусами не возможна.'");
				КонецЕсли;
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Не выбрана дисконтная карта.'")
					   + Символы.ПС + НСтр("ru = 'Оплата бонусами не возможна.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'При возврате бонусные баллы сторнируются автоматически.'");
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОчиститьОплатуБонусамиВТоварах()
	
	БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
	ЕстьОплатаБонусами = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСкидкиИОплатуБонусамиКСторнированию()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект);
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если НЕ ПродажаПоЗаказу Тогда
		Если Объект.СкидкиРассчитаны Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", "СуммаСкидкиОплатыБонусом");
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			Объект.Подарки.Очистить();
			Объект.БонусныеБаллыКНачислению.Очистить();
			Объект.СкидкиРассчитаны = Ложь;
			СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты = Истина)
	
	Если ЕстьОплатаБонусами Тогда
		БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
		Если УдалятьСтрокиИзОплаты Тогда
			МассивСтрокОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
			Для Каждого УдаляемаяСтрока Из МассивСтрокОплаты Цикл
				Объект.Оплата.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		ЕстьОплатаБонусами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса()
	
	АдресСкидок = ПоместитьСкидкиВХранилище();
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(Элементы.Товары.ТекущиеДанные, Объект, ЭтотОбъект, АдресСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	Если Объект.СкидкиРассчитаны Тогда
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	Иначе
		ДополнительныеПараметры = Новый Структура; 
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьИОткрытьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыБонусами(ДополнительныеПараметры)
	
	Отказ = Ложь;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("БудетОплатаБонусами", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеРасчетСкидокКлиент");
	ПроверитьСкидки(Отказ, ДополнительныеПараметры, Ложь);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыОткрытия.Вставить("АдресТабличнойЧастиТовары", АдресТабличнойЧастиТовары());
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("БонуснаяПрограммаЛояльности", ДополнительныеПараметры.БонуснаяПрограммаЛояльности);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОплатыБонусами", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплатыБонуснымиБаллами",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					ОбработчикОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуОплатыПослеВопроса()
	
	ВопросОбУдаленииСтрокиОплатыУжеЗадан = Истина;
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтотОбъект.Модифицированность = Истина;
		Объект.Оплата.Удалить(ТекущиеДанные);
		Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой")
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	КонецЕсли;
	
	ВопросОбУдаленииСтрокиОплатыУжеЗадан = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		// Сохранить в таблице данные оплаты картой.
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		ВыбраннаяСтрока.НомерПлатежнойКарты = ПараметрДействия.НомерКарты;
		ВыбраннаяСтрока.Сумма               = ПараметрДействия.СуммаОперации;
		ВыбраннаяСтрока.СсылочныйНомер      = ПараметрДействия.НомерСсылкиОперации;
		ВыбраннаяСтрока.НомерЧекаЭТ         = ПараметрДействия.НомерЧекаЭТ;
		ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		// Сохранить в таблице данные оплаты картой.
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ВыбраннаяСтрока.СсылочныйНомер = "";
			ВыбраннаяСтрока.НомерЧекаЭТ    = "";
			ВыбраннаяСтрока.НомерПлатежнойКарты = "";
			ВыбраннаяСтрока.ДанныеПереданыВБанк = Ложь;
		Иначе
			ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		КонецЕсли;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеПоЗаказу()
	
	Объект.Товары.Очистить();
	
	Объект.УправляемыеСкидки.Очистить();
	Объект.Подарки.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	Объект.Серии.Очистить();
	
	ЗаполнитьПоОстаткамЗаказа();
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура,
//  ИмяТабличнойЧасти  - Строка
&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	СтрокиИзменены = Ложь;
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |КоличествоУпаковок,
															  |ТипНоменклатуры,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", Объект.КассаККМ.РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ТекущаяСтрока.Продавец = Объект.Продавец;
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		СтрокиИзменены = Истина;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект[ИмяТабличнойЧасти]);
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Возврат СтрокиИзменены;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(УдалятьСтрокиИзОплаты = Истина)
	
	Если АвтоматическийРасчетСкидок Тогда
		Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
				ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
			Иначе
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ОтменитьСкидки();
			ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты);
		КонецЕсли;
	КонецЕсли;
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", 				УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	ДеревоСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоСкидок, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВводСуммыАгентскогоПлатежа(ТекущиеДанные)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемаяСтрока", ТекущиеДанные);
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ОповещениеВводСуммыАгентскогоПлатежа" ,
									ЭтотОбъект,
									ДополнительныеПараметры);
	СуммаПлатежа = ТекущиеДанные.Сумма;
	ПоказатьВводЧисла(ОбработчикОповещения, СуммаПлатежа, НСтр("ru = 'Введите сумму платежа'"), 15, 2);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВводДополнительнойИнформации(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			//Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки Тогда
			//	Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
			//	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
			//	ВвестиАкцизнуюМарку(ИдентификаторСтроки, ТекущиеДанные, "КоличествоУпаковок");
			//Иначе
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				ВвестиПодарочныеСертификаты();
			ИначеЕсли ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок");
				Иначе
					УказатьСерии("Упаковка");
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				ВводСуммыАгентскогоПлатежа(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыЦена
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСумма Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				ВводСуммыАгентскогоПлатежа(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#Область ЕГАИС

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТовара, ТекущееПоле = "КоличествоУпаковок", СтруктураПараметровКлиента = Неопределено)
	
	АдресВХранилище = АдресМарокВХранилище(СтрокаТовара.КлючСвязи);
	ИнтеграцияЕГАИСРТКлиент.ВвестиАкцизнуюМарку(
		ЭтотОбъект,
		СтрокаТовара,
		ТекущееПоле,
		АдресВХранилище,
		СтруктураПараметровКлиента,
		Истина);
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураОтбора);
	АдресМарок = ПоместитьВоВременноеХранилище(СтрокиМарок, УникальныйИдентификатор);
	Возврат АдресМарок;
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны)
	
	ВходныеПараметры  = Новый Массив;
	
	// Подготовка соответствие секций для табличной части.
	ТаблицаСоответствияТоваровСекциям = Новый Соответствие();
	ПодключаемоеОборудованиеРТВызовСервера.ЗаполнитьСоответствиеСекцийДляТабличнойЧастиПоКассеККМ(Объект.КассаККМ, Объект.Товары, ТаблицаСоответствияТоваровСекциям);
	
	СтруктураТаблиц = ПродажиСервер.ПодготовкаДанныхДляПробитияЧекаККМ(Объект, ДанныеЕГАИСДостаточны);
	ТаблицаТоваровЧека = СтруктураТаблиц.ТаблицаТоваровЧека;
	ТаблицаТоваровЕГАИС = СтруктураТаблиц.ТаблицаТоваровЕГАИС;
	
	Если НЕ ДанныеЕГАИСДостаточны Тогда
		Возврат ВходныеПараметры;
	КонецЕсли;
	
	// Подготовка таблицы товаров
	МассивТоваров = Новый Массив;
	МассивТоваровЕГАИС = Новый Массив;
	
	ДополнитьМассивИзТаблицы(МассивТоваров, ТаблицаТоваровЧека, ТаблицаТоваровЕГАИС, ТаблицаСоответствияТоваровСекциям);
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(Объект.Магазин);
	
	СерийныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "СерийныйНомер");
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	// Подготовка таблицы общих параметров.
	ТипЧека = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, 1, 0);
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(ТипЧека);                                                          // 1 - Тип чека (0-продажа, 1-возврат)
	ОбщиеПараметры.Добавить(Истина);                                                           // 2 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);                                                     // 3 - Печать копии чека
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента);                                            // 4 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента);                                            // 5 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");                                                               // 6 - Номер дисконтной карты
	ОбщиеПараметры.Добавить(НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ'"));                                  // 7 - Текст шапки (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(НСтр("ru = 'СПАСИБО ЗА ПОКУПКУ'"));                                // 8 - Текст подвала (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Число("3" + Формат(Объект.Дата, "ДФ=yyyyMMdd")));                  // 9 - Номер смены 
	
	НомерЧека = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер, Истина, Истина);
	ОбщиеПараметры.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерЧека));             // 10 - Номер чека (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СерийныйНомер);                                                    // 11 - Номер кассы (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Объект.Дата);                                                      // 12 - Дата и время документа 
	ОбщиеПараметры.Добавить(Объект.Продавец);                                                  // 13 - Кассир (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СведенияООрганизации.ПолноеНаименование);                          // 14 - Название организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СведенияООрганизации.ИНН);                                         // 15 - ИНН организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить("");                                                               // 16 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");                                                               // 17 - Наименование секции форматирования подвала
	ОбщиеПараметры.Добавить("");                                                               // 18 - КПП организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Строка(Объект.Магазин));                                           // 19 - Наименование магазина
	ОбщиеПараметры.Добавить(АдресМагазина);                                                    // 20 - Адрес магазина
	ОбщиеПараметры.Добавить(СерийныйНомер);                                                    // 21 - Заводской номер ККМ
	
	МассивШаблона = Новый Массив();
	МассивШаблона.Добавить(Объект.КассаККМ);
	МассивШаблона.Добавить(?(ТипЧека = 1, "ШаблонЧекаККМВозврат", "ШаблонЧекаККМ"));
	МассивШаблона.Добавить(Объект.Ссылка);
	
	ОбщиеПараметры.Добавить(МассивШаблона);                                                    // 22 - Массив параметров шаблона чека.
	
	ВходныеПараметры.Добавить(МассивТоваров);
	ВходныеПараметры.Добавить(МассивОплатПриПробитииЧекаККМ());
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСРТ.ИспользуемыйТранспортныйМодуль(Объект.Организация, Объект.Магазин);
	
	Возврат ВходныеПараметры;
	
КонецФункции

&НаСервере
Процедура ДополнитьМассивИзТаблицы(МассивТоваров, ТаблицаТоваровЧека, ТаблицаТоваровЕГАИС, ТаблицаСоответствияТоваровСекциям)
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
		НомерСекции = ТаблицаСоответствияТоваровСекциям.Получить(СтрокаТЧ.НомерСтроки);
		
		ДанныеАлкогольнойПродукции = Новый Структура;
		ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
		ДанныеАлкогольнойПродукции.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
		ДанныеАлкогольнойПродукции.Вставить("КодАкцизнойМарки", Новый Массив);
		ДанныеАлкогольнойПродукции.Вставить("ОбъемДАЛ", СтрокаТЧ.ОбъемДАЛ);
		ДанныеАлкогольнойПродукции.Вставить("Крепость", СтрокаТЧ.Крепость);
		ДанныеАлкогольнойПродукции.Вставить("КодВидаПродукции", СтрокаТЧ.КодВидаПродукции);
		
		МассивСтрокЕГАИС = ТаблицаТоваровЕГАИС.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
		Для Каждого СтрокаТоварыЕГАИС Из МассивСтрокЕГАИС Цикл
			Если НЕ ПустаяСтрока(СтрокаТоварыЕГАИС.КодАкцизнойМарки) Тогда
				ДанныеАлкогольнойПродукции.КодАкцизнойМарки.Добавить(СтрокаТоварыЕГАИС.КодАкцизнойМарки);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			Штрихкод = ?(МассивСтрокЕГАИС.Количество() > 0, МассивСтрокЕГАИС[0].Штрихкод, "");
		Иначе
			Штрихкод = СтрокаТЧ.Штрихкод;
		КонецЕсли;
		
		ПараметрыАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.ПараметрыАлкогольнойПродукции(ДанныеАлкогольнойПродукции);
		
		СтавкаНДС = ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
		Сумма = СтрокаТЧ.Сумма;
		СуммаСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаСкидкиОплатыБонусом + СтрокаТЧ.СуммаРучнойСкидки;
		Если (Сумма + СуммаСкидки) = 0 Тогда
			ПроцентСкидки = 0;
		Иначе
			ПроцентСкидки = Окр(100 * СуммаСкидки / (Сумма + СуммаСкидки),2,1);
		КонецЕсли;
		СтрокаТаблицыТоваров.Добавить(НаименованиеТовара);            //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить(Штрихкод);                      //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                            //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);                   //  4 - Номер секции
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Цена);                 //  5 - Цена за позицию без скидки.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.КоличествоУпаковок);   //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                            //  7 - Наименование скидки/наценки.
		СтрокаТаблицыТоваров.Добавить(СуммаСкидки);                   //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(ПроцентСкидки);                 //  9 - Процент скидки/наценки.
		СтрокаТаблицыТоваров.Добавить(Сумма);                         // 10 - Сумма позиции со скидкой.
		СтрокаТаблицыТоваров.Добавить(0);                             // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.СуммаНДС);             // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);               // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                             // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                             // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                             // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                            // 17 - Наименование секции форматирования товарной строки.
		СтрокаТаблицыТоваров.Добавить(ПараметрыАлкогольнойПродукции); // 18 - Параметры алкогольной продукции
		
		МассивТоваров.Добавить(СтрокаТаблицыТоваров);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьМаркиНаСервере(АдресВХранилище, ДополнительныеПараметры)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);

	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
			
	КоличествоУпаковок = 0;
	
	ТаблицаМарок = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого СтрокаМарки Из ТаблицаМарок Цикл
		СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
		СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
		СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаМарки.КодАкцизнойМарки;
		
		КоличествоУпаковок = КоличествоУпаковок + 1;
	КонецЦикла;
	
	Возврат КоличествоУпаковок;
	
КонецФункции

#КонецОбласти

#КонецОбласти
