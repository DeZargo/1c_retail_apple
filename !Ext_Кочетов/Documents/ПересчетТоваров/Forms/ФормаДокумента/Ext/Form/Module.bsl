
&НаКлиенте
Процедура КочетовПриОткрытииПосле(Отказ)
	Если Объект.Ссылка.Пустая() тогда      
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.КоличествоФакт         = СтрокаТЧ.Количество;
			СтрокаТЧ.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоУпаковок;
		КонецЦикла;	
		ПолучитьРозничнуюЦену();
		ОбновитьДанныеТЧТовары();
		ОбновитьДанныеТЧТоварыРозничные();
		//ОбновитьРозничныйПодвал();
	КонецЕсли;
	ОбновитьДанныеТЧТоварыРозничные();
	ОбновитьРозничныйПодвал();
КонецПроцедуры

Процедура ПолучитьРозничнуюЦену()	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.УстановитьПараметр("тч",Объект.Товары.выгрузить());
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.Номенклатура КАК Номенклатура,
	             |	Тч.НомерСтроки КАК НомерСтроки
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&Тч КАК Тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.Номенклатура КАК Номенклатура,
	             |	йцу.НомерСтроки КАК НомерСтроки,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО йцу.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока ВЫборка.Следующий()Цикл	
		Если Выборка.ВидЦены=Справочники.ххх_Справочник.РозничнаяЦена.значение Тогда
			Объект.Товары[Выборка.номерСтроки-1].ЦенаРозничная=Выборка.Цена;
		Иначе
			Объект.Товары[Выборка.номерСтроки-1].Цена=Выборка.Цена;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПолучитьЦеныПоСтроке(СтрокаТЧ)	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.УстановитьПараметр("номка",СтрокаТЧ.Номенклатура);
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &номка) КАК ЦеныНоменклатурыСрезПоследних";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока ВЫборка.Следующий()Цикл	
		Если Выборка.ВидЦены=Справочники.ххх_Справочник.РозничнаяЦена.значение Тогда
			СтрокаТЧ.ЦенаРозничная=Выборка.Цена;
		Иначе
			СтрокаТЧ.Цена=Выборка.Цена;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура КочетовТоварыЦенаРозничнаяПриИзмененииВместо(Элемент)
	строка=Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ПересчитатьСтрокуТаблицы(строка);
	ОбновитьРозничныйПодвал();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуТаблицы(строка)
	//Если Элементы.Товары.ТекущиеДанные<>Неопределено Тогда
		строка.СУммаРозничная=строка.ЦенаРозничная*строка.КоличествоУпаковок;
		строка.СУммаФактРозничная=строка.ЦенаРозничная*строка.КоличествоУпаковокФакт;
		строка.ОтклонениеПоРозничнойСумме1=строка.СУммаФактРозничная-строка.СУммаРозничная;
	//КонецЕсли;		
КонецПроцедуры

&НаКлиенте
процедура ОбновитьРозничныйПодвал()
	
	ИтогОтклонениеПоРозничнойСумме1=Объект.Товары.Итог("ОтклонениеПоРозничнойСумме1");
	Недостача=0;
	Излишки=0;
	Для каждого стр из Объект.Товары Цикл
		Если стр.ОтклонениеПоРозничнойСумме1<0 Тогда
			Недостача=Недостача+стр.ОтклонениеПоРозничнойСумме1;
		Иначе
			Излишки=Излишки+стр.ОтклонениеПоРозничнойСумме1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КочетовТоварыКоличествоУпаковокФактПриИзмененииПосле(Элемент)	
	строка=Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ПересчитатьСтрокуТаблицы(строка);
	ОбновитьРозничныйПодвал();
КонецПроцедуры

&НаКлиенте
Процедура КочетовТоварыКоличествоУпаковокПриИзмененииПосле(Элемент)
	строка=Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ПересчитатьСтрокуТаблицы(строка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТЧТоварыРозничные()
	Для каждого стр из объект.Товары Цикл
		ПересчитатьСтрокуТаблицы(Стр);
	КонецЦикла;
	ОбновитьРозничныйПодвал();
КонецПроцедуры

&Перед("ОбновитьДанныеСтрокиТЧТовары")
Процедура КочетовОбновитьДанныеСтрокиТЧТоварыПеред(СтрокаТЧ)
	ПолучитьЦеныПоСтроке(СтрокаТЧ);
	СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок;
КонецПроцедуры

&НаКлиенте
Процедура КочетовЗаполнитьУчетноеКоличествоВместо(Команда)
	Отказ = Ложь;	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Текст = НСтр("ru = 'Поле ""Дата"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Дата",,);
		Отказ = Истина;
	КонецЕсли;
	         
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Текст = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Склад",,);
		Отказ = Истина;
	КонецЕсли;
	
	//Объект.Дата=ТекущаяДата();
	Если НЕ Отказ Тогда
		ЗаполнитьУчетноеКоличествоСервер();
		ОбновитьДанныеТЧТовары();
		ПолучитьРозничнуюЦену();
		ОбновитьДанныеТЧТовары();
		ОбновитьДанныеТЧТоварыРозничные();
		ОбновитьРозничныйПодвал();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КочетовЗаполнитьРозничнуюЦенуПеред(Команда)
	ПолучитьРозничнуюЦену();
	ОбновитьДанныеТЧТовары();
	ОбновитьДанныеТЧТоварыРозничные();
КонецПроцедуры

&НаКлиенте
Процедура КочетовПослеЗаписиВместо(ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	ОбновитьДанныеТЧТоварыРозничные();
	ОбновитьРозничныйПодвал();
	ОбновитьДанныеСтрокиТЧТоварыСервер();
	Объект.УчетныеДанныеЗаполнены=Истина;
КонецПроцедуры

процедура ОбновитьДанныеСтрокиТЧТоварыСервер()
	Для каждого стр из Объект.Товары Цикл
		ОбновитьДанныеСтрокиТЧТовары(стр)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КочетовЗаполнитьЧистовикВместо(Команда)
	КолвоЧасовНаПересчет=получитьЗначениеЧасовДляОбновленияПересчета();
	Если (ТекущаяДата()-Объект.Дата)>60*60*КолвоЧасовНаПересчет Тогда
		Сообщить("Прошло больше "+КолвоЧасовНаПересчет+" часов, документ нельзя перезаполнить!");
		возврат;
	КонецЕсли;
	КочетовЗаполнитьУчетноеКоличествоВместо("");
	ЗаполнитьФактПоУчету("");
КонецПроцедуры

функция получитьЗначениеЧасовДляОбновленияПересчета()
	возврат	Константы.ххх_КоличествоЧасовНаРевизию.Получить()
КонецФункции
	
&НаКлиенте
&Вместо("ОповещениеПоискаПоШтрихкоду")
Процедура КочетовОповещениеПоискаПоШтрихкодуВместо(Структура, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Структура) Тогда
		Если Структура.ПоискПоВесовомуТовару=Ложь тогда
			штрихкод=Структура.штрихкод;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			ТекущаяСтрокаЕГАИС = Неопределено;
		Иначе
			
		КонецЕсли;
		//Zorius
		ОбновитьРозничныйПодвал();
		ПоискПоШтрихкоду("");
		//Zorius
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КочетовТоварыНоменклатураПриИзмененииПосле(Элемент)
	КочетовТоварыНоменклатураПриИзмененииПослеСервер();
КонецПроцедуры

Процедура КочетовТоварыНоменклатураПриИзмененииПослеСервер()
	ОбновитьДанныеСтрокиТЧТовары(Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока));
КонецПроцедуры

//&НаСервере
//Процедура КочетовПередЗаписьюНаСервереПеред(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	Если не ПараметрыСеанса.АвторизованныйПользователь.ххх_Ревизор и Объект.Ответственный.ххх_Ревизор Тогда
//		Сообщить("Нельзя редактировать ревизию!");
//		отказ=Истина;	
//	КонецЕсли;
//КонецПроцедуры










