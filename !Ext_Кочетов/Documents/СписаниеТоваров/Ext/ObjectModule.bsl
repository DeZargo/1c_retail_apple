
&Вместо("ЗаполнитьТабличнуюЧастьТовары")
Процедура ВместоЗаполнитьТабличнуюЧастьТоварыКочетов()Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВидЦены",Справочники.ххх_Справочник.ЗакупочнаяЦена.значение);
	Запрос.УстановитьПараметр("Дата",тЕКУЩАЯдАТА());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
		|	ТоварыКОформлению.Характеристика КАК Характеристика,
		|	-СУММА(ТоварыКОформлению.КОформлениюАктовОстаток) КАК Количество
		|ПОМЕСТИТЬ ТаблицаЗапроса
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОформлению.Номенклатура КАК Номенклатура,
		|		ТоварыКОформлению.Характеристика КАК Характеристика,
		|		ТоварыКОформлению.КОформлениюАктовОстаток КАК КОформлениюАктовОстаток
		|	ИЗ
		|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(
		|				,
		|				ДокументОснование = &ДокументОснование
		|					И Склад = &Склад) КАК ТоварыКОформлению
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОформлению.Номенклатура,
		|		ТоварыКОформлению.Характеристика,
		|		ВЫБОР
		|			КОГДА ТоварыКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ТоварыКОформлению.КОформлениюАктов
		|			ИНАЧЕ ТоварыКОформлению.КОформлениюАктов
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлению
		|	ГДЕ
		|		ТоварыКОформлению.Регистратор = &СписаниеНедостачТоваров
		|		И ТоварыКОформлению.ДокументОснование = &ДокументОснование
		|		И ТоварыКОформлению.Активность = ИСТИНА) КАК ТоварыКОформлению
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОформлению.Номенклатура,
		|	ТоварыКОформлению.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКОформлению.КОформлениюАктовОстаток) < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересчетТоваровТовары.Ссылка КАК Ссылка,
		|	ПересчетТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	ПересчетТоваровТовары.Сумма КАК Сумма,
		|	ПересчетТоваровТовары.СуммаФакт КАК СуммаФакт,
		|	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПересчетТоваровТовары.Цена КАК Цена,
		|	ПересчетТоваровТовары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		|	ПересчетТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ПересчетТоваровТовары.Характеристика КАК Характеристика,
		|	ПересчетТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
		|	ПересчетТоваровТовары.СуммаРозничная КАК СуммаРозничная,
		|	ПересчетТоваровТовары.СуммаФактРозничная КАК СуммаФактРозничная
		|ПОМЕСТИТЬ ТаблицаПересчета
		|ИЗ
		|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
		|ГДЕ
		|	ПересчетТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
		|	И ПересчетТоваровТовары.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапроса.Номенклатура КАК Номенклатура,
		|	ТаблицаЗапроса.Характеристика КАК Характеристика,
		|	ТаблицаЗапроса.Количество КАК Количество,
		|	ТаблицаЗапроса.Количество КАК КоличествоУпаковок,
		|	ТаблицаПересчета.ЦенаРозничная КАК Цена,
		|	ТаблицаЗапроса.Количество * ТаблицаПересчета.ЦенаРозничная КАК Сумма
		|ИЗ
		|	ТаблицаЗапроса КАК ТаблицаЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересчета КАК ТаблицаПересчета
		|		ПО ТаблицаЗапроса.Номенклатура = ТаблицаПересчета.Номенклатура";

	Запрос.УстановитьПараметр("СписаниеНедостачТоваров", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда

		Товары.Загрузить(Результат.Выгрузить());

	Иначе

		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");

	КонецЕсли;

	
КонецПроцедуры



&После("ОбработкаПроведения")
Процедура ПослеОбработкаПроведенияКочетов(Отказ, РежимПроведения)
	
	Если ЗначениеЗаполнено(Константы.ххх_ОрганизацияПринимающаяяПроизводство.Получить()) и
			Константы.ххх_ОрганизацияПринимающаяяПроизводство.Получить()<>Организация и 
			АналитикаХозяйственнойОперации=Справочники.ххх_Справочник.СписаниеНаПроизводствоАналитикаХозОпер.значение Тогда
		Сообщить("Вы выбрали не правильную организацию! Оформить списание на производство можно только с организации: "+Константы.ххх_ОрганизацияПринимающаяяПроизводство.Получить());
		отказ=истина;
		возврат;
	КонецЕсли;

	
	идСпис=Число(Прав(Номер,5));
	//

	списание=ВнешниеИсточникиДанных.Пикник23.Таблицы.dbo_spisan.НайтиПоПолю("id",идСпис);
	Если не ЗначениеЗаполнено(списание) Тогда
		списание=ВнешниеИсточникиДанных.Пикник23.Таблицы.dbo_spisan.СоздатьОбъект();
	Иначе
		списание=списание.ПолучитьОбъект();
	КонецЕсли;
	Списание.dnumd=НачалоДня(Дата);//Формат(НачалоДня(Дата),"ДФ='yyyy-MM-dd HH:mm:ss'");
	Списание.summ=СуммаДокумента;
	Списание.userr=Ответственный.Наименование;
	Списание.proved=Проведен;
	Списание.vrem=Формат(Дата,"ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");

	Списание.id=идСпис;

	Списание.Записать();
	
	
	строка=ВнешниеИсточникиДанных.Пикник23.Таблицы.dbo_idSpisTov.НайтиПоПолю("idspis",Списание.id);
	Пока ЗначениеЗаполнено(строка) Цикл
		СТрока=строка.ПолучитьОбъект();
		строка.удалить();
		строка=ВнешниеИсточникиДанных.Пикник23.Таблицы.dbo_idSpisTov.НайтиПоПолю("idspis",Списание.id)
	КонецЦикла;
	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	dbo_idSpisTov.id КАК id
	             |ИЗ
	             |	ВнешнийИсточникДанных.Пикник23.Таблица.dbo_idSpisTov КАК dbo_idSpisTov
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	id УБЫВ";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		идСписСтрока=выборка.id+1;
	Иначе
		идСписСтрока=1;
	КонецЕсли;

	Для каждого стр из  ТОвары Цикл		
		
		стрНаб=ВнешниеИсточникиДанных.Пикник23.Таблицы.dbo_idSpisTov.НайтиПоПолю("id",идСписСтрока);
		Если не ЗначениеЗаполнено(стрНаб) Тогда
			стрНаб=ВнешниеИсточникиДанных.Пикник23.Таблицы.dbo_idSpisTov.СоздатьОбъект();
		Иначе
			стрНаб=списание.ПолучитьОбъект();
		КонецЕсли;

		стрНаб.idspis=Списание.id;
		СтрНаб.idtov=Стр.Номенклатура.ххх_ИдЦентр;
		СтрНаб.kol=стр.КоличествоУпаковок;
		СтрНаб.senr=стр.Цена;
		СтрНаб.senz=стр.Цена;
		стрНаб.id=идСписСтрока;
		стрНаб.Записать();
		идСписСтрока=идСписСтрока+1;

	КонецЦикла;
	
	//Движения.ххх_АкцизныеМарки.записывать=истина;	
	//Для каждого стр из ххх_АкцизныеМарки Цикл
	//	Движение=Движения.ххх_АкцизныеМарки.добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//	Движение.Период = Дата;
	//	Движение.Регистратор=ссылка;
	//	Движение.АкцизнаяМарка = стр.АкцизнаяМарка;
	//	Движение.СправкаБ = стр.СправкаБ;
	//	Движение.Количество = 1;
	//КонецЦикла;


КонецПроцедуры


&После("ОбработкаЗаполнения")
Процедура ПослеОбработкаЗаполненияКочетов(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда		
		Товары.Загрузить(ДанныеЗаполнения.товары.выгрузить());	
		ххх_ДокОснПост=ДанныеЗаполнения;
	КонецЕсли;
	//ValMa - 28-02-2019 
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Я_ПересортицаТоваров") Тогда
		Организация = ДанныеЗаполнения.Организация;
		АналитикаХозяйственнойОперации = Справочники.ххх_Справочник.СписаниеНаПроизводствоАналитикаХозОпер.Значение; //Списание на производство
		ЗакупЦена = Справочники.ххх_Справочник.ЗакупочнаяЦена.Значение;
		//Товары.Загрузить(ДанныеЗаполнения.товары.выгрузить());
		Для Каждого Стр Из ДанныеЗаполнения.Товары Цикл
			НоваяСтр = Товары.Добавить();
			НоваяСтр.Номенклатура = Стр.НоменклатураОприходование;
			НоваяСтр.КоличествоУпаковок = Стр.ххх_КоличествоОприходовано;
			НоваяСтр.Количество = Стр.ххх_КоличествоОприходовано;
			НоваяСтр.Цена  = ПолучитьЗакупЦенуДляСписания(Стр.НоменклатураОприходование, ЗакупЦена);
			НоваяСтр.Сумма = НоваяСтр.КоличествоУпаковок * НоваяСтр.Цена;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗакупЦенуДляСписания(СсылкаТовар, ВидЦены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаДок,
	|			Номенклатура = &Номенклатура
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата()); //Дата создаваемого документа
	Запрос.УстановитьПараметр("Номенклатура", СсылкаТовар);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ЦенаТовара = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЦенаТовара = ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
	
	Возврат ЦенаТовара;
	
КонецФункции





