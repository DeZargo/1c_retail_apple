#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Функция возвращает список подключенного в справочнике ПО
//
Функция ПолучитьСписокОборудования(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ПодключаемоеОборудование.ИдентификаторУстройства КАК ИдентификаторУстройства,
	|	ПодключаемоеОборудование.Наименование КАК Наименование,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.ДрайверОборудования КАК ДрайверОборудования,      
	|	ПодключаемоеОборудование.ВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.РабочееМесто КАК РабочееМесто,
	|	ПодключаемоеОборудование.Параметры КАК Параметры,
	|	РабочиеМеста.ИмяКомпьютера КАК ИмяКомпьютера
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	|		ПО (РабочиеМеста.Ссылка = ПодключаемоеОборудование.РабочееМесто)
	|ГДЕ
	|	(ПодключаемоеОборудование.УстройствоИспользуется)" +
		// Добавим в текст запроса условия-фильтры переданные в параметрах вызова.
		?(Идентификатор = Неопределено,
			// Добавим в текст запроса фильтр по типам оборудования (если задан).
		?(ТипыПО <> Неопределено,
		    "
		    |	И (ПодключаемоеОборудование.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		    |	И (ПодключаемоеОборудование.ТипОборудования В (&ТипОборудования))
		    |	И (РабочиеМеста.Ссылка = &РабочееМесто)",
		    "
		    |	И РабочиеМеста.Ссылка = &РабочееМесто"),
			// Добавим в текст запроса фильтр по конкретному устройству (имеет приоритет над другими фильтрами).
		  "
		  |	И (ПодключаемоеОборудование.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		  |	И (ПодключаемоеОборудование.Ссылка = &Идентификатор ИЛИ
		  |	   ПодключаемоеОборудование.ИдентификаторУстройства = &Идентификатор)") +
	"
	|	И (НЕ ПодключаемоеОборудование.ПометкаУдаления)";
	
	// Добавим полученное условие отбора к тексту запроса.
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	ТипОборудования,
	|	Наименование;";

	Запрос = Новый Запрос(ТекстЗапроса);
	
	// Установим параметры запроса (фильтрующие выборку значения).
	Если Идентификатор = Неопределено Тогда
		// То используется фильтр по рабочему месту.
		Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
			// Если РМ не задано в параметрах, то всегда текущее из параметров сеанса.
			РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		КонецЕсли;

		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		// И возможно фильтр по типам оборудования.
		Если ТипыПО <> Неопределено Тогда
			// Подготовка перечислений типов ТО для запроса.
			МассивТиповПО = Новый Массив();
			Если ТипЗнч(ТипыПО) = Тип("Структура") Тогда
				Для Каждого ТипПО Из ТипыПО Цикл
					МассивТиповПО.Добавить(Перечисления.ТипыПодключаемогоОборудования[ТипПО.Ключ]);
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ТипыПО) = Тип("Массив") Тогда
				Для Каждого ТипПО Из ТипыПО Цикл
					МассивТиповПО.Добавить(Перечисления.ТипыПодключаемогоОборудования[ТипПО]);
				КонецЦикла;
				
			Иначе
				МассивТиповПО.Добавить(Перечисления.ТипыПодключаемогоОборудования[ТипыПО]);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТипОборудования", МассивТиповПО);
		КонецЕсли;
	Иначе // Фильтр по конкретному устройству.
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	// Перебирая выборку составляем список устройств.
	СписокОборудования = Новый Массив();
	Пока Выборка.Следующий() Цикл
		// Заполним структуру данных устройства.
		ДанныеУстройства = Новый Структура();
		ДанныеУстройства.Вставить("Ссылка"                    , Выборка.Ссылка);
		
		ДанныеУстройства.Вставить("ИдентификаторУстройства"   , Выборка.ИдентификаторУстройства);
		ДанныеУстройства.Вставить("Наименование"              , Выборка.Наименование);
		ДанныеУстройства.Вставить("ТипОборудования"           , Выборка.ТипОборудования);
		ДанныеУстройства.Вставить("ТипОборудованияИмя"        , МенеджерОборудованияВызовСервера.ПолучитьИмяТипаОборудования(Выборка.ТипОборудования));
		ДанныеУстройства.Вставить("ДрайверОборудования"       , Выборка.ДрайверОборудования);
		ДанныеУстройства.Вставить("ДрайверОборудованияИмя"    , Выборка.ДрайверОборудования.ИмяПредопределенныхДанных);
		ДанныеУстройства.Вставить("ВСоставеКонфигурации"      , Выборка.ДрайверОборудования.Предопределенный);
		ДанныеУстройства.Вставить("ИдентификаторОбъекта"      , Выборка.ДрайверОборудования.ИдентификаторОбъекта);
		ДанныеУстройства.Вставить("ПоставляетсяДистрибутивом" , Выборка.ДрайверОборудования.ПоставляетсяДистрибутивом);
		ДанныеУстройства.Вставить("ИмяМакетаДрайвера"         , Выборка.ДрайверОборудования.ИмяМакетаДрайвера);
		ДанныеУстройства.Вставить("ИмяФайлаДрайвера"          , Выборка.ДрайверОборудования.ИмяФайлаДрайвера);
		ДанныеУстройства.Вставить("Параметры"                 , Выборка.Параметры.Получить());
		ДанныеУстройства.Вставить("РабочееМесто"              , Выборка.РабочееМесто);
		ДанныеУстройства.Вставить("ИмяКомпьютера"             , Выборка.ИмяКомпьютера);
		ОбработчикДрайвера = Выборка.ДрайверОборудования.ОбработчикДрайвера;
		ДанныеУстройства.Вставить("ОбработчикДрайвера"        , ОбработчикДрайвера);
		ДанныеУстройства.Вставить("ОбработчикДрайвераИмя"     , XMLСтрока(ОбработчикДрайвера));
		
		ВерсияФорматаОбмена = ?(Выборка.ВерсияФорматаОбмена > 0, Выборка.ВерсияФорматаОбмена, МенеджерОборудованияВызовСервера.РевизияИнтерфейсаДрайверов()); 
		ДанныеУстройства.Вставить("ВерсияФорматаОбмена", ВерсияФорматаОбмена);
		
		Если ТипЗнч(ДанныеУстройства.Параметры) = Тип("Структура") Тогда
			ДанныеУстройства.Параметры.Вставить("Идентификатор", Выборка.Ссылка); 
		КонецЕсли;
		СписокОборудования.Добавить(ДанныеУстройства);
	КонецЦикла;
	
	// Возвращаем полученный список с данными всех найденных устройств.
	Возврат СписокОборудования;
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры.
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.Параметры
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Идентификатор ИЛИ ПодключаемоеОборудование.ИдентификаторУстройства = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Параметры.Получить();
	Возврат Результат;
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры, ВерсияФорматаОбмена) Экспорт

	Попытка
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.Ссылка = &Идентификатор ИЛИ ПодключаемоеОборудование.ИдентификаторУстройства = &Идентификатор");
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
		
		ОбъектСправочника = ТаблицаРезультатов[0].Ссылка.ПолучитьОбъект();
		ОбъектСправочника.Параметры = Новый ХранилищеЗначения(Параметры);
		ОбъектСправочника.ВерсияФорматаОбмена = ВерсияФорматаОбмена;
		ОбъектСправочника.Записать();
		Результат = Истина;
		
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция возвращает структуру с данными устройства
// (со значениями реквизитов элемента справочника).
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	ДанныеУстройства = Новый Структура();

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ПодключаемоеОборудование.ИдентификаторУстройства КАК ИдентификаторУстройства,
	|	ПодключаемоеОборудование.Наименование КАК Наименование,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.ДрайверОборудования КАК ДрайверОборудования,      
	|	ПодключаемоеОборудование.ВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.РабочееМесто КАК РабочееМесто,
	|	ПодключаемоеОборудование.Параметры КАК Параметры,
	|	РабочиеМеста.ИмяКомпьютера КАК ИмяКомпьютера
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	|		ПО ПодключаемоеОборудование.РабочееМесто = РабочиеМеста.Ссылка
	|ГДЕ
	|	(ПодключаемоеОборудование.ИдентификаторУстройства = &Идентификатор
	|			ИЛИ ПодключаемоеОборудование.Ссылка = &Идентификатор)
	|");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	                                                           
	Если Выборка.Следующий() Тогда
		// Заполним структуру данных устройства.
		ДанныеУстройства.Вставить("Ссылка"                    , Выборка.Ссылка);
		ДанныеУстройства.Вставить("ИдентификаторУстройства"   , Выборка.ИдентификаторУстройства);
		ДанныеУстройства.Вставить("Наименование"              , Выборка.Наименование);
		ДанныеУстройства.Вставить("ТипОборудования"           , Выборка.ТипОборудования);
		ДанныеУстройства.Вставить("ТипОборудованияИмя"        , МенеджерОборудованияВызовСервера.ПолучитьИмяТипаОборудования(Выборка.ТипОборудования));
		ДанныеУстройства.Вставить("ДрайверОборудования"       , Выборка.ДрайверОборудования);
		ДанныеУстройства.Вставить("ДрайверОборудованияИмя"    , Выборка.ДрайверОборудования.ИмяПредопределенныхДанных);
		ДанныеУстройства.Вставить("ВСоставеКонфигурации"      , Выборка.ДрайверОборудования.Предопределенный);
		ДанныеУстройства.Вставить("ИдентификаторОбъекта"      , Выборка.ДрайверОборудования.ИдентификаторОбъекта);
		ДанныеУстройства.Вставить("ПоставляетсяДистрибутивом" , Выборка.ДрайверОборудования.ПоставляетсяДистрибутивом);
		ДанныеУстройства.Вставить("ИмяМакетаДрайвера"         , Выборка.ДрайверОборудования.ИмяМакетаДрайвера);
		ДанныеУстройства.Вставить("ИмяФайлаДрайвера"          , Выборка.ДрайверОборудования.ИмяФайлаДрайвера);
		ДанныеУстройства.Вставить("Параметры"                 , Выборка.Параметры.Получить());
		ДанныеУстройства.Вставить("РабочееМесто"              , Выборка.РабочееМесто);
		ДанныеУстройства.Вставить("ИмяКомпьютера"             , Выборка.ИмяКомпьютера);
		ОбработчикДрайвера = Выборка.ДрайверОборудования.ОбработчикДрайвера;
		ДанныеУстройства.Вставить("ОбработчикДрайвера"        , ОбработчикДрайвера);
		ДанныеУстройства.Вставить("ОбработчикДрайвераИмя"     , XMLСтрока(ОбработчикДрайвера));
		
		ВерсияФорматаОбмена = ?(Выборка.ВерсияФорматаОбмена > 0, Выборка.ВерсияФорматаОбмена, МенеджерОборудованияВызовСервера.РевизияИнтерфейсаДрайверов()); 
		ДанныеУстройства.Вставить("ВерсияФорматаОбмена", ВерсияФорматаОбмена);
		
		Если ТипЗнч(ДанныеУстройства.Параметры) = Тип("Структура") Тогда
			ДанныеУстройства.Параметры.Вставить("Идентификатор", Выборка.Ссылка); 
		КонецЕсли;
	КонецЕсли;
		
	Возврат ДанныеУстройства;
	
КонецФункции

#КонецЕсли                                                                          

&НаСервере
Процедура ПрогрузитьВесы(СтруктураПараметров, АдресРезультата = Неопределено) Экспорт
	
	ВремяНачала = ТекущаяДата();
	
	Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("Массив") Тогда
		Ссылка = СтруктураПараметров.Ссылка[0];
	ИначеЕсли ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда
		Ссылка = СтруктураПараметров.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СобытиеЖР") Тогда
		СобытиеЖР = СтруктураПараметров.СобытиеЖР; //в регламенте ххх_ПрогрузкаВесовНочью СобытиеЖР = "Проверка весов на битые ячейки"
	Иначе
		СобытиеЖР = "Прогрузка весов";
	КонецЕсли;
	
	//сохраним дату начала прогрузки
	ххх_Сервер.ЗапомнитьДатуПрогрузки(ВремяНачала,Ссылка);
	
	ПланОбменаДляВесов = ххх_Сервер.ОпределитьПланОбменаПоВесам(Ссылка);
	Попытка
		// Создаем объект
		scale = Новый COMОбъект("CAScentre_DLL_printScale_Apple.Scale"); //добавлен функционал проверки весов
		//scale = Новый COMОбъект("CAScentre_DLL_printScale.Scale");     //оригинал
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"Не установлен драйвер для весов. Обратитесь к администратору!");
		Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
			ПоместитьВоВременноеХранилище("Не установлен драйвер для весов. Обратитесь к администратору!", АдресРезультата);		
		КонецЕсли;
		Возврат;
	КонецПопытки;

	// Задаем основные настройки драйвера для работы с весами
	scale.IP   = Ссылка.ИпАдресс;
	scale.Port = Ссылка.Порт;
	scale.Type = Ссылка.type;
	Попытка
		//Подключаемся к весам
		scale.Open();
	Исключение
		ОписаниеОшибкиВесов = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
		ЗаписьЖурналаРегистрации(СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""". Установленные параметры подключения - IP адрес весов: "+scale.IP+", номер порта связи TCP/IP: "+scale.Port+", номер типа весов: "+Строка(scale.Type)+".");
		Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
			ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Установленные параметры подключения - IP адрес весов: "+scale.IP+", номер порта связи TCP/IP: "+scale.Port+", номер типа весов: "+Строка(scale.Type)+".", АдресРезультата);		
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	//соединение с весами установлено.
	
	//// ТЕСТ - получаем инфу из весов
	//scale.ReadCurrentStatus();
	//ТекущийВес   = scale.statusWeight;     //текущий вес на весах
	//ТекущаяЦена  = scale.statusPrice;      //текущая цена на весах
	//ТекВесТары   = scale.statusWeightTare; //текущий вес тары на весах
	//Стабильность = scale.statusStable;     //стабильность веса
	//НомерОтдела  = scale.statusDept;       //номер выбранного отдела
	//НомерТовара  = scale.statusPlu;        //номер выбранного товара на весах
	////---
		
	//1. передаем информацию о магазине
	ПустаяСтрока = "                              ";
	НазваниеМагазина = Прав(ПустаяСтрока+Ссылка.НазваниеМагазина, 26);
	НазваниеМагазина = НазваниеМагазина + "  "; //при передаче 2-х строк у первой с конца затираются 2 символа		
	НазваниеОрганизации = Прав(ПустаяСтрока+Ссылка.Организация.НаименованиеСокращенное, 28);
	
	//передать адрес магазина с организацией
	Попытка 
		scale.SendShopName(1,  		//shopNumber – номер магазина - не используется в LP 1.6
			НазваниеМагазина,      	//name1 – название магазина
			НазваниеОрганизации,   	//name2orAddress – вторая строка названия магазина(адрес) 
			"");                   	//name3telnumber – третья строка магазина(номер телефона) - не используется в LP 1.6
		
		ЗаписьЖурналаРегистрации(СобытиеЖР, 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"На весы прогружены данные о магазине, адрес: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+""".");
		
	Исключение
		Если scale.ResultCode = 0 Тогда
			ОписаниеОшибкиВесов = "Не удалось отправить на весы данные о магазине. Весы: """+Ссылка.Наименование+""", адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+""".";
		Иначе
			ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
			ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""", адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+"""."; 
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖР, 
			УровеньЖурналаРегистрации.Предупреждение,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов);
		
		//в этом случае проверяем, какие данные о магазине хранятся на весах
		Попытка
			scale.ReadShopName();         // только "CAScentre_DLL_printScale_Apple.Scale"
			ИнфоМагазин = scale.InfoPLU;  // только "CAScentre_DLL_printScale_Apple.Scale"
			ВесыИмяМагазина = Лев(ИнфоМагазин, 28);
			ВесыОрганизация = Сред(ИнфоМагазин,29);
			
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Информация,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				"На весах """+Ссылка.Наименование+""" хранятся данные о магазине: """+ИнфоМагазин+""".");
		Исключение //scale.ReadShopName()
			Если scale.ResultCode = 0 Тогда
				ОписаниеОшибкиВесов = "Не удалось получить из весов данные о магазине. (Адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+""")."; 
			Иначе
				ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""", адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+"""."; 
			КонецЕсли;
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Предупреждение,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов);
		КонецПопытки; //scale.ReadShopName()
		
		// закомментировано, так как не является ошибкой. Адрес магазина уже есть в весах из старых прогрузок:
		
		//Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
		//	ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов, АдресРезультата);		
		//КонецЕсли;
		//scale.close();
		//Возврат;
	КонецПопытки;
	
	Попытка
		// 2. Передаем текущие дату и время на весы 
		ДатаВремяДляВесов = ТекущаяДата();
		scale.SendDateTime(Год(ДатаВремяДляВесов), Месяц(ДатаВремяДляВесов), День(ДатаВремяДляВесов),
			Час(ДатаВремяДляВесов),Минута(ДатаВремяДляВесов), Секунда(ДатаВремяДляВесов));	
	Исключение
		Если scale.ResultCode = 0 Тогда
			ОписаниеОшибкиВесов = "Не удалось отправить текущее время и дату на весы: """+Ссылка.Наименование+""".";
		Иначе		
			ОписаниеОшибкиВесов = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
			ОписаниеОшибкиВесов = ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""".";
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов);
		Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
			ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов, АдресРезультата);		
		КонецЕсли;
		scale.close();
		Возврат;
	КонецПопытки;
	
	Если Ссылка.type = 1 Тогда // Весы LP 1.6	
		Попытка
			// 3. Передаем настройки пользователя на весы CAS LP-1.6
			Dept = "320";
			scale.LP16_SetSettings(Dept, Ссылка.Label, Ссылка.Barcode, Ссылка.Adjust,
				число(Ссылка.PriceEdit), число(Ссылка.PriceEditSave), число(Ссылка.printPluNumber),
				число(Ссылка.printGroup), число(Ссылка.PrintDatePAck), число(Ссылка.PrintLife),
				число(Ссылка.printLabelNumber), число(Ссылка.printTimePack), Ссылка.wegithAutoPrint);
	//Dept – номер отдела; Label – номер глобальной этикетки; Barcode – номер глобального штрих-кода; Adjust – сдвиг печати(припринт);
	//priceEdit – разрешить изменение цены оператором; priceEditSave – разрешить изменение цены и сохранение новой; printPluNumber – выводить на печать номер товара;
	//printGroup – выводить на печать номер группового кода; printDatePack – выводить на печать дату упаковки; printLife – выводить на печать срок годности;
	//printLabelNumber – выводить на печать порядковый номер этикетки; printTimePack – выводить на печать время упаковки; weightAutoPrint – вес автопечати.	
		Исключение
			Если scale.ResultCode = 0 Тогда
				ОписаниеОшибкиВесов = "Не удалось задать настройки весам LP-1.6. Весы: """+Ссылка.Наименование+""".";
			Иначе	
				ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				ОписаниеОшибкиВесов = ОписаниеОшибкиВесы + " (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""".";
			КонецЕсли;
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Ошибка,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов);
			Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
				ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов, АдресРезультата);		
			КонецЕсли;
			scale.close();
			Возврат;
		КонецПопытки;
				
	ИначеЕсли Ссылка.type = 3 Тогда // Весы 5000J
		Для каждого стр из Ссылка.ПараметрыВесов Цикл
			Попытка
				// или 4. Передаем настройки пользователя на весы CAS CL5000J
				scale.CL5000J_SetParam(стр.Параметр, стр.Значение);
			Исключение	
				ОписаниеОшибкиВесов = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				ЗаписьЖурналаРегистрации(СобытиеЖР, 
					УровеньЖурналаРегистрации.Ошибка,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""". Устанавливаемый параметр: "+стр.Параметр+", значение: "+стр.Значение);
				Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
					ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""". Устанавливаемый параметр: "+стр.Параметр+", значение: "+стр.Значение, АдресРезультата);		
				КонецЕсли;
				scale.close();
				Возврат;
			КонецПопытки;			
		КонецЦикла;
		
		Попытка
			// Передаем формат ШК на весы 
			scale.CL5000J_SendBarcode(1,//barcodeNumber, по умолчанию 1
				1, 						// barcodeType, 1 - для EAN13
				"DDIIIIIWWWWWC"); 		// DD - номер отдела, IIIII - код товара, WWWWW - масса, C - разряд проверочной суммы
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Ошибка,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов+" Не удалось передать формат штрихкода на весы CL5000J: """+Ссылка.Наименование+""".");
		КонецПопытки;	
	КонецЕсли;
	
	Товары = СтруктураПараметров.Товары;
	
	//набНоменклатураДопСвойствоСрокГодности = РегистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	//набНоменклатураДопСвойствоСрокГодности.Отбор.свойство.установить("НоменклатураДопСвойствоСрокГодности");
	//набНоменклатураДопСвойствоСрокГодности.Прочитать();
	//НоменклатураДопСвойствоСрокГодности = набНоменклатураДопСвойствоСрокГодности[0].ЗначениеВБазе;
		
	Если НЕ ЗначениеЗаполнено(Товары) Тогда //при ручной прогрузке
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатураДопСвойствоСрокГодности", Справочники.ххх_Справочник.НоменклатураДопСвойствоСрокГодности.Значение);
		Запрос.УстановитьПараметр("ВидЦены",      Ссылка.ВидЦены);
		Запрос.УстановитьПараметр("Оборудование", Ссылка);
		Запрос.УстановитьПараметр("ТекДата",      ТекущаяДата());
		Номенклатура_НаименованиеЭтикетка = ?(Ссылка.type = 1, "Сроки.Номенклатура.ххх_НаименованиеЭтикетка", "ххх_КодыНоменклатурыВесыКассы.Номенклатура.ххх_НаименованиеЭтикетка"); 
		Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	НоменклатураСправочник.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ АктуальныеЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ВидЦены В (&ВидЦены)) КАК ЦеныНоменклатурыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = НоменклатураСправочник.Ссылка
		|			И (ЦеныНоменклатурыСрезПоследних.ВидЦены = &видЦены)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеЦены.Номенклатура КАК Номенклатура,
		|	АктуальныеЦены.Цена КАК Цена,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК Срок
		|ПОМЕСТИТЬ Сроки
		|ИЗ
		|	АктуальныеЦены КАК АктуальныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО АктуальныеЦены.Номенклатура = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &НоменклатураДопСвойствоСрокГодности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сроки.Номенклатура КАК Номенклатура,
		|	Сроки.Цена КАК Цена,
		|	ЕСТЬNULL(Сроки.Срок, 0) КАК Срок,
		|	ххх_КодыНоменклатурыВесыКассы.Код КАК Код,
		|	Сроки.Номенклатура.Описание КАК НоменклатураОписание,
		|	ххх_КодыНоменклатурыВесыКассы.Инкримента КАК Номенклатураххх_ИдЦентр,
		|	"+Номенклатура_НаименованиеЭтикетка+" КАК Номенклатураххх_НаименованиеЭтикетка,
		|	Сроки.Номенклатура.Производитель.Наименование КАК Производитель,
		|	ххх_КодыНоменклатурыВесыКассы.НомерДляСостава КАК НомерДляСостава
		|ИЗ
		|	Сроки КАК Сроки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
		|	ПО Сроки.Номенклатура = ххх_КодыНоменклатурыВесыКассы.Номенклатура
		|ГДЕ
		|	ххх_КодыНоменклатурыВесыКассы.Оборудование = &Оборудование
		|УПОРЯДОЧИТЬ ПО
		|	Код ВОЗР";
		Товары = Запрос.выполнить().Выбрать();
	КонецЕсли;
	
	ВсегоТоваров = Товары.Количество();
	Если Ссылка.type = 3 Тогда // Весы 5000J составы прогружаем с товаром
		ВсегоТоваровСоставов = ВсегоТоваров;
	ИначеЕсли Ссылка.type = 1 Тогда
		ВсегоТоваровСоставов = ВсегоТоваров + ВсегоТоваров;	// Весы LP1.6 Товары и составы прогружаем отдельно
	КонецЕсли;
	ПрогруженоТоваров = 0;
	
	//закомментировано - в логах будет общее количество товаров при прогрузке каждого товара
	
	//ЗаписьЖурналаРегистрации("Прогрузка весов", 
	//УровеньЖурналаРегистрации.Информация,
	//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
	//ПланОбменаДляВесов,
	//"Количество товаров к прогрузке: "+ВсегоТоваров);
	
	Пока Товары.Следующий() Цикл		
		Попытка
			// 5. Очистка свойств связанных с загрузкой параметров о товаре
			scale.InitData(); 
		Исключение	
			Если scale.ResultCode = 0 Тогда
				ОписаниеОшибкиВесов = "Не удалось очистить свойства на весах для загрузки параметров о товаре: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""". Весы: """+Ссылка.Наименование+""".";
			Иначе
				ОписаниеОшибкиВесы  = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				ОписаниеОшибкиВесов = "Товар: "+Товары.Номенклатура.ххх_НаименованиеЭтикетка+". "+ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."
			КонецЕсли;
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Ошибка,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов);
			Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
				ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов, АдресРезультата);		
			КонецЕсли;
			scale.close();
			Возврат; //если словили эту ошибку, то дальнейшая передача товаров не происходит
		КонецПопытки;			
		
		// номер товара
		scale.pluNumber = Товары.Код;
		
		Наименование = ххх_Сервер.ПолучитьСтроку866(СокрЛП(Товары.Номенклатура.ххх_НаименованиеЭтикетка));	
		
		Если СокрЛП(ВРег(Наименование)) <> СокрЛП(ВРег(Товары.Номенклатура.ххх_НаименованиеЭтикетка)) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Предупреждение,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				"Наименование товара: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""" изменено на допустимое: """+Наименование+""".");
		КонецЕсли;
		
		Если Ссылка.type = 1 Тогда // Весы ЛП16
			Наименование = Наименование + " ("+Товары.Производитель+")";	
			// номер отдела
			scale.pluDept = "320"; // весы "320" считают как "23" и поставят в начало ШК	
			// срок годности, в днях
			Если НЕ ЗначениеЗаполнено(Товары.Срок) или Товары.Срок="0"  Тогда
				scale.pluDateLife = 30; 
			Иначе
				scale.pluDateLife = Товары.Срок;
			КонецЕсли;
			//// номер логотипа для печати на этикетки
			//scale.pluLP16logoNumber = 0; // устанавливается в 0 после scale.InitData(); 
			
		ИначеЕсли Ссылка.type = 3 Тогда // Весы CL5000J
			scale.pluDept = 23; // номер отдела	
			Если Ссылка.pluNumberLabel > 0 Тогда
				scale.pluNumberLabel = Ссылка.pluNumberLabel;
			Иначе
				scale.pluNumberLabel = 12;
			КонецЕсли;	
		КонецЕсли;
		
		//первая строка наименования товара
		scale.pluName1 = Лев(Наименование, 28);
		СтрокаДлина = СтрДлина(Наименование);
		Если СтрокаДлина > 28 Тогда
			//вторая строка наименования товара
			scale.pluName2 = Прав(Наименование,СтрокаДлина-28);
		КонецЕсли;
		
		// Цена товара в копейках
		scale.pluPrice = Товары.Цена * 100; //число в коп.
		// тип товара
		scale.pluType  = 1;   // 1 - весовой товар. только для CL5000(J)
		// строка, которая печатается под логотипом.
		scale.pluStrLogo   = "1"; 
		// групповой код. Максимально 6 цифр
		scale.pluGroupCode = 1234;
		// код товара. Максимально 6 цифр
		scale.pluItemCode  = Товары.Номенклатураххх_ИдЦентр;

		// устанавливается в 0 после scale.InitData() - поэтому закомментировано

		////фиксированная цена товара, в копейках
		//scale.pluFixedPrice  = 0;
		////вес тары, в граммах.
		//scale.pluWeightTare  = 0;
		////дата упаковки, в днях
		//scale.pluDatePack    = 0;
		////время упаковки, в часах
		//scale.pluTimePack    = 0;
		////срок годности, в часах
		//scale.pluTimeLife    = 0;
		////номер штрих-кода для печати
		//scale.pluNumberBarcode = 0;
		////дата создания продукта, в днях
		//scale.pluDateCreate  = 0;
		////номер текста рекламного сообщения
		//scale.pluTextNumber  = 0;	
		////номер единицы измерения количественного товара.
		//scale.pluSYmbol      = 0;
		////кол-во для штучных и счетных товаров.
		//scale.pluExtPCS      = 0;
		////номер страны-производителя
		//scale.pluExtOrigin   = 0;
		////номер второго штрих-кода для печати на этикетке
		//scale.pluExtBar2     = 0;
		////фиксированный вес продукта
		//scale.pluExtFixedWeight = 0;
				
		///////////////////////////////// не грузить состав на весы самообслуживания //////////////////////////////////////////////
		Если Товары.НомерДляСостава>0 Тогда	
			//ссылка на номер сообщения 
			scale.pluNumberMsg = Товары.НомерДляСостава;//Товары.Код;
			Если Ссылка.type = 3 Тогда // Весы 5000J		 
				scale.pluTextMessage=""; // пока составы на весы самообслуживания не грузим!
			КонецЕсли;
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////	
		Попытка	
			// 6. Передача в весы данных о товаре
			scale.SendPlu();
			
			//МенеджерЗаписи = РегистрыСведений.ххх_КодыНоменклатурыВесыКассыТекущееСостояние.СоздатьМенеджерЗаписи();
			//МенеджерЗаписи.Оборудование = ссылка;
			//МенеджерЗаписи.Номенклатура = Товары.Номенклатура;
			//МенеджерЗаписи.Код = Товары.Код;
			//МенеджерЗаписи.Записать(Истина);
			
			ПрогруженоТоваров = ПрогруженоТоваров + 1;
			ПроцентВыполнения = ПрогруженоТоваров/ВсегоТоваровСоставов*100; //для товаров и составов
			Описание = "Прогружено "+ПрогруженоТоваров+" из "+ВсегоТоваров+" товаров";
			
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Информация,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				Описание + "; (ячейка: " + Товары.Код + ") код: " + Товары.Номенклатура.ххх_ИдЦентр + 
				//", товар: """ + Товары.Номенклатураххх_НаименованиеЭтикетка + """, производитель: (" + Товары.Производитель + 
				//"). Цена: "+Товары.Цена+" руб.");
				", товар: """ + Наименование + """. Цена: "+Товары.Цена+" руб."); 

			Если Ссылка.type = 3 Тогда // Весы 5000J
				//снять с регистрации изменений обмена
				Попытка //в регламентном задании заполняется Узел, при ручной загрузке - нет
					Узел = СтруктураПараметров.Узел; 
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Товары.Номенклатура);
					//регистр Штрихкоды
					НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Оборудование.Установить(Ссылка, Истина);
					НаборЗаписей.Отбор.Номенклатура.Установить(Товары.Номенклатура, Истина);
					НаборЗаписей.Отбор.Код.Установить(Товары.Код, Истина);
					НаборЗаписей.Прочитать();	
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда
				ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Описание);
			КонецЕсли;
						
		Исключение //scale.SendPlu(); Не удалось отправить товар на весы.
			
			Если scale.ResultCode = 0 Тогда
				//ОписаниеОшибкиВесов = "Не удалось отправить товар: """+Товары.Номенклатура.ххх_ИдЦентр+" "+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""" на весы: """+Ссылка.Наименование+""".";
				ОписаниеОшибкиВесов = "Не удалось отправить товар: """+Товары.Номенклатура.ххх_ИдЦентр+" "+Наименование+""" на весы: """+Ссылка.Наименование+""".";
			Иначе
				ОписаниеОшибкиВесы  = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				//ОписаниеОшибкиВесов = "Товар: "+Товары.Номенклатура.ххх_ИдЦентр+" "+Товары.Номенклатура.ххх_НаименованиеЭтикетка+". "+ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."
				ОписаниеОшибкиВесов = "Товар: "+Товары.Номенклатура.ххх_ИдЦентр+" "+Наименование+". "+ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(СобытиеЖР, 
				УровеньЖурналаРегистрации.Ошибка,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов +" "+ ОписаниеОшибки());
				//Сообщить("На весы не прогрузилась номенклатура: "+Товары.Номенклатура.ххх_ИдЦентр+" "+Товары.Номенклатураххх_НаименованиеЭтикетка+". Код ошибки: "+scale.ResultCode+", описание: "+ ОписаниеОшибки());		
		КонецПопытки;
	КонецЦикла;
		
	///////////////////////////////////////////////////////////////////////////////////
	
	Если Ссылка.type = 1 Тогда // На весы LP 1.6 составы товаров нужно грузить отдельно
		
		//Нужно из строки Состава товара при проверке убрать дату изготовления
		RegExp = Новый COMОбъект("VBScript.RegExp");
		RegExp.MultiLine = Ложь; 
		RegExp.Global    = Истина;
		RegExp.Pattern   = "изг\d{6}_\d{2}:\d{2}";
				
		ПрогруженоСоставов = 0; 
		
		Товары.Сбросить();	
		Пока Товары.Следующий() Цикл
			
			//снять с регистрации изменений обмена
			Попытка //в регламентном задании заполняется Узел, при ручной загрузке - нет
				Узел = СтруктураПараметров.Узел; 
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Товары.Номенклатура);
				//регистр Штрихкоды
				НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Оборудование.Установить(Ссылка, Истина);
				НаборЗаписей.Отбор.Номенклатура.Установить(Товары.Номенклатура, Истина);
				НаборЗаписей.Отбор.Код.Установить(Товары.Код, Истина);
				НаборЗаписей.Прочитать();	
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			Исключение
			КонецПопытки;
			
			Если Товары.НомерДляСостава>0 Тогда		
				scale.InitData(); // сбрасываем переменные в драйвере
				scale.pluNumberMsg = Товары.НомерДляСостава;//Товары.Код;
				ДопСв = Справочники.ххх_Справочник.НоменклатураДопСвойствоВыводитьДатуПроизводства.Значение;
				ЗначениеСв = ххх_Сервер.ПолучитьЗначениеДопСведений(Товары.Номенклатура, ДопСв);
				
				Попытка
					Если НРег(ЗначениеСв) = "true" Тогда
						ИнфаОСоставе = ?(СокрЛП(Товары.НоменклатураОписание)=""," ", Лев(Товары.НоменклатураОписание, 383)+" "+Константы.ххх_ВремяВыработкиТовара.Получить());
					Иначе 
						ИнфаОСоставе = ?(СокрЛП(Товары.НоменклатураОписание)=""," ", Лев(Товары.НоменклатураОписание, 400)); //max 400 символов
					КонецЕсли;
				Исключение
					ИнфаОСоставе = ?(СокрЛП(Товары.НоменклатураОписание)=""," ", Лев(Товары.НоменклатураОписание, 400)); //max 400 символов
				КонецПопытки;
				
				ИнфоСостав = ххх_Сервер.ПолучитьСтроку866(ИнфаОСоставе);
				
				Если СокрЛП(ВРег(ИнфоСостав)) <> СокрЛП(ВРег(ИнфаОСоставе)) Тогда
					ЗаписьЖурналаРегистрации(СобытиеЖР, 
					УровеньЖурналаРегистрации.Предупреждение,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					"Информация о составе товара: """+ИнфаОСоставе+""""+Символы.ПС+Символы.ПС+" изменена на допустимую: """+ИнфоСостав+""".");
				КонецЕсли;
					
				scale.pluTextMessage = ИнфоСостав;
				
				Попытка
					scale.SendMsg();
					ПрогруженоСоставов = ПрогруженоСоставов + 1;
					ПроцентВыполнения = 50 + ПрогруженоСоставов/ВсегоТоваровСоставов*100;
					Описание = "Загружен "+ПрогруженоСоставов+"-й состав";
					
					ЗаписьЖурналаРегистрации(СобытиеЖР, 
						УровеньЖурналаРегистрации.Информация,,
						//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
						ПланОбменаДляВесов,
						Описание+"; (ячейка: "+Товары.Код+
						"); товар: """+Товары.Номенклатура.ххх_ИдЦентр+" "+Товары.Номенклатураххх_НаименованиеЭтикетка+""". Номер для состава: """+Товары.НомерДляСостава+
						""". Информация о составе: """+ИнфоСостав+""".");
					
					Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда
						ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Описание);
					КонецЕсли;
					
				Исключение
					Если scale.ResultCode = 0 Тогда
						ОписаниеОшибкиВесов = "Не удалось отправить текст состава товара на весы. Товар: """+Товары.Номенклатура.ххх_ИдЦентр+" "+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""", весы: """+Ссылка.Наименование+""", информация о составе: """+СокрЛП(Товары.НоменклатураОписание)+""".";
					Иначе
						ОписаниеОшибкиВесы  = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
						ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Товар: """+Товары.Номенклатура.ххх_ИдЦентр+" "+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""". Весы: """+Ссылка.Наименование+""", информация о составе: """+СокрЛП(Товары.НоменклатураОписание)+""".";
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации(СобытиеЖР, 
						УровеньЖурналаРегистрации.Ошибка,,
						//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
						ПланОбменаДляВесов,
						ОписаниеОшибкиВесов +" "+ ОписаниеОшибки());
					Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
						ПоместитьВоВременноеХранилище(ОписаниеОшибкиВесов, АдресРезультата);		
					КонецЕсли;
					scale.close();
					Возврат;
				КонецПопытки;
				Если ПрогруженоСоставов = 100 И Ссылка.type = 3 Тогда // Весы 5000 могут принять только 100 сообщений
					Прервать;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	scale.close();
			
	ВремяКонца = ТекущаяДата();
	КонЧасы    = 0;
	КонМинуты  = 0;
	КонСекунды = 0;	
	ОстатокВремени = ВремяКонца-ВремяНачала;
	КонЧасы        = Цел(ОстатокВремени / 3600);     //3600 - Количество секунд в часе
	ОстатокВремени = ОстатокВремени - КонЧасы * 3600;
	КонМинуты      = Цел(ОстатокВремени / 60);       //60   - Количество секунд в минуте
	ОстатокВремени = ОстатокВремени - КонМинуты * 60;
	КонСекунды     = ОстатокВремени;
	ТекСтрока = Формат(КонЧасы,"ЧЦ=2; ЧН=0; ЧВН=") + ":" + Формат(КонМинуты,"ЧЦ=2; ЧН=0; ЧВН=") + ":" + Формат(КонСекунды,"ЧЦ=2; ЧН=0; ЧВН=");
	
	Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда 
		Если Ссылка.type = 3 Тогда // Весы 5000J
			ПоместитьВоВременноеХранилище(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Прогружено %1 товаров. Длительность операции: %2'"), ВсегоТоваров, ТекСтрока), АдресРезультата);
		Иначе	
			ПоместитьВоВременноеХранилище(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Прогружено %1 товаров. Прогружено %2 составов. Длительность операции: %3'"), ПрогруженоТоваров, ПрогруженоСоставов, ТекСтрока), АдресРезультата);			
		КонецЕсли;
	КонецЕсли;
	ЗаписьЖурналаРегистрации(СобытиеЖР, 
		УровеньЖурналаРегистрации.Информация,,
		//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
		ПланОбменаДляВесов,
		"Окончание прогрузки весов. Длительность операции: " + ТекСтрока);
	
КонецПроцедуры
	  
#КонецОбласти
