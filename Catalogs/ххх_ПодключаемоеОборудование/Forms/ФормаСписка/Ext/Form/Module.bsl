
&НаКлиенте
Процедура ПрогрузитьВесы_LP16_CL5000J(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.количество()<>0 Тогда
		Для каждого ссыль из Элементы.Список.ВыделенныеСтроки Цикл
			
			IPадрес = ПолучитьIPАдрес(ссыль);
			ответ = ping(IPадрес);
			Если ответ = 0 Тогда
				Сообщить("Нет соединения с весами """+ссыль+""" по IP-адресу: "+IPадрес);
				Прервать;
			КонецЕсли;
				
			//ValMa - запуск длительной операции
			ДлительнаяОперация = ВыполнитьФоновоеЗаданиеНаСервере(ссыль);
			// Возвращает пустую структуру для параметра ПараметрыОжидания
			ПараметрыОжидания  = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			// указываем необходимость вывода прогресса состояния
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			// указываем интервал обновления состояния в секундах, если не указать, 
			// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
			ПараметрыОжидания.Интервал = 1;
			Оп = Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Оп,
			ПараметрыОжидания);
		КонецЦикла;
	Иначе
		Сообщить("Для прогрузки весов необходимо выделить строку/строки.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьIPАдрес(Ссылка)
	Возврат Ссылка.ИпАдресс;
КонецФункции


&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере(Ссылка)
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	СтруктураПараметров.Вставить("Товары", Неопределено);
	
	//ValMa - 2-04-2019 - запись в ЖР по прогружаемым весам
	ЗаписьЖурналаРегистрации("Прогрузка весов", 
	УровеньЖурналаРегистрации.Информация,
	Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
	ххх_Сервер.ОпределитьПланОбменаПоВесам(СтруктураПараметров.Ссылка),
	"Начало прогрузки весов вручную.");	
		
    ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
    ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ход выполнения прогрузки товаров и цен на весы LP1.6 / CL5000J'");
    
    ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Справочники.ххх_ПодключаемоеОборудование.ПрогрузитьВесы",
        СтруктураПараметров,
        ПараметрыВыполнения);
    
    Возврат ДлительнаяОперация;
    
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт

    Если Результат = Неопределено Тогда
        Возврат;
    Иначе // обрабатываем результат
        ВывестиРезультат(Результат);
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультат(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		ТекстСообщения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2'"), ТекущаяДатаСеанса(), ТекстСообщения));
	
КонецПроцедуры

////////////////////////////////////////////////

&НаКлиенте
Процедура ПрогрузитьКассы(Команда)
	Если Элементы.Список.ВыделенныеСтроки.количество()<>0 Тогда
		Для каждого ссыль из Элементы.Список.ВыделенныеСтроки Цикл
			ПрогрузитьКассыНаСервере(ссыль);
		КонецЦикла;
	Иначе
		Сообщить("Для прогрузки касс необходимо веделить строку/строки.");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрогрузитьКассыНаСервере(ссыль)   
	Запрос=Новый запрос;
	Запрос.Текст="";
КонецПроцедуры

///////////////////////////////////////////////////

&НаКлиенте
Процедура ПроверитьВесы(Команда)
	
	ОчиститьСообщения();
	Если Элементы.Список.ВыделенныеСтроки.количество()<>0 Тогда
		СписокВесов = Новый Массив;
		Для каждого ссылка из Элементы.Список.ВыделенныеСтроки Цикл				
			СписокВесов.Добавить(ссылка);	
		КонецЦикла;
		ПроверитьВесыНаСервере(СписокВесов);
		СписокВесов.Очистить();
	Иначе
		Сообщить("Для прогрузки весов необходимо веделить строку/строки.");
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВесыНаСервере(СписокВесов)
	
	Для каждого ссылка из СписокВесов Цикл	
		Если ссылка.ПометкаУдаления Тогда
			Сообщить("Оборудование """+ссылка+""" помечено на удаление.");
			Продолжить;
		КонецЕсли;
		Если НЕ ссылка.УстройствоИспользуется Тогда
			Сообщить("Оборудование """+ссылка+""" не используется.");
			Продолжить;
		КонецЕсли;
		IPадрес = ссылка.ИпАдресс;
		//ответ = ping(IPадрес);
		//Связь = ?(ответ >0 ,"Есть соединение","Нет соединения");
		//Сообщить(Связь+" с весами """+ссылка+""" по IP-адресу: "+IPадрес);
		
		Ответ = ПолучениеФайловИзИнтернетаСлужебный.ПроверитьДоступностьСервера(IPадрес);
		Если Ответ.Доступен Тогда
			Сообщить("Есть соединение с весами """+ссылка+""""+Символы.ПС+ Ответ.ЖурналДиагностики);
		Иначе
			Сообщить("Нет связи с Весами """+Ссылка+""" !" +Символы.ПС+ Ответ.ЖурналДиагностики);
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры

Функция Ping(IPАдрес)
	objShell = Новый COMОбъект("WScript.Shell") ;
	//ключ -n Число посылаемых эхо-запросов; ключ -w Таймаут ожидания каждого ответа (в миллисекундах).
	objScriptExec = objShell.Exec("ping.exe -n 1 -w 250 " + IPАдрес);
	strPingResults = НРег(objScriptExec.StdOut.ReadAll());
	Возврат Найти(strPingResults, "ttl=");
КонецФункции

///////////////////////////////////////////////////

&НаКлиенте
Процедура ЛогПрогрузки(Команда)
	ОчиститьСообщения();
	ЛогПрогрузкиНаСервере(Элементы.Список.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЛогПрогрузкиНаСервере(ОборудованиеВесы)
	
	КлючОбъекта      = ОборудованиеВесы.Наименование;
	КлючНастроек     = "ПрогрузкаНаВесы.Apple";
	ОписаниеНастроек = "ПрогрузкаНаВесы.Apple";
	ИмяПользователя  = ПользователиКлиентСервер.ТекущийПользователь();

	УстановитьПривилегированныйРежим(Истина);
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя.Наименование);
	УстановитьПривилегированныйРежим(Ложь);

	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		АктуальнаяДата = ЗначениеНастроек.Получить("ВремяНачала");
	Иначе
		АктуальнаяДата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	Если АктуальнаяДата < НачалоДня(ТекущаяДата()) Тогда
		АктуальнаяДата = НачалоДня(ТекущаяДата())
	КонецЕсли;
	
	ТЗЖурналРегистрации = Новый ТаблицаЗначений;
	Фильтр = Новый Структура;
	Фильтр.Вставить("ДатаНачала",    АктуальнаяДата);  
	Фильтр.Вставить("ДатаОкончания", ТекущаяДата());
	//Фильтр.Вставить("Метаданные",    Метаданные.ПланыОбмена.ПланОбменаСОборудованием);  
	Фильтр.Вставить("Данные",  	     ххх_Сервер.ОпределитьПланОбменаПоВесам(ОборудованиеВесы));
	
	УстановитьПривилегированныйРежим(Истина);
	//ВыгрузитьЖурналРегистрации(ТЗЖурналРегистрации, Фильтр, "Дата, Уровень, Событие, Метаданные, Данные, Комментарий"); 
	ВыгрузитьЖурналРегистрации(ТЗЖурналРегистрации, Фильтр, "Дата, Уровень, Событие, Данные, Комментарий");
	//ВыгрузитьЖурналРегистрации(ТЗЖурналРегистрации, Фильтр, "Дата, Уровень, Событие, Комментарий");
	УстановитьПривилегированныйРежим(Ложь);

	Для каждого СтрТЗ Из ТЗЖурналРегистрации Цикл
		Если СтрТЗ.Событие = "Прогрузка весов" Тогда
			//Сообщить(Строка(СтрТЗ.Дата)+" ("+СтрТЗ.Уровень+"). ["+СтрТЗ.Метаданные+", "+СтрТЗ.Данные+"] "+СтрТЗ.Комментарий);
			Сообщить(Строка(СтрТЗ.Дата)+" ("+СтрТЗ.Уровень+"). [Весы "+СтрТЗ.Данные+"] "+СтрТЗ.Комментарий);
		КонецЕсли;	
    КонецЦикла;

КонецПроцедуры
