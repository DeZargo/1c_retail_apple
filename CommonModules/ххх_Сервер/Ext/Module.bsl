
Процедура УстановитьСтандартныйИнтерфейсПользователюПриЗаписиНового(Источник, Отказ) экспорт	
	Если источник.этоновый() тогда
		источник.установитьСсылкуНового(Источник.получитьСсылкуНового());
		ИмяПользователя=источник;
		
	    НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
	    НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Истина;
	    НастройкиКлиента.ОтображатьПанельРазделов = Истина;
	    НастройкиКлиента.РежимОткрытияФормПриложения = РежимОткрытияФормПриложения.Закладки;
	    НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;    
	    
	    
	    НастройкиИнтерфейса = Новый НастройкиКомандногоИнтерфейса;
	    НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаИТекст;
	    
	    
	    НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	    НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	    
	    ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
		ПанельРазделов=Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов");
	    ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	    НастройкиСостава.Лево.Добавить(ГруппаСлева);
	    
	    ГруппаСверху = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ПанельОткрытых=Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых");
	    ГруппаСверху.Добавить(ПанельОткрытых);
	    НастройкиСостава.Верх.Добавить(ГруппаСверху);
	    
	    НастройкиТакси.УстановитьСостав(НастройкиСостава);
	    
	    
	    ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НастройкиКлиента, , ИмяПользователя);
	    ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "", НастройкиИнтерфейса, , ИмяПользователя);
	    ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", НастройкиТакси, , ИмяПользователя);
	КонецЕсли;    
КонецПроцедуры

процедура ПроверкаАсортиментаВДокументахЗакупки(Источник, Отказ, РежимПроведения) экспорт
	
	Если УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(справочники.ххх_Справочник.РазрешитьПокупкуТовараВнеАссортимента.Значение, ложь) Тогда
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("мас",Источник.Товары.выгрузитьКолонку("Номенклатура"));
		Запрос.Текст="ВЫБРАТЬ
		             |	Номенклатура.Ссылка
		             |ПОМЕСТИТЬ йцу
		             |ИЗ
		             |	Справочник.Номенклатура КАК Номенклатура
		             |ГДЕ
		             |	Номенклатура.Ссылка В(&мас)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	йцу.Ссылка
		             |ИЗ
		             |	йцу КАК йцу
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
		             |		ПО йцу.Ссылка.Ссылка = Ассортимент.Номенклатура
		             |ГДЕ
		             |	Ассортимент.Номенклатура ЕСТЬ NULL ";
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить(Строка(Выборка.ссылка)+" не в ассортименте!");
			Отказ=истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

процедура ПроверкаСуществованияУстановкиЦен(Источник, Отказ, РежимПроведения) экспорт
	
	мас=новый массив;
	мас.Добавить("176842");  // Пакеты инет магаза, исключенные из необходимости установки цен.
	мас.Добавить("176830");
	мас.Добавить("176841");
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.УстановитьПараметр("ссылка",Источник.Ссылка);
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваровТовары.Ссылка КАК Ссылка,
	             |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	             |ГДЕ
	             |	ПоступлениеТоваровТовары.Ссылка = &ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.Номенклатура КАК Номенклатура
	             |ИЗ
	             |	йцу КАК йцу
	             |ГДЕ
	             |	йцу.Номенклатура.ххх_ИдЦентр В(&мас)";
	Выборка=Запрос.Выполнить().Выбрать();
	ДокОснТов=Источник.Товары.выгрузить();
	ДокОснТов.свернуть("Номенклатура");
	
	Если выборка.Количество()=ДокОснТов.Количество() Тогда
		возврат;
	КонецЕсли;
	
	если Источник.Ссылка.ххх_ФиктивнаяНакладная или Источник.Ссылка.магазин.ххх_ИнтернетМагазин Тогда
		возврат;
	КонецЕсли;
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("ссылка",Источник.Ссылка);
	Запрос.УстановитьПараметр("ВидЦен",Справочники.ххх_Справочник.Магазин.Значение.ПравилоЦенообразования.ВидЦен);
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваровТовары.Ссылка,
	             |	ПоступлениеТоваровТовары.Номенклатура
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	             |ГДЕ
	             |	ПоступлениеТоваровТовары.Ссылка = &ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УстановкаЦенНоменклатурыТовары.Номенклатура
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	             |		ПО йцу.Ссылка = УстановкаЦенНоменклатурыТовары.Ссылка.ДокументОснование
	             |			И (УстановкаЦенНоменклатурыТовары.Ссылка.Проведен = ИСТИНА)
	             |			И йцу.Номенклатура = УстановкаЦенНоменклатурыТовары.Номенклатура
	             |			И (УстановкаЦенНоменклатурыТовары.ВидЦены = &ВидЦен)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УстановкаЦенНоменклатурыТовары.Номенклатура";
	Выборка=Запрос.Выполнить().Выбрать();
	ДокОснТов=Источник.Товары.выгрузить();
	ДокОснТов.свернуть("Номенклатура");
	Если выборка.Количество() <> ДокОснТов.Количество() Тогда
		Сообщить("Необходимо оформить установку цен или в документах поступление товаров и установка цен разные позиции.");
		отказ=истина;
	КонецЕсли;
	
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("ссылка",Источник.Ссылка);
	Запрос.УстановитьПараметр("ВидЦен",Справочники.ххх_Справочник.ЗакупочнаяЦена.Значение);
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваровТовары.Ссылка КАК Ссылка,
	             |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	             |	ПоступлениеТоваровТовары.Цена КАК Цена
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	             |ГДЕ
	             |	ПоступлениеТоваровТовары.Ссылка = &ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	             |		ПО йцу.Ссылка = УстановкаЦенНоменклатурыТовары.Ссылка.ДокументОснование
	             |			И (УстановкаЦенНоменклатурыТовары.Ссылка.Проведен = ИСТИНА)
	             |			И йцу.Номенклатура = УстановкаЦенНоменклатурыТовары.Номенклатура
	             |			И (УстановкаЦенНоменклатурыТовары.ВидЦены = &ВидЦен)
	             |			И йцу.Цена = УстановкаЦенНоменклатурыТовары.Цена
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УстановкаЦенНоменклатурыТовары.Номенклатура";
	Выборка=Запрос.Выполнить().Выбрать();
	ДокОснТов=Источник.Товары.выгрузить();
	ДокОснТов.свернуть("Номенклатура");
	Если выборка.Количество() <> ДокОснТов.Количество() Тогда
		Сообщить("Необходимо оформить установку цен или в документах поступление товаров и установка цен разные цены на позиции.");
		отказ=истина;
	КонецЕсли;

	
	
КонецПроцедуры

процедура ОтправитьЦеныНаКассы(номка, видыЦен, узел = неопределено) экспорт
		
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("КрасныйЦенник",Справочники.ххх_Справочник.КрасныйЦенник.Значение);
	Запрос.УстановитьПараметр("номка",номка);
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	Номенклатура.ххх_НаименованиеКасса КАК naim,
        |	Номенклатура.ххх_ИдЦентр КАК id_tov,
        |	Номенклатура.АлкогольнаяПродукция КАК a,
        |	Номенклатура.СтавкаНДС КАК nds,
        |	Номенклатура.Ссылка КАК ссылка
        |ПОМЕСТИТЬ номка
        |ИЗ
        |	Справочник.Номенклатура КАК Номенклатура
        |ГДЕ
        |	Номенклатура.Ссылка В ИЕРАРХИИ(&номка)
        |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	номка.naim КАК naim,
        |	номка.id_tov КАК id_tov,
        |	номка.a КАК a,
        |	номка.nds КАК nds,
        |	номка.ссылка КАК ссылка,
        |	НоменклатураСегмента.Сегмент КАК s
        |ПОМЕСТИТЬ КрасныйЦенник
        |ИЗ
        |	номка КАК номка
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
        |		ПО номка.ссылка = НоменклатураСегмента.Номенклатура
        |			И (НоменклатураСегмента.Сегмент = &КрасныйЦенник)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КрасныйЦенник.naim КАК naim,
        |	КрасныйЦенник.id_tov КАК id_tov,
        |	КрасныйЦенник.a КАК a,
        |	КрасныйЦенник.ссылка КАК ссылка,
        |	КрасныйЦенник.s КАК s,
        |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
        |	КрасныйЦенник.nds КАК nds
        |ПОМЕСТИТЬ Цены
        |ИЗ
        |	КрасныйЦенник КАК КрасныйЦенник
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
        |				&Дата,
        |				ВидЦены В (&ВидыЦен)
        |					И Номенклатура.Ссылка В ИЕРАРХИИ (&номка)) КАК ЦеныНоменклатурыСрезПоследних
        |		ПО КрасныйЦенник.ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Цены.naim КАК naim,
        |	Цены.Цена КАК sen,
        |	Цены.id_tov КАК id_tov,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ КАК s,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК a,
        |	ВЫБОР
        |		КОГДА ххх_КодыНоменклатурыВесыКассы.Инкримента ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ КАК ФлагПрисутсвияВМатрице,
        |	ххх_КодыНоменклатурыВесыКассы.Инкримента КАК skod,
        |	Цены.nds КАК nds,
        |	Цены.ссылка КАК ссылка
        |ПОМЕСТИТЬ итог
        |ИЗ
        |	Цены КАК Цены
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
        |		ПО Цены.ссылка = ххх_КодыНоменклатурыВесыКассы.Номенклатура
        |
        |СГРУППИРОВАТЬ ПО
        |	Цены.id_tov,
        |	Цены.naim,
        |	Цены.Цена,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА ххх_КодыНоменклатурыВесыКассы.Инкримента ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ххх_КодыНоменклатурыВесыКассы.Инкримента,
        |	Цены.nds,
        |	Цены.ссылка
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	Цены.naim,
        |	Цены.Цена,
        |	Цены.id_tov,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ,
        |	NULL,
        |	Штрихкоды.Штрихкод,
        |	Цены.nds,
        |	Цены.ссылка
        |ИЗ
        |	Цены КАК Цены
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
        |		ПО Цены.ссылка = Штрихкоды.Владелец
        |
        |СГРУППИРОВАТЬ ПО
        |	Цены.id_tov,
        |	Цены.naim,
        |	Цены.Цена,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ,
        |	Штрихкоды.Штрихкод,
        |	Цены.nds,
        |	Цены.ссылка
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	итог.naim КАК naim,
        |	итог.sen КАК sen,
        |	итог.skod КАК skod,
        |	итог.id_tov КАК id_tov,
        |	итог.nds КАК nds,
        |	итог.s КАК s,
        |	итог.a КАК A,
        |	ЕСТЬNULL(ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ, 0) КАК mrc,
        |	ЕСТЬNULL(итог.ФлагПрисутсвияВМатрице, 0) КАК ФлагПрисутсвияВМатрице
        |ИЗ
        |	итог КАК итог
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ВидПродуцкцииМрцАлкаголь.СрезПоследних КАК ххх_ВидПродуцкцииМрцАлкагольСрезПоследних
        |		ПО итог.ссылка.ОбъемДАЛ = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж
        |			И итог.ссылка.ВидАлкогольнойПродукцииЕГАИС = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции";
    Результат = Запрос.Выполнить();
    ТаблицаЗначений = Результат.Выгрузить();
//	УбитьЛишнее(ТаблицаЗначений);
	
	если ТаблицаЗначений.Количество()>0 тогда	
		разделитель = "|";
	    колонкиТЗ=ТаблицаЗначений.колонки;
		й=0;
		мас=Новый массив;
		мас.Добавить(50);
		мас.Добавить(10);
		мас.Добавить(13);
		мас.Добавить(13);                  
		мас.Добавить(3);
		мас.Добавить(1);
		мас.Добавить(1);
		мас.Добавить(10);
		Для каждого колонка Из колонкиТЗ Цикл
			Если й <мас.Количество() Тогда
				имя=колонка.Имя;
		        стрКолонки =""+ стрКолонки + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Имя,мас[й]," ","Справа") + разделитель;
				й=й+1;
			Иначе прервать
			КонецЕсли;
		КонецЦикла; 
		
		//Запрос=Новый запрос;
		//Запрос.Текст="ВЫБРАТЬ
		//             |	КассыККМ.ПутьКПапкеВыгрузки
		//             |ИЗ
		//             |	Справочник.КассыККМ КАК КассыККМ
		//             |ГДЕ
		//             |	КассыККМ.ПометкаУдаления = ЛОЖЬ";
		//Кассы=Запрос.Выполнить().Выбрать();
		//В иделае писать 1 файл в ТЕМП и копипастить его в внужные папки, но возможно ебалайка с правами доступа(ХЗ, как то такая хуерга помнится)
		//Для каждого Узел из Узлы Цикл
		    кодировка = КодировкаТекста.Системная;
		    ТекстовыйФайлЗапись = Новый ЗаписьТекста(узел.Оборудование.ПутьКПапкеВыгрузки+"tovar.txt",Кодировка);             
			
			текст="";
			//текст=стрКолонки+Символы.ВК;
			ТекстовыйФайлЗапись.ЗаписатьСтроку(стрКолонки);
			для каждого запись из ТаблицаЗначений Цикл
				
				Если запись.ФлагПрисутсвияВМатрице=1 тогда
				//	//запись.skod=СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.id_tov,6,"0","Слева");
				//	Если СтрДлина(запись.id_tov)>5 Тогда
				//		запись.skod=Строка(запись.id_tov)
				//	Иначе
						skod="23"+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
							СтрЗАменить(Строка(запись.skod)," ",""),5,"0","Слева");
				//	КонецЕсли;
			иначе
				skod=запись.skod
				КонецЕсли;
				
		        текст = //текст
				 СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.naim,50," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(запись.sen, "ЧРД=.; ЧРГ=' '; ЧГ=0"),10," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(skod,13," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(запись.id_tov),13," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(ОпределитьСТавкуНДС(запись.nds)),3," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.s,1," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.a,1," ","Справа")+разделитель
				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(запись.mrc, "ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=0"),10," ","Справа")+разделитель;
				ТекстовыйФайлЗапись.ЗаписатьСтроку(текст);//+Символы.ВК;
			КонецЦикла;	
			//ТекстовыйФайлЗапись.ЗаписатьСтроку(текст);
			ТекстовыйФайлЗапись.Закрыть(); 	
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел); 
		//КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// вызывается из общего модуля ххх_РегламентныеЗадания, процедура ПрогрузитьВесы()
процедура ОтправитьЦеныНаВесы(номка, видыЦен, узел = неопределено, оборудования) экспорт
	
	набНоменклатураДопСвойствоСрокГодности=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	набНоменклатураДопСвойствоСрокГодности.Отбор.свойство.установить("НоменклатураДопСвойствоСрокГодности");
	набНоменклатураДопСвойствоСрокГодности.Прочитать();
	НоменклатураДопСвойствоСрокГодности=набНоменклатураДопСвойствоСрокГодности[0].ЗначениеВБазе;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("НоменклатураДопСвойствоСрокГодности",НоменклатураДопСвойствоСрокГодности);
	Запрос.УстановитьПараметр("номка",номка);
	Запрос.УстановитьПараметр("оборудования",оборудования);
	
	Если ТипЗнч(номка)=Тип("Массив") тогда
		Запрос.Текст="ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Производитель КАК Производитель
		|ПОМЕСТИТЬ НомкаУстановкиЦен
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&номка)
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|;";
		
	ИначеЕсли ТипЗнч(номка)=Тип("ТаблицаЗначений") Тогда
		Запрос.Текст="ВЫБРАТЬ
		|	НомкаУстановкиЦен.Номенклатура КАК Номенклатура,
		|	НомкаУстановкиЦен.Производитель КАК Производитель
		|ПОМЕСТИТЬ НомкаУстановкиЦен
		|ИЗ
		|	&Номка КАК НомкаУстановкиЦен;";
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомкаУстановкиЦен.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	НомкаУстановкиЦен.Производитель КАК Производитель
	|ПОМЕСТИТЬ АктуальныеЦены
	|ИЗ
	|	НомкаУстановкиЦен КАК НомкаУстановкиЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ВидЦены В (&видыЦен)
	|					) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НомкаУстановкиЦен.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ххх_ПодключаемоеОборудование.Ссылка КАК Оборудование,
	|	ххх_ПодключаемоеОборудование.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ Оборудоавние
	|ИЗ
	|	Справочник.ххх_ПодключаемоеОборудование КАК ххх_ПодключаемоеОборудование
	|ГДЕ
	|	ххх_ПодключаемоеОборудование.ПометкаУдаления = ЛОЖЬ
	|	И ххх_ПодключаемоеОборудование.УстройствоИспользуется = ИСТИНА
	|	И ххх_ПодключаемоеОборудование.Ссылка в (&Оборудования)
	|
	|СГРУППИРОВАТЬ ПО
	|	ххх_ПодключаемоеОборудование.Ссылка,
	|	ххх_ПодключаемоеОборудование.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеЦены.Номенклатура КАК Номенклатура,
	|	АктуальныеЦены.Цена КАК Цена,
	|	ОборудованиеВидЦен.Оборудование КАК Оборудование,
	|	АктуальныеЦены.Производитель КАК Производитель
	|ПОМЕСТИТЬ СегментыИтоговаяНомка
	|ИЗ
	|	АктуальныеЦены КАК АктуальныеЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Оборудоавние КАК ОборудованиеВидЦен
	|		ПО АктуальныеЦены.ВидЦены = ОборудованиеВидЦен.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СегментыИтоговаяНомка.Номенклатура КАК Номенклатура,
	|	СегментыИтоговаяНомка.Цена КАК Цена,
	|	СегментыИтоговаяНомка.Оборудование КАК Оборудование,
	|	ДополнительныеСведения.Значение КАК Срок,
	|	СегментыИтоговаяНомка.Производитель КАК Производитель
	|ПОМЕСТИТЬ Сроки
	|ИЗ
	|	СегментыИтоговаяНомка КАК СегментыИтоговаяНомка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО СегментыИтоговаяНомка.Номенклатура = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство = &НоменклатураДопСвойствоСрокГодности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сроки.Номенклатура КАК Номенклатура,
	|	Сроки.Цена КАК Цена,
	|	Сроки.Оборудование КАК Оборудование,
	|	Сроки.Срок КАК Срок,
	|	ххх_КодыНоменклатурыВесыКассы.Код КАК Код,
	|	Сроки.Номенклатура.Описание КАК НоменклатураОписание,
	|	ххх_КодыНоменклатурыВесыКассы.Инкримента КАК Номенклатураххх_ИдЦентр,
	|	Сроки.Номенклатура.ххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
	|	ххх_КодыНоменклатурыВесыКассы.НомерДляСостава КАК НомерДляСостава,
	|	Сроки.Производитель КАК Производитель
	|ИЗ
	|	Сроки КАК Сроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	|		ПО Сроки.Номенклатура = ххх_КодыНоменклатурыВесыКассы.Номенклатура
	|			И Сроки.Оборудование = ххх_КодыНоменклатурыВесыКассы.Оборудование
	|ИТОГИ ПО
	|	Оборудование";
	
	ИтогиПоОборудованию = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);					 
	
	Пока ИтогиПоОборудованию.Следующий() Цикл
		//Объект=ИтогиПоОборудованию.Оборудование.Получитьобъект();
		//Объект.ПрогрузитьВесы(ИтогиПоОборудованию.Выбрать());
		
		//ValMa - 21-01-2019 - "ПрогрузитьВесы" перенес в модуль менеджера
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ссылка", ИтогиПоОборудованию.Оборудование);
		СтруктураПараметров.Вставить("Товары", ИтогиПоОборудованию.Выбрать());
		СтруктураПараметров.Вставить("Узел",   Узел);
		Справочники.ххх_ПодключаемоеОборудование.ПрогрузитьВесы(СтруктураПараметров);
		//---
	КонецЦикла;	
	
КонецПроцедуры

Процедура ххх_ПодменаДатыНаТекущуюДляВсехДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если не ТипЗнч(источник)=Тип("ДокументОбъект.ИзменениеАссортимента") 
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ххх_Бонус")
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ТТНВходящаяЕГАИС")
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ЧекККМ")
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ПриказНаПроведениеИнвентаризацииТоваров")
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ПересчетТоваров")
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС")
		и не ТипЗнч(источник)=Тип("ДокументОбъект.ЗаказПоставщику")
		и не РольДоступна("ПолныеПрава") тогда
		Источник.Дата=ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

Процедура ххх_НумерацияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Попытка 
		йцу=Источник.ххх_ИдЦентр;
	Исключение
		возврат;
	КонецПопытки;
	
	Запрос=Новый запрос;
	запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	Документ.ххх_ИдЦентр КАК ххх_ИдЦентр,
				 |	Документ.ссылка КАК ссылка
	             |ИЗ
	             |	Документ.%Документ% КАК Документ
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ххх_ИдЦентр УБЫВ";
	запрос.Текст=СтрЗаменить(запрос.Текст,"%Документ%",Источник.Метаданные().Имя);
	ПоследнийДок=Запрос.Выполнить().Выбрать();
	
	Если ПоследнийДок.Количество()<>0 Тогда
		ПоследнийДок.Следующий();
		//НовыйНомер=ПоследнийДок.ххх_ИдЦентр+1;
		Если Источник.ЭтоНовый() и ПоследнийДок.ссылка<>Источник.ссылка тогда
			Источник.ххх_ИдЦентр=ПоследнийДок.ххх_ИдЦентр+1;
		КонецЕсли;
		//Запрос=Новый запрос;
		//Запрос.УстановитьПараметр("ид",Источник.ххх_ИдЦентр);
		//Запрос.УстановитьПараметр("ссылка",Источник.Ссылка);
		//запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		//             |	Документ.ххх_ИдЦентр КАК ххх_ИдЦентр,
		//			 |	Документ.ссылка КАК ссылка
		//             |ИЗ
		//             |	Документ.%Документ% КАК Документ
		//			 |	Где Документ.ххх_ИдЦентр=&ид
		//			 |	И Документ.%Документ%.Ссылка<>&ссылка
		//             |
		//             |УПОРЯДОЧИТЬ ПО
		//             |	ххх_ИдЦентр УБЫВ";
		//запрос.Текст=СтрЗаменить(запрос.Текст,"%Документ%",Источник.Метаданные().Имя);
		//Выборка=Запрос.Выполнить().Выбрать();
		//Если ВЫборка.Количество()>0 тогда	
		//	Источник.ххх_ИдЦентр=НовыйНомер;	
		//КонецЕСли;
	Иначе 
		Источник.ххх_ИдЦентр=1
	КонецЕсли;
	
	
	Запрос=Новый запрос;
	запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	Документ.ххх_ИдЦентр КАК ххх_ИдЦентр,
				 |	Документ.ссылка КАК ссылка
	             |ИЗ
	             |	Документ.%Документ% КАК Документ
				 | Где Документ.ххх_ИдЦентр=&ид и Документ.ссылка <> ссылка 
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ххх_ИдЦентр УБЫВ";
	запрос.Текст=СтрЗаменить(запрос.Текст,"%Документ%",Источник.Метаданные().Имя);
	Запрос.УстановитьПараметр("ид",Источник.ххх_ИдЦентр);
	Запрос.УстановитьПараметр("ссылка",Источник.ссылка);

	Док=Запрос.Выполнить().Выбрать();
	Если Док.Следующий() Тогда
		Отказ = истина;
		Сообщить("Документ с таким номером уже существует! "+СТрока(Док.ссылка));
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруПечати(номка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Ссылка.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Ссылка.ВидНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	Номенклатура.Ссылка.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	Номенклатура.НаборУпаковок
	|ПОМЕСТИТЬ СпрНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка
	|ПОМЕСТИТЬ НоменклатураХарактеристикиУпаковки
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА НЕ СпрНоменклатура.ИспользоватьХарактеристики
	|						ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|							ТОГДА СпрНоменклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|						ИНАЧЕ СпрНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|					КОНЕЦ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(СПРАВОЧНИК.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка = УпаковкиНоменклатуры.Владелец
	|				ИНАЧЕ СпрНоменклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураХарактеристикиУпаковки.Номенклатура КАК Номенклатура,
	|	НоменклатураХарактеристикиУпаковки.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка
	|ИЗ
	|	НоменклатураХарактеристикиУпаковки КАК НоменклатураХарактеристикиУпаковки
	|ГДЕ
	|	НЕ НоменклатураХарактеристикиУпаковки.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураХарактеристикиУпаковки.Номенклатура,
	|	НоменклатураХарактеристикиУпаковки.Характеристика,
	|	НоменклатураХарактеристикиУпаковки.Упаковка
	|ИЗ
	|	НоменклатураХарактеристикиУпаковки КАК НоменклатураХарактеристикиУпаковки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка";
	
	Запрос.УстановитьПараметр("МассивСсылок", номка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМагазин"               , ОбщегоНазначенияРТ.ОпределитьТекущийМагазин());
	СтруктураДействий.Вставить("УстановитьРежим"                , "ПечатьЦенников");
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("РежимПечатиИзОбработки", Ложь);
	
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	Товары         = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураПараметры = Новый Структура("АдресВХранилище", ПоместитьВоВременноеХранилище(СтруктураРезультат));
	
	Возврат СтруктураПараметры;
КонецФункции

Процедура ОткрытьФормуПечатиЦенников(номка)
//	ПараметрыФормы = ПодготовитьСтруктуруПечати(номка);
//	обраб=Обработки.ПечатьЭтикетокИЦенников.Создать();
//	Обраб.Товары.ЗагрузитьКолонку(номка,"Номенклатура");
//	Форма=Обработки.ПечатьЭтикетокИЦенников.ПолучитьФорму("ххх_Форма");
//	КопироватьДанныеФормы(Обраб,форма);
//	Форма.Открыть();
	
	//ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма");
	//Форма=ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма");
	
КонецПроцедуры

Процедура ххх_ЗапретПерепроведенияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если не ТипЗнч(Источник)=Тип("ДокументОбъект.ТТНВходящаяЕГАИС") и 
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ОстаткиЕГАИС") и 
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ОтчетЕГАИС") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.АктСписанияЕГАИС") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ххх_Бонус") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ЧекККМ") и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ИзменениеАссортимента")и 
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ПересчетТоваров")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ЗаказПоставщику")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ПриказНаПроведениеИнвентаризацииТоваров")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.СчетФактураВыданный")и
		 не ТипЗнч(Источник)=Тип("ДокументОбъект.СчетФактураПолученный")и
		(РежимЗаписи=РежимЗаписиДокумента.Проведение или РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения) 
			и Источник.Проведен 
			и не УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
				справочники.ххх_Справочник.РазрешитьПерепроведениеДокументов.Значение, ложь) Тогда
		отказ=истина;
		Сообщить("Запрещено перепроводить документ.");
	КонецЕсли;
КонецПроцедуры

Процедура ххх_ПолучитьПредставлениеОбъектаОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка=ложь;
	Представление=Строка(ТипЗнч(Данные.ссылка))+" № "+Строка(Данные.ссылка.ххх_ИдЦентр)+" от "+Строка(Данные.ссылка.Дата);	
КонецПроцедуры

Процедура ххх_ПередЗаписьюНоменклатурыПередЗаписью(Источник, Отказ) Экспорт
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("ссылка",Источник.ссылка);
	Запрос.УстановитьПараметр("ид",Источник.ххх_ИдЦентр);
	Запрос.УстановитьПараметр("ЭтоГруппа",Источник.ЭтоГруппа);
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	Номенклатура.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.ххх_ИдЦентр = &ид
	             |	И Номенклатура.Ссылка <> &ссылка
	             |	И Номенклатура.ЭтоГруппа = &ЭтоГруппа";
	Выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		
		Отказ = истина;
		Сообщить("Номенклатура с таким номером уже существует! "+СТрока(выборка.ссылка.ххх_ИдЦентр));
		
	КонецЕсли;
		
КонецПроцедуры

Функция УдалитьТоварВнеАсортиментаИзТаблицы(Таблица,дата)Экспорт
	
	Тч=Таблица.выгрузить();
	Запрос=Новый ЗАпрос;	
	Запрос.УстановитьПараметр("тч",Тч);
	Запрос.УстановитьПараметр("дата",дата);
	Запрос.Текст="ВЫБРАТЬ
	             |	Тч.НомерСтроки КАК НомерСтроки,
	             |	Тч.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ тч
	             |ИЗ
	             |	&Тч КАК Тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	тч.НомерСтроки КАК НомерСтроки
	             |ИЗ
	             |	тч КАК тч
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(&Дата, ) КАК АссортиментСрезПоследних
	             |		ПО тч.Номенклатура = АссортиментСрезПоследних.Номенклатура
	             |ГДЕ
	             |	АссортиментСрезПоследних.РазрешеныЗакупки <> ИСТИНА";
	
	Выборка=Запрос.Выполнить().Выбрать();	
	Пока выборка.Следующий() Цикл		
		Таблица.удалить(выборка.НомерСтроки-1);			
	КонецЦикла;
КонецФункции

Функция ПолучитьВесовойШтрихкод(Знач Штрихкод)экспорт
	
	Если СтрДлина(штрихкод)>5 Тогда
		штрихкод=Сред(штрихкод,3,5);
	КонецЕсли;
	
	запрос=Новый запрос;
	Запрос.УстановитьПараметр("штрихкод",Число(штрихкод));
	Запрос.Текст="ВЫБРАТЬ
	             |	ххх_КодыНоменклатурыВесыКассы.Номенклатура КАК Номенклатура
	             |ИЗ
	             |	РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	             |ГДЕ
	             |	ххх_КодыНоменклатурыВесыКассы.Инкримента = &штрихкод";
	выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		возврат выборка.номенклатура;	
	КонецЕсли;
	возврат неопределено;
КонецФункции

Функция УбитьЛишнее(Тз)	экспорт
	й=0;
	Для каждого стр из Тз Цикл
		Й=0;
		для каждого ячейка из стр Цикл
			стр[Й]=Стрзаменить(СокрлП(ячейка)," ","");
			й=й+1;
		КонецЦикла
	КонецЦикла;
	возврат Тз;
КонецФункции

Функция ОписаниеПараметровНастройки(знач СхемаКомпоновкиДанных,знач НастройкиКомпоновкиДанных) Экспорт	
	НастройкиКомпоновкиДанных=НастройкиКомпоновкиДанных.получить();	
	СхемаКомпоновкиДанных=СхемаКомпоновкиДанных.получить();
	ОписаниеПараметров = "";
	ПолеКомпоновки=Новый ПолеКомпоновкиДанных("Номенклатура");
	группы="";
	Для каждого эл из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если эл.ЛевоеЗначение=ПолеКомпоновки Тогда
			Если ТипЗнч(эл.ПравоеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
				ОписаниеПараметров = ОписаниеПараметров + Строка(эл.ПравоеЗначение)+" ";
			Иначе
				Для каждого группа из эл.ПравоеЗначение Цикл
					ОписаниеПараметров = ОписаниеПараметров + Строка(группа)+" ";
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат  ОписаниеПараметров;
КонецФункции

Процедура ПроверитьОшибкиЗагрузкиЧеков() экспорт
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КлючФоновогоЗадания","ххх_ЗагрузкаЧеков");
	Запрос.Текст="ВЫБРАТЬ
	             |	ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних.Сообщение КАК Сообщение
	             |ИЗ
	             |	РегистрСведений.ххх_СообщенияПользователюРегламентныеЗадания.СрезПоследних(, КлючФоновогоЗадания = &КлючФоновогоЗадания) КАК ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних
	             |ГДЕ
	             |	ххх_СообщенияПользователюРегламентныеЗаданияСрезПоследних.Обработан = ЛОЖЬ";
	выборка=Запрос.Выполнить().Выбрать();
	
	Ошибка="";
	Пока Выборка.Следующий() Цикл	
		Ошибка=Ошибка+выборка.сообщение+символы.ВК;		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьСТавкуНДС(ндс)
	
	ставка=0;
	
	Если ндс=перечисления.СтавкиНДС.НДС10 Тогда
		ставка=10;
	ИначеЕсли ндс=перечисления.СтавкиНДС.БезНДС Тогда
		ставка=0;
	ИначеЕсли (ндс=перечисления.СтавкиНДС.НДС18 и ТекущаяДата()>='20190101') или ндс=перечисления.СтавкиНДС.НДС20 Тогда
		ставка=20;
	ИначеЕсли ндс=перечисления.СтавкиНДС.НДС18 и не ТекущаяДата()>='20190101' Тогда
		ставка=18;
	КонецЕсли;
	
	возврат ставка;
	
КонецФункции

//////// весы (начало) /////////
Функция ОпределитьПланОбменаПоВесам(Оборудование) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланОбменаСОборудованием.Ссылка КАК Ссылка,
		|	ПланОбменаСОборудованием.Оборудование КАК Оборудование
		|ИЗ
		|	ПланОбмена.ПланОбменаСОборудованием КАК ПланОбменаСОборудованием
		|ГДЕ
		|	ПланОбменаСОборудованием.Оборудование = &Оборудование";	
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПланыОбмена.ПланОбменаСОборудованием.ПустаяСсылка();
	КонецЕсли;	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

//Значения ошибок, согласно документации 
функция ПолучитьОписаниеОшибки(КодОшибки) Экспорт
		
	ОписаниеОшибки = Новый Соответствие;
    // пара ключ (произвольного типа) - значение (произвольного типа)
    ОписаниеОшибки.Вставить(0,   "Все прошло успешно.");
    ОписаниеОшибки.Вставить(-1,  "Не удалось инициировать библиотеку.");
    ОписаниеОшибки.Вставить(-2,  "Не удалось соединиться с весами.");
    ОписаниеОшибки.Вставить(-3,  "Не удалось отправить товар на весы.");
    ОписаниеОшибки.Вставить(-4,  "Не удалось отправить текст ингредиента на весы.");
    ОписаниеОшибки.Вставить(-5,  "Не удалось удалить все товары из весов.");
    ОписаниеОшибки.Вставить(-6,  "Не удалось отправить название магазина.");
    ОписаниеОшибки.Вставить(-7,  "Не удалось отправить текущее время и дату.");
    ОписаниеОшибки.Вставить(-8,  "Не удалось отправить информация о быстрых клавишах.");
    ОписаниеОшибки.Вставить(-9,  "Не удалось отправить параметры печати этикетки.");
    ОписаниеОшибки.Вставить(-10, "Не удалось отправить или получить спец. настройки на весы CL5000(J).");
    ОписаниеОшибки.Вставить(-11, "Не удалось прочитать состояние весов.");
    ОписаниеОшибки.Вставить(-12, "Не удалось задать настройки весам LP-1.6 .");
    ОписаниеОшибки.Вставить(-13, "Не удалось отправить штрих-код в весы.");
    ОписаниеОшибки.Вставить(-14, "Не удалось отправить рекламные сообщения.");
    ОписаниеОшибки.Вставить(-15, "Не удалось отправить бегущие сообщения.");
    ОписаниеОшибки.Вставить(-16, "Не удалось отправить Страну-производителя.");
    ОписаниеОшибки.Вставить(-17, "Не удалось отправить единицу измерения.");
    ОписаниеОшибки.Вставить(-18, "Нельзя отправить товар, т.к. в весах нет больше памяти.");
    ОписаниеОшибки.Вставить(-19, "Не удалось отправить этикетку в весы.");
    ОписаниеОшибки.Вставить(-20, "Не удалось прочитать файл с этикеткой.");
	ОписаниеОшибки.Вставить(-21, "Не удалось удалить товар из весов CL5000(J).");
	ОписаниеОшибки.Вставить(-22, "Не удалось получить данные о товаре из весов LP-1.6 .");       //добавлено
	ОписаниеОшибки.Вставить(-23, "Не удалось получить информацию о магазине из весов LP-1.6 ."); //добавлено
	ОписаниеОшибки.Вставить(-24, "Не удалось получить текст ингредиента из весов LP-1.6 .");     //добавлено
    ОписаниеОшибки.Вставить(-999,"Неизвестная ошибка.");
    //получить значение соответствия по ключу 
    ОписаниеПоКоду = ОписаниеОшибки.Получить(КодОшибки); 
    //когда нет соответствия ключу  
    Если ОписаниеПоКоду = Неопределено Тогда
        ОписаниеПоКоду = "Недокументированная ошибка.";
	КонецЕсли;
	
	Возврат ОписаниеПоКоду
	
КонецФункции

Процедура ЗапомнитьДатуПрогрузки(ВремяНачала, ссылкаВесы) Экспорт
	
	КлючОбъекта      = ссылкаВесы.Наименование;
	КлючНастроек     = "ПрогрузкаНаВесы.Apple";
	ОписаниеНастроек = "ПрогрузкаНаВесы.Apple";
	ИмяПользователя  = ПользователиКлиентСервер.ТекущийПользователь();
		
	Настройки = Новый Соответствие;
	Настройки.Вставить("ВремяНачала", ВремяНачала);
	
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя.Наименование);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьЗначениеДопСведений(Ссылка ,Свойство) Экспорт

    Запрос = Новый Запрос;

    Запрос.УстановитьПараметр("Ссылка",   Ссылка);
    Запрос.УстановитьПараметр("Свойство", Свойство);

    Запрос.Текст = "ВЫБРАТЬ
               |    ДополнительныеСведения.Значение
               |ИЗ
               |    РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
               |ГДЕ
               |    ДополнительныеСведения.Объект = &Ссылка
               |    И ДополнительныеСведения.Свойство = &Свойство";   

    Результат = Запрос.Выполнить().Выбрать();

    Если Результат.Количество() = 0 Тогда
        Возврат Неопределено;
    Иначе
        Результат.Следующий();
        Возврат Результат.Значение;
	КонецЕсли;
	
КонецФункции

//Функция подмены "неправильных" символов строки перед прогрузкой на весы 
Функция ПолучитьСтроку866(СтрокаРедактирования) Экспорт
	
	ИтоговаяСтрока = СтрокаРедактирования;
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(8211),Символ(45)); //Узкое/широкое тире меняем на обычное, так как кодировка в весах 866 (старая)
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(8212),Символ(45));
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(177), Символ(43)+Символ(45)); // символ ± меняем на +-
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(8220),Символ(34)); //кавычки “ меняем на "
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(8221),Символ(34)); //кавычки ” меняем на "
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(171), Символ(34)); //кавычки « меняем на "
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, Символ(187), Символ(34)); //кавычки » меняем на "
	
	Возврат ИтоговаяСтрока
	
КонецФункции
//////// весы (конец) ///////////

процедура ОтразитьДвиженияАкцизныхМарок(Движения,Объект,ВидДвижения) экспорт
	
	Движения.ххх_АкцизныеМарки.Очистить();
	Движения.ххх_АкцизныеМарки.Записывать=истина;
	
	Для каждого стр из Объект.АкцизныеМарки цикл
		
		Если стр.АкцизнаяМарка.ТипУпаковки=Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
			Если СтрДлина(Строка(стр.АкцизнаяМарка))>100 тогда
			
				стрДвиж=Движения.ххх_АкцизныеМарки.добавить();
				стрДвиж.ВидДвижения=ВидДвижения;
				стрДвиж.Период=Объект.дата;
				стрДвиж.АкцизнаяМарка=стр.АкцизнаяМарка;
				стрДвиж.Количество=1;
				
			КонецЕсли;
		Иначе
			
			ОтразитьДвиженияАкцизныхМарокУпаковки(стр.АкцизнаяМарка.ВложенныеШтрихкоды,Движения,Объект,ВидДвижения)
			
		КонецЕсли;
		//ЗаполнитьЗначенияСвойств(стрДвиж,Объект.АкцизныеМарки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьДвиженияАкцизныхМарокУпаковки(ВложенныеШтрихКоды,Движения,Объект,ВидДвижения)
	
	Для каждого стр из ВложенныеШтрихКоды цикл
		                           
		Если стр.Штрихкод.ТипУпаковки=Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
			Если СтрДлина(Строка(стр.Штрихкод.ЗначениеШтрихкода))>100 тогда
			
				стрДвиж=Движения.ххх_АкцизныеМарки.добавить();
				стрДвиж.ВидДвижения=ВидДвижения;
				стрДвиж.Период=Объект.дата;
				стрДвиж.АкцизнаяМарка=стр.Штрихкод.ЗначениеШтрихкода;
				стрДвиж.Количество=1;
				
			КонецЕсли;
		Иначе
			
			ОтразитьДвиженияАкцизныхМарокУпаковки(стр.Штрихкод.ВложенныеШтрихкоды,Движения,Объект,ВидДвижения)
			
		КонецЕсли;
		//ЗаполнитьЗначенияСвойств(стрДвиж,Объект.АкцизныеМарки);
		
	КонецЦикла;

	
	
КонецПроцедуры



























