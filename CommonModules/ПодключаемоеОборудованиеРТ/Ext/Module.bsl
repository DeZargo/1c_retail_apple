#Область RFID

Функция ПараметрыОбработкиСчитанныхRFIDИКиЗ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СчитывательRFID");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("GTIN");
	Результат.Вставить("НастройкиИспользованияСерий");
	Результат.Вставить("ЭтоМаркировкаПерсонифицированнымиКиЗ");
	Результат.Вставить("ЭтоМаркировкаТоваровГИСМ");
	Результат.Вставить("ВидНоменклатуры");
	Результат.Вставить("ЭтоМаркировкаОстатковГИСМ");
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьСчитываниеRFID(ДанныеМеток, Параметры, ТЧСерии = Неопределено, ИдентификаторТекущейСтроки = Неопределено) Экспорт
	
	GTIN                                 = Параметры.GTIN;
	НастройкиИспользованияСерий          = Параметры.НастройкиИспользованияСерий;
	ЭтоМаркировкаПерсонифицированнымиКиЗ = Параметры.ЭтоМаркировкаПерсонифицированнымиКиЗ;
	
	КорректноСчитанныеМетки = Новый Массив;
	
	Для Каждого Метка Из ДанныеМеток Цикл
		
		//Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			КорректноСчитанныеМетки.Добавить(Метка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗакрытьФорму", Ложь);
	Результат.Вставить("ИдентификаторТекущейСтроки", Неопределено);
	Результат.Вставить("ДанныеСерии", Неопределено);
	
	//От считывателя одна и та же метка могла приехать несколько раз
	//Поэтому сначала свернем приехаевшие данные
	ТаблицаМеток = МассивВТаблицуЗначений(КорректноСчитанныеМетки);
	ИменаКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;

	ТаблицаМеток.Свернуть(СтрСоединить(ИменаКолонок,","));
	
	Если ТаблицаМеток.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Считалось сразу несколько RFID-метки. Оставьте в зоне действия считывателя только одну метку и повторите считывание.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ТЧСерии = Неопределено Тогда
		ТЧСерии = Новый ТаблицаЗначений;
		ТЧСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТЧСерии.Колонки.Добавить("Номер",ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЧСерии.Колонки.Добавить("НомерКиЗГИСМ", Метаданные.ОпределяемыеТипы.НомерКиЗГИСМ.Тип);
		ТЧСерии.Колонки.Добавить("RFIDTID", Метаданные.ОпределяемыеТипы.RFIDTID.Тип);
		ТЧСерии.Колонки.Добавить("RFIDUser",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("RFIDEPC",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("EPCGTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ТЧСерии.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТЧСерии.Колонки.Добавить("НужноЗаписатьМетку", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("ЗаполненRFIDTID", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("СтатусРаботыRFID", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	ТекущаяМетка = ТаблицаМеток[0];

	Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		
		ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоRFIDTID(ТекущаяМетка.TID);
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
			ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);
		Иначе
			ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);	
		КонецЕсли;
	Иначе
		ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);	
	КонецЕсли;
	
	ШтрихкодированиеНоменклатурыКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока, GTIN, ТекущаяМетка, НастройкиИспользованияСерий, ЭтоМаркировкаПерсонифицированнымиКиЗ);

	Если ОбщегоНазначения.РежимОтладки() Тогда
		СтрокаМетки = "";
		
		Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
			СтрокаМетки = СтрокаМетки + Колонка.Имя + " " + ТаблицаМеток[0][Колонка.Имя] + " ";
		КонецЦикла;
		ОбщегоНазначения.СообщитьПользователю(СтрокаМетки);
	КонецЕсли;

	Если ОбрабатываемаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ТЧСерии) <> Тип("ТаблицаЗначений") Тогда
			Результат.ИдентификаторТекущейСтроки = ОбрабатываемаяСтрока.ПолучитьИдентификатор();
		Иначе
			Результат.ДанныеСерии = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОбрабатываемаяСтрока);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
//										Свойства структуры первого элемента массива определяютс состав колонок результирующей таблицы
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

// Раскладывает переданный массив считанных штрихкодов по типам штрихкодов
//
// Параметры:
//  Штрихкоды	 - Массив - массив структур, который передается БПО от оборудования, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода
//								
// Возвращаемое значение:
//  Структура - структура: 
//       *БезТипа - Массив - штрихкоды, тип которых не определен, элементы - структуры, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода 
//		 *АкцизныеМарки - Массив
Функция СтруктураПоТипамШтрихкодов(Штрихкоды) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БезТипа", Новый Массив);
	Результат.Вставить("АкцизныеМарки", Новый Массив);
	Результат.Вставить("КиЗ", Новый Массив);
	
	ПроверятьАкцизныеМарки = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции"); 
	ПроверятьКиз           = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	
	Для Каждого СтрМас из Штрихкоды Цикл
		
		Если ПроверятьАкцизныеМарки
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрМас.Штрихкод) Тогда
			Результат.АкцизныеМарки.Добавить(СтрМас);
		ИначеЕсли ПроверятьКиз
			И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(СтрМас.Штрихкод) Тогда
			Результат.КиЗ.Добавить(СтрМас);
		Иначе
			Результат.БезТипа.Добавить(СтрМас);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ШтрихкодСоответствуетШаблонуАкцизнойМарки(Штрихкод) Экспорт
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Перечисления.ВидыДокументовЕГАИС.ЧекККМ, Неопределено, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	Иначе
		ТипШтрихкодМарки = ФабрикаXDTO.Тип(ПространствоИмен, "BK");
		Попытка
			ТипШтрихкодМарки.Проверить(Штрихкод);
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	GTIN                        = Параметры.GTIN;
	ЭтоМаркировкаТоваровГИСМ    = Параметры.ЭтоМаркировкаТоваровГИСМ;
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = Параметры.ВидНоменклатуры;
	ЭтоМаркировкаПерсонифицированнымиКиЗ = Параметры.ЭтоМаркировкаПерсонифицированнымиКиЗ;
	
	Если Не ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о КиЗ: не заполнен номер КиЗ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоМаркировкаТоваровГИСМ Тогда		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) 
			И GTIN <> ИнформацияПоКиЗ.GTIN Тогда
			ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован для маркировки товаров с GTIN %GTINТовара%, т.к. предназначен для маркировки товаров с GTIN %GTINКиЗ%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Если Параметры.ЭтоМаркировкаОстатковГИСМ Тогда
			
			Если ИнформацияПоКиЗ.ДляМаркировкиОстатков = Ложь Тогда
				ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован для маркировки остатков товаров.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
			
		Иначе
			
			Если ИнформацияПоКиЗ.ДляМаркировкиОстатков = Истина Тогда
				ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован только для маркировки остатков товаров.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("НомерКИЗГИСМ", ИнформацияПоКиЗ.НомерКиЗ));
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	//Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.НомерКИЗГИСМ)
		И (ТекущаяСтрока.RFIDTID = ИнформацияПоКиЗ.RFIDTID
		Или Не ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID)) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
		
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Если Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Серия) Тогда
			Выборка = ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(ИнформацияПоКиЗ.НомерКиЗ, ВидНоменклатуры);
			
			Если Выборка.Следующий() Тогда
				Если РеквизитыСерииСовпадаютСИнформациейПоКиЗ(Выборка, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
					ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
				КонецЕсли;
			Иначе
				ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
			КонецЕсли;
			
		Иначе
			Если Не РеквизитыСерииСовпадаютСИнформациейПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
				ТЧСерии.Удалить(ОбрабатываемаяСтрока);
				ОбрабатываемаяСтрока = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Выборка = ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(ИнформацияПоКиЗ.НомерКиЗ, ВидНоменклатуры);
		
		Если Выборка.Следующий() Тогда
			Если РеквизитыСерииСовпадаютСИнформациейПоКиЗ(Выборка, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
				ОбрабатываемаяСтрока = ТЧСерии.Добавить();
				ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
				ОбрабатываемаяСтрока.Количество         = 1;
				ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
			КонецЕсли;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		КонецЕсли;	
				
	КонецЕсли;
	
	ШтрихкодированиеНоменклатурыКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока,
		GTIN, Неопределено, НастройкиИспользованияСерий, ЭтоМаркировкаПерсонифицированнымиКиЗ);
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Функция ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = Параметры.ВидНоменклатуры;
	
	Если Не ЗначениеЗаполнено(ТекущаяМетка.TID) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: не заполнен TID.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	ИначеЕсли Не НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: для серий этого вида номенклатуры не используются метки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("RFIDTID", ТекущаяМетка.TID));
		
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	//Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.RFIDTID)
		И (Не ЗначениеЗаполнено(ТекущаяСтрока.Номер)
			Или Не НастройкиИспользованияСерий.ИспользоватьНомерСерии 
			Или ТекущаяСтрока.Номер = ТекущаяМетка.СерийныйНомер) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
		Если ЗначениеЗаполнено(ТекущаяМетка.GTIN)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.EPCGTIN) Тогда
			ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Номер) Тогда
			ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
		КонецЕсли;
		
		Возврат ОбрабатываемаяСтрока;	
	
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Возврат ОбрабатываемаяСтрока;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка КАК Серия,
		|	СерииНоменклатуры.Номер КАК Номер,
		|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
		|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
		|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
		|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
		|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
		|	СерииНоменклатуры.ГоденДо КАК  ГоденДо
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И СерииНоменклатуры.RFIDTID = &TID";
		
		Запрос.УстановитьПараметр("TID", ТекущаяМетка.TID);
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.GTIN) Тогда
				ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
				И  НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
				ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;
		
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоИнформацииПоКиЗ(Строка, ИнформацияПоКиЗ, НастройкиИспользованияСерий)
	Строка.НомерКИЗГИСМ = ИнформацияПоКиЗ.НомерКиЗ;
		
	Если НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID) Тогда
			Строка.RFIDTID = ИнформацияПоКиЗ.RFIDTID;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDEPC) Тогда
			Строка.RFIDEPC = ИнформацияПоКиЗ.RFIDEPC;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) Тогда
			Строка.EPCGTIN = ИнформацияПоКиЗ.GTIN;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерСерии 
		И ЗначениеЗаполнено(ИнформацияПоКиЗ.СерийныйНомер) Тогда
		Строка.Номер = ИнформацияПоКиЗ.СерийныйНомер;
	КонецЕсли;
	
	Если Строка.Количество = 0 Тогда
		Строка.Количество = 1;
	КонецЕсли;
	
	Если Строка.КоличествоУпаковок = 0 Тогда
		Строка.КоличествоУпаковок = 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(НомерКиЗ, ВидНоменклатуры)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.Номер КАК Номер,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
	|	СерииНоменклатуры.ГоденДо КАК  ГоденДо
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|	И СерииНоменклатуры.НомерКиЗГИСМ = &НомерКиЗГИСМ";
	
	Запрос.УстановитьПараметр("НомерКиЗГИСМ", НомерКиЗ);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция РеквизитыСерииСовпадаютСИнформациейПоКиЗ(РеквизитыСерии, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ)
	
	Если ЭтоМаркировкаТоваровГИСМ
        И (РеквизитыСерии.RFIDTID <> ИнформацияПоКиЗ.RFIDTID 
		Или (ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) 
			И РеквизитыСерии.EPCGTIN <> ИнформацияПоКиЗ.GTIN)
		Или (ЗначениеЗаполнено(ИнформацияПоКиЗ.СерийныйНомер)
		    И СтрЧислоВхождений(ИнформацияПоКиЗ.СерийныйНомер, "0") <> СтрДлина(ИнформацияПоКиЗ.СерийныйНомер)
			И РеквизитыСерии.Номер <> ИнформацияПоКиЗ.СерийныйНомер)) Тогда
		ТекстСообщения = НСтр("ru = 'Информация о КиЗ с номером %НомерКиЗ% предоставленная эмитентом не соответсвует информации, сохраненной в серии. Этот КиЗ не может быть использован для маркировки.'");	
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗ%", ИнформацияПоКиЗ.НомерКиЗ); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт

	
	Если Менеджер = "РегистрСведений.ФискальныеОперации" Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ТорговыйОбъект)";
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Поддержка54ФЗ

Функция ПараметрыПлатежногоДоговора(ПлатежныйДоговор, СуммаДокумента) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипДоговора");
	СтруктураРеквизитов.Вставить("Агент");
	СтруктураРеквизитов.Вставить("Посредник");
	СтруктураРеквизитов.Вставить("ПроцентКомиссионногоВознаграждения");
	СтруктураРеквизитов.Вставить("АдресОператораПеревода");
	СтруктураРеквизитов.Вставить("ИННОператораПеревода");
	СтруктураРеквизитов.Вставить("НаименованиеОператораПеревода");
	СтруктураРеквизитов.Вставить("ОперацияПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ПризнакАгента");
	СтруктураРеквизитов.Вставить("ТелефонПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ТелефонОператораПоПриемуПлатежей");
	СтруктураРеквизитов.Вставить("ТелефонОператораПеревода");
	СтруктураРеквизитов.Вставить("ТелефонПоставщика");
	СтруктураРеквизитов.Вставить("ТелефонПоставщика");
	СтруктураРеквизитов.Вставить("ПризнакАгента");
	СтруктураРеквизитов.Вставить("ИННПоставщикаУслуг");
	
	Если НЕ ЗначениеЗаполнено(ПлатежныйДоговор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыПлатежногоДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПлатежныйДоговор, СтруктураРеквизитов);
	
	ВознагражденияАгента = СуммаДокумента / 100 * РеквизитыПлатежногоДоговора.ПроцентКомиссионногоВознаграждения;
	РеквизитыПлатежногоДоговора.Вставить("ВознагражденияАгента", ВознагражденияАгента);
	
	Возврат РеквизитыПлатежногоДоговора;
	
КонецФункции

// Возвращает ставку НДС в формате БПО
//  Параметры:
//   СтавкаНДС - Перечисление.СтавкиНДС
//   ЭтоАванс - Булево
//  
//  ВозвращаемоеЗначение:
//   Значения: Неопределено-БезНДС, 0, 10, 18, 110, 118
Функция СтавкаНДСВФорматеБПО(СтавкаНДС, ЭтоАванс = Ложь) Экспорт
		
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат Неопределено;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 и ЭтоАванс Тогда
		Возврат 110;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 и ЭтоАванс Тогда
		Возврат 118;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 и ЭтоАванс Тогда
		Возврат 120;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
		Возврат 18;
	Иначе 
		Возврат 20;
	КонецЕсли;
	
КонецФункции // СтавкаНДСВФорматеБПО()

// Заполняет данные платежного договора из базы данных
//
//  Параметры:
//   ОбщиеПараметры - Структура, см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека()
//   ДоговорПлатежногоАгента - Справочник.ДоговорыПлатежныхАгентов
//   СуммаДокумента - Число
//
Процедура ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, ДоговорПлатежногоАгента, СуммаДокумента) Экспорт
	
	РеквизитыПлатежногоДоговора = ПодключаемоеОборудованиеРТ.ПараметрыПлатежногоДоговора(ДоговорПлатежногоАгента, 
																						 СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыПлатежногоДоговора) Тогда
		
		ОбщиеПараметры.ПризнакАгента = РеквизитыПлатежногоДоговора.ПризнакАгента;
		
		ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция = РеквизитыПлатежногоДоговора.ОперацияПлатежногоАгента;
		ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон  = РеквизитыПлатежногоДоговора.ТелефонПлатежногоАгента;
		
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон      = РеквизитыПлатежногоДоговора.ТелефонОператораПеревода;
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование = РеквизитыПлатежногоДоговора.НаименованиеОператораПеревода;
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес        = РеквизитыПлатежногоДоговора.АдресОператораПеревода;
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН          = РеквизитыПлатежногоДоговора.ИННОператораПеревода;
		
		ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = РеквизитыПлатежногоДоговора.ТелефонОператораПоПриемуПлатежей;
		
		ОбщиеПараметры.ДанныеПоставщика.Телефон      = РеквизитыПлатежногоДоговора.ТелефонПоставщика;
		ОбщиеПараметры.ДанныеПоставщика.Наименование = Строка(РеквизитыПлатежногоДоговора.Агент);
		ОбщиеПараметры.ДанныеПоставщика.ИНН          = РеквизитыПлатежногоДоговора.ИННПоставщикаУслуг;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные платежного договора строки чека на основании шапке
//
//  Параметры:
//   ОбщиеПараметры - Структура, см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека()
//   ПозицияЧека - Структура, см функцию БПО МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека()
//
Процедура ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, ПозицияЧека) Экспорт
	
	Если ЗначениеЗаполнено(ОбщиеПараметры.ПризнакАгента) Тогда
		ПозицияЧека.ПризнакАгентаПоПредметуРасчета = ОбщиеПараметры.ПризнакАгента;
		
		ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция = ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция;
		ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон  = ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон;
		
		ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон      = ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон;
		ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование = ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование;
		ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес        = ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес;
		ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН          = ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН;
		
		ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
		
		ПозицияЧека.ДанныеПоставщика.Телефон      = ОбщиеПараметры.ДанныеПоставщика.Телефон;
		ПозицияЧека.ДанныеПоставщика.Наименование = ОбщиеПараметры.ДанныеПоставщика.Наименование;
		ПозицияЧека.ДанныеПоставщика.ИНН          = ОбщиеПараметры.ДанныеПоставщика.ИНН;  
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет позиции чека для передачи данных для фискализации данных.
//  Параметры:
//   ДокументСсылка - РеализацияТоваров, ЗаказПокупателя, ЧекККМ
//   ПараметрыДокумента - Структура, ранее определенных полей (тегов)
//   ОбщиеПараметры - Структура, см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека()
//   СуммаДокументовРасчетов - Сумма по подготовленным строкам
//   ЭтоВыплата - Булево
//
Процедура ДобавитьСтрокиДляФискализацииТоваров(ДокументСсылка, 
											   ПараметрыДокумента, 
											   ОбщиеПараметры, 
											   СуммаДокументовРасчетов,
											   ЭтоВыплата = Истина) Экспорт
	
	ИспользуетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользуетсяУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	ВестиУчетТабачнойПродукцииМОТП   = ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		И ВестиУчетТабачнойПродукцииМОТП Тогда 
		
		КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП = ПолучитьФункциональнуюОпцию("КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		МассивУпаковок = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка) КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	0 КАК СуммаСкидкиОплатыБонусом
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаркированныеТовары.НомерСтроки КАК НомерСтроки,
		|	МаркированныеТовары.НоменклатураСсылка КАК Номенклатура,
		|	МаркированныеТовары.ХарактеристикаСсылка КАК Характеристика,
		|	МаркированныеТовары.ШтрихкодСтрока КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаМаркированныеТовары
		|ИЗ
		|	&МаркированныеТовары КАК МаркированныеТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Поставщик КАК Поставщик,
		|	Товары.Договор КАК Договор,
		|	Товары.НомерГТД КАК НомерГТД,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	ЕСТЬNULL(Товары.Номенклатура.ТабачнаяПродукция, ЛОЖЬ) КАК ТабачнаяПродукция,
		|	ТаблицаМаркированныеТовары.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ТоварыИМаркировка
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМаркированныеТовары КАК ТаблицаМаркированныеТовары
		|		ПО Товары.Номенклатура = ТаблицаМаркированныеТовары.Номенклатура
		|			И Товары.Характеристика = ТаблицаМаркированныеТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыИМаркировка.Номенклатура КАК Номенклатура,
		|	ТоварыИМаркировка.Характеристика КАК Характеристика,
		|	ТоварыИМаркировка.Поставщик КАК Поставщик,
		|	ТоварыИМаркировка.Договор КАК Договор,
		|	ТоварыИМаркировка.НомерГТД КАК НомерГТД,
		|	ТоварыИМаркировка.НомерСтроки КАК НомерСтрокиТовара,
		|	ВЫБОР
		|		КОГДА ТоварыИМаркировка.ТабачнаяПродукция
		|			ТОГДА 1
		|		ИНАЧЕ ТоварыИМаркировка.КоличествоУпаковок
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТоварыИМаркировка.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТоварыИМаркировка.Номенклатура.ЕдиницаИзмерения.Наименование
		|		ИНАЧЕ ТоварыИМаркировка.Упаковка.Наименование
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ТоварыИМаркировка.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ТоварыИМаркировка.КоличествоУпаковок = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыИМаркировка.Сумма / ТоварыИМаркировка.КоличествоУпаковок КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаСоСкидками,
		|	ВЫБОР
		|		КОГДА НЕ ТоварыИМаркировка.ТабачнаяПродукция
		|			ТОГДА ТоварыИМаркировка.Сумма
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыИМаркировка.КоличествоУпаковок = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЫРАЗИТЬ(ТоварыИМаркировка.Сумма / ТоварыИМаркировка.КоличествоУпаковок КАК ЧИСЛО(15, 2))
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	ТоварыИМаркировка.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА НЕ ТоварыИМаркировка.ТабачнаяПродукция
		|			ТОГДА ТоварыИМаркировка.СуммаНДС
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыИМаркировка.КоличествоУпаковок = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЫРАЗИТЬ(ТоварыИМаркировка.СуммаНДС / ТоварыИМаркировка.КоличествоУпаковок КАК ЧИСЛО(15, 2))
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаНДС,
		|	ТоварыИМаркировка.Номенклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|	ТоварыИМаркировка.СуммаАвтоматическойСкидки + ТоварыИМаркировка.СуммаРучнойСкидки + ТоварыИМаркировка.СуммаСкидкиОплатыБонусом КАК СуммаСкидок,
		|	ТоварыИМаркировка.ТабачнаяПродукция КАК ТабачнаяПродукция,
		|	ТоварыИМаркировка.Штрихкод КАК Штрихкод,
		|	ТоварыИМаркировка.Номенклатура.Наименование КАК ТоварНаименование,
		|	ТоварыИМаркировка.Номенклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	ТоварыИМаркировка КАК ТоварыИМаркировка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("Товары", ДокументСсылка.Товары.Выгрузить());
		ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(ДокументСсылка,,Перечисления.ВидыПродукцииИС.Табачная);
		ПараметрыСканирования.ЗапрашиватьСтатусыМОТП = КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП;
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП = КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП;
		ШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(МассивУпаковок, ПараметрыСканирования);
		ТипизироватьКолонкиМаркированныхТоваров(ШтрихкодыУпаковок.МаркированныеТовары);
		Запрос.УстановитьПараметр("МаркированныеТовары", ШтрихкодыУпаковок.МаркированныеТовары);
		
	Иначе
		
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗаказПокупателя")
			И (ИспользуетсяУчетИмпортныхТоваров 
			Или ИспользуетсяКомиссионнаяТорговля) Тогда
			ИспользуютсяРеистрОстатков = Истина;
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)        КАК Поставщик,
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка) КАК Договор,
			|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
			|	Товары.Цена КАК Цена,
			|	Товары.Сумма КАК Сумма,
			|	Товары.СтавкаНДС КАК СтавкаНДС,
			|	Товары.СуммаНДС КАК СуммаНДС,
			|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
			|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
			|	&Ссылка КАК Ссылка,
			|	&СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ЕСТЬNULL(ТаблицаДвижений.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
			|	ЕСТЬNULL(ТаблицаДвижений.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)) КАК Договор,
			|	ЕСТЬNULL(ТаблицаДвижений.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
			|			ТОГДА ТаблицаТоваров.Количество
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|	ТаблицаТоваров.Цена КАК Цена,
			|	ТаблицаТоваров.Сумма * ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
			|			ТОГДА ТаблицаТоваров.Количество
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
			|	КОНЕЦ / ТаблицаТоваров.Количество КАК Сумма,
			|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
			|	ТаблицаТоваров.СуммаНДС * ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
			|			ТОГДА ТаблицаТоваров.Количество
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
			|	КОНЕЦ / ТаблицаТоваров.Количество КАК СуммаНДС,
			|	ТаблицаТоваров.СуммаАвтоматическойСкидки * ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
			|			ТОГДА ТаблицаТоваров.Количество
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
			|	КОНЕЦ / ТаблицаТоваров.Количество КАК СуммаАвтоматическойСкидки,
			|	ТаблицаТоваров.СуммаРучнойСкидки * ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
			|			ТОГДА ТаблицаТоваров.Количество
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
			|	КОНЕЦ / ТаблицаТоваров.Количество КАК СуммаРучнойСкидки,
			|	&ТаблицаТоваровСуммаСкидкиОплатыБонусом * ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
			|			ТОГДА ТаблицаТоваров.Количество
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
			|	КОНЕЦ / ТаблицаТоваров.Количество КАК СуммаСкидкиОплатыБонусом
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ТоварыОрганизаций.Количество КАК Количество,
			|			ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
			|			ТоварыОрганизаций.Регистратор КАК Регистратор,
			|			ТоварыОрганизаций.НомерГТД КАК НомерГТД,
			|			ТоварыОрганизаций.Договор КАК Договор,
			|			ТоварыОрганизаций.Поставщик КАК Поставщик
			|		ИЗ
			|			РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
			|		ГДЕ
			|			ТоварыОрганизаций.Регистратор = &Ссылка) КАК ТаблицаДвижений
			|		ПО ТаблицаТоваров.Ссылка = ТаблицаДвижений.Регистратор
			|			И ТаблицаТоваров.НомерСтроки = ТаблицаДвижений.НомерСтрокиДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		Иначе
			ИспользуютсяРеистрОстатков = Ложь;
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)        КАК Поставщик,
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка) КАК Договор,
			|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
			|	Товары.Цена КАК Цена,
			|	Товары.Сумма КАК Сумма,
			|	Товары.СтавкаНДС КАК СтавкаНДС,
			|	Товары.СуммаНДС КАК СуммаНДС,
			|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
			|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
			|	&СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли; 
		
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки         КАК НомерСтрокиТовара,
		|	Товары.Номенклатура        КАК Номенклатура,
		|	Товары.Характеристика      КАК Характеристика,
		|	Товары.Поставщик       КАК Поставщик,
		|	Товары.Договор         КАК Договор,
		|	Товары.НомерГТД        КАК НомерГТД,
		|	Товары.КоличествоУпаковок КАК Количество,
		|	Товары.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА Товары.КоличествоУпаковок = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаСоСкидками,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
		|		ИНАЧЕ Товары.Упаковка.Наименование
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|	Товары.СуммаАвтоматическойСкидки + Товары.СуммаРучнойСкидки + Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидок,
		|	Товары.Номенклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета КАК ПризнакПредметаРасчета,
		|	Товары.Номенклатура.Наименование КАК ТоварНаименование
		|ИЗ
		|	Товары КАК Товары";
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаСкидкиОплатыБонусом", "Товары.СуммаСкидкиОплатыБонусом");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТоваровСуммаСкидкиОплатыБонусом", "ТаблицаТоваров.СуммаСкидкиОплатыБонусом");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаСкидкиОплатыБонусом", "0");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТоваровСуммаСкидкиОплатыБонусом", "0");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Товары", ДокументСсылка.Товары.Выгрузить());
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НомерСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Выборка);
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, ПараметрыДокумента);
		НомерСтроки = НомерСтроки + 1;
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтроки;
		
		Если ЭтоВыплата Тогда
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		КонецЕсли;
		
		СуммаДокументовРасчетов = СуммаДокументовРасчетов + Выборка.Сумма;
		
		СтрокаПозицииЧека.Наименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
											Выборка.ТоварНаименование,
											Выборка.Характеристика);
			
		ПризнакСпособаРасчета = ПараметрыДокумента.ПризнакСпособаРасчета;
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
			ЭтоАванс = Истина;
		Иначе
			ЭтоАванс = Ложь;
		КонецЕсли;
		
		СтрокаПозицииЧека.СтавкаНДС = СтавкаНДСВФорматеБПО(Выборка.СтавкаНДС, ЭтоАванс);
		
		ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
		
		Если ИспользуетсяКомиссионнаяТорговля Тогда
			Если Выборка.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				Если ЗначениеЗаполнено(Выборка.Договор) Тогда
					Если Выборка.Договор.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер Тогда
						СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета      = Перечисления.ПризнакиАгента.Комиссионер;
						СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон = Выборка.Договор.ТелефонПоставщика;
						СтрокаПозицииЧека.ДанныеПоставщика.ИНН                = Выборка.Договор.ИННПоставщикаУслуг;
						СтрокаПозицииЧека.ДанныеПоставщика.Телефон            = Выборка.Договор.ТелефонПоставщика;
						СтрокаПозицииЧека.ДанныеПоставщика.Наименование       = Выборка.Поставщик.Наименование; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользуетсяУчетИмпортныхТоваров Тогда
			СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НомерГТД.СтранаПроисхождения, "Код");
			СтрокаПозицииЧека.НомерТаможеннойДекларации    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НомерГТД, "РегистрационныйНомерДекларации");
		КонецЕсли;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			И ВестиУчетТабачнойПродукцииМОТП Тогда
			
			Если Выборка.ТабачнаяПродукция И ЗначениеЗаполнено(Выборка.Штрихкод) Тогда 
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = Лев(Выборка.Штрихкод, 14);
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = Сред(Выборка.Штрихкод, 15, 7);
			КонецЕсли;
		КонецЕсли;
	
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
КонецПроцедуры

// Типизируем колонки таблицы МаркированныеТовары для передачи в запрос
// и добавляем колонку НомерСтроки
Процедура ТипизироватьКолонкиМаркированныхТоваров(ТаблицаМаркированныхТоваров)
	
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НоменклатураСсылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ХарактеристикаСсылка", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ШтрихкодСтрока", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаШтрихкодыУпаковок Из ТаблицаМаркированныхТоваров Цикл
		СтрокаШтрихкодыУпаковок.НомерСтроки = ТаблицаМаркированныхТоваров.Индекс(СтрокаШтрихкодыУпаковок);
		СтрокаШтрихкодыУпаковок.НоменклатураСсылка = СтрокаШтрихкодыУпаковок.Номенклатура;
		СтрокаШтрихкодыУпаковок.ХарактеристикаСсылка = СтрокаШтрихкодыУпаковок.Характеристика;
		СтрокаШтрихкодыУпаковок.ШтрихкодСтрока = СтрокаШтрихкодыУпаковок.ЗначениеШтрихкода;
	КонецЦикла;
	
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Номенклатура");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Характеристика");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("ЗначениеШтрихкода");
	
КонецПроцедуры

// Возращает текст запроса по внереализованной прибыли
//
//  ВозвращаемоеЗначение:
//   Строка
//
Функция ТекстЗапросаПоВнереализациннойПрибыли() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Оплата.Сумма,
	|	Оплата.Организация,
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Оплата.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА Оплата.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ОплатаПодарочнымСертификатом
	|ИЗ
	|	Оплата КАК Оплата
	|ГДЕ
	|	Оплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА Оплата.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.Организация
	|ПОМЕСТИТЬ ПогашениеПодарочныхСертификатов
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал) КАК Номинал,
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА ПогашениеПодарочныхСертификатов.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ПогашениеПоОрганизациям
	|ИЗ
	|	ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА ПогашениеПодарочныхСертификатов.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПодарочнымСертификатом.Организация,
	|	ОплатаПодарочнымСертификатом.Сумма,
	|	ПогашениеПоОрганизациям.Номинал,
	|	ПогашениеПоОрганизациям.Номинал - ОплатаПодарочнымСертификатом.Сумма КАК Разница
	|ИЗ
	|	ОплатаПодарочнымСертификатом КАК ОплатаПодарочнымСертификатом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогашениеПоОрганизациям КАК ПогашениеПоОрганизациям
	|		ПО ОплатаПодарочнымСертификатом.Организация = ПогашениеПоОрганизациям.Организация
	|ГДЕ
	|	ОплатаПодарочнымСертификатом.Сумма < ПогашениеПоОрганизациям.Номинал";
	
	Возврат ТекстЗапроса;
КонецФункции

// Возращает текст запроса по внереализованной прибыли для фискализации
//
//  ВозвращаемоеЗначение:
//   Строка
//
Функция ТекстЗапросаПоВнереализациннойПрибылиДляФмскализации() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Оплата.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Оплата.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ОплатаПодарочнымСертификатом
	|ИЗ
	|	Оплата КАК Оплата
	|ГДЕ
	|	Оплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат
	|ПОМЕСТИТЬ ПогашениеПодарочныхСертификатов
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал) КАК Номинал
	|ПОМЕСТИТЬ ПогашениеПоОрганизациям
	|ИЗ
	|	ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПодарочнымСертификатом.Сумма КАК Сумма,
	|	ПогашениеПоОрганизациям.Номинал КАК Номинал,
	|	ПогашениеПоОрганизациям.Номинал - ОплатаПодарочнымСертификатом.Сумма КАК Разница
	|ИЗ
	|	ОплатаПодарочнымСертификатом КАК ОплатаПодарочнымСертификатом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогашениеПоОрганизациям КАК ПогашениеПоОрганизациям
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОплатаПодарочнымСертификатом.Сумма < ПогашениеПоОрганизациям.Номинал";
	
	Возврат ТекстЗапроса;
КонецФункции

// При обнаружении потери покупателя нужно помести ее во внереализованную прибыль
// Используются при фискализации чека.
//
Процедура ДобавитьВнереализационнуюПрибыль(ДокументСсылка, ОбщиеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВнереализациннойПрибылиДляФмскализации();
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", ДокументСсылка.ПогашениеПодарочныхСертификатов.Выгрузить());
	Запрос.УстановитьПараметр("Оплата", ДокументСсылка.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	ПотериПокупателя = ТаблицаЗапроса.Итог("Разница");
	
	Если ПотериПокупателя > 0 Тогда
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Количество = 1;
		СтрокаПозицииЧека.Наименование = "8";
		Если ОбщиеПараметры.ПозицииЧека.Количество() > 0 Тогда
			ПоследняяПозиция = ОбщиеПараметры.ПозицииЧека[ОбщиеПараметры.ПозицииЧека.Количество() - 1];
			СтрокаПозицииЧека.НомерСекции = ПоследняяПозиция.НомерСекции;
		Иначе
			СтрокаПозицииЧека.НомерСекции = 1;
		КонецЕсли; 
		
		СтрокаПозицииЧека.НомерСтрокиТовара      = ОбщиеПараметры.ПозицииЧека.Количество();
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход;
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		СтрокаПозицииЧека.СтавкаНДС              = Неопределено;
		СтрокаПозицииЧека.Сумма                  = ПотериПокупателя;
		СтрокаПозицииЧека.Цена                   = ПотериПокупателя;
		СтрокаПозицииЧека.ЦенаСоСкидками         = ПотериПокупателя;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		СтрокаТаблицыОплат = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаТаблицыОплат.Сумма     = ПотериПокупателя;
		СтрокаТаблицыОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаТаблицыОплат);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВнереализационнуюПрибыль()

#Область ЭлектронныйПлатеж

// Возвращает возможность электронного платежа
// 
//  Параметры
//   ПодключаемоеОборудование - Справочник.ПодключаемоеОборудование
// 
Функция ВозможностьЭлектронногоПлатежа(ПодключаемоеОборудование) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

Процедура ПреобразоватьТелефонКПользовательсткомуВиду(ВведенноеЧисло, ТелефонСтрокой) Экспорт
	
	ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧГ=0");
	ВведенноеЧислоСтрокой = Лев(ВведенноеЧислоСтрокой, 10);
	Если СтрДлина(ВведенноеЧислоСтрокой) < 10 Тогда
		ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧЦ=10; ЧДЦ=; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	ТелефонСтрокой = "+7(";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 1, 3);
	ТелефонСтрокой = ТелефонСтрокой + ")";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 4, 3);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 7, 2);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 9, 2);
	
КонецПроцедуры

// Записывает тефелен в информационную карту
//  Параметры:
//   ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//   Телефон - Строка(10)
//
Процедура ЗаписатьТелефонВИнформационнуюКарту(ДисконтнаяКарта, НомерТелефона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(НомерТелефона)
		ИЛИ (НЕ СтрДлина(НомерТелефона) = 10) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск
	ДисконтнаяКартаОбъект = ДисконтнаяКарта.ПолучитьОбъект();
	КодГорода = Лев(НомерТелефона, 3);
	Номер     = Сред(НомерТелефона,4);
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонИнформационнойКарты;
	ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеКартыКонтактнаяИнформация.НомерТелефона,
	|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки,
	|	ИнформационныеКартыКонтактнаяИнформация.Вид,
	|	ИнформационныеКартыКонтактнаяИнформация.Тип
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
	|	И ИнформационныеКартыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
	|	И ИнформационныеКартыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	Запрос.УстановитьПараметр("НомерТелефона"  , НомерТелефона);
	Запрос.УстановитьПараметр("Тип"  , ТипКИ);
	Запрос.УстановитьПараметр("Вид"  , ВидКИ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Таков телефон есть
		НомерНайденнойСтроки = Выборка.НомерСтроки;
		ИндексСтроки = НомерНайденнойСтроки - 1;
		Если НЕ(ИндексСтроки = 0) Тогда
			ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	Иначе
		// Добавляем телефон
		ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
		
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Данные.Номер     = Номер;
		Данные.КодГорода = КодГорода;
		Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеТелефона(Данные);
		Результат.Состав        = Данные;
		
		ДанныеВыбора = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Результат);
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ДисконтнаяКартаОбъект,
																	 ДанныеВыбора,
																	 ВидКИ,
																	 ТипКИ);
		
		КоличествоСтрок = ДисконтнаяКартаОбъект.КонтактнаяИнформация.Количество();
		ИндексСтроки = КоличествоСтрок - 1;
		Если НЕ(ИндексСтроки = 0) Тогда
			ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДисконтнаяКартаОбъект.Записать();
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Записывает тефелен в информационную карту
//  Параметры:
//   ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//   Телефон - Строка(10)
//
Процедура УдалитьТелефонИзИнформационнойКарты(ДисконтнаяКарта, НомерТелефона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонИнформационнойКарты;
	ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеКартыКонтактнаяИнформация.НомерТелефона,
	|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки,
	|	ИнформационныеКартыКонтактнаяИнформация.Вид,
	|	ИнформационныеКартыКонтактнаяИнформация.Тип
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
	|	И ИнформационныеКартыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
	|	И ИнформационныеКартыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	Запрос.УстановитьПараметр("НомерТелефона"  , НомерТелефона);
	Запрос.УстановитьПараметр("Тип"  , ТипКИ);
	Запрос.УстановитьПараметр("Вид"  , ВидКИ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Таков телефон есть
		ДисконтнаяКартаОбъект = ДисконтнаяКарта.ПолучитьОбъект();
		НомерНайденнойСтроки = Выборка.НомерСтроки;
		ИндексСтроки = НомерНайденнойСтроки - 1;
		ДисконтнаяКартаОбъект.КонтактнаяИнформация.Удалить(ИндексСтроки);
	КонецЕсли;
	
	Попытка
		ДисконтнаяКартаОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Записывает тефелен в информационную карту
//  Параметры:
//   ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//   Email - Строка
//
Процедура ЗаписатьEmailВИнформационнуюКарту(ДисконтнаяКарта, Email) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(Email) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск
	ДисконтнаяКартаОбъект = ДисконтнаяКарта.ПолучитьОбъект();
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailИнформационнойКарты;
	ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Email = нрег(Email);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки,
	|	ИнформационныеКартыКонтактнаяИнформация.АдресЭП,
	|	ИнформационныеКартыКонтактнаяИнформация.Вид,
	|	ИнформационныеКартыКонтактнаяИнформация.Тип
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
	|	И ИнформационныеКартыКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
	|	И ИнформационныеКартыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	Запрос.УстановитьПараметр("АдресЭП"        , Email);
	Запрос.УстановитьПараметр("Тип"  , ТипКИ);
	Запрос.УстановитьПараметр("Вид"  , ВидКИ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Такой адрес ЭП есть
		НомерНайденнойСтроки = Выборка.НомерСтроки;
		ИндексСтроки = НомерНайденнойСтроки - 1;
		Если НЕ(ИндексСтроки = 0) Тогда
			ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	Иначе
		// Добавляем Адрес ЭП
		ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Email, ВидКИ);
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ДисконтнаяКартаОбъект,
																	 ЗначенияПолей,
																	 ВидКИ,
																	 ТипКИ);
		
		КоличествоСтрок = ДисконтнаяКартаОбъект.КонтактнаяИнформация.Количество();
		ИндексСтроки = КоличествоСтрок - 1;
		Если ИндексСтроки > 0 Тогда
			ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ДисконтнаяКартаОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Записывает тефелен в информационную карту
//  Параметры:
//   ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//   Email - Строка
//
Процедура УдалитьEmailИзИнформационнойКарты(ДисконтнаяКарта, Email) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(Email) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailИнформационнойКарты;
	ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Email = нрег(Email);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки,
	|	ИнформационныеКартыКонтактнаяИнформация.АдресЭП,
	|	ИнформационныеКартыКонтактнаяИнформация.Вид,
	|	ИнформационныеКартыКонтактнаяИнформация.Тип
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
	|	И ИнформационныеКартыКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
	|	И ИнформационныеКартыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	Запрос.УстановитьПараметр("АдресЭП"        , Email);
	Запрос.УстановитьПараметр("Тип"  , ТипКИ);
	Запрос.УстановитьПараметр("Вид"  , ВидКИ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		// Такой адрес ЭП есть
		ДисконтнаяКартаОбъект = ДисконтнаяКарта.ПолучитьОбъект();
		НомерНайденнойСтроки = Выборка.НомерСтроки;
		ИндексСтроки = НомерНайденнойСтроки - 1;
		ДисконтнаяКартаОбъект.КонтактнаяИнформация.Удалить(ИндексСтроки);
		
	КонецЕсли;
	
	Попытка
		ДисконтнаяКартаОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Получает систему налогообложения из регистра ПрименениеСистемНалогообложения по указанным параметрам
//
// Параметры:
//  Дата			 - 	 Дата, на которую необходимо определить систему налогообложения. Необязательный.  
//  Организация		 - 	 Организация, для которой необходимо определить систему налогообложения. Обязательный. 
//  Магазин			 - 	 Магазин, для которого необходимо определить систему налогообложения. Необязательный. 
//						 Если заполнен склад, но не заполнен магазин - берётся из склада. 
//  Склад			 - 	 Склад, для которого необходимо определить систему налогообложения. Необязательный.
//  ТоварнаяГруппа	 - 	 Товарная группа номенклатуры, для которой необходимо определить систему налогообложения. Необязательный.  
// 
// Возвращаемое значение:
//   Перечисления.ТипыСистемНалогообложенияККТ 
//
Функция ПолучитьСистемуНалогообложения(Дата = Неопределено, 
									   Организация, 
									   Магазин 		  = Неопределено, 
									   Склад 		  = Неопределено, 
									   ТоварнаяГруппа = Неопределено) Экспорт
									   
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;							   
									  									   
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;									   
									   
	Если ЗначениеЗаполнено(Склад) И НЕ ЗначениеЗаполнено(Магазин) Тогда
		Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Магазин");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	ВЫБОР
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 2
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 3
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 4
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 5
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 6
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И &Условие) КАК ПрименениеСистемНалогообложенияСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
			
	Если ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(Склад) И ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		
		Условие = " (Магазин = &Магазин
	               	|			ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	               	| И (Склад = &Склад
	               	|			ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               	| И (ТоварнаяГруппа = &ТоварнаяГруппа
	               	|			ИЛИ ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))";									 
		
	ИначеЕсли ЗначениеЗаполнено(Магазин) И НЕ ЗначениеЗаполнено(Склад) И ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
				
		Условие = " (Магазин = &Магазин
	               	|			ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	               	| И (Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               	| И (ТоварнаяГруппа = &ТоварнаяГруппа
	               	|			ИЛИ ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))";									 
			
	ИначеЕсли НЕ ЗначениеЗаполнено(Магазин) И НЕ ЗначениеЗаполнено(Склад) И ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
				
		Условие = " (Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	               	| И (Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               	| И (ТоварнаяГруппа = &ТоварнаяГруппа
	               	|			ИЛИ ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))";									 
		
	ИначеЕсли ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(Склад) И НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
				
		Условие = " (Магазин = &Магазин
	               	|			ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	               	| И (Склад = &Склад
	               	|			ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               	| И (ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))";									 
					
	ИначеЕсли ЗначениеЗаполнено(Магазин) И НЕ ЗначениеЗаполнено(Склад) И НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда 
		
		Условие = " (Магазин = &Магазин
	               	|			ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	               	| И (Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               	| И (ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))";									 		
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Магазин) И НЕ ЗначениеЗаполнено(Склад) И НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		
		Условие = " (Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	               	| И (Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               	| И (ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))";
		
	Иначе
		
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
			
	КонецЕсли;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие); 
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		Запрос.УстановитьПараметр("Магазин", Магазин);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Дата", 			Дата);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СистемаНалогообложения;
	Иначе
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

// Заполняет свойство СистемаНалогообложения у переданного Объекта
//
// Параметры:
//  Объект	 - 	 Объект с свойствами: Ссылка, Дата, Организация, Магазин, Склад, СистемаНалогообложения  
//
Процедура ЗаполнитьСистемуНалогообложения(Объект) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СистемаНалогообложения = ПолучитьСистемуНалогообложения(
			Объект.Дата, 
			Объект.Организация, 
			Объект.Магазин, 
			Объект.Склад);
	
КонецПроцедуры

// Заполняет данные покупателя. Теги 1227 и 1228
//
// Параметры:
//  ОбщиеПараметры - См. описание МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека
//  РеквизитыДокумента - Структура
//
Процедура ЗаполнитьДанныеПокупателя(ОбщиеПараметры, РеквизитыДокумента) Экспорт
	
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если ЗначениеЗаполнено(РеквизитыДокумента.Контрагент) 
		И НЕ КонтрагентРозничныйПокупатель = РеквизитыДокумента.Контрагент Тогда
		
		РеквизитыПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Контрагент, "Наименование, ИНН");
		
		Если ОбщиеПараметры.Свойство("Получатель") Тогда
			ОбщиеПараметры.Получатель    = РеквизитыПокупателя.Наименование;
		ИначеЕсли ОбщиеПараметры.Свойство("Покупатель") Тогда
			ОбщиеПараметры.Покупатель    = РеквизитыПокупателя.Наименование;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ПолучательИНН") Тогда
			ОбщиеПараметры.ПолучательИНН    = РеквизитыПокупателя.ИНН;
		ИначеЕсли ОбщиеПараметры.Свойство("ПокупательИНН") Тогда
			ОбщиеПараметры.ПокупательИНН    = РеквизитыПокупателя.ИНН;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
