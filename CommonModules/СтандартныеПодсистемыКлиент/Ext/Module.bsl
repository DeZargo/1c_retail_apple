
&Вместо("ПриВыполненииСтандартныхПериодическихПроверок")
Процедура КочетовПриВыполненииСтандартныхПериодическихПроверок()
	
КонецПроцедуры

//// Вызывается из обработчика ожидания каждые 20 минут, например, для контроля
//// динамического обновления и окончания срока действия учетной записи пользователя.
////
//Процедура ПриВыполненииСтандартныхПериодическихПроверок() Экспорт
//	
//	Параметры = Новый Структура;
//	
//	ПодсистемаЦентрМониторингаСуществует = Ложь;
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
//		ПодсистемаЦентрМониторингаСуществует = Истина;
//		МодульЦентрМониторингаКлиентСлужебный = ОбщегоНазначенияКлиент.ОбщийМодуль("ЦентрМониторингаКлиентСлужебный");
//		МодульЦентрМониторингаКлиентСлужебный.ПриВыполненииСтандартныхПериодическихПроверокНаКлиенте(Параметры);
//	КонецЕсли;
//	
//	СтандартныеПодсистемыВызовСервера.ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры);
//	
//	Если ПодсистемаЦентрМониторингаСуществует Тогда
//		МодульЦентрМониторингаКлиентСлужебный.ПослеВыполненияСтандартныхПериодическихПроверокНаКлиенте(Параметры);
//	КонецЕсли;
//	
//	Контекст = Новый Структура("Параметры", Параметры);
//	
//	ОбработкаПродолжения = Новый ОписаниеОповещения(
//		"ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи", ЭтотОбъект, Контекст);
//	
//	ДополнительныеПараметры = Новый Структура;
//	ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
//	
//	Если Не Параметры.КонфигурацияБазыДанныхИзмененаДинамически Тогда
//		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
//		Возврат;
//	КонецЕсли;
//	
//	ИмяПараметра = "СтандартныеПодсистемы.ПриВыполненииСтандартныхПериодическихПроверок";
//	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
//		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
//		ДатаСеанса      = ОбщегоНазначенияКлиент.ДатаСеанса();
//		Если ТипЗнч(ДатаСохраненная) = Тип("Дата") И ДеньГода(ДатаСохраненная) = ДеньГода(ДатаСеанса) Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТекстВопроса =
//		НСтр("ru = 'Версия программы обновлена (внесены изменения в конфигурацию информационной базы).
//		           |Для дальнейшей работы рекомендуется перезапустить программу.'");
//	ПоказатьОповещениеПользователя(НСтр("ru = 'Требуется перезапуск'"),,
//		ТекстВопроса, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное);
//	
//	КнопкиВопроса = Новый СписокЗначений;
//	КнопкиВопроса.Добавить("Перезапустить", НСтр("ru = 'Перезапустить'"));
//	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
//	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
//	
//	ОписаниеОповещения = Новый ОписаниеОповещения(
//		"ПриВыполненииСтандартныхПериодическихПроверокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
//	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,, "НапомнитьПозже", КлиентскоеПриложение.ПолучитьЗаголовок());
//	
//КонецПроцедуры
