
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиКоманд

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда открытия обработки сопоставления;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыПодбора        - Структура          - параметры открытия формы подбора товаров, состав полей определен в функции
//													ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПараметрыФормыПодбораТоваров.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыПодбора = Неопределено) Экспорт
	
	ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС");
	
	//Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ДокументОснование, "Магазин");
	Магазин = Неопределено;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОсобенностьУчета",                        ОсобенностьУчета);
	ПараметрыФормы.Вставить("Магазин"                                  , Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг"                     , Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры"     , Истина);
	//ПараметрыФормы.Вставить("Заголовок"                                , "");
	ПараметрыФормы.Вставить("Дата"                                     , Форма.Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров"        , Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда выбора номенклатуры,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыХарактеристики - Структура          - параметры создания характеристики номенклатуры из формы выбора.
//
Процедура ОткрытьФормуВыбораХарактеристикиНоменклатуры(Форма, ОповещениеПриЗавершении, ПараметрыХарактеристики = Неопределено) Экспорт
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыХарактеристики, ЭтотОбъект,,,,
		ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма, в которой вызывается команда выбора номенклатуры,
//  ПараметрыНоменклатуры - Структура        - параметры создания номенклатуры из формы выбора номенклатуры
//										(см. описание ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры).
//
Процедура ОткрытьФормуВыбораНоменклатуры(Форма, ПараметрыНоменклатуры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если ПараметрыНоменклатуры <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыНоменклатуры Цикл
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТипНоменклатуры  = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
	ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипНоменклатуры",  ТипНоменклатуры);
	ПараметрыОтбора.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма                       - форма, в которой вызывается команда создания номенклатуры,
//  ПараметрыНоменклатуры - Структура                              - параметры создания номенклатуры
//										(см. описание ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры),
//  ЕдиницаИзмеренияВЕТИС - СправочникСсылка.ЕдиницыИзмеренияВЕТИС - единица измерения ВЕТИС, на основании которой 
//																		создается номенклатура.
//
Процедура ОткрытьФормуСозданияНоменклатуры(Форма, ПараметрыНоменклатуры, ЕдиницаИзмеренияВЕТИС) Экспорт
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС)
		И Не ЗначениеЗаполнено(ПараметрыНоменклатуры.ЕдиницаИзмеренияВЕТИС) Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно создать номенклатуру, т.к. не заполнено поле ""Единица измерения"" в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВЕТИС%", Строка(ЕдиницаИзмеренияВЕТИС));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыНоменклатуры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ТипНоменклатуры  = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
	ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС");
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",  ТипНоменклатуры);
	ПараметрыФормы.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма-владелец.
//  Реквизиты     - Структура        - данные заполнения нового контрагента:
//   * Наименование            - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН                     - Строка - ИНН контрагента,
//   * КПП                     - Строка - КПП контрагента.
//
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("НаименованиеПолное",      Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма, из которой осуществляется выбор.
//  Реквизиты     - Структура        - данные для заполнения отбора:
//   * Наименование            - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН                     - Строка - ИНН контрагента,
//   * КПП                     - Строка - КПП контрагента.
//
Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("НаименованиеПолное",      Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму создания нового документа-основания по документу ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - УправляемаяФорма   - форма, из которой выполняется команда оформления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения оформления,
//  Основание               - Строка             - имя основания (имя метаданных документа-основания),
//  ТипОбъекта              - Тип                - тип объекта формы для которого осуществляется оформление.
//
Процедура ОткрытьФормуСозданияОснованияДокументаВЕТИС(ФормаВладелец, ОповещениеПриЗавершении, Основание, ТипОбъекта) Экспорт
	
	ПодключаемыеКомандыВЕТИСКлиент.ОткрытьФормуСозданияОснованияДокументаВЕТИС(ФормаВладелец, ОповещениеПриЗавершении, Основание, ТипОбъекта);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по документу ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - УправляемаяФорма   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  Основание               - Строка             - имя основания (имя метаданных документа-основания),
//  ТипОбъекта              - Тип                - тип объекта формы для которого осуществляется выбор.
//
Процедура ОткрытьФормуВыбораОснованияДокументаВЕТИС(Форма, ОповещениеПриЗавершении, Основание, ТипОбъекта)Экспорт
	
	ПодключаемыеКомандыВЕТИСКлиент.ОткрытьФормуВыбораОснованияДокументаВЕТИС(Форма, ОповещениеПриЗавершении, Основание, ТипОбъекта);
	
КонецПроцедуры

// Открывает форму выбора документа перемещения товаров.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
//
Процедура ОткрытьФормуВыбораДокументаПеремещениеТоваров(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаВыбора",,Форма,,,,ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму выбора документа поступления товаров и услуг.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
//
Процедура ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаВыбора",,Форма,,,,ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Справочник.Магазины.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораОснованияИсходящейТранспортнойОперации(Форма, ОповещениеПриЗавершении, ИмяДокумента) Экспорт
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена(Форма,Форма.Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	ЕстьОтбор = Ложь;
	
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если ЕстьОтбор Тогда
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ДополнительныеПараметры = ИнтеграцияВЕТИСКлиент.ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	ДополнительныеПараметры.РедактированиеДоступно  = НЕ(Форма.РедактированиеФормыНедоступно ИЛИ Форма.ТолькоПросмотр);
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ОткрытьФорму(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		Форма.УникальныйИдентификатор,,,
		Новый ОписаниеОповещения(
			"ПослеЗавершенияВыбораОснованияИсходящейТранспортнойОперацииВЕТИС", 
			ИнтеграцияВЕТИССлужебныйКлиент, 
			ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по производственной операции ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - УправляемаяФорма   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  ИмяДокумента            - Строка             - имя метаданных документа-основания.
//
Процедура ОткрытьФормуВыбораОснованияПроизводственнойОперации(Форма, ОповещениеПриЗавершении, ИмяДокумента) Экспорт
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Товары) 
		ИЛИ НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Сырье) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СоответствиеПолей = ИнтеграцияВЕТИСКлиентСерверПереопределяемый.СоответствиеПолейДокументовОснованийИПроизводственнойОперации();
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если СтруктураОтбора.Количество() Тогда
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ОткрытьФорму(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		Форма.УникальныйИдентификатор,,,
		Новый ОписаниеОповещения(
			"ПослеЗавершенияВыбораОснованияПроизводственнойОперацииВЕТИС", 
			ИнтеграцияВЕТИССлужебныйКлиент, 
			ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по инвентаризации продукции ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - УправляемаяФорма   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  ИмяДокумента            - Строка             - имя метаданных документа-основания.
//
Процедура ОткрытьФормуВыбораОснованияИнвентаризацииПродукции(Форма, ОповещениеПриЗавершении, ИмяДокумента) Экспорт
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СоответствиеПолей = ИнтеграцияВЕТИСКлиентСерверПереопределяемый.СоответствиеПолейДокументовОснованийИИнвентаризацииПродукции();
	
	Для каждого СоответствиеПоля Из СоответствиеПолей[ИмяДокумента] Цикл
		Если ЗначениеЗаполнено(СоответствиеПоля.Значение)
			И ЗначениеЗаполнено(Форма[СоответствиеПоля.Ключ+"Соответствие"]) Тогда
			СтруктураОтбора.Вставить(СоответствиеПоля.Значение, Форма[СоответствиеПоля.Ключ+"Соответствие"]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если СтруктураОтбора.Количество() Тогда
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	ДополнительныеПараметры.РедактированиеДоступно  = НЕ(Форма.РедактированиеФормыНедоступно ИЛИ Форма.ТолькоПросмотр);
	
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ОткрытьФорму(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		Форма.УникальныйИдентификатор,,,
		Новый ОписаниеОповещения(
			"ПослеЗавершенияВыбораОснованияИнвентаризацииПродукцииВЕТИС", 
			ИнтеграцияВЕТИССлужебныйКлиент, 
			ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма                  - УправляемаяФорма            - форма, в которой произошло событие.
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
//  КэшированныеЗначения   - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы.
//  ПараметрыЗаполнения    - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//  ПараметрыУказанияСерий - Структура                   - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ПриИзмененииНоменклатуры(Форма,
								ТекущаяСтрока,
								КэшированныеЗначения,
								ПараметрыЗаполнения,
								ПараметрыУказанияСерий = Неопределено) Экспорт
	
	ЗаполнитьПризнакХарактеристикиИспользуются = Новый Структура;
	ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("Номенклатура", "Номенклатура");
	ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ЗаполнитьПризнакХарактеристикиИспользуются);
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияСопоставленияВетис");
	СтруктураДействий.Вставить("ЗаполнитьПродукциюВЕТИС",                    ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		
		Если ПараметрыУказанияСерий <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
			И ИнтеграцияИСКлиентСервер.ЕстьРеквизитОбъекта(Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта], ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			
			Склад = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта][ПараметрыУказанияСерий.ИмяПоляСклад];
			
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад);
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИмяТаблицы = ПараметрыЗаполнения.ИмяТабличнойЧасти;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПродукциюВЕТИС", ПараметрыЗаполнения);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при создании характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент              - ПолеФормы                   - поле, в котором происходит создание характеристики,
//  СтандартнаяОбработка - Булево                      - признак отказа от стандартной обработки события.
//
Процедура ХарактеристикаСоздание(Форма, ТекущаяСтрока, Элемент, СтандартнаяОбработка) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении серии в таблице Товары.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ПараметрыУказанияСерий - Структура        - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий,
//  ТекущиеДанные          - ДанныеФормыЭлементКоллекции, Структура - строка таблицы товаров,
//  КэшированныеЗначения   - Структура        - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения    - Структура        - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииСерии(Форма,
							ПараметрыУказанияСерий,
							ТекущиеДанные,
							КэшированныеЗначения = Неопределено,
							ПараметрыЗаполнения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении единицы измерения ВЕТИС в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииЕдиницыИзмеренияВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ТабличнаяЧастьТоварыРеквизитФормы")
		И ПараметрыЗаполнения.ТабличнаяЧастьТоварыРеквизитФормы = Истина Тогда
		ТабличнаяЧастьТовары = Форма[ПараметрыЗаполнения.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧастьТовары = Форма.Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти];
	КонецЕсли;
		
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(ТабличнаяЧастьТовары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении количества ВЕТИС в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличестваВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ТабличнаяЧастьТоварыРеквизитФормы")
		И ПараметрыЗаполнения.ТабличнаяЧастьТоварыРеквизитФормы = Истина Тогда
		ТабличнаяЧастьТовары = Форма[ПараметрыЗаполнения.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧастьТовары = Форма.Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти];
	КонецЕсли;
		
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(ТабличнаяЧастьТовары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
		
		Если КэшированныеЗначения = Неопределено Тогда
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			
			Номенклатура = ТекущаяСтрока.Номенклатура;
			ЕдиницаИзмеренияВЕТИС = ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС;
			
			КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаУпаковки(Номенклатура, 
				ЕдиницаИзмеренияВЕТИС);
			
			ДанныеЕдиницыИзмренияВЕТИС = ИнтеграцияВЕТИСРТВызовСервера.ДанныеЕдиницыИзмренияВЕТИС(ЕдиницаИзмеренияВЕТИС, 
				Номенклатура);
			
			ДанныеКлюча = Новый Структура;
			ДанныеКлюча.Вставить("КодОшибки",                ДанныеЕдиницыИзмренияВЕТИС.КодОшибки);
			ДанныеКлюча.Вставить("Коэффициент",              ДанныеЕдиницыИзмренияВЕТИС.Коэффициент);
			ДанныеКлюча.Вставить("ТипИзмеряемойВеличины",    ДанныеЕдиницыИзмренияВЕТИС.ТипИзмеряемойВеличины);
			ДанныеКлюча.Вставить("НужноОкруглятьКоличество", ДанныеЕдиницыИзмренияВЕТИС.НужноОкруглятьКоличество);
			
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента, ДанныеКлюча);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент              - ПолеВвода                   - элемент формы Характеристика,
//  ДанныеВыбора         - СписокЗначений              - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево                      - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения выбора номенклатуры,
//  ВыбранноеЗначение       - Произвольный       - результат выбора,
//  ИсточникВыбора          - УправляемаяФорма   - форма, в которой осуществлен выбор номенклатуры.
//
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки получения данных выбора номенклатуры, если произошло окончание ввода текста.
//
// Параметры:
//  ДанныеВыбора             - СписокЗначений - данные выбора номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы,
//  ПараметрыПолученияДанных - Структура      - структура получения данных номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы,
//  СтандартнаяОбработка     - Булево         - признак стандартной обработки выбора номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы.
//
Процедура ОбработкаПолученияДанныхВыбораНоменклатуры(ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора серии, если произошел выбор из формы подбора.
//
// Параметры:
//	Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//	ПараметрыУказанияСерий - Структура        - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий,
//	ВыбраннаяСерия         - ОпределяемыйТип.СерияНоменклатурыВЕТИС - обрабатываемое значение серии,
//	ИсточникВыбора         - УправляемаяФорма - форма, в которой осуществлен выбор,
//	ПараметрыЗаполнения    - Структура        - параметры обработки выбора серии.
//
Процедура ОбработкаВыбораСерии(Форма,
								ПараметрыУказанияСерий,
								ВыбраннаяСерия,
								ИсточникВыбора,
								ПараметрыЗаполнения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьВсяПродукцияСопоставлена(Форма, Товары) Экспорт 
	
	Отказ = Ложь;
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Требуется сопоставить номенклатуру!'"),,
				СтрШаблон("Объект.Товары[%1].Номенклатура",СтрокаТЧ.НомерСтроки),,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ Отказ;
	
КонецФункции

Функция ПараметрыЗавершенияВыбораОснования()
	
	Результат = Новый Структура;
	Результат.Вставить("Форма");
	Результат.Вставить("ОповещениеПриЗавершении");
	Результат.Вставить("РедактированиеДоступно", Ложь);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

#КонецОбласти

