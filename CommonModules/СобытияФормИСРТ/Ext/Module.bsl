#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если Форма.ИмяФормы = "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Форма.ФормаВыбора" Тогда
		Если Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаСпискаДокументов" Тогда
			Форма.Элементы.СтраницаКОформлению.Видимость = Ложь;
			Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Справочник.Справки2ЕГАИС.Форма.ФормаВыбора" Тогда
		ПриСозданииНаСервереФормаВыбораСправки2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "Справочник.ШтрихкодыУпаковокТоваров.Форма") > 0 Тогда
		ПриСозданииНаСервереФормСправочникаШтрихкодыУпаковокТоваров(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		ПриСозданииНаСервереФормаСпискаДокументовЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		ПриСозданииНаСервереФормаСпискаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктСписанияЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаАктСписанияЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаВозвратИзРегистра2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПередачаВРегистр2ЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаПередачаВРегистр2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаЧекЕГАИСВозврат(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаТТНВходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваров) Тогда
			Форма.Элементы.Действия.Видимость = Ложь;
			Форма.Элементы.СписокОформитьДокументПоступления.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаТТНИсходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.СопоставлениеКлассификаторовЕГАИС.Форма.СопоставлениеКлассификаторовЕГАИС" Тогда
		ПриСозданииНаСервереФормаОбработкиСопоставлениеКлассификаторовЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		ПриСозданииНаСервереФормаОбработкиПроверкаИПодборАлкогольнойПродукцииЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаЗаписи" Тогда
		ПриСозданииНаСервереФормаЗаписиРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаСписка" Тогда
		ПриСозданииНаСервереФормаСпискаРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтчетЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОтчетЕГАИС) Тогда
			Форма.Элементы.ПодменюСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ГруппаТоварыБезРазбиенияСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ГруппаТоварыБезРазбиенияХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ТоварыУточнение" Тогда
		Форма.Элементы.ТоварыУточнениеСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыУточнениеХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗапросСкладскогоЖурналаВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		
		Форма.Элементы.СырьеСерия.Видимость  = Ложь;
		
		Форма.Элементы.СтраницаСырье.Видимость                  = Ложь;
		Форма.Элементы.СтраницаТехнологическийПроцесс.Видимость = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.СоответствиеНоменклатурыВЕТИС.Форма.ФормаЗаписи" Тогда
		
		Форма.Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.Серия.Видимость = Ложь;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.СоответствиеНоменклатурыВЕТИС.Форма.ФормаСписка" Тогда
		
		Форма.Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.Серия.Видимость = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельОбменВЕТИС.Форма.Форма" Тогда
		Форма.Элементы.ГруппаПроизводственнаяОперацияВЕТИС.Видимость = Ложь;
		Форма.Элементы.ГруппаОбъединениеЗаписейСкладскогоЖурналаВЕТИС.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.Команды.Найти("ОткрытьПодбор") <> Неопределено Тогда
		Форма.Команды["ОткрытьПодбор"].Картинка = БиблиотекаКартинок.ПодобратьТовары;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийФорм

// Возникает на сервере при записи константы в формах настроек.
//   если запись одной константы может повлечь изменение других отображаемых в этой же форме
//
// Параметры:
//   Форма             - УправляемаяФорма - форма,
//   КонстантаИмя      - Строка           - записываемая константа,
//   КонстантаЗначение - Произвольный     - значение константы.
//
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт

	Возврат
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой нужно установить условное оформление,
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СвязиПараметровВыбора

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода,
	ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода характеристики номенклатуры.
//
// Параметры:
//	Форма						- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущей характеристики номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСХарактеристикой(Форма, ИмяПоляВвода,
	ПутьКДаннымХарактеристики = "Элементы.Товары.ТекущиеДанные.Характеристика") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Характеристика", ПутьКДаннымХарактеристики));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает у элемента формы Упаковка подсказку ввода для соответствующей номенклатуры
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма объекта.
//
Процедура УстановитьИнформациюОЕдиницеХранения(Форма) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРТ

// Вызывается при создании на сервере формы выбора справочника Справки2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаВыбораСправки2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если Форма.Параметры.Свойство("Номенклатура")
		И Форма.Параметры.Свойство("Характеристика") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
		|ГДЕ
		|	СоответствиеЕГАИС.Номенклатура = &Номенклатура
		|	И СоответствиеЕГАИС.Характеристика = &Характеристика";
		
		Запрос.УстановитьПараметр("Номенклатура", Форма.Параметры.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Форма.Параметры.Характеристика);
		
		МассивПродукции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АлкогольнаяПродукция");
		
		Если МассивПродукции.Количество() > 0 Тогда
			ОбщегоНазначенияРТКлиентСервер.ИзменитьЭлементОтбораСписка(
				Форма.Список,
				"АлкогольнаяПродукция",
				МассивПродукции,
				Истина,
				ВидСравненияКомпоновкиДанных.ВСписке,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
				
			СтрокаОтбораПоНоменклатуре = НСтр("ru = 'Соответствующие номенклатуре: %1'");
			Если ЗначениеЗаполнено(Форма.Параметры.Характеристика) Тогда
				ПредставлениеНоменклатуры = Строка(Форма.Параметры.Номенклатура) + " / " + Строка(Форма.Параметры.Характеристика);
			Иначе
				ПредставлениеНоменклатуры = Строка(Форма.Параметры.Номенклатура);
			КонецЕсли;
			
			Форма.ИнформацияОбОтборе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОтбораПоНоменклатуре, ПредставлениеНоменклатуры);
			Форма.Элементы.ИнформацияОбОтборе.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере форм справочника ШтрихкодыУпаковокТоваров.
//
Процедура ПриСозданииНаСервереФормСправочникаШтрихкодыУпаковокТоваров(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ЧекЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаДокументовЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если Форма.Параметры.Отбор.Свойство("ВидОперации") И Форма.Параметры.Отбор.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары Тогда
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = НСтр("ru='Вскрытия тары ЕГАИС'");
		
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаОформлено;
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктПостановкиНаБалансЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПодменюСоздатьНаОснованииОбычное_СоздатьНаОснованииОприходованиеТоваров",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктПостановкиНаБалансЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПодменюСоздатьНаОснованииОбычное_СоздатьНаОснованииОприходованиеТоваров",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктСписанияЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаАктСписанияЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ВозвратИзРегистра2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаВозвратИзРегистра2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ПередачаВРегистр2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаПередачаВРегистр2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ЧекЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ВидОперации.ТолькоПросмотр = Истина;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары Тогда
		Форма.АвтоЗаголовок = Ложь;
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Заголовок = НСтр("ru='Вскрытие тары ЕГАИС %1 от %2'");
			Заголовок = СтрШаблон(Заголовок, Форма.Объект.Номер, Форма.Объект.Дата);
		Иначе
			Заголовок = НСтр("ru='Вскрытие тары ЕГАИС (создание)'");
		КонецЕсли;
		
		Форма.Заголовок = Заголовок;
	КонецЕсли;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары
		ИЛИ Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.РеализацияЮридическомуЛицуСБезналичнойОплатой Тогда
		Форма.Элементы.НомерЧекаККМ.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
	Попытка
		Для каждого СтрокаТаблицы Из Форма.Объект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АлкогольнаяПродукция) И 
				СтрокаТаблицы.НоменклатураДляВыбора.Количество() = 1 Тогда
				СтрокаТаблицы.АлкогольнаяПродукция = СтрокаТаблицы.НоменклатураДляВыбора[0].Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ЧекЕГАИСВозврат.
//
Процедура ПриСозданииНаСервереФормаДокументаЧекЕГАИСВозврат(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ВидОперации.ТолькоПросмотр = Истина;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИСВозврат.ВозвратОтЮридическогоЛицаСБезналичнойОплатой Тогда
		Форма.Элементы.НомерЧекаККМ.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы обработки СопоставлениеКлассификаторовЕГАИС.
//
Процедура ПриСозданииНаСервереФормаОбработкиСопоставлениеКлассификаторовЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы обработки ПроверкаИПодборАлкогольнойПродукцииЕГАИС.
//
Процедура ПриСозданииНаСервереФормаОбработкиПроверкаИПодборАлкогольнойПродукцииЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.АлкогольнаяПродукцияКОпределениюСправок2Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ТТНВходящаяЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаТТНВходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Форма.Элементы.ТоварыГруппаДополнительныеКоманды.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ТТНИсходящаяЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаТТНИсходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Форма.Элементы.ТоварыГруппаДополнительныеКоманды.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы записи регистра сведений СоответствиеНоменклатурыЕГАИС.
//
Процедура ПриСозданииНаСервереФормаЗаписиРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка регистра сведений СоответствиеНоменклатурыЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры


#КонецОбласти
