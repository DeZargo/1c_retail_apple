
#Область ПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования.
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьЗначениеРеквизита.
Процедура СоздатьОбновитьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ТекстСообщения = НСтр("ru = 'Отключено использование дополнительных реквизитов'");
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаСсылка) Тогда
		
		ЗначениеОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
		
		Попытка
			ЗначениеОбъект.Заблокировать();
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Работа с номенклатурой.Создание/обновление значение дополнительного реквизита'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
	Иначе
		ЗначениеОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	КонецЕсли;
	
	ЗначениеОбъект.Владелец				= ДополнительныйРеквизит;
	ЗначениеОбъект.Наименование			= СтрокаДанных.Наименование;
	ЗначениеОбъект.ПолноеНаименование	= СтрокаДанных.Наименование;
	
	Попытка
		ЗначениеОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Работа с номенклатурой.Создание/обновление значение дополнительного реквизита'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	ЗначениеРеквизитаСсылка = ЗначениеОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьДополнительныйРеквизит.
Процедура СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ТекстСообщения = НСтр("ru = 'Отключено использование дополнительных реквизитов'");
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
		
		РеквизитОбъект = РеквизитСсылка.ПолучитьОбъект();
		
		Попытка
			РеквизитОбъект.Заблокировать();
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Работа с номенклатурой.Создание/обновление дополнительного реквизита'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
	Иначе
		РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
					
		РеквизитОбъект.ТипЗначения = 
			РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
	КонецЕсли;
	
	НаборСвойств		= ВидНоменклатуры.НаборСвойств;
	УИД					= Новый УникальныйИдентификатор();
	СтрокаУИД			= СтрЗаменить(Строка(УИД), "-", "");
	ИмяРеквизита		= СтрокаДанных.Наименование + "_" + СтрокаУИД;
	НаименованиеНабора	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
	Наименование		= СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
	
	РеквизитОбъект.Имя			= ИмяРеквизита;
	РеквизитОбъект.НаборСвойств	= НаборСвойств;
	РеквизитОбъект.Доступен		= Истина;
	РеквизитОбъект.Наименование	= Наименование;
	РеквизитОбъект.Заголовок	= СтрокаДанных.Наименование;
	
	Попытка
		РеквизитОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание/обновление дополнительного реквизита'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	РеквизитСсылка = РеквизитОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьВидНоменклатуры.
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
		
	СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеЗаполнения.Тип, ТипНоменклатуры);
	
	// Заполнение объекта
	
	ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	
	ВидНоменклатурыОбъект.Заполнить(Неопределено);
	ВидНоменклатурыОбъект.УстановитьНовыйКод();
	
	ВидНоменклатурыОбъект.Наименование		= ДанныеЗаполнения.Наименование;
	ВидНоменклатурыОбъект.Родитель			= ДанныеЗаполнения.РодительИнформационнойБазы;
	ВидНоменклатурыОбъект.СтавкаНДС			= СтавкаНДС;
	ВидНоменклатурыОбъект.ТипНоменклатуры	= ТипНоменклатуры;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.Товар;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.Услуга;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.УчастникЕГАИС Тогда
		
		ВидНоменклатурыОбъект.АлкогольнаяПродукция 	 = Истина;
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.ПодакцизныйТовар;
		ВидНоменклатурыОбъект.ОсобенностьУчета		 = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
		
	Иначе
		
		ВидНоменклатурыОбъект.ОсобенностьУчета		= Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;
		
	КонецЕсли;
	
	Попытка
		ВидНоменклатурыОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание вида номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	ВидНоменклатурыСсылка = ВидНоменклатурыОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьГруппуВидовНоменклатуры.
Процедура СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ГруппаВидовНоменклатурыСсылка) Тогда
		
		НоваяГруппа = ГруппаВидовНоменклатурыСсылка.ПолучитьОбъект();
		
		Попытка
			НоваяГруппа.Заблокировать();
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Работа с номенклатурой.Создание/обновление группы видов номенклатуры'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
	Иначе
		НоваяГруппа = Справочники.ВидыНоменклатуры.СоздатьГруппу();
	КонецЕсли;
	
	НоваяГруппа.Наименование	= ДанныеЗаполнения.Наименование;
	НоваяГруппа.Родитель		= ДанныеЗаполнения.РодительИнформационнойБазы;
	
	Попытка
		НоваяГруппа.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Запись группы вида номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	ГруппаВидовНоменклатурыСсылка = НоваяГруппа.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру.
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	// Подготовка данных
	
	СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	СсылкаНаЕдиницуИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.ЕдиницаИзмерения, СсылкаНаЕдиницуИзмерения);
	
	Производитель = Справочники.Контрагенты.ПустаяСсылка();
	НайтиПроизводителяПоДаннымСервиса(ДанныеЗаполнения.Производитель, Производитель);
	
	// Заполнение объекта
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Заполнить(Неопределено);
	
	НоменклатураОбъект.УстановитьНовыйКод();
	
	НаименованиеПолное = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), 
		ДанныеЗаполнения.НаименованиеДляПечати, 
		ДанныеЗаполнения.Наименование);
		
	НоменклатураОбъект.Артикул			= ДанныеЗаполнения.Артикул;
	НоменклатураОбъект.Наименование		= ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеПолное;
	НоменклатураОбъект.ЕдиницаИзмерения	= СсылкаНаЕдиницуИзмерения;
	НоменклатураОбъект.Производитель	= Производитель;
	НоменклатураОбъект.СтавкаНДС		= СтавкаНДС;
	НоменклатураОбъект.Описание			= ДанныеЗаполнения.Описание;
	НоменклатураОбъект.ВидНоменклатуры 	= ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
	НоменклатураОбъект.ТипНоменклатуры 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураОбъект.ВидНоменклатуры,
																					"ТипНоменклатуры");
	НоменклатураОбъект.АлкогольнаяПродукция = ДанныеЗаполнения.УчастникЕГАИС;
	
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	// Сохранение изображения из сервиса
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		СохранитьИзображенияНоменклатуры(НоменклатураСсылка, ДанныеЗаполнения.Изображения);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристикуСДополнительнымиРеквизитами.
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	ЗаполнитьЗначенияРеквизитовХарактеристики(
		ЗначенияДополнительныхРеквизитов, 
		ДанныеЗаполнения);
	
	Если ЗначенияДополнительныхРеквизитов.Количество() <> 0 Тогда
		ХарактеристикаСсылка = Неопределено;
		СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка);
		
		Если ХарактеристикаСсылка <> Неопределено Тогда
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ХарактеристикаСсылка, ЗначенияДополнительныхРеквизитов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику.
Процедура СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НоваяХарактеристика.Владелец = Владелец;
	НоваяХарактеристика.УстановитьНовыйКод();
	НоваяХарактеристика.Наименование = ДанныеЗаполнения.Наименование;
	
	Попытка
		НоваяХарактеристика.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	ХарактеристикаСсылка = НоваяХарактеристика.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияДополнительныхРеквизитов.
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для Каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СформироватьНаименованиеПоХарактеристике.
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, 
													ПредставлениеХарактеристики, 
													НаименованиеХарактеристики) Экспорт
	
	НаименованиеХарактеристики = СтрШаблон("%1 ,%2", НаименованиеНоменклатуры, ПредставлениеХарактеристики);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды.
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	Для Каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод = ЭлементКоллекции.Штрихкод;
		МенеджерЗаписи.ПредставлениеШтрихкода = ЭлементКоллекции.Штрихкод;
		МенеджерЗаписи.Владелец = ЭлементКоллекции.Номенклатура;
		МенеджерЗаписи.Характеристика = ЭлементКоллекции.Характеристика;
		МенеджерЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(
			ЭлементКоллекции.Штрихкод);
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Запись штрихкодов'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Продолжить;
		
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту.
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "НаборСвойствХарактеристик");
	Иначе
		НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "НаборСвойств");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаборСвойств) Тогда
		
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		
		Попытка
			НаборСвойствОбъект.Заблокировать();
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Заполнение дополнительных реквизитов'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
		Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
			
			НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
			
		КонецЦикла;
		
		Попытка
			НаборСвойствОбъект.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Запись дополнительных реквизитов'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СохранитьИзображенияНоменклатуры.
Процедура СохранитьИзображенияНоменклатуры(НоменклатураСсылка, Изображения) Экспорт
	
	СозданныеИзображения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Изображения Цикл
		
		ИзображениеURL = ЭлементКоллекции.ИзображениеURL;
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");		
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
				
		ПараметрыФайла = Новый Структура();
		
		ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов",     НоменклатураСсылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		
		Попытка
			НоменклатураОбъект.Заблокировать();
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Изменение номенклатуры'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
		НоменклатураОбъект.ФайлКартинки          = СозданныеИзображения[0];
		НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НоменклатураОбъект.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Изменение номенклатуры'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры.
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК ХарактеристикаБазы,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|	И НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ЗначенияХарактеристикТекущейБазы = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьДополнительныеРеквизитыВидаНоменклатуры.
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|			И ДополнительныеРеквизиты.Ссылка = ВидыНоменклатуры.НаборСвойств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|			И ДополнительныеРеквизиты.Ссылка = ВидыНоменклатуры.НаборСвойствХарактеристик";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование КАК Наименование,
	|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.Описание КАК Описание,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.Производитель.ИНН КАК ПроизводительИНН,
	|	Номенклатура.Производитель.КПП КАК ПроизводительКПП,
	|	Номенклатура.Производитель.Наименование КАК ПроизводительНаименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов.
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры.
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ВидНоменклатуры");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы.
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = Форма.Объект.ВидНоменклатуры;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("ВидНоменклатуры");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("АлкогольнаяПродукция");
	ЗначенияРеквизитов.Вставить("Описание");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьНоменклатуруПоШтрихкодам.
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В(&ШтрихКоды)
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура";
	
	Запрос.УстановитьПараметр("ШтрихКоды", ШтрихКоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории.
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, 
													ДанныеВидаНоменклатуры, 
													ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	СтавкаНДССервиса = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеКатегории.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеВидаНоменклатуры.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеВидаНоменклатуры.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеКатегории.Тип, ТипНоменклатурыСервиса);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"ТипНоменклатуры", 
															ТипНоменклатурыСервиса, 
															ДанныеВидаНоменклатуры.ТипНоменклатуры, 
															НСтр("ru = 'Тип номенклатуры'"));
	КонецЕсли; 
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры.
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	
	Если ДанныеНоменклатурыБазы.Наименование <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеНоменклатурыСервиса.Наименование, ДанныеНоменклатурыБазы.Наименование);
	КонецЕсли;
	
	// Полное наименование
	
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"НаименованиеПолное", 
															ДанныеНоменклатурыСервиса.Наименование, 
															ДанныеНоменклатурыБазы.НаименованиеПолное, 
															НСтр("ru = 'Полное наименование'"));
	КонецЕсли;
		
	// Проверка вида номенклатуры
	
	ВидыНоменклатуры = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(
		ДанныеНоменклатурыСервиса.Категория.Идентификатор);
	
	Если ВидыНоменклатуры.Количество() Тогда
		Если ВидыНоменклатуры.Найти(ДанныеНоменклатурыБазы.ВидНоменклатуры) = Неопределено Тогда 
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
																"ВидНоменклатуры", 
																ВидыНоменклатуры[0], 
																ДанныеНоменклатурыБазы.ВидНоменклатуры, 
																НСтр("ru = 'Вид номенклатуры'"), 
																ДанныеНоменклатурыСервиса.Категория.Наименование);
		КонецЕсли;
	КонецЕсли;
		
	// Проверка единицы измерения
	ЕдиницаИзмеренияСервиса = ДанныеНоменклатурыСервиса.ЕдиницаИзмерения;
	Если Строка(ДанныеНоменклатурыСервиса.ЕдиницаИзмерения.Наименование) <> 
			ДанныеНоменклатурыБазы.ЕдиницаИзмерения.Наименование Тогда
		
		ЕдиницаИзмеренияВБазе = Неопределено;
		ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияВБазе);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВБазе) Тогда 
			ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияВБазе)
		КонецЕсли;
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"ЕдиницаИзмерения", 
															ЕдиницаИзмеренияВБазе, 
															ДанныеНоменклатурыБазы.ЕдиницаИзмерения.Наименование, 
															НСтр("ru = 'Единица измерения'"), 
															ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	СтавкаНДССервиса = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеНоменклатурыСервиса.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
			"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеНоменклатурыСервиса.Тип, ТипНоменклатурыСервиса);
	
	Попытка
		Если ТипЗнч(ДанныеНоменклатурыБазы) = Тип("Структура")
			И ДанныеНоменклатурыБазы.Свойство("ТипНоменклатуры")
			И ДанныеНоменклатурыБазы.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
																"ТипНоменклатуры", 
																ТипНоменклатурыСервиса, 
																ДанныеНоменклатурыБазы.ТипНоменклатуры, 
																НСтр("ru = 'Тип номенклатуры'"));
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	// Проверка производителя
	ПроизводительСервиса = ДанныеНоменклатурыСервиса.Производитель;
	Если ТипЗнч(ПроизводительСервиса) = Тип("Структура") 
		И ПроизводительСервиса.Свойство("ИНН")
		И ПроизводительСервиса.Свойство("КПП")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "ПроизводительИНН")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "ПроизводительКПП") Тогда
		
		Если Строка(ПроизводительСервиса.ИНН) <> ДанныеНоменклатурыБазы.ПроизводительИНН
			ИЛИ Строка(ПроизводительСервиса.КПП) <> ДанныеНоменклатурыБазы.ПроизводительКПП Тогда
			
			Производитель = Справочники.Контрагенты.ПустаяСсылка();
			НайтиПроизводителяПоДаннымСервиса(ПроизводительСервиса, Производитель);
			
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				"Производитель", 
				Производитель, 
				ДанныеНоменклатурыБазы.ПроизводительНаименование, 
				НСтр("ru = 'Производитель'"), 
				ПроизводительСервиса.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатурыВФорме.
Процедура ЗаполнитьВидНоменклатурыВФорме(Форма, 
										ТаблицаОтличий = Неопределено, 
										ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаОтличий <> Неопределено Тогда  // заполнение при наличии изменений
		
		// Заполнение при наличии отличий после работы формы заполнения.
		
		Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
			Если ЭлементКоллекции.Пометка Тогда
				Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
			И ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда
			
			// Для новых объектов идет заполнение дополнительных реквизитов на форме для имитации их присутствия.
			
			ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатуры.
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
	
	Попытка
		ВидНоменклатурыОбъект.Заблокировать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Изменение вида номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Попытка
		ВидНоменклатурыОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Изменение вида номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру.
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	
	Попытка
		НоменклатураОбъект.Заблокировать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Заполнение номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Заполнение номенклатуры'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме.
Процедура ЗаполнитьНоменклатуруВФорме(Форма, 
									  ТаблицаИзменений = Неопределено, 
									  ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		Форма.Модифицированность = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Если Форма.Объект.ТипНоменклатуры  = Перечисления.ТипыНоменклатуры.ПустаяСсылка() И
		НЕ Форма.Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
		
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ВидНоменклатуры, 
																	"ТипНоменклатуры");
		Форма.Объект.ТипНоменклатуры = ТипНоменклатуры;
		
	КонецЕсли;
	
	// Отображение картинки на форме.
	
	Если Не ЗначениеЗаполнено(Форма.АдресКартинки)
		И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения)
		И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения[0].Изображения) Тогда
		
		Форма.Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru = 'Изображение появится после записи'");
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		Форма.Модифицированность = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Для Каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.НайтиСтроки(
			Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСХарактеристиками

// См. РаботаСНоменклатуройПереопределяемый.ТекстЗапросаХарактеристикПоВладельцу.
Процедура ТекстЗапросаХарактеристикПоВладельцу(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Характеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	Характеристики.Владелец = &Владелец";
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик.
Процедура ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, Результат) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидНоменклатуры, "ИспользованиеХарактеристик, ИспользоватьХарактеристики");	
	
	Если ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И ЗначенияРеквизитов.ИспользованиеХарактеристик = 
			Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
		
		Результат = "Индивидуальные";
		
	ИначеЕсли ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И ЗначенияРеквизитов.ИспользованиеХарактеристик = 
			Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
		
		Результат = "Общие";
		
	ИначеЕсли Не ЗначенияРеквизитов.ИспользоватьХарактеристики 
		ИЛИ ЗначенияРеквизитов.ИспользованиеХарактеристик = 
				Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				
		Результат = "НеВедутся";
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьКоличествоХарактеристик.
Процедура ПолучитьКоличествоХарактеристик(Номенклатура, Результат) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ВидНоменклатуры", 			"ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ИспользованиеХарактеристик", 	"ВидНоменклатуры.ИспользованиеХарактеристик");	
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	Если ЗначенияРеквизитов.ИспользованиеХарактеристик = 
		Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ИспользованиеХарактеристик = 
		Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
		Владелец = Номенклатура;
	Иначе
		Владелец = ЗначенияРеквизитов.ВидНоменклатуры;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка), 0) КАК КоличествоХарактеристик
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоХарактеристик;
	Иначе
		Результат = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// См. РаботаСНоменклатуройПереопределяемый.ПриСозданииНаСервереФормаПанельАдминистрирования.
Процедура ПриСозданииНаСервереФормаПанельАдминистрирования(Форма) Экспорт
	
	Форма.Элементы.ГруппаОбновитьОКПД2.Видимость = Ложь;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ИспользоватьВидыНоменклатуры				= Истина;
	Настройки.ИспользоватьХарактеристики				= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры	= Истина;
	Настройки.ИспользоватьПоискПоШтрихкодуВСервисе		= Истина;
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке		= Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПоискНоменклатурыПоШтрихкоду

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере.
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Связь характеристики и номенклатуры
	
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Номенклатура", 
			"Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные.Номенклатура", 
			РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Элементы.ШтрихкодыНоменклатурыХарактеристика.СвязиПараметровВыбора = 
		Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	// Добавление реквизитов
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("АлкогольнаяПродукция", 
										 Новый ОписаниеТипов("Строка"), 
										 "ШтрихкодыНоменклатуры"));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьАлкогольнаяПродукция", 
										 Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", 
										Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", 
										Новый ОписаниеТипов("Строка")));
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавление элементов
	
	НовыйЭлемент             = Форма.Элементы.Вставить("АлкогольнаяПродукция", 
														Тип("ПолеФормы"), 
														Элементы.ШтрихкодыНоменклатуры, 
														Элементы.ШтрихкодыНоменклатурыШтрихкод);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ШтрихкодыНоменклатуры.АлкогольнаяПродукция";
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Алкогольная продукция'");
	НовыйЭлемент.Видимость   = Ложь;
	
	// Настройка видимости колонки алкогольной продукции
	
	ДанныеСтроки = Новый Структура("АлкогольнаяПродукция", "");
	
	Для каждого ЭлементКоллекции Из Форма.Параметры.НеизвестныеШтрихкоды Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭлементКоллекции);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.АлкогольнаяПродукция) Тогда
			Форма.ЕстьАлкогольнаяПродукция = Истина;
			НовыйЭлемент.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения.
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ШтрихкодыНоменклатуры = Форма.ШтрихкодыНоменклатуры;
	СтруктураВыгрузки = Новый Структура("Зарегистрирован", Ложь);
	Штрихкоды = ШтрихкодыНоменклатуры.Выгрузить(СтруктураВыгрузки,"Штрихкод").ВыгрузитьКолонку("Штрихкод");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Владелец.Наименование КАК НоменклатураПредставление,
	|	ШтрихкодыНоменклатуры.Характеристика.Наименование КАК ХарактеристикаПредставление
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
	
	Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Штрихкод уже записан в БД
		
		СтрокаТЧ = ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", Выборка.Штрихкод))[0];
		
		ХарактеристикаПредставление = "";
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			ХарактеристикаПредставление = СтрШаблон(НСтр("ru='с характеристикой %1'"), 
													Выборка.ХарактеристикаПредставление);
		Конецесли;
		
		ОписаниеОшибки = СокрЛП(СтрШаблон(НСтр("ru='Такой штрихкод уже назначен для номенклатуры %1 %2'"), 
										  Выборка.НоменклатураПредставление, 
										  ХарактеристикаПредставление));
		
		Поле = "ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки,
			,
			"ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗарегистрироватьШтрихкоды.
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Штрихкоды");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
	Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
				
		МенеджерЗаписи                  		= РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод         		= СтрокаШтрихкода.Штрихкод;
		МенеджерЗаписи.ПредставлениеШтрихкода 	= СтрокаШтрихкода.Штрихкод;
		МенеджерЗаписи.Владелец     			= СтрокаШтрихкода.Номенклатура;
		МенеджерЗаписи.Характеристика   		= СтрокаШтрихкода.Характеристика;
		МенеджерЗаписи.ТипШтрихкода 			= ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(
																						СтрокаШтрихкода.Штрихкод);
		МенеджерЗаписи.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры.
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
	
	СтрокаТаблицыШтрихкодов.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, 
																						 "ЕдиницаИзмерения");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура ПреобразоватьСтавкуНДССервиса(Знач Значение, Ссылка)
	
	Если Значение = "10" Тогда
		Ссылка = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Значение = "18" Тогда
		Ссылка = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Значение = "20" Тогда
		Ссылка = Перечисления.СтавкиНДС.НДС20;
	Иначе
		Ссылка = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьТипНоменклатурыСервиса(Знач Значение, Результат)
	
	Если Значение = "Услуга" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Товар;
	Иначе 
		Результат = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияСсылка) 
	
	// Поиск элемента в базе
	
	ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияСсылка);
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Создание элемента если не найдено
	
	ЕдиницаИзмеренияОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
	
	ЕдиницаИзмеренияОбъект.Наименование = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ") Тогда
		ЕдиницаИзмеренияОбъект.Код = ЕдиницаИзмеренияСервиса.ОКЕИ;
	КонецЕсли;
	
	Попытка
		ЕдиницаИзмеренияОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание единицы измерения'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	ЕдиницаИзмеренияСсылка = ЕдиницаИзмеренияОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияСсылка)
	
	СсылкаНаЕдиницуИзмерения = Неопределено;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ")
		И ЗначениеЗаполнено(ЕдиницаИзмеренияСервиса.ОКЕИ) Тогда
		СсылкаНаЕдиницуИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", 
			"Код", ЕдиницаИзмеренияСервиса.ОКЕИ);
	Иначе
		
		НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
		Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
			Возврат;
		КонецЕсли;
		СсылкаНаЕдиницуИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", 
				"Наименование", НаименованиеЕдиницыИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЕдиницуИзмерения) Тогда
		ЕдиницаИзмеренияСсылка = СсылкаНаЕдиницуИзмерения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовХарактеристики(ЗначенияДополнительныхРеквизитов, Характеристика)
	
	ЗначенияДополнительныхРеквизитов.Очистить();
	
	Для Каждого Свойство Из Характеристика.ДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Свойство.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Свойство.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(Свойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, 
										  |ИмяСервера, 
										  |АдресРесурса, 
										  |Порт, 
										  |Таймаут, 
										  |ЗащищенноеСоединение, 
										  |Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. 
			//Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, 
			СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

// При объединении категорий в одну, метода заполняет представления дополнительных реквизитов на форма.
//
// Параметры:
//  Форма							 - УправляемаяФорма - форма вида номенклатуры.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначения - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения)
	
	Объект = Форма.Объект;
	
	// Заполнение наименование на основании всех выбранных категорий при множественной привязке.
	
	Если ДанныеИнтерактивногоЗаполнения.Количество() > 1
		И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		Объект.Наименование =
			СтрСоединить(ДанныеИнтерактивногоЗаполнения.ВыгрузитьКолонку("Наименование"), "; ");
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов и реквизитов характеристик.
	
	ДанныеДополнительныхРеквизитов = РаботаСНоменклатурой.ОбъединитьДанныеДополнительныхРеквизитов(
		ДанныеИнтерактивногоЗаполнения);
	
	Если ДанныеДополнительныхРеквизитов.ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		Если Форма.Элементы.Найти("НаборСвойств") <> Неопределено Тогда
			Форма.Элементы.НаборСвойств.ПодсказкаВвода = Объект.Наименование;
		КонецЕсли;
		
		Если Форма.Элементы.Найти("НаборСвойств1") <> Неопределено Тогда
			Форма.Элементы.НаборСвойств1.ПодсказкаВвода = Объект.Наименование;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеДополнительныхРеквизитов.Характеристики.ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		Если Форма.Элементы.Найти("НаборСвойствХарактеристик") <> Неопределено Тогда
			Форма.Элементы.НаборСвойствХарактеристик.ПодсказкаВвода = 
				Объект.Наименование + НСтр("ru = '(Для характеристик)'");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиПроизводителяПоДаннымСервиса(ДанныеПроизводителя, Производитель)
	
	Если ДанныеПроизводителя = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДанныеПроизводителя.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ДанныеПроизводителя.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеПроизводителя.КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Производитель = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
