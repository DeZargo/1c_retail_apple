////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиОбработчикиОбновления: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Появился новый справочник ПрофилиНастроекЭДО.
Процедура ЗаполнитьДанныеОПрофиляхНастроекЭДО() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		// Пометим на удаление не действующие настройки ЭДО
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
			НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЦикла;
		
		// Создаем элементы справочника ПрофилиНастроекЭДО.
		// Проверим не было ли обновления
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписи");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоглашенияОбИспользованииЭД.Организация,
			|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
			|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
			|	ВЫБОР
			|		КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|			ТОГДА СоглашенияОбИспользованииЭД.Ссылка
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Ссылка,
			|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
			|	СоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
			|	СоглашенияОбИспользованииЭД.УдалитьПользователь КАК Пользователь,
			|	СоглашенияОбИспользованииЭД.УдалитьПароль КАК Пароль,
			|	СоглашенияОбИспользованииЭД.УдалитьПортFTP КАК Порт,
			|	СоглашенияОбИспользованииЭД.УдалитьПассивноеСоединениеFTP КАК ПассивноеСоединение
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
			|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
			|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
			|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
			
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НовыйПрофильНастроек = Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
				
				ШаблонНаименование = НСтр("ru = '%1, %2'");
				НовыйПрофильНастроек.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
					Выборка.Организация, Выборка.СпособОбменаЭД);
				
				НовыйПрофильНастроек.Организация = Выборка.Организация;
				НовыйПрофильНастроек.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				НовыйПрофильНастроек.СпособОбменаЭД = Выборка.СпособОбменаЭД;
				
				АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
				
				Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
					Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.Ошибка
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
						
						НоваяСтрока = НовыйПрофильНастроек.ИсходящиеДокументы.Добавить();
						НоваяСтрока.Формировать = Истина;
						НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
						
						Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
							"ИспользоватьЭлектронныеПодписи") Тогда
							НоваяСтрока.ИспользоватьЭП = Истина;
						КонецЕсли;
						
						Если (ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
							И Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
							
							НоваяСтрока.Формировать = Ложь;
							НоваяСтрока.ИспользоватьЭП = Ложь;
							
						КонецЕсли;
						// Проставим в новые соглашения прямого обмена версию формата обмена.
						ВерсияФормата = "CML 4.02";
						Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
							ВерсияФормата = "";
						ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктЗаказчик
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктИсполнитель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Покупатель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Продавец
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
							ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
						ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
							ВерсияФормата = "CML 2.08";
						КонецЕсли;
						НоваяСтрока.ВерсияФормата = ВерсияФормата;
					КонецЕсли;
				КонецЦикла;
				
				НовыйПрофильНастроек.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
				
				Если Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					И ИспользуютсяЭП Тогда
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	СертификатыЭП.Ссылка
					|ИЗ
					|	Справочник.УдалитьСертификатыЭП КАК СертификатыЭП
					|ГДЕ
					|	НЕ СертификатыЭП.ПометкаУдаления
					|	И НЕ СертификатыЭП.Отозван
					|	И СертификатыЭП.Организация = &Организация";
					Запрос.УстановитьПараметр("Организация", Выборка.Организация);
					ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
					Пока ВыборкаСертификатов.Следующий() Цикл
						НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
						НоваяСтрока.Сертификат = ВыборкаСертификатов.Ссылка;
					КонецЦикла;
				КонецЕсли;
				
				// Настройки обмена ЭД
				Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
					ПутьКаталога = Выборка.РесурсВходящихДокументов;
					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
					
					Если СтрокиПути.Количество() >= 1 Тогда
						НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
					КонецЕсли;
					ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
					НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
					НовыйПрофильНастроек.РесурсВходящихДокументов = Выборка.РесурсВходящихДокументов;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
					НовыйПрофильНастроек.АдресСервера             = Выборка.АдресСервера;
					НовыйПрофильНастроек.Порт                     = Выборка.Порт;
					НовыйПрофильНастроек.ПассивноеСоединение      = Выборка.ПассивноеСоединение;
					НовыйПрофильНастроек.Логин                    = Выборка.Пользователь;
					НовыйПрофильНастроек.Пароль                   = Выборка.Пароль;
					ПутьКаталога = Выборка.РесурсВходящихДокументов;
					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
					Если СтрокиПути.Количество() >= 1 Тогда
						НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
					КонецЕсли;
					ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
					НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
					// Настройки сертификатов - переносим в профиль.
					Для каждого Строка Из Выборка.Ссылка.СертификатыПодписейОрганизации Цикл
						НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
						НоваяСтрока.Сертификат = Строка.Сертификат;
					КонецЦикла;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйПрофильНастроек);

			КонецЦикла;
		КонецЕсли;
		
		// Обновляем р/с СостоянияОбменовЭДЧерезОператоровЭДО
		НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиНастроекЭДО.Ссылка
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
			|ГДЕ
			|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
			|	И ПрофилиНастроекЭДО.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Запись.УдалитьСоглашениеОбИспользованииЭД.Организация);
			Запрос.УстановитьПараметр("СпособОбменаЭД", Запись.УдалитьСоглашениеОбИспользованииЭД.СпособОбменаЭД);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Запись.ПрофильНастроекЭДО = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		// Обновляем соглашения прямого обмена.
		// Проверим на уникальность настроек прямого обмена.
		// Лишние настройки пометим на удаление.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) КАК Ссылка,
		|	СоглашенияОбИспользованииЭД.Контрагент
		|ПОМЕСТИТЬ КонтрагентыДубли
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СоглашенияОбИспользованииЭД.Контрагент
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	СоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
		|ИЗ
		|	КонтрагентыДубли КАК КонтрагентыДубли
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ПО КонтрагентыДубли.Контрагент = СоглашенияОбИспользованииЭД.Контрагент
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент";
		
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ИскомыйКонтрагент = "";
		Пока Выборка.Следующий() Цикл
			Если ИскомыйКонтрагент = Выборка.Контрагент Тогда
				НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
				НастройкаЭДО.УстановитьПометкуУдаления(Истина);
				НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
			Иначе
				ИскомыйКонтрагент = Выборка.Контрагент;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним недостающую информацию в настройках ЭДО.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(100)) КАК ИдентификаторКонтрагента,
		|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
		|	СоглашенияОбИспользованииЭД.Контрагент,
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
		|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
		|	СоглашенияОбИспользованииЭД.РесурсИсходящихДокументов
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ПО СоглашенияОбИспользованииЭД.СпособОбменаЭД = ПрофилиНастроекЭДО.СпособОбменаЭД
		|			И СоглашенияОбИспользованииЭД.Организация = ПрофилиНастроекЭДО.Организация
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
		
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
			
			НастройкаЭДО.Наименование       = Строка(Выборка.Контрагент);
			НастройкаЭДО.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;

			ИсходнаяТаблицаЭД = НастройкаЭДО.ИсходящиеДокументы.Выгрузить();
			
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ПрофильНастроекЭДО,       "ПрофильНастроекЭДО");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.СпособОбменаЭД,           "СпособОбменаЭД");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторОрганизации, "ИдентификаторОрганизации");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторКонтрагента, "ИдентификаторКонтрагента");
			
			НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
			
			// Добавим недостающие документы в ТЧ исходящие документы для прямого обмена.
			Отбор = Новый Структура;
			Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
			НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
				Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.СчетФактура;
				Строка.Формировать              = Ложь;
				Строка.ИспользоватьЭП           = Ложь;
				Строка.ВерсияФормата            = НСтр("ru = 'ФНС 5.01'");
				Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
				Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
				Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
			КонецЕсли;
			Отбор = Новый Структура;
			Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
			НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
				Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
				Строка.Формировать              = Ложь;
				Строка.ИспользоватьЭП           = Ложь;
				Строка.ВерсияФормата            = НСтр("ru = 'ФНС 5.01'");
				Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
				Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
				Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
			КонецЕсли;
			
			НастройкаЭДО.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
			
			НастройкаЭДО.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
			НастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
			
			Если ЗначениеЗаполнено(НастройкаЭДО.СертификатОрганизацииДляРасшифровки) Тогда
				ШифроватьДанныеПакетаЭД = Истина;
			КонецЕсли;
			Если НастройкаЭДО.СертификатыПодписейКонтрагента.Количество() > 0 Тогда
				ПроверятьСертификатыПодписей = Истина;
			КонецЕсли;
			
			// Настройки обмена ЭД
			Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
				ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
				СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
				СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
				
				Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество() - 1];
				КонецЕсли;
				Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество() - 1];
				КонецЕсли;
				НастройкаЭДО.КаталогВходящихДокументов = НовоеИмяВходящегоКаталога;
				НастройкаЭДО.КаталогИсходящихДокументов = НовоеИмяИсходящегоКаталога;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				НастройкаЭДО.ЭлектроннаяПочтаКонтрагента = Выборка.РесурсИсходящихДокументов;
			
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
				ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
				СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
				СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
				
				Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество()-1];
					
				ИначеЕсли СтрокиПутиВходящегоКаталога.Количество() = 1 Тогда
					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[0];
				КонецЕсли;
				Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество()-1];
					
				ИначеЕсли СтрокиПутиИсходящегоКаталога.Количество() = 1 Тогда
					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[0];
				КонецЕсли;
				НастройкаЭДО.КаталогВходящихДокументовFTP = НовоеИмяВходящегоКаталога;
				НастройкаЭДО.КаталогИсходящихДокументовFTP = НовоеИмяИсходящегоКаталога;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

		КонецЦикла;
		
		// Обновляем соглашения обмена через оператора.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Статус,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОписаниеОшибки,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.ПометкаУдаления";
		
		ВыборкаУчастников = Запрос.Выполнить().Выбрать();
		Пока ВыборкаУчастников.Следующий() Цикл
			
			Если Не ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПометкаУдаления Тогда
				НастройкаЭДО = ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПолучитьОбъект();
				НастройкаЭДО.УстановитьПометкуУдаления(Истина);
				НастройкаЭДО.Наименование = НСтр("ru = 'Не использовать'") + " - " + НастройкаЭДО.Наименование;
				НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиНастроекЭДО.Ссылка
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
			|ГДЕ
			|	ПрофилиНастроекЭДО.СпособОбменаЭД = Значение(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|	И ПрофилиНастроекЭДО.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
			ВыборкаПрофилейНастроекЭДО = Запрос.Выполнить().Выбрать();
			ВыборкаПрофилейНастроекЭДО.Следующий();
			ПрофильНастроекЭДО = ВыборкаПрофилейНастроекЭДО.Ссылка;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
			|	СоглашенияОбИспользованииЭД.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	СоглашенияОбИспользованииЭД.СпособОбменаЭД КАК СпособОбменаЭД,
			|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК Идентификатор,
			|	СоглашенияОбИспользованииЭД.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
			|	И СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация";
			
			Запрос.УстановитьПараметр("Контрагент",  ВыборкаУчастников.Участник);
			Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
			ВыборкаНастроек = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаНастроек.Следующий() Тогда
				НастройкаЭДО = ВыборкаНастроек.НастройкаЭДО.ПолучитьОбъект();

				Если Не ВыборкаНастроек.РасширенныйРежимНастройки
					И ВыборкаНастроек.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
					КонецЦикла;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				НастройкаЭДО.Контрагент = ВыборкаУчастников.Участник;
				НастройкаЭДО.Наименование = Строка(ВыборкаУчастников.Участник);
				
				НастройкаЭДО.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
				"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
				
				НастройкаЭДО.Организация              = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				НастройкаЭДО.ВерсияФорматаПакета      = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
				
				// Загружаем ТЧ из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
				
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПрофильНастроекЭДО,                                "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД,           "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ВыборкаУчастников.Идентификатор,                   "ИдентификаторКонтрагента");
				
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
			КонецЕсли;
			
			НастройкаЭДО.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
			НастройкаЭДО.СтатусПодключения = ВыборкаУчастников.Статус;
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если ВыборкаУчастников.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
			ИначеЕсли ВыборкаУчастников.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			НастройкаЭДО.ОписаниеОшибки = ВыборкаУчастников.ОписаниеОшибки;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

		КонецЦикла;
		
		// Определим и заполним в электронных документах реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
		
		СправочникКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ЭДПрисоединенныеФайлы.Контрагент = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент
		|			И ЭДПрисоединенныеФайлы.Организация = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО.Организация
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|	И ЭДПрисоединенныеФайлы.СоглашениеЭД <> ЗНАЧЕНИЕ(Справочник.СоглашенияОбИспользованииЭД.ПустаяСсылка)
		|	И &ПроверкаТипаКонтрагенты
		|
		|СГРУППИРОВАТЬ ПО
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.Организация";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаТипаКонтрагенты",
			"ЭДПрисоединенныеФайлы.Контрагент ССЫЛКА Справочник." + СправочникКонтрагенты);
		
		Выборка = Запрос.Выполнить().Выбрать();
			
		Пока Выборка.Следующий() Цикл
			ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокумент.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
			ЭлектронныйДокумент.СоглашениеЭД       = Выборка.НастройкаЭДО;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлектронныйДокумент);
		КонецЦикла;
		
		// Определим и заполним в незавершенных пакетахЭД реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка КАК ПакетЭД,
		|	ПакетЭД.Отправитель,
		|	ПакетЭД.Получатель,
		|	ПакетЭД.ПрофильНастроекЭДО,
		|	ПакетЭД.Направление
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.СтатусПакета В(&СтатусыПакетаЭД)
		|	И НЕ ПакетЭД.ПометкаУдаления";
		
		СтатусыПакетаЭД = Новый Массив;
		СтатусыПакетаЭД.Добавить(Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтатусыПакетаЭД.Добавить(Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыПакетаЭД", СтатусыПакетаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Отправитель) И ЗначениеЗаполнено(Выборка.Получатель)
				И Не ЗначениеЗаполнено(Выборка.ПрофильНастроекЭДО) Тогда
				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Получатель, Выборка.Отправитель);
				ИначеЕсли Выборка.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Отправитель, Выборка.Получатель);
				КонецЕсли;
				Если ПараметрыНастройкиЭДО <> Неопределено Тогда
					ПакетЭД = Выборка.ПакетЭД.ПолучитьОбъект();
					ПакетЭД.ПрофильНастроекЭДО = ПараметрыНастройкиЭДО.ПрофильНастроекЭДО;
					ПакетЭД.НастройкаЭДО       = ПараметрыНастройкиЭДО.НастройкаЭДО;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетЭД);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавился новый вид ЭД - корректировочный счет фактура
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.Наименование ПОДОБНО ""ON_KORSFAKT%""
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СертификатыЭПВидыДокументов.Ссылка
	               |ПОМЕСТИТЬ СертификатыИсключения
	               |ИЗ
	               |	Справочник.УдалитьСертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СертификатыЭПВидыДокументов.Ссылка
	               |ИЗ
	               |	Справочник.УдалитьСертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					СертификатыИсключения.Ссылка
	               |				ИЗ
	               |					СертификатыИсключения)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сертификат = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаКорСчФ = Сертификат.ВидыДокументов.Найти(Перечисления.ВидыЭД.КорректировочныйСчетФактура, "ВидДокумента");
		Если СтрокаКорСчФ = Неопределено Тогда
			СтрокаКорСчФ = Сертификат.ВидыДокументов.Добавить();
			СтрокаКорСчФ.ВидДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
		СтрокаКорСчФ.ИспользоватьДляПодписи = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Сертификат);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
// 		Заполнение выполняется:
// 		1. После ручного включения проверки фоновым заданием.
// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
//
// Параметры:
//  Параметры	 - Структура или Неопределено - Параметры очереди заданий в модели сервиса.
//		В локальной версии - Неопределено.
Процедура ПроверитьКонтрагентовБЭД(Параметры = Неопределено) Экспорт
	
	ЭтоОбновлениеИБВМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме,
	// либо в модели сервисов в отложенном обновлении из областей данных.
	Если НЕ ЭтоОбновлениеИБВМоделиСервиса
		ИЛИ ЭтоОбновлениеИБВМоделиСервиса И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ОбменСКонтрагентамиСлужебный.ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления видов ЭД актуальными.
// Используется при необходимости добавить новый вид ЭД в справочники БЭД
//
// Параметры:
//  ВидЭД - ЗначениеПеречисления - значение перечисления ВидыЭД.
//
Процедура ОбновитьНастройкиЭДО(ВидЭД) Экспорт
	
	НачатьТранзакцию();
	
	// Обновим элементы справочника Профили настроек ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомыйПрофильНастроек = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
		Если СтрокаВидЭД = Неопределено Тогда
			
			НоваяСтрока = ИскомыйПрофильНастроек.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент         = ВидЭД;
			Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписи") Тогда
				НоваяСтрока.ИспользоватьЭП = Истина;
			КонецЕсли;
			
			ВерсияФормата = "CML 2.08";
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				ВерсияФормата = "";
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
			КонецЕсли;
			НоваяСтрока.ВерсияФормата = ВерсияФормата;
			
			ЗаписатьОбъект = Истина;
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомыйПрофильНастроек);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим элементы справочника Настройки ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
		
		Если СтрокаВидЭД = Неопределено Тогда
			НоваяСтрока = ИскомаяНастройка.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент         = ВидЭД;
			Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписи") Тогда
				НоваяСтрока.ИспользоватьЭП = Истина;
			КонецЕсли;
			
			ВерсияФормата = "CML 2.08";
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				ВерсияФормата = "";
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
			КонецЕсли;
			НоваяСтрока.ВерсияФормата = ВерсияФормата;
			
			Если ИскомаяНастройка.РасширенныйРежимНастройкиСоглашения Тогда
				НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
				НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.ИсходящиеДокументы[0].СпособОбменаЭД;
				НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
			Иначе
				НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ПрофильНастроекЭДО;
				НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.СпособОбменаЭД;
				НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИдентификаторКонтрагента;
			КонецЕсли;
			
			ЗаписатьОбъект = Истина;
			
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомаяНастройка);
		КонецЕсли;
		
	КонецЦикла;

	// Обновим элементы справочника Сертификаты ЭП.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО (СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
	|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП,
	|	ПодписываемыеВидыЭД.ВидЭД,
	|	ПодписываемыеВидыЭД.Использовать
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|		ПО Сертификаты.Сертификат.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП
	|ИЗ
	|	Сертификаты КАК Сертификаты";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[2].Выбрать();
	ТЗ = Результат[1].Выгрузить();
	Попытка
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("СертификатЭП", Выборка.СертификатЭП);
			КопияТЗ = ТЗ.Скопировать(Отбор);
			ЗаписатьОбъект = Ложь;
			
			СтрокаВидЭД = КопияТЗ.Найти(ВидЭД, "ВидЭД");
			Если СтрокаВидЭД = Неопределено Тогда
				НоваяСтрока = КопияТЗ.Добавить();
				НоваяСтрока.ВидЭД        = ВидЭД;
				НоваяСтрока.Использовать = Истина;
				НоваяСтрока.СертификатЭП = Выборка.СертификатЭП;
				ЗаписатьОбъект = Истина;
			ИначеЕсли НЕ СтрокаВидЭД.Использовать Тогда
				СтрокаВидЭД.Использовать = Истина;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				СохранитьПодписываемыеВидыЭД(Выборка.СертификатЭП, КопияТЗ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ВидОперации = НСтр("ru = 'Обновление информационной базы'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.2.4.4
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура ПеренестиНастройкиКонтекстаКриптографии() Экспорт
	
	НачатьТранзакцию();
	Попытка
		Если Константы.ИспользоватьЭлектронныеПодписи.Получить() Тогда
			РаботатьСЭПНаСервере = НЕ (ОбщегоНазначения.ИнформационнаяБазаФайловая()
					ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено())
				И (Константы.УдалитьКонтекстКриптографии.Получить() = Перечисления.УдалитьКонтекстыРаботыСЭД.НаСервере
					ИЛИ Константы.УдалитьКонтекстАвторизации.Получить() = Перечисления.УдалитьКонтекстыРаботыСЭД.НаСервере);
			МенеджерЗначения = Константы.СоздаватьЭлектронныеПодписиНаСервере.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = РаботатьСЭПНаСервере;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			МенеджерЗначения = Константы.ПроверятьЭлектронныеПодписиНаСервере.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = РаботатьСЭПНаСервере;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаление устаревших отложенных разделенных обработчиков обновления.
Процедура УдалитьУстаревшиеОбработчики() Экспорт
	
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди(
		"ЭлектронныеДокументыСлужебный.ПроверитьНепроверенныхКонтрагентов");
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.2.20
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура НастроитьАвтоПереходНаНовыеВерсииФорматовЭД() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьПодписываемыеВидыЭД(СертификатСсылка, ПодписываемыеЭД)
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(СертификатСсылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(ПодписываемыеЭД);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
