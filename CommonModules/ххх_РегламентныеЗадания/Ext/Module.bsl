
Процедура ВыполнитьФоновоеЗадание() Экспорт
	//ПараметрыСеанса.ххх_ЗагрузкаДанных=Истина; Тут незя ибо они инициализируются позже (многопоточность  видимо)
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеВыполнено="Даже не начиналось";
	РегламентноеЗадание="";
	//Если параметрыСеанса.ТекущийПользователь=Справочники.ххх_Справочник.ххх_ЗагрузкаЧеков.Значение тогда
		ЗаданиеВыполнено=ххх_ЗагрузкаЧеков();
		РегламентноеЗадание=Справочники.ххх_Справочник.ххх_ЗагрузкаЧеков.Значение.Наименование;
	//КонецЕсли;
	Запись=РегистрыСведений.ххх_ЖурналВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	Запись.Период=ТекущаяДата();
	Запись.РегламентноеЗадание=РегламентноеЗадание;
	запись.Магазин=параметрыСеанса.ТекущийПользователь.Подразделение;
	Запись.ЗавершеноУспешно=ЗаданиеВыполнено;
	запись.Записать();
КонецПроцедуры

Функция ххх_ЗагрузкаЧеков()   //РегламентноеЗадание  ххх_ЗагрузкаЧеков
	попытка
		Запрос=Новый запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	КассыККМ.ПутьКПапкеЗагрузке КАК ПутьКПапкеЗагрузке,
		             |	КассыККМ.ххх_ТипКассы КАК ТипКассы
		             |ИЗ
		             |	Справочник.КассыККМ КАК КассыККМ
		             |ГДЕ
		             |	КассыККМ.ПометкаУдаления = ЛОЖЬ
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	КассыККМ.ПутьКПапкеЗагрузке,
		             |	КассыККМ.ххх_ТипКассы";
		Кассы=Запрос.Выполнить().Выбрать();
		тзЧеки=Новый ТаблицаЗначений;
		тзЧеки.Колонки.Добавить("Чек",Новый описаниеТипов("ДокументССылка.ЧекККМ"));

		Пока Кассы.Следующий()Цикл
			ЗагружаемыйФайл = Новый ТекстовыйДокумент;
			еСЛИ НайтиФайлы(Кассы.ПутьКПапкеЗагрузке+"\cassa.txt").Количество()<>0 Тогда
				ЗагружаемыйФайл.Прочитать(Кассы.ПутьКПапкеЗагрузке+"\cassa.txt");
			Иначе	
				пРОДОЛЖИТЬ;
			КонецЕсли;
			Если ЗагружаемыйФайл.КоличествоСтрок()<=1 Тогда
				УдалитьФайлы(Кассы.ПутьКПапкеЗагрузке+"\cassa.txt");
			КонецЕсли;
			СообщениеОбОшибке="";
			Если Кассы.ТипКассы=Перечисления.ххх_ТипыКасс.КассаОффлайн Тогда
				СообщениеОбОшибке=ЗагрузкаЧековОффЛайнКасса(ЗагружаемыйФайл);
			ИначеЕсли Кассы.ТипКассы=Перечисления.ххх_ТипыКасс.КассаОнлайн Тогда
				СообщениеОбОшибке=ЗагрузкаЧековОнЛайнКасса(ЗагружаемыйФайл)
			КонецЕсли;
			УдалитьФайлы(Кассы.ПутьКПапкеЗагрузке+"\cassa.txt");
		КонецЦикла;
		
		
		Кассы.Сбросить();
		Пока Кассы.Следующий()Цикл
			Если НайтиФайлы(Кассы.ПутьКПапкеЗагрузке+"\orders.txt").Количество()<>0 Тогда
				ЗагружаемыйФайл.Прочитать(Кассы.ПутьКПапкеЗагрузке+"\orders.txt");
				ЗагрузкаЗаказов(ЗагружаемыйФайл);
				УдалитьФайлы(Кассы.ПутьКПапкеЗагрузке+"\orders.txt");
			КонецЕсли;
		КонецЦикла;

	Исключение
		возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат истина;

КонецФункции
	
	
	
	
	
Функция ЗагрузкаЧековОффЛайнКасса(ЗагружаемыйФайл)
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("НомерЧекаИд",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("НомерКассы",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("СуммаСкидки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("ИмяКассира",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИдТовара",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("ПроцСкидки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("Время",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("НомерКарты",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Тч.Добавить();
		стрТч.НомерЧекаИд=СокрЛп(МассивКол[1]);
		стрТч.НомерКассы=СокрЛп(МассивКол[2]);
		стрТч.Сумма=Число(СокрЛп(МассивКол[3]));
		стрТч.СуммаСкидки=Число(СокрЛп(МассивКол[5]));
		стрТч.ИмяКассира=СокрЛп(МассивКол[8]);
		стрТч.ИдТовара=СокрЛп(МассивКол[9]);
		стрТч.Количество=Число(СокрЛп(МассивКол[10]));
		стрТч.Цена=Число(СокрЛп(МассивКол[11]));
		стрТч.НомерСмены=СокрЛп(МассивКол[15]);
		стрТч.Время=СокрЛп(МассивКол[16]);
		стрТч.НомерКарты=СокрЛп(МассивКол[6]);
		итератор=итератор+1;
	КонецЦикла;
	
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("тч",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.НомерКарты,
	             |	тч.ПроцСкидки
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тч КАК тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.НомерКарты,
	             |	йцу.ПроцСкидки
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	             |		ПО йцу.НомерКарты = ИнформационныеКарты.КодКарты
	             |			И йцу.НомерКарты = ИнформационныеКарты.КодКарты
	             |ГДЕ
	             |	ИнформационныеКарты.Ссылка ЕСТЬ NULL 
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.НомерКарты,
	             |	йцу.ПроцСкидки";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Дисконт=Справочники.ИнформационныеКарты.СоздатьЭлемент();
		Дисконт.КодКарты=Выборка.НомерКарты;
		Дисконт.Наименование=Выборка.НомерКарты;
		Дисконт.ПроцентСкидки=Выборка.ПроцСкидки;
		Дисконт.Записать();
	КонецЦикла;
		
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("тч",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.ИмяКассира
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тч КАК тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.ИмяКассира
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	             |		ПО йцу.ИмяКассира = ФизическиеЛица.Наименование
	             |ГДЕ
	             |	ФизическиеЛица.Ссылка ЕСТЬ NULL 
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.ИмяКассира";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизЛицо=Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицо.Наименование=Выборка.ИмяКассира;
		ФизЛицо.Записать();
	КонецЦикла;
	
	//Тч.Свернуть("Ид,НомерЧекаИд,НомерКассы,Сумма,СуммаСкидки,ИмяКассира,ИдТовара,Количество,Цена,НомерСмены,Время,ПроцСкидки,НомерКарты",
	//";
	//
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("тч",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.НомерЧекаИд КАК НомерЧекаИд,
	             |	тч.НомерКассы КАК НомерКассы,
	             |	тч.Сумма КАК Сумма,
	             |	тч.СуммаСкидки КАК СуммаСкидки,
	             |	тч.ИмяКассира КАК ИмяКассира,
	             |	тч.ИдТовара КАК ИдТовара,
	             |	тч.Количество КАК Количество,
	             |	тч.Цена КАК Цена,
	             |	тч.НомерСмены КАК НомерСмены,
	             |	тч.Время КАК Время,
	             |	тч.ПроцСкидки КАК ПроцСкидки,
	             |	тч.НомерКарты КАК НомерКарты
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тч КАК тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.НомерЧекаИд КАК НомерЧекаИд,
	             |	йцу.НомерКассы КАК НомерКассы,
	             |	йцу.Сумма КАК Сумма,
	             |	СУММА(йцу.СуммаСкидки) КАК СуммаСкидки,
	             |	йцу.ИмяКассира КАК ИмяКассира,
	             |	СУММА(йцу.Количество) КАК Количество,
	             |	йцу.Цена КАК Цена,
	             |	йцу.НомерСмены КАК НомерСмены,
	             |	йцу.Время КАК Время,
	             |	ЕСТЬNULL(Номенклатура.Ссылка, йцу.ИдТовара) КАК номенклатура,
	             |	йцу.ПроцСкидки КАК ПроцСкидки,
	             |	йцу.НомерКарты КАК НомерКарты
	             |ПОМЕСТИТЬ номка
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО йцу.ИдТовара = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.НомерЧекаИд,
	             |	йцу.НомерКассы,
	             |	йцу.Сумма,
	             |	йцу.ИмяКассира,
	             |	йцу.Цена,
	             |	йцу.НомерСмены,
	             |	йцу.Время,
	             |	йцу.ПроцСкидки,
	             |	йцу.НомерКарты,
	             |	ЕСТЬNULL(Номенклатура.Ссылка, йцу.ИдТовара)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	номка.НомерЧекаИд КАК НомерЧекаИд,
	             |	номка.Сумма КАК Сумма,
	             |	номка.СуммаСкидки КАК СуммаСкидки,
	             |	номка.ИмяКассира КАК ИмяКассира,
	             |	номка.Количество КАК Количество,
	             |	номка.Цена КАК Цена,
	             |	номка.НомерСмены КАК НомерСмены,
	             |	номка.Время КАК Время,
	             |	номка.номенклатура КАК номенклатура,
	             |	номка.ПроцСкидки КАК ПроцСкидки,
	             |	КассыККМ.Ссылка КАК Касса,
	             |	номка.НомерКарты КАК НомерКарты
	             |ПОМЕСТИТЬ Кассы
	             |ИЗ
	             |	номка КАК номка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	             |		ПО номка.НомерКассы = КассыККМ.Код
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	НомерКарты
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Кассы.НомерЧекаИд КАК НомерЧекаИд,
	             |	Кассы.Сумма КАК Сумма,
	             |	Кассы.СуммаСкидки КАК СуммаСкидки,
	             |	Кассы.ИмяКассира КАК ИмяКассира,
	             |	Кассы.Количество КАК Количество,
	             |	Кассы.Цена КАК Цена,
	             |	Кассы.НомерСмены КАК НомерСмены,
	             |	Кассы.Время КАК Время,
	             |	Кассы.номенклатура КАК номенклатура,
	             |	Кассы.ПроцСкидки КАК ПроцСкидки,
	             |	Кассы.Касса КАК Касса,
	             |	МАКСИМУМ(ИнформационныеКарты.Ссылка) КАК Дисконт
	             |ПОМЕСТИТЬ Карты
	             |ИЗ
	             |	Кассы КАК Кассы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	             |		ПО Кассы.НомерКарты = ИнформационныеКарты.КодКарты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Кассы.Количество,
	             |	Кассы.НомерСмены,
	             |	Кассы.Касса,
	             |	Кассы.ПроцСкидки,
	             |	Кассы.Цена,
	             |	Кассы.Сумма,
	             |	Кассы.ИмяКассира,
	             |	Кассы.номенклатура,
	             |	Кассы.СуммаСкидки,
	             |	Кассы.Время,
	             |	Кассы.НомерЧекаИд
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИмяКассира
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Карты.НомерЧекаИд КАК НомерЧекаИд,
	             |	Карты.Сумма КАК Сумма,
	             |	Карты.СуммаСкидки КАК СуммаСкидки,
	             |	Карты.Количество КАК Количество,
	             |	Карты.Цена КАК Цена,
	             |	Карты.НомерСмены КАК НомерСмены,
	             |	Карты.Время КАК Время,
	             |	Карты.номенклатура КАК номенклатура,
	             |	Карты.ПроцСкидки КАК ПроцСкидки,
	             |	Карты.Касса КАК Касса,
	             |	Карты.Дисконт КАК Дисконт,
	             |	МАКСИМУМ(ФизическиеЛица.Ссылка) КАК Кассир
	             |ПОМЕСТИТЬ Кассир
	             |ИЗ
	             |	Карты КАК Карты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	             |		ПО Карты.ИмяКассира = ФизическиеЛица.Наименование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Карты.НомерЧекаИд,
	             |	Карты.Сумма,
	             |	Карты.СуммаСкидки,
	             |	Карты.Количество,
	             |	Карты.Цена,
	             |	Карты.НомерСмены,
	             |	Карты.Время,
	             |	Карты.номенклатура,
	             |	Карты.ПроцСкидки,
	             |	Карты.Касса,
	             |	Карты.Дисконт
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Кассиры.НомерЧекаИд КАК ЧекИдСсылка,
	             |	Кассиры.Сумма КАК Сумма,
	             |	ВЫБОР
	             |		КОГДА Кассиры.СуммаСкидки < 0
	             |			ТОГДА -Кассиры.СуммаСкидки
	             |		ИНАЧЕ Кассиры.СуммаСкидки
	             |	КОНЕЦ КАК СуммаСкидки,
	             |	Кассиры.Количество КАК Количество,
	             |	Кассиры.Цена КАК Цена,
	             |	Кассиры.НомерСмены КАК НомерСмены,
	             |	Кассиры.Время КАК Время,
	             |	Кассиры.номенклатура КАК номенклатура,
	             |	Кассиры.ПроцСкидки КАК ПроцСкидки,
	             |	Кассиры.Касса КАК Касса,
	             |	Кассиры.Дисконт КАК Дисконт,
	             |	Кассиры.Кассир КАК Кассир
	             |ПОМЕСТИТЬ Итог
	             |ИЗ
	             |	Кассир КАК Кассиры
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	             |		ПО Кассиры.НомерЧекаИд = ЧекККМ.НомерЧекаККМ
	             |			И Кассиры.Касса = ЧекККМ.КассаККМ
	             |ГДЕ
	             |	ЧекККМ.Ссылка ЕСТЬ NULL
	             |	И Кассиры.Количество <> 0
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ЧекККМ.Ссылка,
	             |	Кассиры.Сумма,
	             |	Кассиры.СуммаСкидки,
	             |	Кассиры.Количество,
	             |	Кассиры.Цена,
	             |	Кассиры.НомерСмены,
	             |	Кассиры.Время,
	             |	Кассиры.номенклатура,
	             |	Кассиры.ПроцСкидки,
	             |	Кассиры.Касса,
	             |	Кассиры.Дисконт,
	             |	Кассиры.Кассир
	             |ИЗ
	             |	Кассир КАК Кассиры
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	             |		ПО Кассиры.НомерЧекаИд = ЧекККМ.НомерЧекаККМ
	             |			И Кассиры.Касса = ЧекККМ.КассаККМ
	             |ГДЕ
	             |	Кассиры.Количество <> 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Итог.ЧекИдСсылка КАК ЧекИдСсылка,
	             |	Итог.Сумма КАК Сумма,
	             |	СУММА(Итог.СуммаСкидки) КАК СуммаСкидки,
	             |	СУММА(Итог.Количество) КАК Количество,
	             |	СРЕДНЕЕ(Итог.Цена) КАК Цена,
	             |	Итог.НомерСмены КАК НомерСмены,
	             |	Итог.Время КАК Время,
	             |	Итог.номенклатура КАК номенклатура,
	             |	Итог.ПроцСкидки КАК ПроцСкидки,
	             |	Итог.Касса КАК Касса,
	             |	Итог.Дисконт КАК Дисконт,
	             |	Итог.Кассир КАК Кассир
	             |ПОМЕСТИТЬ АбсолютныйИтог
	             |ИЗ
	             |	Итог КАК Итог
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Итог.Кассир,
	             |	Итог.Сумма,
	             |	Итог.ЧекИдСсылка,
	             |	Итог.НомерСмены,
	             |	Итог.Время,
	             |	Итог.номенклатура,
	             |	Итог.ПроцСкидки,
	             |	Итог.Касса,
	             |	Итог.Дисконт
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АбсолютныйИтог.ЧекИдСсылка КАК ЧекИдСсылка,
	             |	АбсолютныйИтог.Сумма КАК Сумма,
	             |	АбсолютныйИтог.СуммаСкидки КАК СуммаСкидки,
	             |	АбсолютныйИтог.Количество КАК Количество,
	             |	АбсолютныйИтог.Цена КАК Цена,
	             |	АбсолютныйИтог.НомерСмены КАК НомерСмены,
	             |	АбсолютныйИтог.Время КАК Время,
	             |	АбсолютныйИтог.номенклатура КАК номенклатура,
	             |	АбсолютныйИтог.ПроцСкидки КАК ПроцСкидки,
	             |	АбсолютныйИтог.Касса КАК Касса,
	             |	АбсолютныйИтог.Дисконт КАК Дисконт,
	             |	АбсолютныйИтог.Кассир КАК Кассир
	             |ИЗ
	             |	АбсолютныйИтог КАК АбсолютныйИтог
	             |ГДЕ
	             |	АбсолютныйИтог.Количество <> 0
	             |ИТОГИ
	             |	МАКСИМУМ(Сумма),
	             |	СУММА(СуммаСкидки),
	             |	МАКСИМУМ(НомерСмены),
	             |	МАКСИМУМ(Время),
	             |	МАКСИМУМ(ПроцСкидки),
	             |	МАКСИМУМ(Дисконт),
	             |	МАКСИМУМ(Кассир)
	             |ПО
	             |	Касса,
	             |	ЧекИдСсылка";
	Кассы=ЗАпрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Кассы.Следующий() Цикл
		Чеки=Кассы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Чеки.Следующий()Цикл
			Если ТипЗнч(Чеки.ЧекИдСсылка)=Тип("ДокументСсылка.ЧекККМ") тогда
				Чек=Чеки.ЧекИдСсылка.получитьОбъект();
				Чек.ПометкаУдаления=Ложь;
			Иначе
				Чек=Документы.ЧекККМ.СоздатьДокумент();
				Чек.НомерЧекаККМ=Чеки.ЧекИдСсылка;
			КонецЕсли;
			Чек.Дата=Дата(Чеки.Время);
			Чек.ВидОперации=?(Чеки.Сумма<0,Перечисления.ВидыОперацийЧекККМ.Возврат,Перечисления.ВидыОперацийЧекККМ.Продажа);
			Если Чек.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Чек.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Чек.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
				множитель=-1;
			Иначе
				Чек.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
				множитель=1;
			КонецЕсли;
			Чек.Магазин=Справочники.ххх_Справочник.Магазин.Значение;
			Чек.Организация=Чеки.Касса.Владелец;
			чек.КассаККМ=Чеки.Касса;
			чек.ЦенаВключаетНДС=истина;
			Товары=Чеки.Выбрать();
			СуммаОплаты=0;
			СуммаСкидки=0;
			Чек.Товары.Очистить();
			Чек.Оплата.Очистить();
			Чек.СкидкиНаценки.Очистить();		
			Чек.НомерСменыККМ=Чеки.НомерСмены;
			Чек.ДисконтнаяКарта=Чеки.Дисконт;
			Чек.Продавец=Чеки.Кассир; 
			КлючСвязи=1;
			СуммаВсего=0;
			ФлагАдекватностиЧека=Истина;
			Пока Товары.Следующий()Цикл
				Если ТипЗнч(Товары.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
					Если не Чек.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат и товары.количество<0 Тогда
						Продолжить;
					КонецЕСли;
					стрТовары=чек.Товары.Добавить();
					стрТовары.Количество=множитель*товары.количество;
					стрТовары.КоличествоУпаковок=стрТовары.Количество;
					стрТовары.Номенклатура=товары.номенклатура;
					стрТовары.Цена=товары.цена;
					стрТовары.Сумма=стрТовары.Цена*стрТовары.Количество;
					стрТовары.ПроцентАвтоматическойСкидки=Товары.ПроцСкидки;
					СтрТовары.Склад=Справочники.ххх_Справочник.Магазин.Значение.складПродажи;
					СуммаСкидки=СуммаСкидки+Товары.СуммаСкидки;
					Если Чеки.СуммаСкидки<>0 Тогда
						стрСкидкиНаценки=Чек.СкидкиНаценки.Добавить();
						стрСкидкиНаценки.Сумма=множитель*Товары.СуммаСкидки;
						стрСкидкиНаценки.КлючСвязи=КлючСвязи;
						стрТовары.КлючСвязи=КлючСвязи;
						стрТовары.Сумма=стрТовары.Сумма-стрСкидкиНаценки.Сумма;
						стрТовары.СуммаАвтоматическойСкидки=стрСкидкиНаценки.Сумма;
						Чек.СкидкиРассчитаны=Истина;
						КлючСвязи=КлючСвязи+1;
					КонецЕсли;
					СуммаВсего=СуммаВсего+стрТовары.Сумма;
					стрТовары.СтавкаНДС=Товары.Номенклатура.СтавкаНДС;
					Если стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.БезНДС тогда
						СтрТовары.СуммаНДС=0;
					ИначеЕсли стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
						СтрТовары.СуммаНДС=СтрТовары.Сумма*10/110;
					Иначе 
						//СтрТовары.СуммаНДС=СтрТовары.Сумма*18/118;
						СтрТовары.СуммаНДС=СтрТовары.Сумма*20/120;
					КонецЕсли;
				Иначе
					стр=РегистрыСведений.ххх_СообщенияПользователюРегламентныеЗадания.СоздатьМенеджерЗаписи();
					стр.Измерение1=Товары.Номенклатура;
					стр.Измерение2=чек.КассаККМ.Код;
					стр.КлючФоновогоЗадания="ххх_ЗагрузкаЧеков";
					стр.Период=ТекущаяДата();
					стр.Обработан=Ложь;
					стр.Сообщение="При загрузке чеков номенклатура не найдена. Обратитесь к менеджеру что бы вам открыли доступ на данную позицию. Код номенклатуры: "+Товары.Номенклатура;
					стр.Записать();
					ФлагАдекватностиЧека=Ложь;
				КонецЕсли;
			КонецЦикла;
			Если Чеки.СуммаСкидки<>0 Тогда
				Чек.СкидкиРассчитаны=Истина;
			КонецЕсли;
			стр=Чек.Оплата.Добавить();
			стр.ВидОплаты=Справочники.ВидыОплатЧекаККМ.Наличные;
			стр.Сумма=Чеки.Сумма;
			Если не стр.Сумма=СуммаВсего и ФлагАдекватностиЧека Тогда //Вся говноблядия расхождения суммы оплаты и суммы таб части товаров вхуяривается в первую строку.
				
				дельта=СуммаВсего-множитель*стр.Сумма;
				Если дельта>1 Тогда
					//возврат "размазка больше 1 рубля" ;
				КонецЕсли;
				Чек.Товары[0].Сумма=Чек.Товары[0].Сумма-дельта;
				Чек.Товары[0].Цена=Чек.Товары[0].Сумма/Чек.Товары[0].Количество;
				
				Если ЗначениеЗаполнено(Чек.Товары[0].Номенклатура) Тогда
					Чек.Товары[0].СтавкаНДС=Чек.Товары[0].Номенклатура.СтавкаНДС;
					Если стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.БезНДС тогда
						Чек.Товары[0].СуммаНДС=0;
					ИначеЕсли стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
						Чек.Товары[0].СуммаНДС=Чек.Товары[0].Сумма*10/110;
					 Иначе 
						//Чек.Товары[0].СуммаНДС=Чек.Товары[0].Сумма*18/118;
						Чек.Товары[0].СуммаНДС=Чек.Товары[0].Сумма*20/120;
					КонецЕсли;
				КонецЕсли;
				
				чек.СуммаДокумента=Чеки.Сумма;
				Если не стр.Сумма=чек.СуммаДокумента Тогда
					сообщить(чек.НомерЧекаККМ);
				КонецЕсли;
			КонецЕсли;
			попытка
				Чек.Записать(РежимЗаписиДокумента.Проведение);			
			Исключение
				Если Чек.Проведен Тогда
					 Чек.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					Чек.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				сообщить("Не провелся чек: "+чек.НомерЧекаККМ);
			КонецПопытки;
			//МасЧеков.Добавить(Чек.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Функция ЗагрузкаЧековОнЛайнКасса(ЗагружаемыйФайл)
	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("НомерЧекаИд",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("НомерКассы",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("СуммаСкидки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("ИмяКассира",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ИдТовара",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("ОкруглениеЧека",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("ПолнаяЦена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("ПроцСкидки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Тч.Колонки.Добавить("Время",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("НомерКарты",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Акциз",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	//СписокШтрихкодов=Новый массив;
	Пока итератор<КолвоСтрок+1 Цикл
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
		стрТч=Тч.Добавить();
		стрТч.НомерЧекаИд=СокрЛп(МассивКол[1]);
		стрТч.НомерКассы=СокрЛп(МассивКол[2]);
		стрТч.Сумма=Число(СокрЛп(МассивКол[3]));
		стрТч.СуммаСкидки=Число(СокрЛп(МассивКол[5]));
		стрТч.ИмяКассира=СокрЛп(МассивКол[8]);
		стрТч.ИдТовара=СокрЛп(МассивКол[9]);
		стрТч.Количество=Число(СокрЛп(МассивКол[10]));
		стрТч.ПолнаяЦена=Число(СокрЛп(МассивКол[13]));
		стрТч.Цена=Число(СокрЛп(МассивКол[11]));
		стрТч.НомерСмены=СокрЛп(МассивКол[15]);
		стрТч.Время=СокрЛп(МассивКол[16]);
		стрТч.НомерКарты=СокрЛп(МассивКол[6]);
		стрТч.ОкруглениеЧека=Число(СокрЛп(МассивКол[17]));
		
		//Если СтрДлина(СокрЛп(МассивКол[18]))>100 тогда
		стрТч.Акциз=СокрЛп(МассивКол[18]);
		//КонецЕсли;
		
		итератор=итератор+1;
	КонецЦикла;
	
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("тч",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.НомерКарты,
	             |	тч.ПроцСкидки
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тч КАК тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.НомерКарты,
	             |	йцу.ПроцСкидки
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	             |		ПО йцу.НомерКарты = ИнформационныеКарты.КодКарты
	             |			И йцу.НомерКарты = ИнформационныеКарты.КодКарты
	             |ГДЕ
	             |	ИнформационныеКарты.Ссылка ЕСТЬ NULL 
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.НомерКарты,
	             |	йцу.ПроцСкидки";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Дисконт=Справочники.ИнформационныеКарты.СоздатьЭлемент();
		Дисконт.КодКарты=Выборка.НомерКарты;
		Дисконт.Наименование=Выборка.НомерКарты;
		Дисконт.ПроцентСкидки=Выборка.ПроцСкидки;
		Дисконт.Записать();
	КонецЦикла;
		
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("тч",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.ИмяКассира
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тч КАК тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.ИмяКассира
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	             |		ПО йцу.ИмяКассира = ФизическиеЛица.Наименование
	             |ГДЕ
	             |	ФизическиеЛица.Ссылка ЕСТЬ NULL 
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.ИмяКассира";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизЛицо=Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицо.Наименование=Выборка.ИмяКассира;
		ФизЛицо.Записать();
	КонецЦикла;
	
	//Тч.Свернуть("Ид,НомерЧекаИд,НомерКассы,Сумма,СуммаСкидки,ИмяКассира,ИдТовара,Количество,Цена,НомерСмены,Время,ПроцСкидки,НомерКарты",
	//";
	//
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("тч",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тч.НомерЧекаИд КАК НомерЧекаИд,
	             |	тч.НомерКассы КАК НомерКассы,
	             |	тч.Сумма КАК Сумма,
	             |	тч.СуммаСкидки КАК СуммаСкидки,
	             |	тч.ИмяКассира КАК ИмяКассира,
	             |	тч.ИдТовара КАК ИдТовара,
	             |	тч.Количество КАК Количество,
	             |	тч.Цена КАК Цена,
	             |	тч.НомерСмены КАК НомерСмены,
	             |	тч.Время КАК Время,
	             |	тч.ПроцСкидки КАК ПроцСкидки,
	             |	тч.НомерКарты КАК НомерКарты,
	             |	тч.ПолнаяЦена КАК ПолнаяЦена,
	             |	тч.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	тч.Акциз КАК Акциз
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тч КАК тч
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.НомерЧекаИд КАК НомерЧекаИд,
	             |	йцу.НомерКассы КАК НомерКассы,
	             |	йцу.Сумма КАК Сумма,
	             |	СУММА(йцу.СуммаСкидки) КАК СуммаСкидки,
	             |	йцу.ИмяКассира КАК ИмяКассира,
	             |	СУММА(йцу.Количество) КАК Количество,
	             |	йцу.Цена КАК Цена,
	             |	йцу.НомерСмены КАК НомерСмены,
	             |	йцу.Время КАК Время,
	             |	ЕСТЬNULL(Номенклатура.Ссылка, йцу.ИдТовара) КАК номенклатура,
	             |	йцу.ПроцСкидки КАК ПроцСкидки,
	             |	йцу.НомерКарты КАК НомерКарты,
	             |	йцу.ПолнаяЦена КАК ПолнаяЦена,
	             |	йцу.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	йцу.Акциз КАК Акциз
	             |ПОМЕСТИТЬ номка
	             |ИЗ
	             |	йцу КАК йцу
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО йцу.ИдТовара = Номенклатура.ххх_ИдЦентр
	             |			И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	йцу.НомерЧекаИд,
	             |	йцу.НомерКассы,
	             |	йцу.Сумма,
	             |	йцу.ИмяКассира,
	             |	йцу.Цена,
	             |	йцу.НомерСмены,
	             |	йцу.Время,
	             |	йцу.ПроцСкидки,
	             |	йцу.НомерКарты,
	             |	ЕСТЬNULL(Номенклатура.Ссылка, йцу.ИдТовара),
	             |	йцу.ПолнаяЦена,
	             |	йцу.ОкруглениеЧека,
	             |	йцу.Акциз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	номка.НомерЧекаИд КАК НомерЧекаИд,
	             |	номка.Сумма КАК Сумма,
	             |	номка.СуммаСкидки КАК СуммаСкидки,
	             |	номка.ИмяКассира КАК ИмяКассира,
	             |	номка.Количество КАК Количество,
	             |	номка.Цена КАК Цена,
	             |	номка.НомерСмены КАК НомерСмены,
	             |	номка.Время КАК Время,
	             |	номка.номенклатура КАК номенклатура,
	             |	номка.ПроцСкидки КАК ПроцСкидки,
	             |	КассыККМ.Ссылка КАК Касса,
	             |	номка.НомерКарты КАК НомерКарты,
	             |	номка.ПолнаяЦена КАК ПолнаяЦена,
	             |	номка.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	номка.Акциз КАК Акциз
	             |ПОМЕСТИТЬ Кассы
	             |ИЗ
	             |	номка КАК номка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	             |		ПО номка.НомерКассы = КассыККМ.Код
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	НомерКарты
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Кассы.НомерЧекаИд КАК НомерЧекаИд,
	             |	Кассы.Сумма КАК Сумма,
	             |	Кассы.СуммаСкидки КАК СуммаСкидки,
	             |	Кассы.ИмяКассира КАК ИмяКассира,
	             |	Кассы.Количество КАК Количество,
	             |	Кассы.Цена КАК Цена,
	             |	Кассы.НомерСмены КАК НомерСмены,
	             |	Кассы.Время КАК Время,
	             |	Кассы.номенклатура КАК номенклатура,
	             |	Кассы.ПроцСкидки КАК ПроцСкидки,
	             |	Кассы.Касса КАК Касса,
	             |	МАКСИМУМ(ИнформационныеКарты.Ссылка) КАК Дисконт,
	             |	Кассы.ПолнаяЦена КАК ПолнаяЦена,
	             |	Кассы.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	Кассы.Акциз КАК Акциз
	             |ПОМЕСТИТЬ Карты
	             |ИЗ
	             |	Кассы КАК Кассы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	             |		ПО Кассы.НомерКарты = ИнформационныеКарты.КодКарты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Кассы.Количество,
	             |	Кассы.НомерСмены,
	             |	Кассы.Касса,
	             |	Кассы.ПроцСкидки,
	             |	Кассы.Цена,
	             |	Кассы.Сумма,
	             |	Кассы.ИмяКассира,
	             |	Кассы.номенклатура,
	             |	Кассы.СуммаСкидки,
	             |	Кассы.Время,
	             |	Кассы.НомерЧекаИд,
	             |	Кассы.ПолнаяЦена,
	             |	Кассы.ОкруглениеЧека,
	             |	Кассы.Акциз
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ИмяКассира
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Карты.НомерЧекаИд КАК НомерЧекаИд,
	             |	Карты.Сумма КАК Сумма,
	             |	Карты.СуммаСкидки КАК СуммаСкидки,
	             |	Карты.Количество КАК Количество,
	             |	Карты.Цена КАК Цена,
	             |	Карты.НомерСмены КАК НомерСмены,
	             |	Карты.Время КАК Время,
	             |	Карты.номенклатура КАК номенклатура,
	             |	Карты.ПроцСкидки КАК ПроцСкидки,
	             |	Карты.Касса КАК Касса,
	             |	Карты.Дисконт КАК Дисконт,
	             |	МАКСИМУМ(ФизическиеЛица.Ссылка) КАК Кассир,
	             |	Карты.ПолнаяЦена КАК ПолнаяЦена,
	             |	Карты.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	Карты.Акциз КАК Акциз
	             |ПОМЕСТИТЬ Кассир
	             |ИЗ
	             |	Карты КАК Карты
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	             |		ПО Карты.ИмяКассира = ФизическиеЛица.Наименование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Карты.НомерЧекаИд,
	             |	Карты.Сумма,
	             |	Карты.СуммаСкидки,
	             |	Карты.Количество,
	             |	Карты.Цена,
	             |	Карты.НомерСмены,
	             |	Карты.Время,
	             |	Карты.номенклатура,
	             |	Карты.ПроцСкидки,
	             |	Карты.Касса,
	             |	Карты.Дисконт,
	             |	Карты.ПолнаяЦена,
	             |	Карты.ОкруглениеЧека,
	             |	Карты.Акциз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Кассиры.НомерЧекаИд КАК ЧекИдСсылка,
	             |	Кассиры.Сумма КАК Сумма,
	             |	Кассиры.СуммаСкидки КАК СуммаСкидки,
	             |	Кассиры.Количество КАК Количество,
	             |	Кассиры.Цена КАК Цена,
	             |	Кассиры.НомерСмены КАК НомерСмены,
	             |	Кассиры.Время КАК Время,
	             |	Кассиры.номенклатура КАК номенклатура,
	             |	Кассиры.ПроцСкидки КАК ПроцСкидки,
	             |	Кассиры.Касса КАК Касса,
	             |	Кассиры.Дисконт КАК Дисконт,
	             |	Кассиры.Кассир КАК Кассир,
	             |	Кассиры.ПолнаяЦена КАК ПолнаяЦена,
	             |	Кассиры.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	Кассиры.Акциз КАК Акциз
	             |ПОМЕСТИТЬ Итог
	             |ИЗ
	             |	Кассир КАК Кассиры
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	             |		ПО Кассиры.НомерЧекаИд = ЧекККМ.НомерЧекаККМ
	             |			И Кассиры.Касса = ЧекККМ.КассаККМ
	             |ГДЕ
	             |	ЧекККМ.Ссылка ЕСТЬ NULL
	             |	И Кассиры.Количество <> 0
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ЧекККМ.Ссылка,
	             |	Кассиры.Сумма,
	             |	Кассиры.СуммаСкидки,
	             |	Кассиры.Количество,
	             |	Кассиры.Цена,
	             |	Кассиры.НомерСмены,
	             |	Кассиры.Время,
	             |	Кассиры.номенклатура,
	             |	Кассиры.ПроцСкидки,
	             |	Кассиры.Касса,
	             |	Кассиры.Дисконт,
	             |	Кассиры.Кассир,
	             |	Кассиры.ПолнаяЦена,
	             |	Кассиры.ОкруглениеЧека,
	             |	Кассиры.Акциз
	             |ИЗ
	             |	Кассир КАК Кассиры
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	             |		ПО Кассиры.НомерЧекаИд = ЧекККМ.НомерЧекаККМ
	             |			И Кассиры.Касса = ЧекККМ.КассаККМ
	             |ГДЕ
	             |	Кассиры.Количество <> 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Итог.ЧекИдСсылка КАК ЧекИдСсылка,
	             |	Итог.Сумма КАК Сумма,
	             |	Итог.СуммаСкидки КАК СуммаСкидки,
	             |	СУММА(Итог.Количество) КАК Количество,
	             |	Итог.Цена КАК Цена,
	             |	Итог.НомерСмены КАК НомерСмены,
	             |	Итог.Время КАК Время,
	             |	Итог.номенклатура КАК номенклатура,
	             |	Итог.ПроцСкидки КАК ПроцСкидки,
	             |	Итог.Касса КАК Касса,
	             |	Итог.Дисконт КАК Дисконт,
	             |	Итог.Кассир КАК Кассир,
	             |	Итог.ПолнаяЦена КАК ПолнаяЦена,
	             |	Итог.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	Итог.Акциз КАК Акциз
	             |ПОМЕСТИТЬ АбсолютныйИтог
	             |ИЗ
	             |	Итог КАК Итог
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Итог.Кассир,
	             |	Итог.Сумма,
	             |	Итог.ЧекИдСсылка,
	             |	Итог.СуммаСкидки,
	             |	Итог.Цена,
	             |	Итог.НомерСмены,
	             |	Итог.Время,
	             |	Итог.номенклатура,
	             |	Итог.ПроцСкидки,
	             |	Итог.Касса,
	             |	Итог.Дисконт,
	             |	Итог.ПолнаяЦена,
	             |	Итог.ОкруглениеЧека,
	             |	Итог.Акциз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АбсолютныйИтог.ЧекИдСсылка КАК ЧекИдСсылка,
	             |	АбсолютныйИтог.Сумма КАК Сумма,
	             |	АбсолютныйИтог.СуммаСкидки КАК СуммаСкидки,
	             |	АбсолютныйИтог.Количество КАК Количество,
	             |	АбсолютныйИтог.Цена КАК Цена,
	             |	АбсолютныйИтог.НомерСмены КАК НомерСмены,
	             |	АбсолютныйИтог.Время КАК Время,
	             |	АбсолютныйИтог.номенклатура КАК номенклатура,
	             |	АбсолютныйИтог.ПроцСкидки КАК ПроцСкидки,
	             |	АбсолютныйИтог.Касса КАК Касса,
	             |	АбсолютныйИтог.Дисконт КАК Дисконт,
	             |	АбсолютныйИтог.Кассир КАК Кассир,
	             |	АбсолютныйИтог.ПолнаяЦена КАК ПолнаяЦена,
	             |	АбсолютныйИтог.ОкруглениеЧека КАК ОкруглениеЧека,
	             |	ВЫБОР
	             |		КОГДА АбсолютныйИтог.Цена < 1
	             |			ТОГДА 0
	             |		ИНАЧЕ 1
	             |	КОНЕЦ КАК Поле1,
	             |	АбсолютныйИтог.Акциз КАК Акциз
	             |ИЗ
	             |	АбсолютныйИтог КАК АбсолютныйИтог
	             |ГДЕ
	             |	АбсолютныйИтог.Количество <> 0
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Поле1 УБЫВ,
	             |	Цена
	             |ИТОГИ
	             |	МАКСИМУМ(Сумма),
	             |	СУММА(СуммаСкидки),
	             |	МАКСИМУМ(НомерСмены),
	             |	МАКСИМУМ(Время),
	             |	МАКСИМУМ(ПроцСкидки),
	             |	МАКСИМУМ(Дисконт),
	             |	МАКСИМУМ(Кассир)
	             |ПО
	             |	Касса,
	             |	ЧекИдСсылка";
	Кассы=ЗАпрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Кассы.Следующий() Цикл
		Чеки=Кассы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Чеки.Следующий()Цикл
			Если ТипЗнч(Чеки.ЧекИдСсылка)=Тип("ДокументСсылка.ЧекККМ") тогда
				Чек=Чеки.ЧекИдСсылка.получитьОбъект();
				Чек.ПометкаУдаления=Ложь;
			Иначе
				Чек=Документы.ЧекККМ.СоздатьДокумент();
				Чек.НомерЧекаККМ=Чеки.ЧекИдСсылка;
			КонецЕсли;
			Чек.Дата=Дата(Чеки.Время);
			Чек.ВидОперации=?(Чеки.Сумма<0,Перечисления.ВидыОперацийЧекККМ.Возврат,Перечисления.ВидыОперацийЧекККМ.Продажа);
			Если Чек.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Чек.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Чек.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
				множитель=-1;
			Иначе
				Чек.АналитикаХозяйственнойОперации = ?(Чеки.Касса.магазин.ххх_ИнтернетМагазин,Справочники.ххх_Справочник.АналитикаХозОперРеализацияСИнтернетМагазина.Значение,Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров);
				множитель=1;
			КонецЕсли;
			Чек.Магазин=Чеки.Касса.магазин;
			Чек.Организация=Чеки.Касса.Владелец;
			чек.КассаККМ=Чеки.Касса;
			чек.ЦенаВключаетНДС=истина;
			Товары=Чеки.Выбрать();
			СуммаОплаты=0;
			СуммаСкидки=0;
			Чек.Товары.Очистить();
			Чек.Оплата.Очистить();
			Чек.СкидкиНаценки.Очистить();		
			Чек.НомерСменыККМ=Чеки.НомерСмены;
			Чек.ДисконтнаяКарта=Чеки.Дисконт;
			Чек.Продавец=Чеки.Кассир; 
			КлючСвязи=1;
			СуммаВсего=0;
			ФлагАдекватностиЧека=Истина;
			Чек.АкцизныеМарки.Очистить();
			Пока Товары.Следующий()Цикл
				Если ТипЗнч(Товары.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
					Если не Чек.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат и товары.количество<0 Тогда
						Продолжить;
					КонецЕСли;
					стрТовары=чек.Товары.Добавить();
					стрТовары.Количество=множитель*товары.количество;
					стрТовары.КоличествоУпаковок=стрТовары.Количество;
					стрТовары.Номенклатура=товары.номенклатура;
					стрТовары.КлючСвязи=1;
					стрТовары.Цена=товары.ПолнаяЦена;
					стрТовары.Сумма=стрТовары.Цена*стрТовары.Количество;
					стрТовары.ПроцентАвтоматическойСкидки=Товары.ПроцСкидки;
					СтрТовары.Склад=Справочники.ххх_Справочник.Магазин.Значение.складПродажи;
					СуммаСкидки=СуммаСкидки+стрТовары.Сумма-товары.Цена*товары.количество;
					Если товары.ПолнаяЦена<>товары.Цена Тогда             
						стрСкидкиНаценки=Чек.СкидкиНаценки.Добавить();
						стрСкидкиНаценки.Сумма=(стрТовары.Сумма-множитель*товары.Цена*товары.количество);
						стрСкидкиНаценки.КлючСвязи=КлючСвязи;
						стрТовары.КлючСвязи=КлючСвязи;
						стрТовары.Сумма=стрТовары.Сумма-стрСкидкиНаценки.Сумма;
						стрТовары.СуммаАвтоматическойСкидки=стрСкидкиНаценки.Сумма;
						Чек.СкидкиРассчитаны=Истина;
					КонецЕсли;
					
					СуммаВсего=СуммаВсего+стрТовары.Сумма;
					стрТовары.СтавкаНДС=Товары.Номенклатура.СтавкаНДС;
					Если стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.БезНДС тогда
						СтрТовары.СуммаНДС=0;
					ИначеЕсли стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
						СтрТовары.СуммаНДС=СтрТовары.Сумма*10/110;
					Иначе 
						СтрТовары.СуммаНДС=СтрТовары.Сумма*20/120;
					КонецЕсли;
					
					
					Чек.АкцизныеМарки.Очистить();
					Если ЗначениеЗаполнено(товары.акциз) и товары.акциз<>"0" Тогда
						
						
						
						СписокШтрихкодов=Новый массив;
						СписокШтрихкодов.Добавить(товары.акциз);
						
						//ШтрихкодыУпаковок = Справочники.ШтрихкодыУпаковокТоваров.НайтиШтрихкодыУпаковокПоСпискуШтрихкодов(
						//	СписокШтрихкодов,
						//	неопределено,
						//	Перечисления.ТипыУпаковок.МаркированныйТовар);

						акциз=Справочники.ШтрихкодыУпаковокТоваров.ПолучитьАкцизнуюМаркуПоКоду(товары.акциз);
					    
						//Для каждого эл из ШтрихкодыУпаковок Цикл
						Если ЗначениеЗаполнено(акциз) тогда		
							стрАкцизы=Чек.АкцизныеМарки.Добавить();
							стрАкцизы.АкцизнаяМарка=акциз;
							стрАкцизы.КодАкцизнойМарки=акциз.ЗначениеШтрихкода;
							//стрАкцизы.Справка2=эл.Значение[0].Справка2;
							стрАкцизы.КлючСвязи=КлючСвязи;
						КонецЕсли;					
						//КонецЦикла;
						
					КонецЕсли;
					КлючСвязи=КлючСвязи+1;
					
				Иначе
					стр=РегистрыСведений.ххх_СообщенияПользователюРегламентныеЗадания.СоздатьМенеджерЗаписи();
					стр.Измерение1=Товары.Номенклатура;
					стр.Измерение2=чек.КассаККМ.Код;
					стр.КлючФоновогоЗадания="ххх_ЗагрузкаЧеков";
					стр.Период=ТекущаяДата();
					стр.Обработан=Ложь;
					стр.Сообщение="При загрузке чеков номенклатура не найдена. Обратитесь к менеджеру что бы вам открыли доступ на данную позицию. Код номенклатуры: "+Товары.Номенклатура;
					стр.Записать();
					ФлагАдекватностиЧека=Ложь;
				КонецЕсли;
			КонецЦикла;
			Если СуммаСкидки<>0 Тогда
				Чек.СкидкиРассчитаны=Истина;
			КонецЕсли;
			стр=Чек.Оплата.Добавить();
			стр.ВидОплаты=Справочники.ВидыОплатЧекаККМ.Наличные;
			стр.Сумма=Чеки.Сумма;
			
			Если (СуммаВсего-множитель*стр.Сумма)>1 или (СуммаВсего-множитель*стр.Сумма)<-1 Тогда
					//стр1=РегистрыСведений.ххх_СообщенияПользователюРегламентныеЗадания.СоздатьМенеджерЗаписи();
					//стр1.Измерение1=Чек.НомерЧекаККМ;
					//стр1.Измерение2=чек.КассаККМ.Код;
					//стр1.КлючФоновогоЗадания="ххх_ЗагрузкаЧеков";
					//стр1.Период=ТекущаяДата();
					//стр1.Обработан=Ложь;
					//стр1.Сообщение="При загрузке чека(№"+Строка(Чек.НомерЧекаККМ)+"), размазка больше 1 рубля! Размазка="+Строка(СуммаВсего-множитель*стр.Сумма);
					//стр1.Записать();
					ФлагАдекватностиЧека=Ложь;
			КонецЕсли;

			Если не стр.Сумма=СуммаВсего и ФлагАдекватностиЧека Тогда //Вся говноблядия расхождения суммы оплаты и суммы таб части товаров вхуяривается в первую строку.
				
				дельта=СуммаВсего-множитель*стр.Сумма;
				Чек.Товары[0].Сумма=Чек.Товары[0].Сумма-дельта;
				Чек.Товары[0].Цена=Чек.Товары[0].Сумма/Чек.Товары[0].Количество;
				
				Если ЗначениеЗаполнено(Чек.Товары[0].Номенклатура) Тогда
					Чек.Товары[0].СтавкаНДС=Чек.Товары[0].Номенклатура.СтавкаНДС;
					Если стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.БезНДС тогда
						Чек.Товары[0].СуммаНДС=0;
					ИначеЕсли стрТовары.Номенклатура.СтавкаНДС=перечисления.СтавкиНДС.НДС10 Тогда
						Чек.Товары[0].СуммаНДС=Чек.Товары[0].Сумма*10/110;
					 Иначе 
						Чек.Товары[0].СуммаНДС=Чек.Товары[0].Сумма*20/120;
					КонецЕсли;
				КонецЕсли;
				
				чек.СуммаДокумента=Чеки.Сумма;
				Если не стр.Сумма=чек.СуммаДокумента Тогда
					сообщить(чек.НомерЧекаККМ);
				КонецЕсли;
			КонецЕсли;
			попытка	
					
				Чек.Записать(РежимЗаписиДокумента.Проведение);			
			Исключение
				Если Чек.Проведен Тогда
					 Чек.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					Чек.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				сообщить("Не провелся чек: "+чек.НомерЧекаККМ);
			КонецПопытки;
			//МасЧеков.Добавить(Чек.Ссылка);
		КонецЦикла;
	КонецЦикла;
	

	
КонецФункции

процедура ПрогрузитьВесы() экспорт
		
	ВидыЦен=Новый массив;
	ВидыЦен.Добавить(Справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("ЭтотУзел",ПланыОбмена.ПланОбменаСОборудованием.ЭтотУзел());
	Запрос.Текст="ВЫБРАТЬ
	             |	НоменклатураИзменения.Ссылка КАК Номенклатура,
	             |	НоменклатураИзменения.Узел КАК Узел
	             |ИЗ
	             |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	             |ГДЕ
	             |	НоменклатураИзменения.Узел <> &ЭтотУзел
	             |	И НоменклатураИзменения.Узел.Оборудование ССЫЛКА Справочник.ххх_ПодключаемоеОборудование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураИзменения.Ссылка,
	             |	НоменклатураИзменения.Узел";
	выгрузка=Запрос.Выполнить().Выгрузить();
	
	выгрузкаИзменений=выгрузка.Скопировать();
	//выгрузкаПоИзменения=Знач выгрузка;
	номка=Выгрузка.Скопировать();
	номка.свернуть("Номенклатура");
	номка=номка.ВыгрузитьКолонку("Номенклатура");
	выгрузка.Свернуть("Узел");
	Узлы=выгрузка.ВыгрузитьКолонку("узел");
	
	оборудования=Новый массив;
	Для каждого эл из Узлы цикл
		//ValMa - 2-04-2019 - проверка доступности весов
		Ответ = Ping(эл.оборудование.ИпАдресс);
		Если Ответ = 0 Тогда
			Продолжить;
		КонецЕсли;
		//---
		оборудования.добавить(эл.оборудование)
	КонецЦикла;
	
	набНоменклатураДопСвойствоСрокГодности=регистрыСведений.ИнтеграцияОфис.СоздатьНаборЗаписей();
	набНоменклатураДопСвойствоСрокГодности.Отбор.свойство.установить("НоменклатураДопСвойствоСрокГодности");
	набНоменклатураДопСвойствоСрокГодности.Прочитать();
	НоменклатураДопСвойствоСрокГодности=набНоменклатураДопСвойствоСрокГодности[0].ЗначениеВБазе;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("НоменклатураДопСвойствоСрокГодности",НоменклатураДопСвойствоСрокГодности);
	Запрос.УстановитьПараметр("номка",номка);
	Запрос.УстановитьПараметр("оборудования",оборудования);
	
	МанагерВремТаблиц=Новый МенеджерВременныхТаблиц;

	Запрос.МенеджерВременныхТаблиц=МанагерВремТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Номенклатура,
	             |	Номенклатура.Производитель КАК Производитель
	             |ПОМЕСТИТЬ НомкаУстановкиЦен
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&номка)
	             |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НомкаУстановкиЦен.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	             |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	             |	НомкаУстановкиЦен.Производитель КАК Производитель
	             |ПОМЕСТИТЬ АктуальныеЦены
	             |ИЗ
	             |	НомкаУстановкиЦен КАК НомкаУстановкиЦен
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |				&ТекДата,
	             |				ВидЦены В (&видыЦен)
	             |					И Номенклатура В (&номка)) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО НомкаУстановкиЦен.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ххх_ПодключаемоеОборудование.Ссылка КАК Оборудование,
	             |	ххх_ПодключаемоеОборудование.ВидЦены КАК ВидЦены
	             |ПОМЕСТИТЬ Оборудоавние
	             |ИЗ
	             |	Справочник.ххх_ПодключаемоеОборудование КАК ххх_ПодключаемоеОборудование
	             |ГДЕ
	             |	ххх_ПодключаемоеОборудование.ПометкаУдаления = ЛОЖЬ
	             |	И ххх_ПодключаемоеОборудование.УстройствоИспользуется = ИСТИНА
	             |	И ххх_ПодключаемоеОборудование.Ссылка В(&Оборудования)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ххх_ПодключаемоеОборудование.Ссылка,
	             |	ххх_ПодключаемоеОборудование.ВидЦены
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АктуальныеЦены.Номенклатура КАК Номенклатура,
	             |	АктуальныеЦены.Цена КАК Цена,
	             |	ОборудованиеВидЦен.Оборудование КАК Оборудование,
	             |	АктуальныеЦены.Производитель КАК Производитель
	             |ПОМЕСТИТЬ СегментыИтоговаяНомка
	             |ИЗ
	             |	АктуальныеЦены КАК АктуальныеЦены
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Оборудоавние КАК ОборудованиеВидЦен
	             |		ПО АктуальныеЦены.ВидЦены = ОборудованиеВидЦен.ВидЦены
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СегментыИтоговаяНомка.Номенклатура КАК Номенклатура,
	             |	СегментыИтоговаяНомка.Цена КАК Цена,
	             |	СегментыИтоговаяНомка.Оборудование КАК Оборудование,
	             |	ДополнительныеСведения.Значение КАК Срок,
	             |	СегментыИтоговаяНомка.Производитель КАК Производитель
	             |ПОМЕСТИТЬ Сроки
	             |ИЗ
	             |	СегментыИтоговаяНомка КАК СегментыИтоговаяНомка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	             |		ПО СегментыИтоговаяНомка.Номенклатура = ДополнительныеСведения.Объект
	             |			И (ДополнительныеСведения.Свойство = &НоменклатураДопСвойствоСрокГодности)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Сроки.Номенклатура КАК Номенклатура,
	             |	Сроки.Цена КАК Цена,
	             |	Сроки.Оборудование КАК Оборудование,
	             |	Сроки.Срок КАК Срок,
	             |	ххх_КодыНоменклатурыВесыКассы.Код КАК Код,
	             |	Сроки.Номенклатура.Описание КАК НоменклатураОписание,
	             |	ххх_КодыНоменклатурыВесыКассы.Инкримента КАК Номенклатураххх_ИдЦентр,
	             |	Сроки.Номенклатура.ххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
	             |	ххх_КодыНоменклатурыВесыКассы.НомерДляСостава КАК НомерДляСостава,
	             |	Сроки.Производитель КАК Производитель,
	             |	ПланОбменаСОборудованием.Ссылка КАК Узел
	             |ПОМЕСТИТЬ Итог
	             |ИЗ
	             |	Сроки КАК Сроки
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	             |		ПО Сроки.Номенклатура = ххх_КодыНоменклатурыВесыКассы.Номенклатура
	             |			И Сроки.Оборудование = ххх_КодыНоменклатурыВесыКассы.Оборудование
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ПланОбменаСОборудованием КАК ПланОбменаСОборудованием
	             |		ПО Сроки.Оборудование = ПланОбменаСОборудованием.Оборудование";
	
	Запрос.Выполнить();
	//ИтогиПоОборудованию = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	//	Запрос.Выполнить().выгрузить()				 
	
	Запрос=Новый Запрос;
	запрос.МенеджерВременныхТаблиц=МанагерВремТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	Итог.Номенклатура КАК Номенклатура,
	             |	Итог.Цена КАК Цена,
	             |	Итог.Оборудование КАК Оборудование,
	             |	Итог.Срок КАК Срок,
	             |	Итог.Код КАК Код,
	             |	Итог.НоменклатураОписание КАК НоменклатураОписание,
	             |	Итог.Номенклатураххх_ИдЦентр КАК Номенклатураххх_ИдЦентр,
	             |	Итог.Номенклатураххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
	             |	Итог.НомерДляСостава КАК НомерДляСостава,
	             |	Итог.Производитель КАК Производитель,
	             |	Итог.Узел КАК Узел
	             |ИЗ
	             |	Итог КАК Итог
	             |ГДЕ
	             |	Итог.Оборудование = &Оборудование";
	
	МассивЗаданий = Новый Массив;
	Для каждого Оборудование из Оборудования Цикл
				
		Запрос.УстановитьПараметр("Оборудование",Оборудование);
		Результат=Запрос.Выполнить();

		НаборПараметров = Новый Массив; 
		НаборПараметров.Добавить(Результат); 
		
		Задание=ФоновыеЗадания.Выполнить("ххх_РегламентныеЗадания.ПрогрузитьВесыФоновое",НаборПараметров);
		
		МассивЗаданий.Добавить(Задание);
	КонецЦикла;
		
	Запрос.УстановитьПараметр("выгрузкаИзменений",выгрузкаИзменений);
	Запрос.Текст="ВЫБРАТЬ
	             |	выгрузкаИзменений.Номенклатура КАК Номенклатура,
	             |	выгрузкаИзменений.Узел КАК Узел
	             |ПОМЕСТИТЬ номкаВсяИзмененная
	             |ИЗ
	             |	&выгрузкаИзменений КАК выгрузкаИзменений
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	номкаВсяИзмененная.Номенклатура КАК Номенклатура,
	             |	номкаВсяИзмененная.Узел КАК Узел
	             |ИЗ
	             |	номкаВсяИзмененная КАК номкаВсяИзмененная
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Итог КАК Итог
	             |		ПО номкаВсяИзмененная.Номенклатура = Итог.Номенклатура
	             |			И номкаВсяИзмененная.Узел = Итог.Узел
	             |ГДЕ
	             |	Итог.Номенклатура ЕСТЬ NULL
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	номкаВсяИзмененная.Номенклатура,
	             |	номкаВсяИзмененная.Узел
	             |ИТОГИ ПО
	             |	Узел";
	
	выборкаУзел=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока выборкаУзел.Следующий() Цикл
		
		Выборка=ВыборкаУзел.выбрать();
		//
		//узлы=Новый массив;
		//
		//узлы.Добавить(ВыборкаУзел.Узел);
		
		Пока выборка.Следующий() Цикл
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзел.Узел,Выборка.Номенклатура);
			
		КонецЦикла;
			
	КонецЦикла;
		
	//МассивЗаданий = Новый Массив;
	//Пока ИтогиПоОборудованию.Следующий() Цикл
	//	
	//	СтруктураПараметров = Новый Структура;
	//	СтруктураПараметров.Вставить("Ссылка", ИтогиПоОборудованию.Оборудование);
	//	СтруктураПараметров.Вставить("Товары", ИтогиПоОборудованию.Выбрать());
	//	СтруктураПараметров.Вставить("Узел",   ИтогиПоОборудованию.Узел);
	//	
	//	//Ключ=Новый УникальныйИдентификатор;
	//	
	//	//адрес=ПоместитьВоВременноеХранилище(СтруктураПараметров,Ключ); 
	//	
	//	//СтруктураПараметров=ПолучитьИзВременногоХранилища(адрес);
	//	
	//	
	//	//СтруктураПараметровДвоичные=Новый ХранилищеЗначения(СтруктураПараметров);
	//	
	//	НаборПараметров = Новый Массив; 
	//	НаборПараметров.Добавить(Результат); 
	//	
	//	Задание=ФоновыеЗадания.Выполнить("ххх_РегламентныеЗадания.ПрогрузитьВесыФоновое",НаборПараметров);
	//	
	//	МассивЗаданий.Добавить(Задание);

	//КонецЦикла;	
	
	Если МассивЗаданий.Количество() > 0 Тогда 
		Попытка 
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий); 
		Исключение
		КонецПопытки; 
	КонецЕсли;	
		
КонецПРоцедуры

процедура ПрогрузитьВесыФоновое(Результат) экспорт
	
	
	выборка=Результат.выбрать();
	
	выборка.следующий();
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", выборка.Оборудование);
	СтруктураПараметров.Вставить("Узел",   выборка.Узел);
	выборка.сбросить();
	СтруктураПараметров.Вставить("Товары", выборка);

	//ValMa - 2-04-2019 - запись в ЖР по прогружаемым весам
	ЗаписьЖурналаРегистрации("Прогрузка весов", 
	УровеньЖурналаРегистрации.Информация,
	Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
	ххх_Сервер.ОпределитьПланОбменаПоВесам(СтруктураПараметров.Ссылка),
	"Начало прогрузки весов по расписанию.");	
	//---
	
	Справочники.ххх_ПодключаемоеОборудование.ПрогрузитьВесы(СтруктураПараметров);	
	
КонецПРоцедуры

Функция Ping(IPАдрес)
	
	objShell = Новый COMОбъект("WScript.Shell") ;
	//ключ -n Число посылаемых эхо-запросов; ключ -w Таймаут ожидания каждого ответа (в миллисекундах).
	objScriptExec = objShell.Exec("ping.exe -n 1 -w 250 " + IPАдрес);
	strPingResults = НРег(objScriptExec.StdOut.ReadAll());
	Рез = Найти(strPingResults, "ttl=");
	objShell = неопределено;	
	//Возврат Найти(strPingResults, "ttl=");
	Возврат Рез;

КонецФункции

процедура ПрогрузитьКассы() экспорт

	
	Узлы=ПланыОбмена.ПланОбменаСОборудованием.Выбрать();
	
	УзлыИсключенные=Новый массив;
	пока Узлы.Следующий() цикл
		
		Если узлы.ЭтотУзел или не ТипЗНЧ(Узлы.Оборудование)=Тип("СправочникСсылка.КассыККМ") Тогда
			продолжить
		КонецЕсли;
		
		СтрокаСоединения=Прав(Лев(ВРЕГ(Узлы.оборудование.ххх_СтрокаСоединения),56),13);
		Ответ = Ping(СтрокаСоединения);
		Если Ответ = 0 Тогда
			УзлыИсключенные.добавить(Узлы.Ссылка)
		КонецЕсли;
		//---
	КонецЦикла;


	
	ВидыЦен=Новый массив;
	ВидыЦен.Добавить(Справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("ЭтотУзел",ПланыОбмена.ПланОбменаСОборудованием.ЭтотУзел());
	Запрос.УстановитьПараметр("УзлыИсключенные",УзлыИсключенные);
	Запрос.Текст="ВЫБРАТЬ
	             |	ШтрихкодыИзменения.Владелец КАК Номенклатура,
	             |	ШтрихкодыИзменения.Узел КАК Узел
	             |ИЗ
	             |	РегистрСведений.Штрихкоды.Изменения КАК ШтрихкодыИзменения
	             |ГДЕ
	             |	ШтрихкодыИзменения.Узел <> &ЭтотУзел
	             |	И ШтрихкодыИзменения.Штрихкод <> """"
	             |	И НЕ ШтрихкодыИзменения.Владелец ЕСТЬ NULL
	             |	И ШтрихкодыИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
	             |	И НЕ ШтрихкодыИзменения.Узел.Оборудование.Магазин.ххх_ИнтернетМагазин
	             |	И НЕ ШтрихкодыИзменения.Узел.ПометкаУдаления
	             |	И НЕ ШтрихкодыИзменения.Узел В (&УзлыИсключенные)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ШтрихкодыИзменения.Владелец,
	             |	ШтрихкодыИзменения.Узел
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	НоменклатураИзменения.Ссылка,
	             |	НоменклатураИзменения.Узел
	             |ИЗ
	             |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	             |ГДЕ
	             |	НоменклатураИзменения.Узел <> &ЭтотУзел
	             |	И НоменклатураИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
	             |	И НЕ НоменклатураИзменения.Узел.Оборудование.Магазин.ххх_ИнтернетМагазин
	             |	И НЕ НоменклатураИзменения.Узел.ПометкаУдаления
	             |	И НЕ НоменклатураИзменения.Узел В (&УзлыИсключенные)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураИзменения.Ссылка,
	             |	НоменклатураИзменения.Узел
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	NULL,
	             |	ххх_АкцизныеМаркиИзменения.Узел
	             |ИЗ
	             |	РегистрНакопления.ххх_АкцизныеМарки.Изменения КАК ххх_АкцизныеМаркиИзменения
	             |ГДЕ
	             |	ххх_АкцизныеМаркиИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
	             |	И ххх_АкцизныеМаркиИзменения.Узел <> &ЭтотУзел
	             |	И НЕ ххх_АкцизныеМаркиИзменения.Узел В (&УзлыИсключенные)
	             |	И НЕ ххх_АкцизныеМаркиИзменения.Узел.ПометкаУдаления
	             |	И НЕ ххх_АкцизныеМаркиИзменения.Узел.Оборудование.Магазин.ххх_ИнтернетМагазин
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ххх_АкцизныеМаркиИзменения.Узел";
				 //|;
				 //|
				 //|////////////////////////////////////////////////////////////////////////////////
				 //|ВЫБРАТЬ
				 //|	йцу.Номенклатура КАК Номенклатура,
				 //|	йцу.Узел КАК Узел
				 //|ИЗ
				 //|	йцу КАК йцу
				 //|ГДЕ
				 //|	НЕ йцу.Узел.ПометкаУдаления
				 //";
	выгрузка=Запрос.Выполнить().Выгрузить();
	номка=Выгрузка.Скопировать();
	номка.свернуть("Номенклатура");
	номка=номка.ВыгрузитьКолонку("Номенклатура");
	выгрузка.Свернуть("Узел");
	Узлы=выгрузка.ВыгрузитьКолонку("узел");
	
	//й=0;
	//Пока й<Узлы.Количество() Цикл
	//	Если не СожранФайлКассой(Узлы[й]) Тогда
	//		узлы.Удалить(й);
	//		й=й-1;
	//	КонецЕсли;
	//	й=й+1;
	//КонецЦикла;
	//
	МассивЗаданий = Новый Массив; 
	Для каждого Узел из Узлы Цикл
		Если ТипЗнч(Узел.Оборудование)=Тип("СправочникСсылка.КассыККМ") и СожранФайлКассой(Узел) и не Узел.Оборудование.Магазин.ххх_ИнтернетМагазин Тогда			
		    НаборПараметров = Новый Массив; 
			НаборПараметров.Добавить(номка); 
			НаборПараметров.Добавить(ВидыЦен);
			НаборПараметров.Добавить(Узел); 
			Задание = ФоновыеЗадания.Выполнить("ххх_Сервер.ОтправитьЦеныНаКассы", НаборПараметров);
			МассивЗаданий.Добавить(Задание);
			//ххх_Сервер.ОтправитьЦеныНаКассы(номка,ВидыЦен,Узел);
		Иначе
			//Оборудования=Новый массив;
			//Оборудования.Добавить(Узел.оборудование);
			//
			//НаборПараметров = Новый Массив; 
			//НаборПараметров.Добавить(номка);  
			//НаборПараметров.Добавить(ВидыЦен);
			//НаборПараметров.Добавить(Узел);
			//НаборПараметров.Добавить(Оборудования);
			//Задание = ФоновыеЗадания.Выполнить("ххх_Сервер.ОтправитьЦеныНаВесы", НаборПараметров);
			//МассивЗаданий.Добавить(Задание);

			//ххх_Сервер.ОтправитьЦеныНаВесы(номка,ВидыЦен,Узел,Оборудования);	
		КонецЕсли;
		
		
		Если ТипЗнч(Узел.Оборудование)=Тип("СправочникСсылка.КассыККМ") и СожранФайлКассойХМЛ(Узел) и не Узел.Оборудование.Магазин.ххх_ИнтернетМагазин Тогда			
			
			НаборПараметров = Новый Массив; 
			НаборПараметров.Добавить(номка); 
			НаборПараметров.Добавить(ВидыЦен);
			НаборПараметров.Добавить(Узел); 
			Задание = ФоновыеЗадания.Выполнить("ххх_РегламентныеЗадания.ОтправитьЦеныНаКассыХМЛ", НаборПараметров);
			МассивЗаданий.Добавить(Задание);
		
		КонецЕсли;

	КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда 
		Попытка 
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий); 
		Исключение
		КонецПопытки; 
	КонецЕсли;	
	
	ЗаданиеВыполнено=?(ЗначениеЗаполнено(ОписаниеОшибки()),ОписаниеОшибки(),"Да");
	
	Запись=РегистрыСведений.ххх_ЖурналВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	Запись.Период=ТекущаяДата();
	Запись.РегламентноеЗадание="Прогрузка оборудования";
	запись.Магазин=параметрыСеанса.ТекущийПользователь.Подразделение;
	Запись.ЗавершеноУспешно=ЗаданиеВыполнено;
	запись.Записать();
		
КонецПРоцедуры

процедура ОтправитьЦеныНаКассыХМЛ(номка, видыЦен, узел = неопределено) экспорт 
		
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("й18",Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("й10",Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("КрасныйЦенник",Справочники.ххх_Справочник.КрасныйЦенник.Значение);
	Запрос.УстановитьПараметр("номка",номка);
	Запрос.УстановитьПараметр("узел",узел);

    Запрос.Текст = 
        "ВЫБРАТЬ
        |	Номенклатура.ххх_НаименованиеКасса КАК naim,
        |	Номенклатура.ххх_ИдЦентр КАК id_tov,
        |	Номенклатура.АлкогольнаяПродукция КАК a,
        |	Номенклатура.СтавкаНДС КАК nds,
        |	Номенклатура.Ссылка КАК ссылка
        |ПОМЕСТИТЬ номка
        |ИЗ
        |	Справочник.Номенклатура КАК Номенклатура
        |ГДЕ
        |	Номенклатура.Ссылка В ИЕРАРХИИ(&номка)
        |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	номка.naim КАК naim,
        |	номка.id_tov КАК id_tov,
        |	номка.a КАК a,
        |	номка.nds КАК nds,
        |	номка.ссылка КАК ссылка,
        |	НоменклатураСегмента.Сегмент КАК s
        |ПОМЕСТИТЬ КрасныйЦенник
        |ИЗ
        |	номка КАК номка
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
        |		ПО номка.ссылка = НоменклатураСегмента.Номенклатура
        |			И (НоменклатураСегмента.Сегмент = &КрасныйЦенник)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КрасныйЦенник.naim КАК naim,
        |	КрасныйЦенник.id_tov КАК id_tov,
        |	КрасныйЦенник.a КАК a,
        |	КрасныйЦенник.ссылка КАК ссылка,
        |	КрасныйЦенник.s КАК s,
        |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
        |	КрасныйЦенник.nds КАК nds
        |ПОМЕСТИТЬ Цены
        |ИЗ
        |	КрасныйЦенник КАК КрасныйЦенник
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
        |				&Дата,
        |				ВидЦены В (&ВидыЦен)
        |					И Номенклатура.Ссылка В ИЕРАРХИИ (&номка)) КАК ЦеныНоменклатурыСрезПоследних
        |		ПО КрасныйЦенник.ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Цены.naim КАК naim,
        |	Цены.Цена КАК sen,
        |	Цены.id_tov КАК id_tov,
        |	ВЫБОР
        |		КОГДА Цены.nds = &й18
		//|			ТОГДА ""18""
		|			ТОГДА ""20""
        |		ИНАЧЕ ВЫБОР
        |				КОГДА Цены.nds = &й10
        |					ТОГДА ""10""
        |				ИНАЧЕ ""0""
        |			КОНЕЦ
        |	КОНЕЦ КАК nds,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ КАК s,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК a,
        |	ВЫБОР
        |		КОГДА ххх_КодыНоменклатурыВесыКассы.Инкримента ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ КАК ФлагПрисутсвияВМатрице,
        |	ххх_КодыНоменклатурыВесыКассы.Инкримента КАК skod,
        |	ххх_КодыНоменклатурыВесыКассы.Номенклатура КАК Номенклатура
        |ПОМЕСТИТЬ итог
        |ИЗ
        |	Цены КАК Цены
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
        |		ПО Цены.ссылка = ххх_КодыНоменклатурыВесыКассы.Номенклатура
        |
        |СГРУППИРОВАТЬ ПО
        |	Цены.id_tov,
        |	Цены.naim,
        |	ВЫБОР
        |		КОГДА Цены.nds = &й18
		//|			ТОГДА ""18""
		|			ТОГДА ""20""
        |		ИНАЧЕ ВЫБОР
        |				КОГДА Цены.nds = &й10
        |					ТОГДА ""10""
        |				ИНАЧЕ ""0""
        |			КОНЕЦ
        |	КОНЕЦ,
        |	Цены.Цена,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА ххх_КодыНоменклатурыВесыКассы.Инкримента ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ххх_КодыНоменклатурыВесыКассы.Инкримента,
        |	ххх_КодыНоменклатурыВесыКассы.Номенклатура
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	Цены.naim,
        |	Цены.Цена,
        |	Цены.id_tov,
        |	ВЫБОР
        |		КОГДА Цены.nds = &й18
		//|			ТОГДА ""18""
		|			ТОГДА ""20""
        |		ИНАЧЕ ВЫБОР
        |				КОГДА Цены.nds = &й10
        |					ТОГДА ""10""
        |				ИНАЧЕ ""0""
        |			КОНЕЦ
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ,
        |	NULL,
        |	Штрихкоды.Штрихкод,
        |	Штрихкоды.Владелец
        |ИЗ
        |	Цены КАК Цены
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
        |		ПО Цены.ссылка = Штрихкоды.Владелец
        |
        |СГРУППИРОВАТЬ ПО
        |	Цены.id_tov,
        |	Цены.naim,
        |	ВЫБОР
        |		КОГДА Цены.nds = &й18
		//|			ТОГДА ""18""
		|			ТОГДА ""20""
        |		ИНАЧЕ ВЫБОР
        |				КОГДА Цены.nds = &й10
        |					ТОГДА ""10""
        |				ИНАЧЕ ""0""
        |			КОНЕЦ
        |	КОНЕЦ,
        |	Цены.Цена,
        |	ВЫБОР
        |		КОГДА Цены.s ЕСТЬ NULL
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА Цены.a = ИСТИНА
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ,
        |	Штрихкоды.Штрихкод,
        |	Штрихкоды.Владелец
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ШтрихкодыИзменения.Владелец КАК Владелец,
        |	ШтрихкодыИзменения.Штрихкод КАК Штрихкод
        |ПОМЕСТИТЬ УбитыеШтрихКоды
        |ИЗ
        |	РегистрСведений.Штрихкоды.Изменения КАК ШтрихкодыИзменения
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
        |		ПО ШтрихкодыИзменения.Штрихкод = Штрихкоды.Штрихкод
        |ГДЕ
        |	ШтрихкодыИзменения.Узел = &Узел
        |	И Штрихкоды.Штрихкод ЕСТЬ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ххх_АкцизныеМаркиОбороты.АкцизнаяМарка КАК АкцизнаяМарка,
        |	СУММА(ххх_АкцизныеМаркиОбороты.КоличествоОборот) КАК КоличествоОборот
        |ПОМЕСТИТЬ АкцизиНовые
        |ИЗ
        |	РегистрНакопления.ххх_АкцизныеМарки.Изменения КАК ххх_АкцизныеМаркиИзменения
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ххх_АкцизныеМарки.Обороты(, , Регистратор, ) КАК ххх_АкцизныеМаркиОбороты
        |		ПО ххх_АкцизныеМаркиИзменения.Регистратор = ххх_АкцизныеМаркиОбороты.Регистратор
        |ГДЕ
        |	ххх_АкцизныеМаркиИзменения.Узел = &Узел
        |
        |СГРУППИРОВАТЬ ПО
        |	ххх_АкцизныеМаркиОбороты.АкцизнаяМарка
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	АкцизиНовые.АкцизнаяМарка КАК АкцизнаяМаркаЗначениеШтрихкода,
        |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
        |	АкцизиНовые.КоличествоОборот КАК КоличествоОборот
        |ПОМЕСТИТЬ акцизи
        |ИЗ
        |	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
        |		ПО АкцизныеМаркиЕГАИС.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АкцизиНовые КАК АкцизиНовые
        |		ПО АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода = АкцизиНовые.АкцизнаяМарка
        |
        |СГРУППИРОВАТЬ ПО
        |	СоответствиеНоменклатурыЕГАИС.Номенклатура,
        |	АкцизиНовые.АкцизнаяМарка,
        |	АкцизиНовые.КоличествоОборот
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	итог.naim КАК naim,
        |	ЕСТЬNULL(итог.sen, 0) КАК sen,
        |	итог.id_tov КАК id_tov,
        |	итог.nds КАК nds,
        |	итог.s КАК s,
        |	итог.a КАК A,
        |	ЕСТЬNULL(итог.ФлагПрисутсвияВМатрице, 0) КАК ФлагПрисутсвияВМатрице,
        |	итог.skod КАК Штрихкод,
        |	"""" КАК тнвд,
        |	ЕСТЬNULL(ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ, 0) КАК МРЦ,
        |	""common"" КАК kind,
        |	""add"" КАК status,
        |	ЕСТЬNULL(итог.Номенклатура.КодТНВЭД.Код, """") КАК тнвед
        |ИЗ
        |	итог КАК итог
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ВидПродуцкцииМрцАлкаголь.СрезПоследних КАК ххх_ВидПродуцкцииМрцАлкагольСрезПоследних
        |		ПО итог.Номенклатура.ВидАлкогольнойПродукцииЕГАИС = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции
        |			И итог.Номенклатура.ОбъемДАЛ = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	"""",
        |	0,
        |	УбитыеШтрихКоды.Владелец.ххх_ИдЦентр,
        |	0,
        |	0,
        |	0,
        |	0,
        |	ЕСТЬNULL(УбитыеШтрихКоды.Штрихкод, """"),
        |	"""",
        |	0,
        |	""common"",
        |	""rm"",
        |	""""
        |ИЗ
        |	УбитыеШтрихКоды КАК УбитыеШтрихКоды
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	"""",
        |	0,
        |	акцизи.Номенклатура.ххх_ИдЦентр,
        |	0,
        |	0,
        |	0,
        |	0,
        |	акцизи.АкцизнаяМаркаЗначениеШтрихкода,
        |	"""",
        |	0,
        |	""egais"",
        |	ВЫБОР
        |		КОГДА акцизи.КоличествоОборот > 0
        |			ТОГДА ""add""
        |		ИНАЧЕ ""rm""
        |	КОНЕЦ,
        |	""""
        |ИЗ
        |	акцизи КАК акцизи
        |ИТОГИ
        |	МАКСИМУМ(naim),
        |	МАКСИМУМ(sen),
        |	МАКСИМУМ(nds),
        |	МАКСИМУМ(s),
        |	МАКСИМУМ(A),
        |	МАКСИМУМ(ФлагПрисутсвияВМатрице),
        |	МАКСИМУМ(тнвд),
        |	МАКСИМУМ(МРЦ),
        |	МАКСИМУМ(тнвед)
        |ПО
        |	id_tov";
	
	
	//пакет=Запрос.ВыполнитьПакет(); //Добавить Удаление акцизов если не было изменений!
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);//пакет[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	если Выборка.Количество()=0 тогда
		возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(Узел.Оборудование.ПутьКПапкеВыгрузки+"\exchange.xml","UTF-8");
	//ЗаписьXML.уда
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
		
	НашПакет=ФабрикаXDTO.пакеты.получить("url:\\CassaNew");
			
	СвойствоRoot=НашПакет.КорневыеСвойства.Получить("root");
	СвойствоGoods=СвойствоRoot.Тип.Свойства.Получить("goods");
	//СвойствоRemoves=СвойствоRoot.Тип.Свойства.Получить("removes");
	СвойствоItem=СвойствоGoods.Тип.Свойства.Получить("item");
	СвойствоBarcode=СвойствоItem.Тип.Свойства.Получить("barcode");

	                     
	rootXDTO = ФабрикаXDTO.Создать(СвойствоRoot.Тип);
	//RemovesXDTO=ФабрикаXDTO.Создать(СвойствоRemoves.Тип);
	GoodsXDTO=ФабрикаXDTO.Создать(СвойствоGoods.Тип);
	rootXDTO.Goods=GoodsXDTO;                      
	//rootXDTO.Removes=RemovesXDTO;
	                      //ДОБАВИТЬ ВЕСОВУХУ!!!!!!!!!!!!!!
	Пока Выборка.Следующий() Цикл
							  
		Если не ЗначениеЗаполнено(Выборка.id_tov) Тогда
			продолжить;
		КонецЕсли;
		ItemXDTO=ФабрикаXDTO.Создать(СвойствоItem.Тип);
		ItemXDTO.code=Выборка.id_tov;
		ItemXDTO.do_discount=?(Выборка.s=0,"yes","no");
		ItemXDTO.price=выборка.sen; //original
		//ItemXDTO.price=?(Выборка.sen=Null,0,Выборка.sen); //ValMa - 18-05-2019 - при статусе товара "rm" цена не опеделена!
		ItemXDTO.name=Выборка.naim;
		ItemXDTO.nds=Выборка.nds;
		ItemXDTO.sale_limit=?(Выборка.A=1,"yes","no");
		ItemXDTO.mrc=Выборка.МРЦ;
		ItemXDTO.tnved=выборка.тнвед;
		
		штрихи=выборка.Выбрать();
		
		Пока штрихи.Следующий() Цикл		
			barcode_XDTO = ФабрикаXDTO.Создать(СвойствоBarcode.Тип);
			barcode_XDTO.value=?(штрихи.ФлагПрисутсвияВМатрице=1,
				"23"+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрЗАменить(Строка(штрихи.Штрихкод)," ",""),5,"0","Слева"),
				штрихи.Штрихкод); 
			barcode_XDTO.kind=штрихи.kind; 
			barcode_XDTO.status=штрихи.status;
			ItemXDTO.barcode.добавить(barcode_XDTO);
		КонецЦикла;

		GoodsXDTO.item.добавить(ItemXDTO);
	КонецЦикла;
	
	
	//Выборка=пакет[5].Выбрать();
	//
	//Пока Выборка.Следующий() Цикл	
	//	barcode_XDTO = ФабрикаXDTO.Создать(СвойствоBarcode.Тип);
	//	barcode_XDTO.ean=//?(ItemXDTO.dimension=1,
	//		//"23"+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрЗАменить(Строка(Выборка.Штрихкод)," ",""),5,"0","Слева"),
	//		//Выборка.Штрихкод);
	//		Выборка.Штрихкод;
	//	RemovesXDTO.barcode.добавить(barcode_XDTO);
	//КонецЦикла;

	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,rootXDTO,"root");
	ЗаписьXML.Закрыть();
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел); 


	//Выборка.Сбросить();
	////
	//й=0;
	//
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.ОткрытьФайл("C:\"+"exchange1.xml","UTF-8");

	//Root_XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("url:\\Cassa","root"));
	//goods_XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("url:\\Cassa","goodsType"));
	//Root_XDTO.goods=goods_XDTO;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	
	//	item_XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("url:\\Cassa","itemType"));
	//	item_XDTO.name=Выборка.naim; 
	//	item_XDTO.dimension=?(Выборка.ФлагПрисутсвияВМатрице=1,"kg","piece"); 
	//	item_XDTO.code=Выборка.id_tov; 
	//	item_XDTO.do_discount=?(Выборка.s=0,"yes","no"); 
	//	item_XDTO.nds=Выборка.nds;
	//	item_XDTO.sale_limit=?(Выборка.A=1,"yes","no");

	//	goods_XDTO.item.Добавить(item_XDTO);
	//	
	//	штрихи=Выборка.Выбрать();
	//			
	//	Пока штрихи.Следующий() Цикл		
	//		barcode_XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("url:\\Cassa","barcodeType"));
	//		barcode_XDTO.ean=?(item_XDTO.dimension=1,
	//			"23"+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрЗАменить(Строка(штрихи.skod)," ",""),5,"0","Слева"),
	//			штрихи.skod); 
	//		barcode_XDTO.price=штрихи.sen; 
	//		item_XDTO.barcode.добавить(barcode_XDTO);
	//	КонецЦикла;
	//	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Root_XDTO);		
	//КонецЦикла;
	//ЗаписьXML.Закрыть();

//    Результат = Запрос.Выполнить();
//    ТаблицаЗначений = Результат.Выгрузить();
////	УбитьЛишнее(ТаблицаЗначений);
//	
//	если ТаблицаЗначений.Количество()>0 тогда	
//		разделитель = "|";
//	    колонкиТЗ=ТаблицаЗначений.колонки;
//		й=0;
//		мас=Новый массив;
//		мас.Добавить(50);
//		мас.Добавить(10);
//		мас.Добавить(13);
//		мас.Добавить(13);                  
//		мас.Добавить(3);
//		мас.Добавить(1);
//		мас.Добавить(1);
//		Для каждого колонка Из колонкиТЗ Цикл
//			Если й <мас.Количество() Тогда
//				имя=колонка.Имя;
//		        стрКолонки =""+ стрКолонки + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Имя,мас[й]," ","Справа") + разделитель;
//				й=й+1;
//			Иначе прервать
//			КонецЕсли;
//		КонецЦикла; 
//		
//		//Запрос=Новый запрос;
//		//Запрос.Текст="ВЫБРАТЬ
//		//             |	КассыККМ.ПутьКПапкеВыгрузки
//		//             |ИЗ
//		//             |	Справочник.КассыККМ КАК КассыККМ
//		//             |ГДЕ
//		//             |	КассыККМ.ПометкаУдаления = ЛОЖЬ";
//		//Кассы=Запрос.Выполнить().Выбрать();
//		//В иделае писать 1 файл в ТЕМП и копипастить его в внужные папки, но возможно ебалайка с правами доступа(ХЗ, как то такая хуерга помнится)
//		//Для каждого Узел из Узлы Цикл
//		    кодировка = КодировкаТекста.Системная;
//		    ТекстовыйФайлЗапись = Новый ЗаписьТекста(узел.Оборудование.ПутьКПапкеВыгрузки+"exchange.xml",Кодировка);             
//			
//			текст="";
//			//текст=стрКолонки+Символы.ВК;
//			ТекстовыйФайлЗапись.ЗаписатьСтроку(стрКолонки);
//			для каждого запись из ТаблицаЗначений Цикл
//				
//				Если запись.ФлагПрисутсвияВМатрице=1 тогда
//				//	//запись.skod=СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.id_tov,6,"0","Слева");
//				//	Если СтрДлина(запись.id_tov)>5 Тогда
//				//		запись.skod=Строка(запись.id_tov)
//				//	Иначе
//						skod="23"+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
//							СтрЗАменить(Строка(запись.skod)," ",""),5,"0","Слева");
//				//	КонецЕсли;
//			иначе
//				skod=запись.skod
//				КонецЕсли;
//				
//		        текст = //текст
//				 СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.naim,50," ","Справа")+разделитель
//				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(запись.sen, "ЧРД=.; ЧРГ=' '; ЧГ=0"),10," ","Справа")+разделитель
//				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(skod,13," ","Справа")+разделитель
//				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(запись.id_tov),13," ","Справа")+разделитель
//				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(запись.nds),3," ","Справа")+разделитель
//				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.s,1," ","Справа")+разделитель
//				+СтроковыеФункцииКлиентСервер.ДополнитьСтроку(запись.a,1," ","Справа")+разделитель;
//				ТекстовыйФайлЗапись.ЗаписатьСтроку(текст);//+Символы.ВК;
//			КонецЦикла;	
//			//ТекстовыйФайлЗапись.ЗаписатьСтроку(текст);
//			ТекстовыйФайлЗапись.Закрыть(); 	
//			ПланыОбмена.УдалитьРегистрациюИзменений(Узел); 
//		//КонецЦикла;
//	КонецЕсли;

КонецПроцедуры

функция СожранФайлКассой(узел)
	
	Если НайтиФайлы(узел.оборудование.ПутьКПапкеВыгрузки+"\","tovar.txt").Количество()>0 Тогда
		возврат ложь;
	Иначе
		возврат истина;
	КонецЕсли;
	
КонецФункции

функция СожранФайлКассойХМЛ(узел)
	
	
	файлы=НайтиФайлы(узел.оборудование.ПутьКПапкеВыгрузки+"\","exchange.xml");
	
	Если НайтиФайлы(узел.оборудование.ПутьКПапкеВыгрузки+"\","exchange.xml").Количество()>0 Тогда
		УбитьНулевойФайл(файлы[0]);
	КонецЕсли;

	
	Если НайтиФайлы(узел.оборудование.ПутьКПапкеВыгрузки+"\","exchange.xml").Количество()>0 Тогда
		возврат ложь;
	Иначе
		возврат истина;
	КонецЕсли;
	
КонецФункции

Процедура УбитьНулевойФайл(файл)
	
	если файл.Размер() = 0 Тогда
		
		УдалитьФайлы(файл.Путь+"\exchange.xml");

	КонецЕсли;
	
КонецПроцедуры
	
Процедура ххх_СверкаКасс() Экспорт
	Запрос=новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КассыККМ.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.КассыККМ КАК КассыККМ
	             |ГДЕ
	             |	КассыККМ.ПометкаУдаления = ЛОЖЬ";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		касса=выборка.ссылка.получитьОбъект();
		касса.СверитьКассы(Формат(ТекущаяДата()-24*60*60,"ДФ=ddMMyy"));
	КонецЦикла;
КонецПроцедуры

Процедура ххх_ЗапросОстатковЕГАИС() Экспорт
	
	СоздатьДокОстатковИСформироватьЗапросВЕГАИС(Справочники.ххх_Справочник.ОрганизацияТорговлиПивом.Значение
		,Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	СоздатьДокОстатковИСформироватьЗапросВЕГАИС(Справочники.ххх_Справочник.ОрганизацияТорговлиПивом.Значение
			,Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);

	Если ЗначениеЗаполнено(Справочники.ххх_Справочник.ОрганизацияТорговлиАлкоголем.Значение) Тогда
		СоздатьДокОстатковИСформироватьЗапросВЕГАИС(Справочники.ххх_Справочник.ОрганизацияТорговлиАлкоголем.Значение
			,Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
		СоздатьДокОстатковИСформироватьЗапросВЕГАИС(Справочники.ххх_Справочник.ОрганизацияТорговлиАлкоголем.Значение
			,Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьДокОстатковИСформироватьЗапросВЕГАИС(организация,ВидДокумента)
	
	Документ=Документы.ОстаткиЕГАИС.СоздатьДокумент();
	Документ.ВидДокумента=ВидДокумента;
	Документ.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.ОжидаетОбработки;
	Документ.Дата=текущаяДата();
	//Документ.=Перечисления.СтатусыОбработкиОстатковЕГАИС.КПередаче;
	Документ.Ответственный=ПараметрыСеанса.АвторизованныйПользователь;
	Документ.ТорговыйОбъект=Справочники.ххх_Справочник.Магазин.Значение;
	Документ.Организация=организация;
	
	Документ.ОрганизацияЕГАИС=ПолучитьОрганизациюЕГАИСПоИНН_КПП(Организация);
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	
	//ЗапросВЕГАИС(Документ.ссылка,Документ.ВидДокумента);
	ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(Документ.ссылка,Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки);
		
Конецпроцедуры

Процедура ЗапросВЕГАИС(Документ,ВидДокумента)
	
	//Документы.ОстаткиЕГАИС.СообщениеКПередачеXML(Документ,Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки);

	//ВходныеПараметры = Новый Структура;
	//ВходныеПараметры.Вставить("ДокументСсылка"       , Документ.Ссылка);
	//
	//
	//Отбор = Новый Массив;
	//ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "ОрганизацияЕГАИС");			
	//ИдентификаторФСРАР = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
	//Отбор.Добавить(Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР));
	//
	//
	//СписокДоступныхМодулей = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	//
	//
	//Контекст = Новый Структура;
	//Контекст.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	//Контекст.Вставить("ВидДокумента"           , ВидДокумента);
	//Контекст.Вставить("ОтображатьСообщения"    , ложь);
	//Контекст.Вставить("ТранспортныйМодуль"     , СписокДоступныхМодулей[0]);
	//
	//
	//
	//Результат = ИнтеграцияЕГАИСВызовСервера.СформироватьЗапросВУТМ(
	//		Контекст.ТранспортныйМодуль,
	//		Контекст.ВидДокумента,
	//		Контекст.ВходныеПараметры,
	//		Документ.ссылка);

Конецпроцедуры

Процедура ххх_ПереносОстатковЕГАИС() Экспорт
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("ххх_СтатусОбработкиРегламентнымЗаданием",Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.ОжидаетОбработки);
	Запрос.УстановитьПараметр("ОстаткиСклада",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	Запрос.УстановитьПараметр("ОстаткиЗала",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	Запрос.УстановитьПараметр("КПостановкеНаБаланс",Перечисления.СтатусыАкцизныхМарок.КПостановкеНаБаланс);
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2 КАК СправкаБ,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка КАК ОстаткиСкладДок
	             |ПОМЕСТИТЬ ОстаткиСклада
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиСклада
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	-ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка КАК ОстаткиЗалДок
	             |ПОМЕСТИТЬ ОстаткиЗал
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиЗала
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество < 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ НомкаИсключеннаяИзОборота
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_НоменклатураИсключеннаяИзЕГАИСа КАК ххх_НоменклатураИсключеннаяИзЕГАИСа
	             |		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = ххх_НоменклатураИсключеннаяИзЕГАИСа.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	АкцизныеМаркиЕГАИС.Статус КАК Статус,
	             |	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2
	             |ПОМЕСТИТЬ алкаНеШтучная
	             |ИЗ
	             |	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	             |ГДЕ
	             |	АкцизныеМаркиЕГАИС.Статус = &КПостановкеНаБаланс
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция,
	             |	АкцизныеМаркиЕГАИС.Статус,
	             |	АкцизныеМаркиЕГАИС.Справка2
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЗал.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	ОстаткиЗал.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЗал.Количество КАК КоличествоЗал,
	             |	ОстаткиСклада.Количество КАК КоличествоСклад,
	             |	ОстаткиСклада.СправкаБ КАК СправкаБ,
	             |	ОстаткиЗал.Организация КАК Организация,
	             |	ОстаткиЗал.Магазин КАК Магазин,
	             |	ОстаткиЗал.ОстаткиЗалДок КАК ОстаткиЗалДок,
	             |	ОстаткиСклада.ОстаткиСкладДок КАК ОстаткиСкладДок
	             |ПОМЕСТИТЬ склейкаЗалаСоСкладом
	             |ИЗ
	             |	ОстаткиЗал КАК ОстаткиЗал
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиСклада КАК ОстаткиСклада
	             |		ПО (ОстаткиСклада.АлкогольнаяПродукция = ОстаткиЗал.АлкогольнаяПродукция)
	             |			И (ОстаткиСклада.ОрганизацияЕГАИС = ОстаткиЗал.ОрганизацияЕГАИС)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	склейкаЗалаСоСкладом.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	склейкаЗалаСоСкладом.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	склейкаЗалаСоСкладом.КоличествоЗал КАК КоличествоЗал,
	             |	склейкаЗалаСоСкладом.КоличествоСклад КАК КоличествоСклад,
	             |	склейкаЗалаСоСкладом.СправкаБ КАК СправкаБ,
	             |	склейкаЗалаСоСкладом.Организация КАК Организация,
	             |	склейкаЗалаСоСкладом.Магазин КАК Магазин,
	             |	склейкаЗалаСоСкладом.ОстаткиЗалДок КАК ОстаткиЗалДок,
	             |	склейкаЗалаСоСкладом.ОстаткиСкладДок КАК ОстаткиСкладДок
	             |ИЗ
	             |	склейкаЗалаСоСкладом КАК склейкаЗалаСоСкладом
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ алкаНеШтучная КАК алкаНеШтучная
	             |		ПО склейкаЗалаСоСкладом.АлкогольнаяПродукция = алкаНеШтучная.АлкогольнаяПродукция
	             |			И склейкаЗалаСоСкладом.СправкаБ = алкаНеШтучная.Справка2
	             |ИТОГИ
	             |	СРЕДНЕЕ(КоличествоЗал),
	             |	МАКСИМУМ(Организация),
	             |	МАКСИМУМ(Магазин),
	             |	МАКСИМУМ(ОстаткиЗалДок),
	             |	МАКСИМУМ(ОстаткиСкладДок)
	             |ПО
	             |	ОрганизацияЕГАИС,
	             |	АлкогольнаяПродукция";
	ВыборкаОрги=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Дробилка=500;//В ЕГАИСе есть ограничение на размер.
	
	Пока ВыборкаОрги.Следующий()Цикл
		 
		ДокПередачи=Документы.ПередачаВРегистр2ЕГАИС.СоздатьДокумент();
		ДокПередачи.Дата=ТекущаяДата();
		ДокПередачи.Идентификатор=ДокПередачи.ПолучитьСсылкуНового();
		ДокПередачи.Организация=ВыборкаОрги.Организация;
		ДокПередачи.ОрганизацияЕГАИС=ПолучитьОрганизациюЕГАИСПоИНН_КПП(ВыборкаОрги.Организация);
		ДокПередачи.ТорговыйОбъект=Выборкаорги.Магазин;
		ДокПередачи.Ответственный=ПараметрыСеанса.АвторизованныйПользователь;
		
		ВыборкаПродукция=ВыборкаОрги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПродукция.Следующий() Цикл

			выборка=ВыборкаПродукция.Выбрать();
			
			ОбщееКоличество=ВыборкаПродукция.КоличествоЗал;
			
			Пока выборка.Следующий() Цикл
				
				
				если Дробилка=500 Тогда
					ДокПередачи.Записать(РежимЗаписиДокумента.Проведение);			
					ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(ДокПередачи.ссылка,Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
					Дробилка=0;
				КонецЕсли;
				
				Если ОбщееКоличество=0 Тогда
					прервать;
				КонецЕсли;

				Если Дробилка=0 Тогда
					ДокПередачи=Документы.ПередачаВРегистр2ЕГАИС.СоздатьДокумент();
					ДокПередачи.Дата=ТекущаяДата();
					ДокПередачи.Идентификатор=ДокПередачи.ПолучитьСсылкуНового();
					ДокПередачи.Организация=ВыборкаОрги.Организация;
					ДокПередачи.ОрганизацияЕГАИС=ПолучитьОрганизациюЕГАИСПоИНН_КПП(ВыборкаОрги.Организация);
					ДокПередачи.ТорговыйОбъект=Выборкаорги.Магазин;
					ДокПередачи.Ответственный=ПараметрыСеанса.АвторизованныйПользователь;
				КонецЕсли;

				стр=ДокПередачи.Товары.Добавить();
				стр.АлкогольнаяПродукция=ВыборкаПродукция.АлкогольнаяПродукция;
				
				Если выборка.КоличествоСклад>=ОбщееКоличество Тогда
					стр.Количество=ОбщееКоличество;
					стр.КоличествоУпаковок=ОбщееКоличество;
					стр.Справка2=выборка.СправкаБ;
					ОбщееКоличество=0;
				Иначе
					стр.Количество=выборка.КоличествоСклад;
					стр.КоличествоУпаковок=выборка.КоличествоСклад;
					стр.Справка2=выборка.СправкаБ;
					ОбщееКоличество=ОбщееКоличество-выборка.КоличествоСклад;
				КонецЕсли;
				
				Дробилка=Дробилка+1;
				
			КонецЦикла;	
		КонецЦикла;
		Попытка
			Если Дробилка <>500 тогда
				ДокПередачи.Записать(РежимЗаписиДокумента.Проведение);			
				ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(ДокПередачи.ссылка,Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
			КонецЕсли;
			ОстаткиЗалДок=ВыборкаОрги.ОстаткиЗалДок.получитьОбъект();
			ОстаткиЗалДок.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.Обработан;
			ОстаткиЗалДок.записать();
			
			ОстаткиСкладДок=ВыборкаОрги.ОстаткиСкладДок.получитьОбъект();
			ОстаткиСкладДок.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.Обработан;
			ОстаткиСкладДок.записать();

		Исключение

		КонецПопытки;
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИС.Проведен
	             |	И ОстаткиЕГАИС.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием";
	
	выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		Док=Выборка.Ссылка.получитьОбъект();
		Док.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.ОшибкаОбработки;
		Док.записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ххх_СверкаСуммПоКассам() Экспорт	
	УстановитьПривилегированныйРежим(Истина);
	Запрос=Новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КассыККМ.Ссылка КАК КАсса
	             |ИЗ
	             |	Справочник.КассыККМ КАК КассыККМ
	             |ГДЕ
	             |	НЕ КассыККМ.ПометкаУдаления";				 
	ВыборкаКасс=Запрос.Выполнить().Выбрать();
	Пока ВыборкаКасс.Следующий() Цикл	 					 
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения = ВыборкаКасс.Касса.ххх_СтрокаСоединения;//"DRIVER={MySQL ODBC 5.3 Ansi Driver};SERVER=192.168.0.247;PORT=3306;DATABASE=cassa;uid=operator;pwd=;";
		пСоед.АутентификацияОС=Ложь;
		пСоед.АутентификацияСтандартная=Истина;
		пСоед.ИмяПользователя=ВыборкаКасс.Касса.ххх_ИмяПользователяКассы;//"operator";
		пСоед.СУБД=ВыборкаКасс.Касса.ххх_ТипСубд;//"MySQL";
		ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
		Попытка
			ВнешниеИсточникиДанных.Касса.УстановитьСоединение();
			Касса=ВыборкаКасс.КАсса.получитьобъект();
			Касса.СверитьКассы(Число(Формат(НачалоДня(ТекущаяДата())-1,"ДФ=ддММгг")));//.export_cheks_of_session(смена);	
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ххх_СписатьОстаткиВЕГАИСПвасаДоУчетных() Экспорт
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ххх_СтатусОбработкиРегламентнымЗаданием",Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.ОжидаетОбработки);
	Запрос.УстановитьПараметр("ОстаткиСклада",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	Запрос.УстановитьПараметр("ОстаткиЗала",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	Запрос.УстановитьПараметр("Организация",Справочники.ххх_Справочник.ОрганизацияТорговлиПивом.Значение);
	Запрос.УстановитьПараметр("АлкогольнаяПродукция",Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду("0036389000001234516"));
	мас=Новый массив;
	мас.Добавить("261");
	мас.Добавить("262");
	мас.Добавить("263");
	мас.Добавить("500");
	мас.Добавить("510");
	мас.Добавить("520");
	 
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.УстановитьПараметр("ИсклНомераАСправок",ПолучитьИсключенныеСправкиА());
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СУММА(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество) КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка КАК ДокСклад
	             |ПОМЕСТИТЬ ОстаткиЕГАИССклад
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиСклада
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция.ВидПродукции.Код В(&мас)
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация = &Организация
	             |	И НЕ ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2.НомерСправки1 В (&ИсклНомераАСправок)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	ххх_НоменклатураИсключеннаяИзЕГАИСа.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ НомкаИсключеннаяИзОборота
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_НоменклатураИсключеннаяИзЕГАИСа КАК ххх_НоменклатураИсключеннаяИзЕГАИСа
	             |		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = ххх_НоменклатураИсключеннаяИзЕГАИСа.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СУММА(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество) КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка КАК ДокЗал
	             |ПОМЕСТИТЬ ОстЕГАИСЗал
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция.ВидПродукции.Код В(&мас)
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиЗала
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация = &Организация
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ОстЕГАИСЗал.АлкогольнаяПродукция, ОстаткиЕГАИССклад.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	             |	СУММА(ЕСТЬNULL(ОстЕГАИСЗал.Количество, 0) + ЕСТЬNULL(ОстаткиЕГАИССклад.Количество, 0)) КАК Количество,
	             |	ЕСТЬNULL(ОстЕГАИСЗал.ОрганизацияЕГАИС, ОстаткиЕГАИССклад.ОрганизацияЕГАИС) КАК ОрганизацияЕГАИС,
	             |	ЕСТЬNULL(ОстЕГАИСЗал.Магазин, ОстаткиЕГАИССклад.Магазин) КАК Магазин,
	             |	ЕСТЬNULL(ОстЕГАИСЗал.Организация, ОстаткиЕГАИССклад.ОрганизацияЕГАИС) КАК Организация,
	             |	ОстаткиЕГАИССклад.ДокСклад КАК ДокСклад,
	             |	ОстЕГАИСЗал.ДокЗал КАК ДокЗал
	             |ПОМЕСТИТЬ СуммируемОстаткиЕГАИС_Зал_Склад
	             |ИЗ
	             |	ОстЕГАИСЗал КАК ОстЕГАИСЗал
	             |		ПОЛНОЕ СОЕДИНЕНИЕ ОстаткиЕГАИССклад КАК ОстаткиЕГАИССклад
	             |		ПО ОстЕГАИСЗал.АлкогольнаяПродукция = ОстаткиЕГАИССклад.АлкогольнаяПродукция
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ОстЕГАИСЗал.АлкогольнаяПродукция, ОстаткиЕГАИССклад.АлкогольнаяПродукция),
	             |	ЕСТЬNULL(ОстЕГАИСЗал.ОрганизацияЕГАИС, ОстаткиЕГАИССклад.ОрганизацияЕГАИС),
	             |	ЕСТЬNULL(ОстЕГАИСЗал.Магазин, ОстаткиЕГАИССклад.Магазин),
	             |	ЕСТЬNULL(ОстЕГАИСЗал.Организация, ОстаткиЕГАИССклад.ОрганизацияЕГАИС),
	             |	ОстаткиЕГАИССклад.ДокСклад,
	             |	ОстЕГАИСЗал.ДокЗал
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.Количество КАК Количество,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.Магазин КАК Магазин,
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.Организация КАК Организация,
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.ДокСклад КАК ДокСклад,
	             |	СуммируемОстаткиЕГАИС_Зал_Склад.ДокЗал КАК ДокЗал
	             |ПОМЕСТИТЬ СоотсветсвияНомки
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СуммируемОстаткиЕГАИС_Зал_Склад КАК СуммируемОстаткиЕГАИС_Зал_Склад
	             |		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = СуммируемОстаткиЕГАИС_Зал_Склад.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СоотсветсвияНомки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СоотсветсвияНомки.Количество КАК КоличествоЕГАИС,
	             |	СоотсветсвияНомки.Номенклатура КАК Номенклатура,
	             |	СоотсветсвияНомки.Магазин.СкладПоступления КАК Склад,
	             |	СоотсветсвияНомки.Организация КАК Организация,
	             |	СоотсветсвияНомки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ВЫБОР
	             |		КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток < 0
	             |			ТОГДА 0
	             |		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	             |	КОНЕЦ КАК ОстатокСклад,
	             |	СоотсветсвияНомки.Магазин КАК Магазин,
	             |	СоотсветсвияНомки.ДокСклад КАК ДокСклад,
	             |	СоотсветсвияНомки.ДокЗал КАК ДокЗал
	             |ПОМЕСТИТЬ Промежуточная
	             |ИЗ
	             |	СоотсветсвияНомки КАК СоотсветсвияНомки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, ) КАК ТоварыНаСкладахОстатки
	             |		ПО СоотсветсвияНомки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СоотсветсвияНомки.АлкогольнаяПродукция,
	             |	СоотсветсвияНомки.Магазин,
	             |	СоотсветсвияНомки.ДокСклад,
	             |	СоотсветсвияНомки.Организация,
	             |	СоотсветсвияНомки.ОрганизацияЕГАИС,
	             |	СоотсветсвияНомки.Номенклатура,
	             |	СоотсветсвияНомки.ДокЗал,
	             |	СоотсветсвияНомки.Количество,
	             |	СоотсветсвияНомки.Магазин.СкладПоступления,
	             |	ВЫБОР
	             |		КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток < 0
	             |			ТОГДА 0
	             |		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	             |	КОНЕЦ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ПередачаВТорговыйЗалЕГАИСТовары.АлкогольнаяПродукция, ОстЕГАИСЗал.АлкогольнаяПродукция) КАК НужнаяАлка,
	             |	ИСТИНА КАК нужна
	             |ПОМЕСТИТЬ нужнаяАлка
	             |ИЗ
	             |	Документ.ПередачаВРегистр2ЕГАИС.Товары КАК ПередачаВТорговыйЗалЕГАИСТовары
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВТорговыйЗалЕГАИС
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЕГАИССклад КАК ОстаткиЕГАИССклад
	             |			ПО ПередачаВТорговыйЗалЕГАИС.ДокументОснование = ОстаткиЕГАИССклад.ДокСклад
	             |		ПО ПередачаВТорговыйЗалЕГАИСТовары.Ссылка = ПередачаВТорговыйЗалЕГАИС.Ссылка
	             |		ПОЛНОЕ СОЕДИНЕНИЕ ОстЕГАИСЗал КАК ОстЕГАИСЗал
	             |		ПО ПередачаВТорговыйЗалЕГАИСТовары.АлкогольнаяПродукция = ОстЕГАИСЗал.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СУММА(Промежуточная.КоличествоЕГАИС) КАК КоличествоЕГАИС,
	             |	Промежуточная.Номенклатура КАК Номенклатура,
	             |	Промежуточная.Склад КАК Склад,
	             |	Промежуточная.Организация КАК Организация,
	             |	Промежуточная.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	Промежуточная.ОстатокСклад КАК ОстатокСклад,
	             |	Промежуточная.Магазин КАК Магазин,
	             |	Промежуточная.ДокСклад КАК ДокСклад,
	             |	Промежуточная.ДокЗал КАК ДокЗал,
	             |	ЕСТЬNULL(нужнаяАлка1.нужна, ЛОЖЬ) КАК нужна,
	             |	Промежуточная.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ИЗ
	             |	Промежуточная КАК Промежуточная
	             |		ЛЕВОЕ СОЕДИНЕНИЕ нужнаяАлка КАК нужнаяАлка1
	             |		ПО Промежуточная.АлкогольнаяПродукция = нужнаяАлка1.НужнаяАлка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Промежуточная.ОрганизацияЕГАИС,
	             |	Промежуточная.Склад,
	             |	Промежуточная.ДокСклад,
	             |	ЕСТЬNULL(нужнаяАлка1.нужна, ЛОЖЬ),
	             |	Промежуточная.Магазин,
	             |	Промежуточная.Номенклатура,
	             |	Промежуточная.ДокЗал,
	             |	Промежуточная.Организация,
	             |	Промежуточная.АлкогольнаяПродукция,
	             |	Промежуточная.ОстатокСклад
	             |ИТОГИ
	             |	СУММА(КоличествоЕГАИС),
	             |	МАКСИМУМ(Склад),
	             |	МАКСИМУМ(Организация),
	             |	МАКСИМУМ(ОстатокСклад),
	             |	МАКСИМУМ(Магазин),
	             |	МАКСИМУМ(ДокСклад),
	             |	МАКСИМУМ(ДокЗал)
	             |ПО
	             |	ОрганизацияЕГАИС,
	             |	Номенклатура";
	ВыборкаОрги=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаОрги.Следующий()Цикл
		ДокСпис=Документы.АктСписанияЕГАИС.СоздатьДокумент();
		ДокСпис.Дата=ТекущаяДата();
		ДокСпис.Идентификатор=ДокСпис.ПолучитьСсылкуНового();
		ДокСпис.Организация=ВыборкаОрги.Организация;
		ДокСпис.ОрганизацияЕГАИС=Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоРеквизиту("ИНН",ДокСпис.Организация.ИНН);
		ДокСпис.ТорговыйОбъект=Выборкаорги.Магазин;
		//ДокСпис.СтатусОбработки=Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
		//ДокСпис.Склад=ДокСпис.Магазин.СкладПродажи;
		ДокСпис.Ответственный=ПараметрыСеанса.АвторизованныйПользователь;
		ДокСпис.ПричинаСписания=Перечисления.ПричиныСписанийЕГАИС.Пересортица;
		ДокСпис.ВидДокумента=перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2;
		
		ВыборкаПродукция=ВыборкаОрги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПродукция.Следующий() Цикл

			выборка=ВыборкаПродукция.Выбрать();
			
			ОстатокСклад=ВыборкаПродукция.ОстатокСклад;
			КоличествоЕГАИС=ВыборкаПродукция.КоличествоЕГАИС;
			ОсталосьСписать=КоличествоЕГАИС-ОстатокСклад;
			
			Пока выборка.Следующий() Цикл

				Если ОсталосьСписать<=0 или не выборка.нужна Тогда
					прервать;
				КонецЕсли;
				
				стр=ДокСпис.Товары.Добавить();
				стр.АлкогольнаяПродукция=выборка.АлкогольнаяПродукция;
				стр.Номенклатура=выборка.Номенклатура;
				
				Если ОсталосьСписать>=выборка.КоличествоЕГАИС Тогда
					стр.Количество=выборка.КоличествоЕГАИС;
					стр.КоличествоУпаковок=выборка.КоличествоЕГАИС;
					ОсталосьСписать=ОсталосьСписать-выборка.КоличествоЕГАИС;
				Иначе
					стр.Количество=ОсталосьСписать;
					стр.КоличествоУпаковок=ОсталосьСписать;
					ОсталосьСписать=0;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;
	
		Попытка
			
			ДокСпис.Записать(РежимЗаписиДокумента.Проведение);
			
			//ЗапросВЕГАИС(ДокСпис.ссылка,перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала);
			
			
			ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(ДокСпис.ссылка,Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
			
			//ОстаткиЗалДок=ВыборкаОрги.ДокЗал.получитьОбъект();
			//ОстаткиЗалДок.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.Обработан;
			//ОстаткиЗалДок.записать();
			////
			//ОстаткиСкладДок=ВыборкаОрги.ДокСклад.получитьОбъект();
			//ОстаткиСкладДок.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.Обработан;
			//ОстаткиСкладДок.записать();

		Исключение

		КонецПопытки;
		

	КонецЦикла;

	//
	
	//Запрос.Текст="ВЫБРАТЬ
	//             |	ОстаткиЕГАИС.Ссылка КАК Ссылка
	//             |ИЗ
	//             |	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	//             |ГДЕ
	//             |	ОстаткиЕГАИС.Проведен
	//             |	И ОстаткиЕГАИС.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием";
	//
	//выборка=Запрос.Выполнить().Выбрать();
	//Пока выборка.Следующий() Цикл
	//	Док=Выборка.Ссылка.получитьОбъект();
	//	Док.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.Обработан;
	//	Док.записать();
	//КонецЦикла;


КонецПроцедуры

Процедура ххх_АвтоТесты() Экспорт
	ОтправитьНеСвязанныеАлкокодаНаПочту();
	ОтправитьНаПочтуПроведенныеНакладныеБезДвиженийПОРегиструТоварыНаСкладах();
	ПроверитьПродажиПоМРЦ();
КонецПроцедуры

Процедура ххх_ПередатьВТоргЗалПивасЕГАИС() Экспорт
	
	
	Если ЕстьНеОформленныеПоступленияПоПодтвержденнымНакладнымПивас() тогда
		возврат
	КонецЕсли;
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ххх_СтатусОбработкиРегламентнымЗаданием",Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.ОжидаетОбработки);
	Запрос.УстановитьПараметр("ОстаткиСклада",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	Запрос.УстановитьПараметр("ОстаткиЗала",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	Запрос.УстановитьПараметр("Организация",Справочники.ххх_Справочник.ОрганизацияТорговлиПивом.Значение);
	Запрос.УстановитьПараметр("АлкогольнаяПродукция",Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду("0036389000001234516"));
	мас=Новый массив;
	мас.Добавить("261");
	мас.Добавить("262");
	мас.Добавить("263");
	мас.Добавить("500");
	мас.Добавить("510");
	мас.Добавить("520");
	
	
	Запрос.УстановитьПараметр("мас",мас);
	Запрос.УстановитьПараметр("ИсклНомераАСправок",ПолучитьИсключенныеСправкиА());
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СУММА(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество) КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2 КАК СправкаБ
	             |ПОМЕСТИТЬ ОстаткиЕГАИССклад
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиСклада
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция.ВидПродукции.Код В(&мас)
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация = &Организация
	             |	И НЕ ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2.НомерСправки1 В (&ИсклНомераАСправок)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	ххх_НоменклатураИсключеннаяИзЕГАИСа.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ НомкаИсключеннаяИзОборота
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_НоменклатураИсключеннаяИзЕГАИСа КАК ххх_НоменклатураИсключеннаяИзЕГАИСа
	             |		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = ххх_НоменклатураИсключеннаяИзЕГАИСа.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СУММА(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество) КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка КАК СсылкаОстаткиЗал
	             |ПОМЕСТИТЬ ОстЕГАИСЗал
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция.ВидПродукции.Код В(&мас)
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиЗала
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация = &Организация
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЕГАИССклад.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	ОстаткиЕГАИССклад.Количество КАК Количество,
	             |	ОстаткиЕГАИССклад.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИССклад.Магазин КАК Магазин,
	             |	ОстаткиЕГАИССклад.Организация КАК Организация,
	             |	ОстаткиЕГАИССклад.СправкаБ КАК Справка2,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ СкладСопост
	             |ИЗ
	             |	ОстаткиЕГАИССклад КАК ОстаткиЕГАИССклад
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ПО ОстаткиЕГАИССклад.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстЕГАИСЗал.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	ОстЕГАИСЗал.Количество КАК Количество,
	             |	ОстЕГАИСЗал.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстЕГАИСЗал.Магазин КАК Магазин,
	             |	ОстЕГАИСЗал.Организация КАК Организация,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	ОстЕГАИСЗал.СсылкаОстаткиЗал КАК СсылкаОстаткиЗал
	             |ПОМЕСТИТЬ ЗалСопост
	             |ИЗ
	             |	ОстЕГАИСЗал КАК ОстЕГАИСЗал
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ПО ОстЕГАИСЗал.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ЗалСопост.Номенклатура, СкладСопост.Номенклатура) КАК Номенклатура,
	             |	СУММА(ЕСТЬNULL(ЕСТЬNULL(ЗалСопост.Количество, 0) + ЕСТЬNULL(СкладСопост.Количество, 0), 0)) КАК СуммаЗалСкладЕГАИС,
	             |	ЗалСопост.СсылкаОстаткиЗал КАК СсылкаОстаткиЗал
	             |ПОМЕСТИТЬ СкладЗалЕГАИССумма
	             |ИЗ
	             |	ЗалСопост КАК ЗалСопост
	             |		ПОЛНОЕ СОЕДИНЕНИЕ СкладСопост КАК СкладСопост
	             |		ПО ЗалСопост.Номенклатура = СкладСопост.Номенклатура
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ЗалСопост.Номенклатура, СкладСопост.Номенклатура),
	             |	ЗалСопост.СсылкаОстаткиЗал
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, СкладЗалЕГАИССумма.Номенклатура) КАК Номенклатура,
	             |	СУММА(ЕСТЬNULL(ЕСТЬNULL(СкладЗалЕГАИССумма.СуммаЗалСкладЕГАИС, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0), 0)) КАК КоличествоНеобходимоеДляСписания,
	             |	СкладЗалЕГАИССумма.СсылкаОстаткиЗал КАК СсылкаОстаткиЗал
	             |ПОМЕСТИТЬ НужноСписать
	             |ИЗ
	             |	СкладЗалЕГАИССумма КАК СкладЗалЕГАИССумма
	             |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	             |		ПО СкладЗалЕГАИССумма.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	             |ГДЕ
	             |	ЕСТЬNULL(ЕСТЬNULL(СкладЗалЕГАИССумма.СуммаЗалСкладЕГАИС, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0), 0) > 0
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, СкладЗалЕГАИССумма.Номенклатура),
	             |	СкладЗалЕГАИССумма.СсылкаОстаткиЗал
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НужноСписать.Номенклатура КАК Номенклатура,
	             |	СУММА(НужноСписать.КоличествоНеобходимоеДляСписания - ЕСТЬNULL(ЗалСопост.Количество, 0)) КАК КоличествоНеобходимоеПеренестиС1Регистра,
	             |	ЗалСопост.СсылкаОстаткиЗал КАК СсылкаОстаткиЗал
	             |ПОМЕСТИТЬ СколькоПеренстиС1Регистра
	             |ИЗ
	             |	НужноСписать КАК НужноСписать
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ЗалСопост КАК ЗалСопост
	             |		ПО НужноСписать.Номенклатура = ЗалСопост.Номенклатура
	             |ГДЕ
	             |	НужноСписать.КоличествоНеобходимоеДляСписания - ЕСТЬNULL(ЗалСопост.Количество, 0) > 0
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НужноСписать.Номенклатура,
	             |	ЗалСопост.СсылкаОстаткиЗал
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СколькоПеренстиС1Регистра.Номенклатура КАК Номенклатура,
	             |	СколькоПеренстиС1Регистра.КоличествоНеобходимоеПеренестиС1Регистра КАК КоличествоНеобходимоеПеренестиС1Регистра,
	             |	СкладСопост.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СкладСопост.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	СкладСопост.Магазин КАК Магазин,
	             |	СкладСопост.Организация КАК Организация,
	             |	СкладСопост.Справка2 КАК СправкаБ,
	             |	СкладСопост.Количество КАК КоличествоПоСправкеБ,
	             |	СколькоПеренстиС1Регистра.СсылкаОстаткиЗал КАК СсылкаОстаткиЗал
	             |ИЗ
	             |	СколькоПеренстиС1Регистра КАК СколькоПеренстиС1Регистра
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладСопост КАК СкладСопост
	             |		ПО СколькоПеренстиС1Регистра.Номенклатура = СкладСопост.Номенклатура
	             |ГДЕ
	             |	НЕ СкладСопост.Справка2.НомерСправки1 В (&ИсклНомераАСправок)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СкладСопост.Магазин,
	             |	СкладСопост.Организация,
	             |	СкладСопост.АлкогольнаяПродукция,
	             |	СкладСопост.ОрганизацияЕГАИС,
	             |	СкладСопост.Справка2,
	             |	СколькоПеренстиС1Регистра.СсылкаОстаткиЗал,
	             |	СколькоПеренстиС1Регистра.Номенклатура,
	             |	СколькоПеренстиС1Регистра.КоличествоНеобходимоеПеренестиС1Регистра,
	             |	СкладСопост.Количество
	             |ИТОГИ
	             |	СРЕДНЕЕ(КоличествоНеобходимоеПеренестиС1Регистра),
	             |	МАКСИМУМ(Магазин),
	             |	МАКСИМУМ(Организация),
	             |	МАКСИМУМ(СсылкаОстаткиЗал)
	             |ПО
	             |	ОрганизацияЕГАИС,
	             |	Номенклатура";
	ВыборкаОрги=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаОрги.Следующий() Цикл
		
		ДокПередачи=Документы.ПередачаВРегистр2ЕГАИС.СоздатьДокумент();
		ДокПередачи.Дата=ТекущаяДата();
		ДокПередачи.Идентификатор=ДокПередачи.ПолучитьСсылкуНового();
		ДокПередачи.Организация=ВыборкаОрги.Организация;
		ДокПередачи.ОрганизацияЕГАИС=Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоРеквизиту("ИНН",ДокПередачи.Организация.ИНН);
		ДокПередачи.ТорговыйОбъект=Выборкаорги.Магазин;
		ДокПередачи.Ответственный=ПараметрыСеанса.АвторизованныйПользователь;
		ДокПередачи.ДокументОснование=ВыборкаОрги.СсылкаОстаткиЗал;
		
		ВыборкаПродукция=ВыборкаОрги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПродукция.Следующий() Цикл

			выборка=ВыборкаПродукция.Выбрать();
			
			КоличествоНеобходимоеПеренестиС1Регистра=ВыборкаПродукция.КоличествоНеобходимоеПеренестиС1Регистра;
			
			Пока выборка.Следующий() Цикл
							
				Если КоличествоНеобходимоеПеренестиС1Регистра=0 Тогда
					прервать;
				КонецЕсли;

				стр=ДокПередачи.Товары.Добавить();
				стр.АлкогольнаяПродукция=выборка.АлкогольнаяПродукция;
				стр.Номенклатура=ВыборкаПродукция.Номенклатура;
				
				Если выборка.КоличествоПоСправкеБ>=КоличествоНеобходимоеПеренестиС1Регистра Тогда
					стр.Количество=КоличествоНеобходимоеПеренестиС1Регистра;
					стр.КоличествоУпаковок=КоличествоНеобходимоеПеренестиС1Регистра;
					стр.Справка2=выборка.СправкаБ;
					ОбщееКоличество=0;
				Иначе
					стр.Количество=выборка.КоличествоПоСправкеБ;
					стр.КоличествоУпаковок=выборка.КоличествоПоСправкеБ;
					стр.Справка2=выборка.СправкаБ;
					ОбщееКоличество=КоличествоНеобходимоеПеренестиС1Регистра-выборка.КоличествоПоСправкеБ;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;
		Попытка
			ДокПередачи.Записать(РежимЗаписиДокумента.Проведение);
			
			//ЗапросВЕГАИС(ДокПередачи.ссылка,перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал);
			
			ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(ДокПередачи.ссылка,Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
			
		Исключение
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

процедура ЗаполнитьПочтовыеАдреса(Сообщение)

	Сообщение.Получатели.Добавить("Olga@ural.ru");
	Сообщение.Получатели.Добавить("monitoring@tc-apple.ru");
	//Сообщение.Получатели.Добавить("declarant_briz@mail.ru");
	Сообщение.Получатели.Добавить("alco@tc-apple.ru");
	Сообщение.Получатели.Добавить("alco-apple@mail.ru");
	
КонецПроцедуры

Процедура ОтправитьНеСвязанныеАлкокодаНаПочту()
	запрос=Новый запрос;
	дата=началоДня(ТекущаяДата())-1;
	запрос.УстановитьПараметр("ДатаНач",НачалоДня(дата));
	запрос.УстановитьПараметр("ДатаКон",КонецДня(дата));
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИС.Ссылка КАК Ссылка
	             |ПОМЕСТИТЬ ДокиОст
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИС.Дата МЕЖДУ &ДатаНач И &ДатаКон
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ Алкокода
	             |ИЗ
	             |	ДокиОст КАК ДокиОст
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |		ПО ДокиОст.Ссылка = ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Алкокода.АлкогольнаяПродукция.Наименование КАК Наименование,
	             |	Алкокода.АлкогольнаяПродукция.Код КАК Код,
	             |	ЕСТЬNULL(Алкокода.АлкогольнаяПродукция.Производитель.Наименование, Алкокода.АлкогольнаяПродукция.Импортер.Наименование) КАК ПроизводительИмпортер
	             |ИЗ
	             |	Алкокода КАК Алкокода
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ПО Алкокода.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	             |ГДЕ
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура ЕСТЬ NULL
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Алкокода.АлкогольнаяПродукция.Наименование,
	             |	Алкокода.АлкогольнаяПродукция.Код,
	             |	ЕСТЬNULL(Алкокода.АлкогольнаяПродукция.Производитель.Наименование, Алкокода.АлкогольнаяПродукция.Импортер.Наименование)";
	выборка=Запрос.Выполнить().Выбрать();
	
	Если выборка.Количество()>0 Тогда
		текст="";
		Пока выборка.Следующий() Цикл
			текст=Текст+выборка.Наименование+"; "+выборка.Код+"; "+выборка.ПроизводительИмпортер+"; "+Символы.ВК;
		КонецЦикла;
		
		Магаз=Справочники.Магазины.Выбрать();
		Магаз.Следующий();

		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = Магаз.ххх_АдресСервераSMTP;
		Профиль.ПортIMAP = Магаз.ххх_ПортIMAP; 	
		Профиль.ПользовательSMTP = Магаз.ххх_МагазинскиаяПочта;	
		Профиль.ПарольSMTP = Магаз.ххх_ПарольSMTP;
		
		Сообщение = Новый ИнтернетПочтовоеСообщение ;
		ЗаполнитьПочтовыеАдреса(Сообщение);
		
		Сообщение.Тема ="Атас!!! Не сопоставленная алкогольная продукция в количестве: "+выборка.Количество()+".";
		Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		Сообщение.Тексты.Добавить(текст,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
	КонецЕсли;
	
	
	
	запрос=Новый запрос;
	дата=началоДня(ТекущаяДата())-1;
	запрос.УстановитьПараметр("ДатаНач",НачалоДня(дата));
	запрос.УстановитьПараметр("ДатаКон",КонецДня(дата));
	Запрос.Текст="ВЫБРАТЬ
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Наименование КАК НаименованиеАлка,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код КАК КодАлка,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура.Наименование КАК Наименование,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура.ххх_ИдЦентр КАК Код
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |ГДЕ
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ВидПродукции <> СоответствиеНоменклатурыЕГАИС.Номенклатура.ВидАлкогольнойПродукцииЕГАИС
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура.Наименование,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Наименование,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура.ххх_ИдЦентр";
	выборка=Запрос.Выполнить().Выбрать();
	
	Если выборка.Количество()>0 Тогда
		текст="";
		Пока выборка.Следующий() Цикл
			текст=Текст+выборка.Наименование+"; "+выборка.Код+"; "+выборка.НаименованиеАлка+"; "+выборка.КодАлка+"; "+Символы.ВК;
		КонецЦикла;
		
		Магаз=Справочники.Магазины.Выбрать();
		Магаз.Следующий();

		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = Магаз.ххх_АдресСервераSMTP;
		Профиль.ПортIMAP = Магаз.ххх_ПортIMAP; 	
		Профиль.ПользовательSMTP = Магаз.ххх_МагазинскиаяПочта;	
		Профиль.ПарольSMTP = Магаз.ххх_ПарольSMTP;
		
		Сообщение = Новый ИнтернетПочтовоеСообщение ;
		ЗаполнитьПочтовыеАдреса(Сообщение);
		Сообщение.Тема ="Атас!!! Код вида продукции в карточке ЕГАИС отличается от того что в нашей карточке: "+выборка.Количество()+".";
		Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		Сообщение.Тексты.Добавить(текст,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
	КонецЕсли;
	

	
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ххх_СтатусОбработкиРегламентнымЗаданием",Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.ОжидаетОбработки);
	Запрос.УстановитьПараметр("ОстаткиСклада",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	Запрос.УстановитьПараметр("ОстаткиЗала",Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СУММА(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество) КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2 КАК СправкаБ
	             |ПОМЕСТИТЬ ОстаткиЕГАИССклад
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиСклада
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Справка2
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	СУММА(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество) КАК Количество,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект КАК Магазин,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка КАК СсылкаОстаткиЗал
	             |ПОМЕСТИТЬ ОстЕГАИСЗал
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ВидДокумента = &ОстаткиЗала
	             |	И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Проведен
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ОрганизацияЕГАИС,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ТорговыйОбъект,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация,
	             |	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СУММА(ОстаткиЕГАИССклад.Количество) КАК Количество,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	ОстаткиЕГАИССклад.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ СкладСопост
	             |ИЗ
	             |	ОстаткиЕГАИССклад КАК ОстаткиЕГАИССклад
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ПО ОстаткиЕГАИССклад.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	             |			И (СоответствиеНоменклатурыЕГАИС.Справка2 ЕСТЬ NULL
	             |				ИЛИ СоответствиеНоменклатурыЕГАИС.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка))
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	             |	ОстаткиЕГАИССклад.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СУММА(ОстЕГАИСЗал.Количество) КАК Количество,
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	ОстЕГАИСЗал.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ ЗалСопост
	             |ИЗ
	             |	ОстЕГАИСЗал КАК ОстЕГАИСЗал
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ПО ОстЕГАИСЗал.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	             |			И (СоответствиеНоменклатурыЕГАИС.Справка2 ЕСТЬ NULL
	             |				ИЛИ СоответствиеНоменклатурыЕГАИС.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка))
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	             |	ОстЕГАИСЗал.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ЗалСопост.Номенклатура, СкладСопост.Номенклатура) КАК Номенклатура,
	             |	СУММА(ЕСТЬNULL(ЕСТЬNULL(ЗалСопост.Количество, 0) + ЕСТЬNULL(СкладСопост.Количество, 0), 0)) КАК СуммаЗалСкладЕГАИС,
	             |	ЕСТЬNULL(ЗалСопост.АлкогольнаяПродукция, СкладСопост.АлкогольнаяПродукция) КАК алка
	             |ПОМЕСТИТЬ СкладЗалЕГАИССумма
	             |ИЗ
	             |	ЗалСопост КАК ЗалСопост
	             |		ПОЛНОЕ СОЕДИНЕНИЕ СкладСопост КАК СкладСопост
	             |		ПО ЗалСопост.АлкогольнаяПродукция = СкладСопост.АлкогольнаяПродукция
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ЗалСопост.Номенклатура, СкладСопост.Номенклатура),
	             |	ЕСТЬNULL(ЗалСопост.АлкогольнаяПродукция, СкладСопост.АлкогольнаяПродукция)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, СкладЗалЕГАИССумма.Номенклатура) КАК Номенклатура,
	             |	ЕСТЬNULL(СкладЗалЕГАИССумма.СуммаЗалСкладЕГАИС, 0) КАК ОстаткиЗалСклад,
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	             |	ЕСТЬNULL(СкладЗалЕГАИССумма.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ТоварыНаСкладахОстатки.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый) КАК Маркируемый,
	             |	СкладЗалЕГАИССумма.алка КАК алка,
	             |	ЕСТЬNULL(СкладЗалЕГАИССумма.алка.ВидПродукции.Код, СкладЗалЕГАИССумма.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Код) КАК алкаВидПродукцииКод,
	             |	СкладЗалЕГАИССумма.СуммаЗалСкладЕГАИС КАК СлужебСуммаЗалСкладЕГАИС
	             |ИЗ
	             |	СкладЗалЕГАИССумма КАК СкладЗалЕГАИССумма
	             |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	             |		ПО СкладЗалЕГАИССумма.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	             |ГДЕ
	             |	(ТоварыНаСкладахОстатки.Номенклатура.АлкогольнаяПродукция = ИСТИНА
	             |			ИЛИ ТоварыНаСкладахОстатки.Номенклатура ЕСТЬ NULL)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, СкладЗалЕГАИССумма.Номенклатура),
	             |	ЕСТЬNULL(СкладЗалЕГАИССумма.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ТоварыНаСкладахОстатки.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый),
	             |	СкладЗалЕГАИССумма.алка,
	             |	ЕСТЬNULL(СкладЗалЕГАИССумма.СуммаЗалСкладЕГАИС, 0),
	             |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0),
	             |	ЕСТЬNULL(СкладЗалЕГАИССумма.алка.ВидПродукции.Код, СкладЗалЕГАИССумма.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Код),
	             |	СкладЗалЕГАИССумма.СуммаЗалСкладЕГАИС
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Маркируемый
	             |ИТОГИ
	             |	СУММА(ОстаткиЗалСклад),
	             |	СРЕДНЕЕ(КоличествоОстаток),
	             |	МАКСИМУМ(алкаВидПродукцииКод),
	             |	МИНИМУМ(СлужебСуммаЗалСкладЕГАИС)
	             |ПО
	             |	Номенклатура";
	
	запр=запрос.Выполнить();
	выборкаНомка=запр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Дельта",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	тз.Колонки.Добавить("Наименование");
	тз.Колонки.Добавить("КодНаш");
	тз.Колонки.Добавить("алкаВидПродукцииКод");
	тз.Колонки.Добавить("КодЕГАИС");
	тз.Колонки.Добавить("ОстаткиВЕГАИСе",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	тз.Колонки.Добавить("УчетныеОстатки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	
	Если выборкаНомка.Количество()>0 Тогда
		ТекстОстатки=СтроковыеФункцииКлиентСервер.ДополнитьСтроку("Дельта",10," ","Справа")+"; "+
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку("Наименование",71," ","Справа")+"; "+
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку("КодНаш",10," ","Справа")+"; "+
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку("КодЕГАИС",20," ","Справа")+"; "+
		 	СтроковыеФункцииКлиентСервер.ДополнитьСтроку("алкаВидПродукцииКод",30," ","Справа")+"; "+
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку("Остатки в ЕГАИСе",20," ","Справа")+"; "+
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку("Учетные остатки",20," ","Справа")+символы.ВК;
			
			
			
		пока выборкаНомка.Следующий() Цикл
			
			Если (выборкаНомка.КоличествоОстаток=выборкаНомка.ОстаткиЗалСклад и выборкаНомка.КоличествоОстаток>0) и не выборкаНомка.СлужебСуммаЗалСкладЕГАИС<0 Тогда
				продолжить;
			КонецЕсли;
			
			стр=тз.Добавить();
			стр.Дельта=-выборкаНомка.КоличествоОстаток+выборкаНомка.ОстаткиЗалСклад;
			стр.Наименование=выборкаНомка.номенклатура;
			стр.алкаВидПродукцииКод=выборкаНомка.алкаВидПродукцииКод;
			стр.КодНаш=выборкаНомка.Номенклатура.ххх_ИдЦентр;
			стр.ОстаткиВЕГАИСе=выборкаНомка.ОстаткиЗалСклад;
			стр.УчетныеОстатки=выборкаНомка.КоличествоОстаток;
			
			выборкаЕГАИС=выборкаНомка.Выбрать();
			
			Пока выборкаЕГАИС.Следующий() Цикл
				если ЗначениеЗаполнено(выборкаЕГАИС.алка) Тогда
					стр=тз.Добавить();
					стр.КодЕГАИС=?(ЗначениеЗаполнено(выборкаЕГАИС.алка),выборкаЕГАИС.алка.Код,"Дичь какая то");
					стр.алкаВидПродукцииКод=выборкаЕГАИС.алкаВидПродукцииКод;
					стр.ОстаткиВЕГАИСе=выборкаЕГАИС.ОстаткиЗалСклад;
					стр.Дельта=-выборкаНомка.КоличествоОстаток+выборкаНомка.ОстаткиЗалСклад;
					стр.Наименование=выборкаНомка.номенклатура;
				КонецЕсли;
			КонецЦикла;
			
			
		КонецЦикла;
		
		тз.Сортировать("алкаВидПродукцииКод,Дельта,Наименование,КодЕГАИС");
		
		//йцу=Число("йцу");
		
		ФайлДанных=ПолучитьИмяВременногоФайла(".xls");
		
		ТабДок = Новый ТабличныйДокумент;
    
	    Построитель = Новый ПостроительОтчета();

	    Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(тз);
	    Построитель.ВыводитьЗаголовокОтчета = Ложь;
	    Построитель.Вывести(ТабДок);
	    
	    ТабДок.Записать(ФайлДанных,ТипФайлаТабличногоДокумента.XLS);
		
		Магаз=Справочники.Магазины.Выбрать();
		Магаз.Следующий();

		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = Магаз.ххх_АдресСервераSMTP;
		Профиль.ПортIMAP = Магаз.ххх_ПортIMAP; 	
		Профиль.ПользовательSMTP = Магаз.ххх_МагазинскиаяПочта;	
		Профиль.ПарольSMTP = Магаз.ххх_ПарольSMTP;
		
		Сообщение = Новый ИнтернетПочтовоеСообщение ;
		ЗаполнитьПочтовыеАдреса(Сообщение);
		Сообщение.Тема ="Атас!!! Расхождение остатков ЕГАИС с учетными";
		Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		Сообщение.Вложения.Добавить(ФайлДанных);
		//Сообщение.Вложения.Добавить("C:\Users\Администратор\AppData\Local\Temp\3.jpg");
		//Сообщение.Тексты.Добавить(ТекстОстатки,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
		
		//
		//Сообщение = Новый ИнтернетПочтовоеСообщение ;
		//Сообщение.Получатели.Добавить("Olga@ural.ru");
		//Сообщение.Получатели.Добавить("it@tc-apple.ru");
		//Сообщение.Получатели.Добавить("declarant_briz@mail.ru");
		//Сообщение.Получатели.Добавить("alco@tc-apple.ru");
		//Сообщение.Тема ="Атас!!! Расхождение остатков ЕГАИС с учетными";
		//Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		////Сообщение.Вложения.Добавить(ФайлДанных);
		//Сообщение.Вложения.Добавить("C:\Users\Администратор\AppData\Local\Temp\v8_A57_3b5.zip");
		////Сообщение.Тексты.Добавить(ТекстОстатки,ТипТекстаПочтовогоСообщения.ПростойТекст);
		//Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		//Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		////
		//Почта = Новый ИнтернетПочта();
		//Почта.Подключиться(Профиль);
		//Почта.Послать(Сообщение);
		//Почта.Отключиться();

	конецЕсли;

	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	             |ГДЕ
	             |	ОстаткиЕГАИС.Проведен
	             |	И ОстаткиЕГАИС.ххх_СтатусОбработкиРегламентнымЗаданием = &ххх_СтатусОбработкиРегламентнымЗаданием";
	
	выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		Док=Выборка.Ссылка.получитьОбъект();
		Док.ххх_СтатусОбработкиРегламентнымЗаданием=Перечисления.ххх_СтатусыОбработкиРегламентымиЗаданиями.Обработан;
		Док.записать();
	КонецЦикла;
КонецПроцедуры

процедура ОтправитьНаПочтуПроведенныеНакладныеБезДвиженийПОРегиструТоварыНаСкладах()
	
	Запрос=Новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваров.Ссылка КАК Ссылка
	             |ПОМЕСТИТЬ поступления
	             |ИЗ
	             |	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	             |ГДЕ
	             |	ПоступлениеТоваров.Проведен
	             |	И НЕ ПоступлениеТоваров.ххх_ФиктивнаяНакладная
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПоступлениеТоваров.Ссылка
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	СписаниеТоваров.Ссылка
	             |ИЗ
	             |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК СписаниеТоваров
	             |		ПО СписаниеТоваровТовары.Ссылка = СписаниеТоваров.Ссылка
	             |ГДЕ
	             |	СписаниеТоваров.Проведен
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ВозвратТоваровПоставщику.Ссылка
	             |ИЗ
	             |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	             |ГДЕ
	             |	ВозвратТоваровПоставщику.Проведен
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ОприходованиеТоваров.Ссылка
	             |ИЗ
	             |	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	             |		ПО ОприходованиеТоваровТовары.Ссылка = ОприходованиеТоваров.Ссылка
	             |ГДЕ
	             |	ОприходованиеТоваров.Проведен
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ЧекККМ.Ссылка
	             |ИЗ
	             |	Документ.ЧекККМ КАК ЧекККМ
	             |ГДЕ
	             |	ЧекККМ.Проведен
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	РеализацияТоваров.Ссылка
	             |ИЗ
	             |	Документ.РеализацияТоваров КАК РеализацияТоваров
	             |ГДЕ
	             |	РеализацияТоваров.Проведен
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТоварыНаСкладах.Регистратор КАК Регистратор
	             |ПОМЕСТИТЬ ТоварыНаСкладах
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТоварыНаСкладах.Регистратор
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	поступления.Ссылка КАК Ссылка
	             |ИЗ
	             |	поступления КАК поступления
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладах КАК ТоварыНаСкладах
	             |		ПО поступления.Ссылка = ТоварыНаСкладах.Регистратор
	             |ГДЕ
	             |	ТоварыНаСкладах.Регистратор ЕСТЬ NULL";
	выборка=Запрос.Выполнить().Выбрать();
	
	Если выборка.Количество()>0 Тогда
		текст="";
		Пока выборка.Следующий() Цикл
			текст=текст+выборка.ссылка+символы.ВК;
		КонецЦикла;
	
		Магаз=Справочники.Магазины.Выбрать();
		Магаз.Следующий();

		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = Магаз.ххх_АдресСервераSMTP;
		Профиль.ПортIMAP = Магаз.ххх_ПортIMAP; 	
		Профиль.ПользовательSMTP = Магаз.ххх_МагазинскиаяПочта;	
		Профиль.ПарольSMTP = Магаз.ххх_ПарольSMTP;
		
		Сообщение = Новый ИнтернетПочтовоеСообщение ;
		Сообщение.Получатели.Добавить("monitoring@tc-apple.ru");
		Сообщение.Тема ="Атас!!! Отсутсвуют движения по регистру ТоварыНаСкладах у накладных в количестве: "+выборка.Количество()+".";
		Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		Сообщение.Тексты.Добавить(текст,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
	КонецЕсли;

КонецПроцедуры

функция ПолучитьИсключенныеСправкиА()
	мас=Новый массив;
	выб=РегистрыСведений.ххх_СправкиИсключенныеИзКорректировкиОстатковЕГАИС.Выбрать();
	пока выб.Следующий() Цикл
		мас.Добавить(выб.Справка1.РегистрационныйНомер);
	КонецЦикла;
	возврат мас;
КонецФункции

функция ПолучитьОрганизациюЕГАИСПоИНН_КПП(Организация)
		Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ИНН",организация.ИНН);
	Запрос.УстановитьПараметр("КПП",организация.КПП);
	Запрос.Текст="ВЫБРАТЬ
	             |	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	             |ГДЕ
	             |	КлассификаторОрганизацийЕГАИС.ИНН = &ИНН
	             |	И КлассификаторОрганизацийЕГАИС.КПП = &КПП";
	выборка=Запрос.Выполнить().Выбрать();
	выборка.Следующий();
	возврат выборка.ссылка;
КонецФункции

Процедура ххх_ПередачаТоваровНаИнтернетМагазин() Экспорт

	КочетовОбменСИнтернетМагазином.ВыгрузитьХМЛ("ostInetshop");
	ПрогрузитьИнтернетКассыСервер();

КонецПроцедуры

Процедура ПрогрузитьИнтернетКассыСервер()
	ЗАпрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПланОбменаСОборудованием.Ссылка КАК Ссылка
	             |ИЗ
	             |	ПланОбмена.ПланОбменаСОборудованием КАК ПланОбменаСОборудованием
	             |ГДЕ
	             |	ПланОбменаСОборудованием.Оборудование.Магазин.ххх_ИнтернетМагазин";
	Выборка=Запрос.Выполнить().Выбрать();
	
	ЗАпрос=Новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.ЭтоГруппа";
	Пока выборка.Следующий() Цикл
		ВидыЦен=Новый массив;
		ВидыЦен.Добавить(Справочники.ххх_Справочник.РозничнаяЦена.Значение);
		ОтправитьЦеныНаКассыХМЛ(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ссылка"), видыЦен, Выборка.ссылка)
	КонецЦикла;
	
	ВидыЦен=Новый массив;
	ВидыЦен.Добавить(Справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("ЭтотУзел",ПланыОбмена.ПланОбменаСОборудованием.ЭтотУзел());
	Запрос.Текст="ВЫБРАТЬ
				 //|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
				 //|	УстановкаЦенНоменклатурыИзменения.Узел КАК Узел
				 //|ИЗ
				 //|	Документ.УстановкаЦенНоменклатуры.Изменения КАК УстановкаЦенНоменклатурыИзменения
				 //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
				 //|		ПО УстановкаЦенНоменклатурыИзменения.Ссылка = УстановкаЦенНоменклатурыТовары.Ссылка
				 //|ГДЕ
				 //|	УстановкаЦенНоменклатурыИзменения.Ссылка.Проведен
				 //|	И УстановкаЦенНоменклатурыИзменения.Узел <> &ЭтотУзел
				 //|	И УстановкаЦенНоменклатурыИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
				 //|
				 //|СГРУППИРОВАТЬ ПО
				 //|	УстановкаЦенНоменклатурыТовары.Номенклатура,
				 //|	УстановкаЦенНоменклатурыИзменения.Узел
				 //|
				 //|ОБЪЕДИНИТЬ ВСЕ
				 //|
				 //|ВЫБРАТЬ
	             |	ШтрихкодыИзменения.Владелец КАК Номенклатура,
	             |	ШтрихкодыИзменения.Узел
	             |ИЗ
	             |	РегистрСведений.Штрихкоды.Изменения КАК ШтрихкодыИзменения
	             |ГДЕ
	             |	ШтрихкодыИзменения.Узел <> &ЭтотУзел
	             |	И ШтрихкодыИзменения.Штрихкод <> """"
	             |	И НЕ ШтрихкодыИзменения.Владелец ЕСТЬ NULL
	             |	И ШтрихкодыИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ШтрихкодыИзменения.Владелец,
	             |	ШтрихкодыИзменения.Узел
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
				 //|
				 //|ВЫБРАТЬ
				 //|	ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения.Номенклатура,
				 //|	ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения.Узел
				 //|ИЗ
				 //|	РегистрСведений.ххх_КодыНоменклатурыВесыКассыТекущееСостояние.Изменения КАК ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения
				 //|ГДЕ
				 //|	ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения.Узел <> &ЭтотУзел
				 //|	И ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
				 //|
				 //|СГРУППИРОВАТЬ ПО
				 //|	ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения.Узел,
				 //|	ххх_КодыНоменклатурыВесыКассыТекущееСостояниеИзменения.Номенклатура
				 //|
				 //|ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	НоменклатураИзменения.Ссылка,
	             |	НоменклатураИзменения.Узел
	             |ИЗ
	             |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	             |ГДЕ
	             |	НоменклатураИзменения.Узел <> &ЭтотУзел
	             |	И НоменклатураИзменения.Узел.Оборудование.Ссылка ССЫЛКА Справочник.КассыККМ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураИзменения.Ссылка,
	             |	НоменклатураИзменения.Узел";
	выгрузка=Запрос.Выполнить().Выгрузить();
	номка=Выгрузка.Скопировать();
	номка.свернуть("Номенклатура");
	номка=номка.ВыгрузитьКолонку("Номенклатура");
	выгрузка.Свернуть("Узел");
	Узлы=выгрузка.ВыгрузитьКолонку("узел");
	
	//й=0;
	//Пока й<Узлы.Количество() Цикл
	//	Если не СожранФайлКассой(Узлы[й]) Тогда
	//		узлы.Удалить(й);
	//		й=й-1;
	//	КонецЕсли;
	//	й=й+1;
	//КонецЦикла;
	//
	МассивЗаданий = Новый Массив; 
	Для каждого Узел из Узлы Цикл
		Если ТипЗнч(Узел.Оборудование)=Тип("СправочникСсылка.КассыККМ") и Узел.Оборудование.Магазин.ххх_ИнтернетМагазин Тогда			
		    НаборПараметров = Новый Массив; 
			НаборПараметров.Добавить(номка); 
			НаборПараметров.Добавить(ВидыЦен);
			НаборПараметров.Добавить(Узел); 
			Задание = ФоновыеЗадания.Выполнить("ххх_Сервер.ОтправитьЦеныНаКассыХМЛ", НаборПараметров);
			МассивЗаданий.Добавить(Задание);
			//ххх_Сервер.ОтправитьЦеныНаКассы(номка,ВидыЦен,Узел);
		Иначе 
			//Оборудования=Новый массив;
			//Оборудования.Добавить(Узел.оборудование);
			//
			//НаборПараметров = Новый Массив; 
			//НаборПараметров.Добавить(номка);  
			//НаборПараметров.Добавить(ВидыЦен);
			//НаборПараметров.Добавить(Узел);
			//НаборПараметров.Добавить(Оборудования);
			//Задание = ФоновыеЗадания.Выполнить("ххх_Сервер.ОтправитьЦеныНаВесы", НаборПараметров);
			//МассивЗаданий.Добавить(Задание);

			//ххх_Сервер.ОтправитьЦеныНаВесы(номка,ВидыЦен,Узел,Оборудования);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ххх_ОбменСОфисом() Экспорт
	АдресСайта = "ftp://mail.tc-apple.ru/" ;
	//Порт = 21;
	Логин = "1c";
	Пароль = "!MegaRoot";
	ИмяКаталога = справочники.ххх_Справочник.Магазин.Значение.ххх_КаталогФТП;
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	
	файлы=FTPСоединение.НайтиФайлы("*.xml");
	Если файлы.Количество() = 0 тогда
		Возврат;
	КонецЕсли;

	//ВременныйФайл = ПолучитьИмяВременногоФайла("txt");

	//FTPСоединение.Получить("file.txt",ВременныйФайл );

	//ТекстовыйДок = Новый ТекстовыйДокумент;

	//ТекстовыйДок.Прочитать(ИмяФайла, "windows-1251");

	//ТекстовыйДок.Записать("C:\file.txt");
	//
	
	
КонецПроцедуры

Функция НайтиБСправку(АкцизнаяМарка)
	Запрос=новый Запрос;
	Запрос.УстановитьПараметр("АкцизнаяМарка",АкцизнаяМарка);
	Запрос.Текст="ВЫБРАТЬ
	             |	ххх_АкцизныеМаркиОстатки.СправкаБ КАК СправкаБ
	             |ИЗ
	             |	РегистрНакопления.ххх_АкцизныеМарки.Остатки(, АкцизнаяМарка = &АкцизнаяМарка) КАК ххх_АкцизныеМаркиОстатки
	             |ГДЕ
	             |	ххх_АкцизныеМаркиОстатки.КоличествоОстаток > 0";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат выборка.СправкаБ;
	иначе
		возврат неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиНаСервере(Алкокод)
	Запрос=Новый запрос;
	запрос.УстановитьПараметр("Алкокод",Алкокод);
	Запрос.Текст="ВЫБРАТЬ
	             |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	             |	Штрихкоды.Штрихкод КАК Штрихкод,
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ВидПродукции.Маркируемый КАК Маркируемый
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	             |		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = Штрихкоды.Владелец
	             |ГДЕ
	             |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код = &АлкоКод";
	Выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		возврат Новый структура("номенклатура,АлкогольнаяПродукция,Штрихкод,Маркируемый",выборка.номенклатура,выборка.АлкогольнаяПродукция,выборка.Штрихкод,выборка.Маркируемый);
	КонецЕсли;
	возврат неопределено;
КонецФункции

Функция ПолучитьАлкКодИзПДФ417(парПДФ417 = "")
	Если СтрДлина(парПДФ417)<100 тогда
		Значение=СокрЛП(парПДФ417);
		Если СтрДлина(Значение) <> 68 Тогда
			Сообщить("Некорректный номер марки!");
			Возврат "";
		Иначе
			Значение = Сред(Значение,8,12);
			Результат = 0;
			Для Х = 1 По 12 Цикл
				М = 1;
				Для У = 1 По 12-Х Цикл
					М = М*36
				КонецЦикла;
				Результат=Результат+(Найти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Сред(Значение,Х,1))-1)*М;
			КонецЦикла;
			Возврат  СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрЗаменить(Результат," ",""),19,"0","Слева");
		КонецЕсли;
	Иначе
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("датаМатрикс",парПДФ417);
		Запрос.Текст="ВЫБРАТЬ
		             |	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция.Код КАК АлкогольнаяПродукцияКод
		             |ИЗ
		             |	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
		             |ГДЕ
		             |	АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода = &датаМатрикс";
		выборка=Запрос.Выполнить().Выбрать();
		
		выборка.Следующий();
		
		возврат выборка.АлкогольнаяПродукцияКод;
		
	КонецЕсли;
КонецФункции 

Функция ОБработатьРусскиеБуквы(Марка) Экспорт
	Ном=ВРЕГ(Марка);
	Ном=СтрЗаменить(Ном,"Й","Q");
	Ном=СтрЗаменить(Ном,"Ц","W");
	Ном=СтрЗаменить(Ном,"У","E");
	Ном=СтрЗаменить(Ном,"К","R");
	Ном=СтрЗаменить(Ном,"Е","T");
	Ном=СтрЗаменить(Ном,"Н","Y");
	Ном=СтрЗаменить(Ном,"Г","U");
	Ном=СтрЗаменить(Ном,"Ш","I");
	Ном=СтрЗаменить(Ном,"Щ","O");
	Ном=СтрЗаменить(Ном,"З","P");
	Ном=СтрЗаменить(Ном,"Ф","A");
	Ном=СтрЗаменить(Ном,"Ы","S");
	Ном=СтрЗаменить(Ном,"В","D");
	Ном=СтрЗаменить(Ном,"А","F");
	Ном=СтрЗаменить(Ном,"П","G");
	Ном=СтрЗаменить(Ном,"Р","H");
	Ном=СтрЗаменить(Ном,"О","J");
	Ном=СтрЗаменить(Ном,"Л","K");
	Ном=СтрЗаменить(Ном,"Д","L");
	Ном=СтрЗаменить(Ном,"Я","Z");
	Ном=СтрЗаменить(Ном,"Ч","X");
	Ном=СтрЗаменить(Ном,"С","C");
	Ном=СтрЗаменить(Ном,"М","V");
	Ном=СтрЗаменить(Ном,"И","B");
	Ном=СтрЗаменить(Ном,"Т","N");
	Ном=СтрЗаменить(Ном,"Ь","M");
	Ном=СтрЗаменить(Ном,"!","1");
	Ном=СтрЗаменить(Ном,"""","2");
	Ном=СтрЗаменить(Ном,"№","3");
	Ном=СтрЗаменить(Ном,"$","4");
	Ном=СтрЗаменить(Ном,"%","5");
	Ном=СтрЗаменить(Ном,"^","6");
	Ном=СтрЗаменить(Ном,"&","7");
	Ном=СтрЗаменить(Ном,"*","8");
	Ном=СтрЗаменить(Ном,"(","9");
	Ном=СтрЗаменить(Ном,")","0");
	Ном=СтрЗаменить(Ном,"@","2");
	Ном=СтрЗаменить(Ном,"#","3");
	Ном=СтрЗаменить(Ном,";","4");
	Ном=СтрЗаменить(Ном,":","6");
	Ном=СтрЗаменить(Ном,"?","7");

	Возврат Ном;
КонецФункции

Процедура ПроверитьПродажиПоМРЦ()
	//ЗаполнитьЦеныВидыОбъемы();		
		
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос=Новый запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КассыККМ.Ссылка КАК КАсса
	             |ИЗ
	             |	Справочник.КассыККМ КАК КассыККМ
	             |ГДЕ
	             |	НЕ КассыККМ.ПометкаУдаления";				 
	ВыборкаКасс=Запрос.Выполнить().Выбрать();
	
	
	Запрос=Новый запрос;
	запрос.УстановитьПараметр("нач",НачалоДня(НачалоДня(ТекущаяДата())-1));
	запрос.УстановитьПараметр("кон",КонецДня(НачалоДня(ТекущаяДата())));
	Запрос.Текст="ВЫБРАТЬ
	             |	chek_items.pdf417 КАК pdf417,
	             |	chek_items.PRICE / 100 КАК PRICE,
	             |	cheks.ID КАК ID,
	             |	chek_items.DISCOUNT_FLAG КАК DISCOUNT_FLAG,
	             |	cheks.DATE КАК DATE
	             |ИЗ
	             |	ВнешнийИсточникДанных.Касса.Таблица.cheks КАК cheks
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Касса.Таблица.chek_items КАК chek_items
	             |		ПО cheks.ID = chek_items.ID_CHEK
	             |ГДЕ
	             |	cheks.STATE <> ""2""
	             |	И cheks.DATE МЕЖДУ &нач И &кон
	             |	И chek_items.pdf417 <> ""0""";
	
	ПрайсПДФ=Новый ТаблицаЗначений;
	ПрайсПДФ.Колонки.Добавить("КарточкаЕгаис",Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ПрайсПДФ.Колонки.Добавить("ID",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	ПрайсПДФ.Колонки.Добавить("PRICE",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	ПрайсПДФ.Колонки.Добавить("DISCOUNT_FLAG",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	ПрайсПДФ.Колонки.Добавить("pdf417",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ПрайсПДФ.Колонки.Добавить("DATE",Новый ОписаниеТипов("Дата"));

	
	//Тч.Колонки.Добавить("единица",Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	//Тч.Колонки.Добавить("крепость",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));

	Пока ВыборкаКасс.Следующий() Цикл	 
					 
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения = ВыборкаКасс.Касса.ххх_СтрокаСоединения;//"DRIVER={MySQL ODBC 5.3 Ansi Driver};SERVER=192.168.0.247;PORT=3306;DATABASE=cassa;uid=operator;pwd=;";
		пСоед.АутентификацияОС=Ложь;
		пСоед.АутентификацияСтандартная=Истина;
		пСоед.ИмяПользователя=ВыборкаКасс.Касса.ххх_ИмяПользователяКассы;//"operator";
		пСоед.СУБД=ВыборкаКасс.Касса.ххх_ТипСубд;//"MySQL";
		ВнешниеИсточникиДанных.Касса.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьПараметрыСоединенияПользователя("Админ",пСоед);
		ВнешниеИсточникиДанных.Касса.УстановитьСоединение();
		
		ВыборкаПрайсПДФ=запрос.Выполнить().Выбрать();
		Пока ВыборкаПрайсПДФ.Следующий() Цикл
			
			АкцизнаяМарка=ОБработатьРусскиеБуквы(ВыборкаПрайсПДФ.pdf417);
			
			мен=РегистрыСведений.АкцизныеМаркиЕГАИС.СоздатьМенеджерЗаписи();
			мен.АкцизнаяМарка=АкцизнаяМарка;
			мен.Прочитать();
			
			//Алкокод=ПолучитьАлкКодИзПДФ417(ОБработатьРусскиеБуквы(АкцизнаяМарка));
			//выборка=НайтиНаСервере(Алкокод);

			стр=ПрайсПДФ.Добавить();
			стр.КарточкаЕгаис=мен.АлкогольнаяПродукция;
			стр.ID=ВыборкаПрайсПДФ.ID;
			стр.pdf417=ВыборкаПрайсПДФ.pdf417;
			стр.DISCOUNT_FLAG=ВыборкаПрайсПДФ.DISCOUNT_FLAG;
			стр.DATE=ВыборкаПрайсПДФ.DATE;
			стр.PRICE=ВыборкаПрайсПДФ.PRICE;

		КонецЦикла;
		
	КонецЦикла;	
	
	Запрос=Новый запрос;
	
	Запрос.УстановитьПараметр("ПрайсПДФ",ПрайсПДФ);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	
	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ПрайсПДФ.КарточкаЕгаис КАК КарточкаЕгаис,
	             |	ПрайсПДФ.PRICE КАК PRICE,
				  |	ПрайсПДФ.pdf417 КАК pdf417,
				 |	ПрайсПДФ.DISCOUNT_FLAG КАК DISCOUNT_FLAG,
				 |	ПрайсПДФ.DATE КАК DATE,
	             |	ПрайсПДФ.ID КАК ID
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&ПрайсПДФ КАК ПрайсПДФ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	йцу.КарточкаЕгаис КАК КарточкаЕгаис,
	             |	йцу.PRICE КАК PRICE,
	             |	йцу.ID КАК ID,
				 |	йцу.pdf417 КАК pdf417,
				 |	йцу.DISCOUNT_FLAG КАК DISCOUNT_FLAG,
				 |	йцу.DATE КАК DATE
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ВидПродуцкцииМрцАлкаголь.СрезПоследних(&Дата, ) КАК ххх_ВидПродуцкцииМрцАлкагольСрезПоследних
	             |		ПО йцу.КарточкаЕгаис.ВидПродукции = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции
	             |			И йцу.КарточкаЕгаис.Объем = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж
	             |			И йцу.PRICE < ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ";
	
	//
	//	Запрос.Текст="ВЫБРАТЬ
	//	             |	ПрайсПДФ.КарточкаЕгаис КАК КарточкаЕгаис,
	//	             |	ПрайсПДФ.PRICE КАК PRICE,
	//	             |	ПрайсПДФ.pdf417 КАК pdf417,
	//	             |	ПрайсПДФ.DISCOUNT_FLAG КАК DISCOUNT_FLAG,
	//	             |	ПрайсПДФ.DATE КАК DATE,
	//	             |	ПрайсПДФ.ID КАК ID
	//	             |ПОМЕСТИТЬ йцу
	//	             |ИЗ
	//	             |	&ПрайсПДФ КАК ПрайсПДФ
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	йцу.КарточкаЕгаис КАК КарточкаЕгаис,
	//	             |	йцу.PRICE КАК PRICE,
	//	             |	йцу.ID КАК ID,
	//	             |	йцу.pdf417 КАК pdf417,
	//	             |	йцу.DISCOUNT_FLAG КАК DISCOUNT_FLAG,
	//	             |	йцу.DATE КАК DATE,
	//	             |	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	//	             |ИЗ
	//	             |	йцу КАК йцу
	//	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	//	             |		ПО йцу.pdf417 = АкцизныеМаркиЕГАИС.АкцизнаяМарка.ЗначениеШтрихкода
	//	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ВидПродуцкцииМрцАлкаголь.СрезПоследних(&Дата, ) КАК ххх_ВидПродуцкцииМрцАлкагольСрезПоследних
	//	             |		ПО йцу.КарточкаЕгаис.ВидПродукции = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции
	//	             |			И йцу.КарточкаЕгаис.Объем = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж
	//	             |			И йцу.PRICE < ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ";
	//            // |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_ВидПродуцкцииМрцАлкаголь.СрезПоследних(&Дата, ) КАК ххх_ВидПродуцкцииМрцАлкагольСрезПоследних
	//             //|		ПО йцу.КарточкаЕгаис.ВидПродукции = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.ВидПродукции
	//             //|			И йцу.КарточкаЕгаис.Объем = ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.Литраж
	//             //|			 йцу.PRICE < ххх_ВидПродуцкцииМрцАлкагольСрезПоследних.МРЦ";
	
	выборка=Запрос.Выполнить().Выбрать();
	
	
	текст="";
	Пока выборка.Следующий() Цикл
		текст=текст+выборка.КарточкаЕгаис+" "+выборка.КарточкаЕгаис.код+" "+выборка.PRICE+" "+выборка.DISCOUNT_FLAG+" "+выборка.DATE+" "+выборка.ID+" "+выборка.pdf417+символы.ВК;
	КонецЦикла;
	
	
	
	Если ЗначениеЗаполнено(текст)Тогда
		Магаз=Справочники.Магазины.Выбрать();
		Магаз.Следующий();

		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = Магаз.ххх_АдресСервераSMTP;
		Профиль.ПортIMAP = Магаз.ххх_ПортIMAP; 	
		Профиль.ПользовательSMTP = Магаз.ххх_МагазинскиаяПочта;	
		Профиль.ПарольSMTP = Магаз.ххх_ПарольSMTP;
		
		Сообщение = Новый ИнтернетПочтовоеСообщение ;
		ЗаполнитьПочтовыеАдреса(Сообщение);
		Сообщение.Тема ="Атас!!! Продан алкоголь меньше МРЦ.";
		Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		Сообщение.Тексты.Добавить(текст,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
	КонецЕсли;
	
	
КонецПроцедуры

процедура ЗаполнитьЦеныВидыОбъемы()
	
	Наб=РегистрыСведений.ххх_ВидПродуцкцииМрцАлкаголь.СоздатьНаборЗаписей();
	наб.Прочитать();
	наб.Очистить();
		
	ВидПродукции229=справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("229");
	ВидПродукции450=справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("450");
	ВидПродукции200=справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("200");

	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.1;
	стр.МРЦ=74.2;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.2;
	стр.МРЦ=148.4;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.25;
	стр.МРЦ=185.5;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.375;
	стр.МРЦ=278.25;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.5;
	стр.МРЦ=371;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.7;
	стр.МРЦ=519.4;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=0.75;
	стр.МРЦ=556.5;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции229;
	стр.Литраж=1;
	стр.МРЦ=742;
	стр.Период='20181015';
	
	
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=0.1;
	стр.МРЦ=41;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=0.25;
	стр.МРЦ=102.5;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=0.375;
	стр.МРЦ=153.75;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=0.5;
	стр.МРЦ=205;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=0.7;
	стр.МРЦ=287;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=0.75;
	стр.МРЦ=307.5;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции200;
	стр.Литраж=1;
	стр.МРЦ=410;
	стр.Период='20181015';
	
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции450;
	стр.Литраж=0.375;
	стр.МРЦ=82;
	стр.Период='20181015';
	
	стр=Наб.Добавить();
	стр.ВидПродукции=ВидПродукции450;
	стр.Литраж=0.75;
	стр.МРЦ=164;
	стр.Период='20181015';

	стр=Наб.Добавить();	
	стр.ВидПродукции=ВидПродукции450;
	стр.Литраж=1.5;
	стр.МРЦ=328;
	стр.Период='20181015';

	наб.Записать(Истина);
КонецПроцедуры

Процедура ххх_ПрогрузкаДатыВремениВыработки() Экспорт
	
	//ValMa - прогрузка товаров у которых нужно прогрузить в составе время изготовления 
	КраткоГод = Формат(ТекущаяДата(), "ДФ=ддММгг"); 
	ВремяВыработки = "изг" + КраткоГод + "_" + Формат(ТекущаяДата(), "ДФ=ЧЧ:мм");
	//ВремяВыработки = "(изг." + Формат(ТекущаяДата(), "ДФ=ЧЧ:мм")+")";

	Константы.ххх_ВремяВыработкиТовара.Установить(ВремяВыработки);
	
	СписокТоваров = Новый Массив;
	
	ДопСв = Справочники.ххх_Справочник.НоменклатураДопСвойствоВыводитьДатуПроизводства.Значение;
	// товары с доп свойством
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Свойство", ДопСв);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение = ""True""";   
	Результат = Запрос.Выполнить().Выбрать();

	//Если Результат.Количество() = 0 Тогда
	//    Сообщить("нет товаров с доп свойством");
	//Иначе
		Пока Результат.Следующий() Цикл
			СписокТоваров.Добавить(Результат.Объект);
        КонецЦикла;
	//КонецЕсли;
	
	Выборка = ПланыОбмена.ПланОбменаСОборудованием.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Ссылка = ПланыОбмена.ПланОбменаСОборудованием.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
		Для каждого СтрТовар из СписокТоваров Цикл
			//регистрируем товар
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, СтрТовар); 
		КонецЦикла;
	КонецЦикла;	
	
	ВидыЦен=Новый массив;
	ВидыЦен.Добавить(Справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("видыЦен",видыЦен);
	Запрос.УстановитьПараметр("ЭтотУзел",ПланыОбмена.ПланОбменаСОборудованием.ЭтотУзел());
	Запрос.Текст="ВЫБРАТЬ
	             |	НоменклатураИзменения.Ссылка КАК Номенклатура,
	             |	НоменклатураИзменения.Узел КАК Узел
	             |ИЗ
	             |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	             |ГДЕ
	             |	НоменклатураИзменения.Узел <> &ЭтотУзел
	             |	И НоменклатураИзменения.Узел.Оборудование ССЫЛКА Справочник.ххх_ПодключаемоеОборудование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураИзменения.Ссылка,
	             |	НоменклатураИзменения.Узел";
	выгрузка=Запрос.Выполнить().Выгрузить();
	номка=Выгрузка.Скопировать();
	номка.свернуть("Номенклатура");
	номка=номка.ВыгрузитьКолонку("Номенклатура");
	выгрузка.Свернуть("Узел");
	Узлы=выгрузка.ВыгрузитьКолонку("узел");
	
	МассивЗаданий = Новый Массив; 
	Для каждого Узел из Узлы Цикл
		//Если ТипЗнч(Узел.Оборудование)=Тип("СправочникСсылка.ххх_ПодключаемоеОборудование") Тогда
		//ValMa - 7-03-2019 - выбираем только доступные рабочие весы
		Если Узел.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Узел.Оборудование.УстройствоИспользуется Тогда
			Продолжить;
		КонецЕсли;
		Ответ = Ping(Узел.Оборудование.ИпАдресс);
		Если Ответ = 0 Тогда
			Продолжить;
		КонецЕсли;
		//---
		Оборудования=Новый массив;
		Оборудования.Добавить(Узел.оборудование);	
		НаборПараметров = Новый Массив; 
		НаборПараметров.Добавить(номка);  
		НаборПараметров.Добавить(ВидыЦен);
		НаборПараметров.Добавить(Узел);
		НаборПараметров.Добавить(Оборудования);
		Задание = ФоновыеЗадания.Выполнить("ххх_Сервер.ОтправитьЦеныНаВесы", НаборПараметров);
		МассивЗаданий.Добавить(Задание);	
		//КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда 
		Попытка 
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий); 
		Исключение
		КонецПопытки; 
	КонецЕсли;	
	
	ЗаданиеВыполнено=?(ЗначениеЗаполнено(ОписаниеОшибки()),ОписаниеОшибки(),"Да");
	
	Запись=РегистрыСведений.ххх_ЖурналВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	Запись.Период=ТекущаяДата();
	Запись.РегламентноеЗадание="Прогрузка оборудования";
	запись.Магазин=параметрыСеанса.ТекущийПользователь.Подразделение;
	Запись.ЗавершеноУспешно=ЗаданиеВыполнено;
	запись.Записать();
	
КонецПроцедуры

Процедура ххх_ОбменСИнтернетМагазином() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

// Делает паузу на указанное количество миллисекунд
//
// Параметры:
//  ПаузаВМс - Число - длительность паузы в миллисекундах 
//						
Процедура Пауза(ПаузаВМс) Экспорт
	
	Скрипт=Новый ТекстовыйДокумент();
	Скрипт.УстановитьТекст
	("if (WScript.Arguments.Count()==0)
	|    WScript.Quit();
	|else
	|    if (isNaN(parseInt(WScript.Arguments(0))))
	|        WScript.Quit();
	|WScript.Sleep(WScript.Arguments(0));");
	
	GUID = Новый УникальныйИдентификатор;
	ИмяФайлаСкрипта = КаталогВременныхФайлов() + GUID + "_sleep.js";
	Скрипт.Записать(ИмяФайлаСкрипта, КодировкаТекста.ANSI);
	
	WshShell = Новый COMОбъект("wscript.shell");
	WshShell.Run("wscript.exe """ + ИмяФайлаСкрипта + """ " + Формат(ПаузаВМс, "ЧГ=0"), 0, -1);
	
	УдалитьФайлы(ИмяФайлаСкрипта);
	
КонецПроцедуры


//ValMa - Ночной регламент. Прогрузка весов с проверкой на битые ячейки
Процедура ПроверитьВесыНаБитыеЯчейки() Экспорт
	
	//отбираем весы: без пометки на удаление, и только те, которые используются и в сети.
	Весы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ххх_ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ххх_ПодключаемоеОборудование.ПометкаУдаления КАК ПометкаУдаления,
	|	ххх_ПодключаемоеОборудование.УстройствоИспользуется КАК УстройствоИспользуется
	|ИЗ
	|	Справочник.ххх_ПодключаемоеОборудование КАК ххх_ПодключаемоеОборудование";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Предупреждение,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ххх_Сервер.ОпределитьПланОбменаПоВесам(ВыборкаДетальныеЗаписи.Ссылка),
			"Весы """+ВыборкаДетальныеЗаписи.Ссылка+""" помечены на удаление!");
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыборкаДетальныеЗаписи.УстройствоИспользуется Тогда
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Предупреждение,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ххх_Сервер.ОпределитьПланОбменаПоВесам(ВыборкаДетальныеЗаписи.Ссылка),
			"Весы """+ВыборкаДетальныеЗаписи.Ссылка+""" не используются!");			
			Продолжить;
		КонецЕсли;
		
		//ping
		Ответ = ПолучениеФайловИзИнтернетаСлужебный.ПроверитьДоступностьСервера(ВыборкаДетальныеЗаписи.Ссылка.ИпАдресс);
		
		Если Ответ.Доступен Тогда
			ВесыТип = "";
			Если ВыборкаДетальныеЗаписи.Ссылка.type = 1 Тогда
				Весы.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				ВесыТип = "(LP-1.6) ";
			ИначеЕсли ВыборкаДетальныеЗаписи.Ссылка.type = 3 Тогда
				ВесыТип = "(CL-5000) ";
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ххх_Сервер.ОпределитьПланОбменаПоВесам(ВыборкаДетальныеЗаписи.Ссылка),
			"Весы "+ВесыТип+""""+ВыборкаДетальныеЗаписи.Ссылка+""" доступны!"+Символы.ПС+ Ответ.ЖурналДиагностики);			
		Иначе
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Предупреждение,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ххх_Сервер.ОпределитьПланОбменаПоВесам(ВыборкаДетальныеЗаписи.Ссылка),
			"Нет связи с Весами """+ВыборкаДетальныеЗаписи.Ссылка+""" !"+Символы.ПС+ Ответ.ЖурналДиагностики);				
		КонецЕсли;			
	КонецЦикла;	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//товары только с розничной ценой
	Запрос = Новый Запрос;
	МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Описание КАК НоменклатураОписание,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Производитель.Наименование КАК Производитель,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ДополнительныеСведения.Значение ЕСТЬ NULL
	|			ТОГДА ""30""
	|		КОГДА ДополнительныеСведения.Значение = ""0""
	|			ТОГДА ""30""
	|		ИНАЧЕ ДополнительныеСведения.Значение
	|	КОНЕЦ КАК Срок
	|ПОМЕСТИТЬ Сроки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ВидЦены В (&ВидЦены)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство = &НоменклатураДопСвойствоСрокГодности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сроки.Цена КАК Цена,
	|	Сроки.Срок КАК Срок,
	|	Сроки.НоменклатураОписание КАК НоменклатураОписание,
	|	Сроки.Номенклатураххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
	|	Сроки.Производитель КАК Производитель,
	|	ххх_КодыНоменклатурыВесыКассы.Инкримента КАК Номенклатураххх_ИдЦентр,
	|	ххх_КодыНоменклатурыВесыКассы.Оборудование КАК Оборудование,
	|	ххх_КодыНоменклатурыВесыКассы.Номенклатура КАК Номенклатура,
	|	ххх_КодыНоменклатурыВесыКассы.Код КАК Код,
	|	ххх_КодыНоменклатурыВесыКассы.НомерДляСостава КАК НомерДляСостава
	|ПОМЕСТИТЬ ВсеТовары
	|ИЗ
	|	Сроки КАК Сроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ххх_КодыНоменклатурыВесыКассы КАК ххх_КодыНоменклатурыВесыКассы
	|		ПО Сроки.Номенклатура = ххх_КодыНоменклатурыВесыКассы.Номенклатура";
	
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ххх_Справочник.РозничнаяЦена.Значение);
	Запрос.УстановитьПараметр("НоменклатураДопСвойствоСрокГодности", Справочники.ххх_Справочник.НоменклатураДопСвойствоСрокГодности.Значение);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата()); 
	Запрос.Выполнить(); //результат помещаем во ВТ "ВсеТовары"
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаблиц;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВсеТовары.Цена КАК Цена,
	|	ВсеТовары.Срок КАК Срок,
	|	ВсеТовары.НоменклатураОписание КАК НоменклатураОписание,
	|	ВсеТовары.Номенклатураххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
	|	ВсеТовары.Производитель КАК Производитель,
	|	ВсеТовары.Номенклатураххх_ИдЦентр КАК Номенклатураххх_ИдЦентр,
	|	ВсеТовары.Оборудование КАК Оборудование,
	|	ВсеТовары.Номенклатура КАК Номенклатура,
	|	ВсеТовары.Код КАК Код,
	|	ВсеТовары.НомерДляСостава КАК НомерДляСостава
	|ИЗ
	|	ВсеТовары КАК ВсеТовары
	|ГДЕ
	|	ВсеТовары.Оборудование = &Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"; //сортировка по номеру ячейки	
	МассивЗаданий = Новый Массив;
	
	Для Каждого Оборудование Из Весы Цикл			
		Запрос.УстановитьПараметр("Оборудование", Оборудование);
		Результат = Запрос.Выполнить();
		
		НаборПараметров = Новый Массив; 
		НаборПараметров.Добавить(Результат);
		Задание = ФоновыеЗадания.Выполнить("ххх_РегламентныеЗадания.ПрогрузитьПроверитьВесыФоном", НаборПараметров);
		МассивЗаданий.Добавить(Задание);
	КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда 
		Попытка 
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий); 
		Исключение
		КонецПопытки; 
	КонецЕсли;			
	
КонецПроцедуры

Процедура ПрогрузитьПроверитьВесыФоном(Результат) Экспорт
	
	Товары = Результат.выбрать();	
	Товары.следующий();	
	Ссылка = Товары.Оборудование;
	Товары.сбросить();
	
	ПланОбменаДляВесов = ххх_Сервер.ОпределитьПланОбменаПоВесам(Ссылка);

	ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
		УровеньЖурналаРегистрации.Информация,,
		//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
		ПланОбменаДляВесов,
		"Начало прогрузки весов """+Ссылка+""" с проверкой на битые ячейки.");	
	
	ВремяНачала = ТекущаяДата();	
	ххх_Сервер.ЗапомнитьДатуПрогрузки(ВремяНачала,Ссылка);	
		
	Попытка
		// Создаем объект
		scale = Новый COMОбъект("CAScentre_DLL_printScale_Apple.Scale"); //добавлен функционал проверки весов
	Исключение
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"Не установлен драйвер для весов. Обратитесь к администратору!");
		Возврат;
	КонецПопытки;
	
	// Задаем основные настройки драйвера для работы с весами
	scale.IP   = Ссылка.ИпАдресс;
	scale.Port = Ссылка.Порт;
	scale.Type = Ссылка.type;
	Попытка
		//Подключаемся к весам
		scale.Open();
	Исключение
		ОписаниеОшибкиВесов = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""". Установленные параметры подключения - IP адрес весов: "+scale.IP+", номер порта связи TCP/IP: "+scale.Port+", номер типа весов: "+Строка(scale.Type)+".");
		Возврат;
	КонецПопытки;
	
	//соединение с весами установлено.
	
	БитыеЯчейки = ""; 				  //перечень битых ячеек для вывода пользователю
	БитыеЯчейкиМассив = Новый Массив; //массив для исключения битых ячеек из списка товаров при повторной прогрузке
	
	//формируем табличный документ для вывода таблицы с битыми ячейками
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПроверкаПроблемныхЯчеекНаВесах";
	Макет = Справочники.ххх_ПодключаемоеОборудование.ПолучитьМакет("МакетПроблемныеЯчейкиНаВесах");
	ОблШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОблШапка.Параметры.ДатаПроверки = Формат(ВремяНачала,  "ДЛФ=ДВ"); 
	ОблШапка.Параметры.НаименованиеВесов = Ссылка;
	ТабДок.Вывести(ОблШапка);
	
	ПроблемныеЯчейки = Новый ТаблицаЗначений;
	ПроблемныеЯчейки.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(5, 0)));
	ПроблемныеЯчейки.Колонки.Добавить("Наименование");
	ПроблемныеЯчейки.Колонки.Добавить("Цена");
	ПроблемныеЯчейки.Колонки.Добавить("Состав");
	ПроблемныеЯчейки.Колонки.Добавить("Отправлено");
	ПроблемныеЯчейки.Колонки.Добавить("Записано");
	
	//1. передаем информацию о магазине
	ПустаяСтрока = "                              ";
	НазваниеМагазина = Прав(ПустаяСтрока+Ссылка.НазваниеМагазина, 26);
	НазваниеМагазина = НазваниеМагазина + "  "; //при передаче 2-х строк у первой с конца затираются 2 символа		
	НазваниеОрганизации = Прав(ПустаяСтрока+Ссылка.Организация.НаименованиеСокращенное, 28);
	Попытка 
		//ххх_РегламентныеЗадания.Пауза(200);
		
		//передать адрес магазина с организацией
		scale.SendShopName(1,  		//shopNumber – номер магазина - не используется в LP 1.6
			НазваниеМагазина,       //name1 – название магазина
			НазваниеОрганизации,   	//name2orAddress – вторая строка названия магазина(адрес) 
			"");                   	//name3telnumber – третья строка магазина(номер телефона) - не используется в LP 1.6
		
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"На весы прогружены данные о магазине, адрес: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+""".");
			
		Успешно_SendShopName = Истина;
				
	Исключение //scale.SendShopName()
		Если scale.ResultCode = 0 Тогда
			ОписаниеОшибкиВесов = "Не удалось отправить на весы данные о магазине. Весы: """+Ссылка.Наименование+""", адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+""".";
		Иначе
			ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
			ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""", адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+"""."; 
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Предупреждение,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов);
			
		Успешно_SendShopName = Ложь;
		
		//не считаем критичным, так как название магазина не нужно передавать каждый раз. Поэтому не прерываем прогрузку

		//scale.close(); 
		//Возврат;	
	КонецПопытки; //scale.SendShopName()
	
	//проверяем, что записано в весах
	Попытка
		scale.ReadShopName();         // только "CAScentre_DLL_printScale_Apple.Scale"
		ИнфоМагазин = scale.InfoPLU;  // только "CAScentre_DLL_printScale_Apple.Scale"
		ВесыИмяМагазина = Лев(ИнфоМагазин, 28);
		ВесыОрганизация = Сред(ИнфоМагазин,29);
		
		Если Успешно_SendShopName Тогда
			ИмяОК = Ложь;
			ОргОК = Ложь;	
			Индекс = СтрНайти(ВесыИмяМагазина, Ссылка.НазваниеМагазина);
			Если Индекс>0 Тогда
				ИмяОК = Истина;
			Иначе
				БитыеЯчейки = БитыеЯчейки + " Память под адрес магазина";
			КонецЕсли;
			Индекс = СтрНайти(ВесыОрганизация, Ссылка.Организация.НаименованиеСокращенное);
			Если Индекс>0 Тогда
				ОргОК = Истина;
			Иначе
				БитыеЯчейки = БитыеЯчейки + " Память под организацию";
			КонецЕсли;	
			Если ИмяОК И ОргОК Тогда
				РезультатСравнения = "Записано верно.";
			Иначе
				РезультатСравнения = "ОШИБОЧНАЯ ЗАПИСЬ!";
			КонецЕсли;
		КонецЕсли;
	
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"На весах """+Ссылка.Наименование+""" хранятся следующие данные о магазине: """+ИнфоМагазин+""". "+РезультатСравнения);
	Исключение //scale.ReadShopName()
		Если scale.ResultCode = 0 Тогда
			ОписаниеОшибкиВесов = "Не удалось получить из весов данные о магазине. (Адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+""")."; 
		Иначе
			ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
			ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""", адрес магазина: """+Ссылка.НазваниеМагазина+""", организация: """+Ссылка.Организация.НаименованиеСокращенное+"""."; 
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов);
	КонецПопытки; //scale.ReadShopName()
	
	// 2. Передаем текущие дату и время на весы 
	Попытка
		ДатаВремяДляВесов = ТекущаяДата();
		scale.SendDateTime(Год(ДатаВремяДляВесов), Месяц(ДатаВремяДляВесов), День(ДатаВремяДляВесов),
		Час(ДатаВремяДляВесов),Минута(ДатаВремяДляВесов), Секунда(ДатаВремяДляВесов));	
	Исключение
		Если scale.ResultCode = 0 Тогда
			ОписаниеОшибкиВесов = "Не удалось отправить текущее время и дату на весы: """+Ссылка.Наименование+""".";
		Иначе		
			ОписаниеОшибкиВесов = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
			ОписаниеОшибкиВесов = ОписаниеОшибкиВесов+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""".";
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов);
		scale.close();
		Возврат;
	КонецПопытки;
	
	// 3. Передаем настройки пользователя на весы CAS LP-1.6
	Попытка
		Dept = "320";
		scale.LP16_SetSettings(Dept, Ссылка.Label, Ссылка.Barcode, Ссылка.Adjust,
			число(Ссылка.PriceEdit), число(Ссылка.PriceEditSave), число(Ссылка.printPluNumber),
			число(Ссылка.printGroup), число(Ссылка.PrintDatePAck), число(Ссылка.PrintLife),
			число(Ссылка.printLabelNumber), число(Ссылка.printTimePack), Ссылка.wegithAutoPrint);
	//Dept – номер отдела; Label – номер глобальной этикетки; Barcode – номер глобального штрих-кода; Adjust – сдвиг печати(припринт);
	//priceEdit – разрешить изменение цены оператором; priceEditSave – разрешить изменение цены и сохранение новой; printPluNumber – выводить на печать номер товара; 
	//printGroup – выводить на печать номер группового кода; printDatePack – выводить на печать дату упаковки; printLife – выводить на печать срок годности;
	//printLabelNumber – выводить на печать порядковый номер этикетки; printTimePack – выводить на печать время упаковки; weightAutoPrint – вес автопечати.	
	Исключение
		Если scale.ResultCode = 0 Тогда
			ОписаниеОшибкиВесов = "Не удалось задать настройки весам LP-1.6. Весы: """+Ссылка.Наименование+""".";
		Иначе	
			ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
			ОписаниеОшибкиВесов = ОписаниеОшибкиВесы + " (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+""".";
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			ОписаниеОшибкиВесов);
		scale.close();
		Возврат;
	КонецПопытки;
	
	ВсегоТоваров = Товары.Количество();
	ПрогруженоТоваров = 0;
	
	Пока Товары.Следующий() Цикл
		
		// 5. Очистка свойств связанных с загрузкой параметров о товаре
		Попытка
			scale.InitData(); 
		Исключение	
			Если scale.ResultCode = 0 Тогда
				ОписаниеОшибкиВесов = "Не удалось очистить свойства на весах для загрузки параметров о товаре: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""". Весы: """+Ссылка.Наименование+""".";
			Иначе
				ОписаниеОшибкиВесы  = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				ОписаниеОшибкиВесов = "Товар: "+Товары.Номенклатура.ххх_НаименованиеЭтикетка+". "+ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
				УровеньЖурналаРегистрации.Ошибка,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов);
			scale.close();
			Возврат; //если словили эту ошибку, то дальнейшая передача товаров не происходит
		КонецПопытки;			
		
		// номер товара
		scale.pluNumber = Товары.Код;
				
		// номер отдела
		scale.pluDept = "320"; // весы "320" считают как "23" и поставят в начало ШК	
		// срок годности, в днях
		scale.pluDateLife = Товары.Срок;
		
		Наименование = ххх_Сервер.ПолучитьСтроку866(СокрЛП(Товары.Номенклатура.ххх_НаименованиеЭтикетка));
		Если СокрЛП(ВРег(Наименование)) <> СокрЛП(ВРег(Товары.Номенклатура.ххх_НаименованиеЭтикетка)) Тогда
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
				УровеньЖурналаРегистрации.Предупреждение,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				"Наименование товара: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""" изменено на допустимое: """+Наименование+""".");
		КонецЕсли;		
		Наименование = Наименование + " ("+Товары.Производитель+")";

		//первая строка наименования товара
		scale.pluName1 = Лев(Наименование, 28);
		СтрокаДлина = СтрДлина(Наименование);
		Если СтрокаДлина > 28 Тогда
			//вторая строка наименования товара
			scale.pluName2 = Прав(Наименование,СтрокаДлина-28);
		КонецЕсли;
		
		// Цена товара в копейках
		scale.pluPrice = Товары.Цена * 100; //число в коп.
		// строка, которая печатается под логотипом.
		scale.pluStrLogo   = "1"; 
		// групповой код. Максимально 6 цифр
		scale.pluGroupCode = 1234;
		// код товара. Максимально 6 цифр
		scale.pluItemCode  = Товары.Номенклатураххх_ИдЦентр;
		
		Если Товары.НомерДляСостава>0 Тогда	
			//ссылка на номер сообщения 
			scale.pluNumberMsg = Товары.НомерДляСостава;
		КонецЕсли;
		
		// 6. Передача в весы данных о товаре
		Попытка	
			scale.SendPlu();
			
			ПрогруженоТоваров = ПрогруженоТоваров + 1;
			//ПроцентВыполнения = ПрогруженоТоваров/ВсегоТоваровСоставов*100; //для товаров и составов
			Описание = "Прогружено "+ПрогруженоТоваров+" из "+ВсегоТоваров+" товаров";
			
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
				УровеньЖурналаРегистрации.Информация,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				Описание + "; (ячейка: " + Товары.Код + ") код: " + Товары.Номенклатура.ххх_ИдЦентр + 
				//", товар: """ + Товары.Номенклатураххх_НаименованиеЭтикетка + """, производитель: (" + Товары.Производитель + 
				//"). Цена: "+Товары.Цена+" руб.");
				", товар: """ + Наименование + """. Цена: "+Товары.Цена+" руб."); 
			
			//прогрузка товара прошла, надо проверить 
			Попытка
				scale.NumFound = Товары.Код;      // номер товара,           только "CAScentre_DLL_printScale_Apple.Scale"
				scale.ReadPLU();                  // читаем данные о товаре, только "CAScentre_DLL_printScale_Apple.Scale"
				СообщениеИзВесов = scale.InfoPLU; // результат,              только "CAScentre_DLL_printScale_Apple.Scale"
				ИмяОК  = Ложь;
				ЦенаОК = Ложь;
				
				СтрокаПоискаВесов = ххх_Сервер.ПолучитьСтроку866(Товары.Номенклатура.ххх_НаименованиеЭтикетка);
				
				Индекс1 = СтрНайти(СообщениеИзВесов,СокрЛП(СтрокаПоискаВесов));
				Индекс  = СтрНайти(СообщениеИзВесов,";");
				
				Если Индекс1>0 Тогда
					ИмяОК = Истина;
				Иначе
					БитыеЯчейки = БитыеЯчейки + " " +Строка(Товары.Код)+ "(наименование)";
					// будем искать строку в таблице значений поиском значения номера ячейки в колонке "Ячейка"					
					НайденнаяСтрока = ПроблемныеЯчейки.Найти(Товары.Код, "Ячейка");
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.Наименование = "ОШИБКА";
						НайденнаяСтрока.Отправлено = НайденнаяСтрока.Отправлено + "; " + СокрЛП(Товары.Номенклатура.ххх_НаименованиеЭтикетка) + " (" + Товары.Производитель + ")";	
						НайденнаяСтрока.Записано   = НайденнаяСтрока.Записано   + "; " + Лев(СообщениеИзВесов,Индекс-1);
					Иначе
						НоваяСтр = ПроблемныеЯчейки.Добавить();
						НоваяСтр.Ячейка = Товары.Код;
						НоваяСтр.Наименование = "ОШИБКА";
						НоваяСтр.Цена         = "ОК";
						НоваяСтр.Состав       = "ОК";
						НоваяСтр.Отправлено = СокрЛП(Товары.Номенклатура.ххх_НаименованиеЭтикетка) + " (" + Товары.Производитель + ")";
						НоваяСтр.Записано   = Лев(СообщениеИзВесов,Индекс-1);
						БитыеЯчейкиМассив.Добавить(Товары.Код);
					КонецЕсли;
				КонецЕсли;
				
				ЦенаКопСохр = Сред(СообщениеИзВесов,Индекс+1);
				ЦенаРуб = Число(ЦенаКопСохр)/100;
				Если ЦенаРуб = Товары.Цена Тогда
					ЦенаОК = Истина;
				Иначе
					БитыеЯчейки = БитыеЯчейки + " " +Строка(Товары.Код)+ "(цена)";
					
					НайденнаяСтрока = ПроблемныеЯчейки.Найти(Товары.Код, "Ячейка");
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.Цена = "ОШИБКА";
						НайденнаяСтрока.Отправлено = НайденнаяСтрока.Отправлено + "; " + Строка(Товары.Цена);	
						НайденнаяСтрока.Записано   = НайденнаяСтрока.Записано   + "; " + Строка(ЦенаРуб);
					Иначе
						НоваяСтр = ПроблемныеЯчейки.Добавить();
						НоваяСтр.Ячейка = Товары.Код;
						НоваяСтр.Наименование = "ОК";
						НоваяСтр.Цена         = "ОШИБКА";
						НоваяСтр.Состав       = "ОК";
						НоваяСтр.Отправлено = Строка(Товары.Цена);
						НоваяСтр.Записано   = Строка(ЦенаРуб);
						БитыеЯчейкиМассив.Добавить(Товары.Код);
					КонецЕсли;
				КонецЕсли;
				
				Если ИмяОК И ЦенаОК Тогда
					//РезультатСравнения = "Записано верно.";
					РезультатСравнения = "ЗАПИСАНО ВЕРНО.";
					УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
				Иначе
					РезультатСравнения = "ОШИБОЧНАЯ ЗАПИСЬ!";
					УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
					УровеньЖурнала,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					"Получено из весов по номеру ячейки "+Строка(Товары.Код)+": наименование товара """+Лев(СообщениеИзВесов,Индекс-1)+""", цена: """+Строка(ЦенаРуб)+""". "+РезультатСравнения);		
			Исключение //scale.ReadPLU();
				Если scale.ResultCode = 0 Тогда
					ОписаниеОшибкиВесов = "Не удалось выполнить метод ReadPLU().";
				Иначе
					ОписаниеОшибкиВесы = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
					ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."; 
				КонецЕсли;
				ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
					УровеньЖурналаРегистрации.Ошибка,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					ОписаниеОшибкиВесов);
			КонецПопытки; //scale.ReadPLU();	
			
		Исключение //scale.SendPlu(); Не удалось отправить товар на весы.
			
			Если scale.ResultCode = 0 Тогда
				ОписаниеОшибкиВесов = "Не удалось отправить данные о товаре. Код: """+Товары.Номенклатура.ххх_ИдЦентр+""", наименование товара: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""" на весы: """+Ссылка.Наименование+""".";
			Иначе
				ОписаниеОшибкиВесы  = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
				//ОписаниеОшибкиВесов = "Код товара: "+Товары.Номенклатура.ххх_ИдЦентр+", наименование товара: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""". "+ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."
				ОписаниеОшибкиВесов = "Код товара: "+Товары.Номенклатура.ххх_ИдЦентр+", наименование товара: """+Наименование+""". "+ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Весы: """+Ссылка.Наименование+"""."	
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
				УровеньЖурналаРегистрации.Ошибка,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				ОписаниеОшибкиВесов +" "+ ОписаниеОшибки());	
		КонецПопытки; //scale.SendPlu();
	КонецЦикла; // Товары.Следующий()
	
	///////////////////////////////////////////////////////////////////////////////////////
	
	// СОСТАВЫ товаров грузим отдельно
	
	//Используем регулярные выражения - Нужно из строки Состава товара при проверке убрать дату изготовления
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine = Ложь; 
	RegExp.Global    = Истина;
	RegExp.Pattern   = "изг\d{6}_\d{2}:\d{2}";
	
	ПрогруженоСоставов = 0; 
	
	Товары.Сбросить();	
	Пока Товары.Следующий() Цикл
		
		Если Товары.НомерДляСостава>0 Тогда	
			scale.InitData(); // сбрасываем переменные в драйвере

			scale.pluNumberMsg = Товары.НомерДляСостава;
			ДопСв = Справочники.ххх_Справочник.НоменклатураДопСвойствоВыводитьДатуПроизводства.Значение;
			ЗначениеСв = ххх_Сервер.ПолучитьЗначениеДопСведений(Товары.Номенклатура, ДопСв);
			
			Попытка
				Если НРег(ЗначениеСв) = "true" Тогда
					ИнфаОСоставе = ?(СокрЛП(Товары.НоменклатураОписание)=""," ", Лев(Товары.НоменклатураОписание, 383)+" "+Константы.ххх_ВремяВыработкиТовара.Получить());
				Иначе 
					ИнфаОСоставе = ?(СокрЛП(Товары.НоменклатураОписание)=""," ", Лев(Товары.НоменклатураОписание, 400)); //max 400 символов
				КонецЕсли;
			Исключение
				ИнфаОСоставе = ?(СокрЛП(Товары.НоменклатураОписание)=""," ", Лев(Товары.НоменклатураОписание, 400)); //max 400 символов
			КонецПопытки;
			ИнфоСостав = ххх_Сервер.ПолучитьСтроку866(ИнфаОСоставе);
			
			Если СокрЛП(ВРег(ИнфоСостав)) <> СокрЛП(ВРег(ИнфаОСоставе)) Тогда
				ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
					УровеньЖурналаРегистрации.Предупреждение,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					"Информация о составе товара: """+ИнфаОСоставе+""""+Символы.ПС+Символы.ПС+" изменена на допустимую: """+ИнфоСостав+""".");
			КонецЕсли;
			
			scale.pluTextMessage = ИнфоСостав;
			Попытка
				scale.SendMsg();
				ПрогруженоСоставов = ПрогруженоСоставов + 1;
				Описание = "Загружен "+ПрогруженоСоставов+"-й состав";
				
				ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
					УровеньЖурналаРегистрации.Информация,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					Описание+"; (ячейка: "+Товары.Код+
					"); код товара: """+Товары.Номенклатура.ххх_ИдЦентр+""", наименование товара: "+Товары.Номенклатураххх_НаименованиеЭтикетка+""". Номер для состава: "+Товары.НомерДляСостава+
					". Информация о составе: """+ИнфоСостав+"""."); 
				
				Если СокрЛП(Товары.НоменклатураОписание)<>"" Тогда //проверяем только заполненный состав товара
					Попытка
						scale.NumFound = Товары.НомерДляСостава; // только для "CAScentre_DLL_printScale_Apple.Scale"
						scale.ReadMSG();                         // только для "CAScentre_DLL_printScale_Apple.Scale"
						СообщениеИзВесов = СокрЛП(scale.InfoPLU);// только для "CAScentre_DLL_printScale_Apple.Scale"
						СообщениеОК  = Ложь;
						
						ИнфоСостав2 = ххх_Сервер.ПолучитьСтроку866(СокрЛП(Товары.НоменклатураОписание));
						
						СообщениеИзВесовБезДаты = RegExp.Replace(СообщениеИзВесов, "");
						ДлинаСтрБезДаты = СтрДлина(СообщениеИзВесовБезДаты);
						ПодстрокаПоискаСостава = Лев(ИнфоСостав2, ДлинаСтрБезДаты); 						
						Индекс = СтрНайти(СообщениеИзВесов, ПодстрокаПоискаСостава);
						Если Индекс>0 Тогда
							СообщениеОК = Истина;
						Иначе
							БитыеЯчейки = БитыеЯчейки + " " + Строка(Товары.Код) + "/" + Строка(Товары.НомерДляСостава) + "(состав)";
							
							НайденнаяСтрока = ПроблемныеЯчейки.Найти(Товары.Код, "Ячейка");
							Если НайденнаяСтрока <> Неопределено Тогда
								НайденнаяСтрока.Состав = "ОШИБКА";
								НайденнаяСтрока.Отправлено = НайденнаяСтрока.Отправлено + "; " + ИнфоСостав;	
								НайденнаяСтрока.Записано   = НайденнаяСтрока.Записано   + "; " + СообщениеИзВесов;
							Иначе
								НоваяСтр = ПроблемныеЯчейки.Добавить();
								НоваяСтр.Ячейка = Товары.Код;
								НоваяСтр.Наименование = "ОК";
								НоваяСтр.Цена         = "ОК";
								НоваяСтр.Состав       = "ОШИБКА";
								НоваяСтр.Отправлено = ИнфоСостав;
								НоваяСтр.Записано   = СообщениеИзВесов;
								БитыеЯчейкиМассив.Добавить(Товары.Код);
							КонецЕсли;	
						КонецЕсли;
						
						Если СообщениеОК Тогда
							//РезультатСравнения = "Записано верно.";
							РезультатСравнения = "ЗАПИСАНО ВЕРНО.";
							УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
						Иначе
							РезультатСравнения = "ОШИБОЧНАЯ ЗАПИСЬ!";
							УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
							УровеньЖурнала,,
							//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
							ПланОбменаДляВесов,
							"Получен из весов состав товара по номеру "+Строка(Товары.НомерДляСостава)+": """+СокрЛП(СообщениеИзВесов)+""". "+РезультатСравнения);	
					Исключение
						ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
							УровеньЖурналаРегистрации.Ошибка,,
							//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
							ПланОбменаДляВесов,
							"Не удалось получить состав товара по номеру "+Строка(Товары.НомерДляСостава)+".");
					КонецПопытки; //scale.ReadMSG();
				КонецЕсли; //Товары.НоменклатураОписание<>""
				
			Исключение //scale.SendMsg();
				Если scale.ResultCode = 0 Тогда
					ОписаниеОшибкиВесов = "Не удалось отправить текст состава товара на весы. Код товара: "+Товары.Номенклатура.ххх_ИдЦентр+", наименование товара: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""", весы: """+Ссылка.Наименование+""", информация о составе: """+ИнфоСостав+""".";
				Иначе
					ОписаниеОшибкиВесы  = ххх_Сервер.ПолучитьОписаниеОшибки(scale.ResultCode);
					ОписаниеОшибкиВесов = ОписаниеОшибкиВесы+" (код ошибки: "+Строка(scale.ResultCode)+"). Код товара: "+Товары.Номенклатура.ххх_ИдЦентр+", наименование товара: """+Товары.Номенклатура.ххх_НаименованиеЭтикетка+""". Весы: """+Ссылка.Наименование+""", информация о составе: """+ИнфоСостав+""".";
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
					УровеньЖурналаРегистрации.Ошибка,,
					//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
					ПланОбменаДляВесов,
					ОписаниеОшибкиВесов +" "+ ОписаниеОшибки());
				scale.close();
				Возврат;
			КонецПопытки; //scale.SendMsg();	
		КонецЕсли; //Товары.НомерДляСостава>0
	КонецЦикла;	//Товары.Следующий()
		
	// Анализ результатов прогрузки
	
	Если БитыеЯчейки = "" Тогда
		Если Товары.Количество() > 1 Тогда //для прогрузки одного товара нет смысла выводить комментарий
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
				УровеньЖурналаРегистрации.Информация,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				"НЕТ ПРОБЛЕМНЫХ ЯЧЕЕК!");
		КонецЕсли;
		//запись в табл. документ строки, что все ОК
		ОблСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		ОблСтрока.Параметры.Ячейка = "Все ячейки";
		ОблСтрока.Параметры.Наименование = "ОК";
		ОблСтрока.Параметры.Цена         = "ОК";
		ОблСтрока.Параметры.Состав       = "ОК";
		ТабДок.Вывести(ОблСтрока);
		scale.close();
	Иначе
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Ошибка,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"ПРОБЛЕМНЫЕ ЯЧЕЙКИ: "+БитыеЯчейки);
			
		//запись в табл. документ всех Проблемных ячеек
		ОблСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		Для Каждого ПроблемЯчейка Из ПроблемныеЯчейки Цикл
			ОблСтрока.Параметры.Заполнить(ПроблемЯчейка);	
			ТабДок.Вывести(ОблСтрока);				
		КонецЦикла;	
		
		// очистить все ячейки на весах
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"Начало очистки памяти на весах """+Ссылка.Наименование+""" под ячейки и под составы товаров.");
			
		scale.ClearPluAndMsg();
		
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ПланОбменаДляВесов,
			"Память на весах """+Ссылка.Наименование+""" под ячейки и под составы товаров очищена!");
		
		scale.close();
		
		// сформировать список товаров без битых ячеек
		
		ВремТЗ = Результат.Выгрузить();
		Для Каждого БитаяЯчейкаМассив Из БитыеЯчейкиМассив Цикл
			СтруктураОтбора = Новый Структура("Код", БитаяЯчейкаМассив);// задаем условия
			МассивСтрок = ВремТЗ.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлементМассив Из МассивСтрок Цикл
				ВремТЗ.Удалить(ЭлементМассив); //удаляем строки таблицы значений
			КонецЦикла;
		КонецЦикла; 
		
		//загоняем таблицу значений в запрос
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеТовары.Цена КАК Цена,
		|	ВсеТовары.Срок КАК Срок,
		|	ВсеТовары.НоменклатураОписание КАК НоменклатураОписание,
		|	ВсеТовары.Номенклатураххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
		|	ВсеТовары.Производитель КАК Производитель,
		|	ВсеТовары.Номенклатураххх_ИдЦентр КАК Номенклатураххх_ИдЦентр,
		|	ВсеТовары.Оборудование КАК Оборудование,
		|	ВсеТовары.Номенклатура КАК Номенклатура,
		|	ВсеТовары.Код КАК Код,
		|	ВсеТовары.НомерДляСостава КАК НомерДляСостава
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаЗн КАК ВсеТовары	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Цена КАК Цена,
		|	ВТ_Товары.Срок КАК Срок,
		|	ВТ_Товары.НоменклатураОписание КАК НоменклатураОписание,
		|	ВТ_Товары.Номенклатураххх_НаименованиеЭтикетка КАК Номенклатураххх_НаименованиеЭтикетка,
		|	ВТ_Товары.Производитель КАК Производитель,
		|	ВТ_Товары.Номенклатураххх_ИдЦентр КАК Номенклатураххх_ИдЦентр,
		|	ВТ_Товары.Оборудование КАК Оборудование,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Код КАК Код,
		|	ВТ_Товары.НомерДляСостава КАК НомерДляСостава
		|ИЗ
		|    ВТ_Товары КАК ВТ_Товары";
		Запрос.УстановитьПараметр("ТаблицаЗн", ВремТЗ);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		// выполнить обычную прогрузку весов
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		СтруктураПараметров.Вставить("Товары", ВыборкаЗапроса);
		СтруктураПараметров.Вставить("СобытиеЖР", "Проверка весов на битые ячейки");
		
		ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
			УровеньЖурналаРегистрации.Информация,,
			//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
			ххх_Сервер.ОпределитьПланОбменаПоВесам(СтруктураПараметров.Ссылка),
			"Начало прогрузки весов без битых ячеек.");	
		
		Справочники.ххх_ПодключаемоеОборудование.ПрогрузитьВесы(СтруктураПараметров);
				
	КонецЕсли;
	
	Попытка //запись в файл Excel
		ПутьКФайлу = Справочники.ххх_Справочник.ПутьЗагрузкиФайла_БитыеЯчейкиВесов.Значение;
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			Если Прав(ПутьКФайлу,1)="\" Тогда
				ИмяФайлаExcel = ПутьКФайлу + Ссылка.Наименование + ".xls";
			Иначе
				ИмяФайлаExcel = ПутьКФайлу + "\" + Ссылка.Наименование + ".xls";
			КонецЕсли;
			ТабДок.Записать(ИмяФайлаExcel, ТипФайлаТабличногоДокумента.XLS);
			
			ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
				УровеньЖурналаРегистрации.Информация,,
				//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
				ПланОбменаДляВесов,
				"Отчет о проблемных ячейках записан в файл Excel по пути: "+ИмяФайлаExcel);	
		КонецЕсли; //ЗначениеЗаполнено(ПутьКФайлу)
	Исключение
	КонецПопытки;
	
	// Окончание прогрузки весов	
	ВремяКонца = ТекущаяДата();
	КонЧасы    = 0;
	КонМинуты  = 0;
	КонСекунды = 0;	
	ОстатокВремени = ВремяКонца - ВремяНачала;
	КонЧасы        = Цел(ОстатокВремени / 3600);     //3600 - Количество секунд в часе
	ОстатокВремени = ОстатокВремени - КонЧасы * 3600;
	КонМинуты      = Цел(ОстатокВремени / 60);       //60   - Количество секунд в минуте
	ОстатокВремени = ОстатокВремени - КонМинуты * 60;
	КонСекунды     = ОстатокВремени;
	ТекСтрока = Формат(КонЧасы,"ЧЦ=2; ЧН=0; ЧВН=") + ":" + Формат(КонМинуты,"ЧЦ=2; ЧН=0; ЧВН=") + ":" + Формат(КонСекунды,"ЧЦ=2; ЧН=0; ЧВН=");
	
	ЗаписьЖурналаРегистрации("Проверка весов на битые ячейки", 
		УровеньЖурналаРегистрации.Информация,,
		//Метаданные.ПланыОбмена.ПланОбменаСОборудованием,
		ПланОбменаДляВесов,
		"Окончание прогрузки весов. Длительность операции: " + ТекСтрока);
	
КонецПроцедуры



процедура ЗагрузкаЗаказов(ЗагружаемыйФайл)
	
	
	Тч=Новый таблицаЗначений;
	Тч.Колонки.Добавить("НомерЗаказаНаСайте",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("ххх_ИдЦентр",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150)));
	Тч.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Тч.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Тч.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	
	
	КолвоСтрок=ЗагружаемыйФайл.КоличествоСтрок();
	итератор=2;
	//СписокШтрихкодов=Новый массив;
	Пока итератор<КолвоСтрок+1 Цикл
		
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗагружаемыйФайл.ПолучитьСтроку(итератор),"|");
			
		стрТч=Тч.Добавить();
		стрТч.НомерЗаказаНаСайте=СокрЛп(МассивКол[2]);
		стрТч.ххх_ИдЦентр=СокрЛп(МассивКол[4]);
		стрТч.Сумма=Число(СокрЛп(МассивКол[3]))/100;
		стрТч.Цена=Число(СокрЛп(МассивКол[5]))/100;
		стрТч.Количество=Число(СокрЛп(МассивКол[6]))/1000;
		
		итератор=итератор+1;
	КонецЦикла;
	
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("тз",тч);
	Запрос.Текст="ВЫБРАТЬ
	             |	тз.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	             |	тз.ххх_ИдЦентр КАК ххх_ИдЦентр,
	             |	тз.Количество КАК Количество,
	             |	тз.Сумма КАК Сумма,
	             |	тз.Цена КАК Цена
	             |ПОМЕСТИТЬ йцу
	             |ИЗ
	             |	&тз КАК тз
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЗаказПокупателя.Ссылка КАК Ссылка,
	             |	йцу.Количество КАК Количество,
	             |	йцу.Цена КАК Цена,
	             |	йцу.Цена * йцу.Количество КАК Сумма,
	             |	йцу.ххх_ИдЦентр КАК ххх_ИдЦентр
	             |ПОМЕСТИТЬ фыв
	             |ИЗ
	             |	йцу КАК йцу
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |		ПО йцу.НомерЗаказаНаСайте = ЗаказПокупателя.НомерЗаказаНаСайте
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	фыв.Ссылка КАК Ссылка,
	             |	фыв.Количество КАК Количество,
	             |	фыв.Цена КАК Цена,
	             |	фыв.Сумма КАК Сумма,
	             |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	             |	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	             |	ЗаказПокупателяТовары.Ссылка КАК Ссылка1,
	             |	ЗаказПокупателяТовары.Номенклатура.ххх_ИдЦентр КАК Номенклатураххх_ИдЦентр,
	             |	фыв.ххх_ИдЦентр КАК ххх_ИдЦентр
	             |ИЗ
	             |	фыв КАК фыв
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	             |		ПО фыв.Ссылка = ЗаказПокупателяТовары.Ссылка
	             |			И фыв.ххх_ИдЦентр = ЗаказПокупателяТовары.Номенклатура.ххх_ИдЦентр
	             |ИТОГИ ПО
	             |	Ссылка";

	ВыборкаЗаказы=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);//     Запрос.Выполнить().выгрузить()
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		Заказ=ВыборкаЗаказы.Ссылка.получитьОбъект();
		Заказ.дата=ТекущаяДата();
		ВыборкаТовары=ВыборкаЗаказы.Выбрать();
		
		
		Пока ВыборкаТовары.Следующий() Цикл
			
			строка=Заказ.товары[ВыборкаТовары.НомерСтроки-1];
			строка.Количество=ВыборкаТовары.Количество;
			строка.КоличествоУпаковок=строка.Количество;
			строка.Цена=ВыборкаТовары.Цена;
			строка.Сумма=ВыборкаТовары.Сумма;
				
		КонецЦикла;
		
		Заказ.установитьПометкуУдаления(Ложь);
		Заказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//
		//
		//
		//Заголовки=Новый соответствие;
		//Заголовки.Вставить("status",);
		//Заголовки.Вставить("order_id",Число(Заказ.НомерЗаказаНаСайте));
		//Заголовки.Вставить("status",3);
		//
		//HTTPЗапрос = Новый HTTPЗапрос("http://d60.s2y.ru/srv/order_status.php",Заголовки);

		Соединение = Новый HTTPСоединение("d60.s2y.ru",,"111","111",,,);
	
		HTTPЗапрос = Новый HTTPЗапрос("/srv/order_status.php?status=2&order_id="+Строка(Заказ.НомерЗаказаНаСайте));
		
		Соединение = Новый HTTPСоединение("d60.s2y.ru",,"111","111",,,);
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);

			
		//            http://d60.s2y.ru/srv/order_status.php?status=1&order_id=1561
	КонецЦикла;
	
	
КонецПроцедуры

функция ЕстьНеОформленныеПоступленияПоПодтвержденнымНакладнымПивас()
	
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Подтвержден",Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден);
	Запрос.УстановитьПараметр("ПодтвержденСРасхождениями",Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями);
	Запрос.Текст="ВЫБРАТЬ
	             |	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	             |		ПО ТТНВходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	             |ГДЕ
	             |	ТТНВходящаяЕГАИС.Проведен
	             |	И (СтатусыДокументовЕГАИС.Статус = &Подтвержден
	             |			ИЛИ СтатусыДокументовЕГАИС.Статус = &ПодтвержденСРасхождениями)
	             |	И НЕ ЕСТЬNULL(ТТНВходящаяЕГАИС.ДокументОснование.Проведен, ИСТИНА)
	             |	И НЕ ТТНВходящаяЕГАИС.Товары.АлкогольнаяПродукция.ВидПродукции.Маркируемый";
	
	выборка=ЗАпрос.Выполнить().Выбрать();
	
	Если выборка.Количество()>0 Тогда
		текст="";
		Пока выборка.Следующий() Цикл
			текст=Текст+"Номер ТТН: "+выборка.Ссылка.НомерТТН+" Дата: "+выборка.Ссылка.ДатаТТН+" Номер в 1с:"+выборка.Ссылка+";"+Символы.ВК;
		КонецЦикла;
		
		Магаз=Справочники.Магазины.Выбрать();
		Магаз.Следующий();

		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = Магаз.ххх_АдресСервераSMTP;
		Профиль.ПортIMAP = Магаз.ххх_ПортIMAP; 	
		Профиль.ПользовательSMTP = Магаз.ххх_МагазинскиаяПочта;	
		Профиль.ПарольSMTP = Магаз.ххх_ПарольSMTP;
		
		Сообщение = Новый ИнтернетПочтовоеСообщение ;
		Сообщение.Получатели.Добавить("Olga@ural.ru");
		Сообщение.Получатели.Добавить("monitoring@tc-apple.ru");
		Сообщение.Получатели.Добавить("declarant_briz@mail.ru");
		Сообщение.Получатели.Добавить("alco@tc-apple.ru");
		Сообщение.Тема ="Атас!!! Не списалось пиво! Есть не закрытые накладные по закрытым ЕГАИС ТТН!";
		Сообщение.Важность=ВажностьИнтернетПочтовогоСообщения.Наивысшая;
		Сообщение.Тексты.Добавить(текст,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Сообщение.ИмяОтправителя="МрРобот "+магаз.Наименование;
		Сообщение.Отправитель=Магаз.ххх_МагазинскиаяПочта;
		
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(Профиль);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
		
		возврат истина;
		
	КонецЕсли;
	
	возврат ложь;
	
	
КонецФункции

