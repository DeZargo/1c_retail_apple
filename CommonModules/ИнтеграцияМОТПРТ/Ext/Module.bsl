
#Область ПрограммныйИнтерфейс

// Отражает результаты проверки и подбора в документе, из которого была вызвана соотвествующая форма.
// 
// Параметры:
// 	ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияСканирования) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПоступлениеТоваров")
		Или ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда
		
		ОтразитьРезультатыПроверкиИПодбораВоВходящемДокументе(ПараметрыОкончанияСканирования);
		
	ИначеЕсли ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
		ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияСканирования, ТипПроверяемогоДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
// Параметры:
// 	ДокументОснование - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//	
Функция СформированныйАктОРасхождениях(ДокументОснование) Экспорт
	
	АктОРасхождениях      = Неопределено;
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеТоваров")
	 Или ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктОРасхождениях.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АктОРасхожденияхПриПриемкеТоваров КАК АктОРасхождениях
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПриПриемкеТоваров.Товары КАК АктОРасхожденияхТовары
		|	ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
		|ГДЕ
		|	НЕ АктОРасхождениях.ПометкаУдаления
		|	И АктОРасхождениях.ДокументОснование = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	АктОРасхождениях.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	АктОРасхождениях.Дата УБЫВ
		|";
	Иначе
		Возврат АктОРасхождениях;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АктОРасхождениях = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат АктОРасхождениях;
	
КонецФункции

//Проверяет на дубли табличной части ШтрихкодыУпаковок документа.
Функция ШтрихкодУпаковкиПрисутствует(ШтрихкодУпаковки, Документ) Экспорт 
	
	МассивНайденныхСтрок = Документ.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ШтрихкодУпаковки", ШтрихкодУпаковки));
	Возврат МассивНайденныхСтрок.Количество() > 0;
	
КонецФункции

//Заполняет табличную часть ШтрихкодыУпаковок в документе.
Процедура ЗаполнитьШтрихкодыВДокумент(МассивШтрихкодов, Документ) Экспорт 
	
	Для Каждого ШтрихкодУпаковки Из МассивШтрихкодов Цикл
		
		Документ.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ШтрихкодУпаковки;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ОпределитьИспользованиеАктовОРасхождениииПослеПриемки(Документ, Используются) Экспорт
	
	
	
КонецПроцедуры

// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
// 	Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
// 	ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//
Процедура СформироватьТаблицуТабачнойПродукцииДокумента(Документ, ТаблицаПродукции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииПоступлениеТоваров();
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииВозвратТоваровПоставщику();
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииВозвратТоваровОтПокупателя();
	Иначе
		ВызватьИсключение НСтр("ru = 'Формирование таблицы табачной продукции указанного документа не определено'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТабачнойПродукцииПоступлениеТоваров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура                                  КАК Номенклатура,
	|	Товары.Характеристика                                КАК Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)  КАК Серия,
	|	СУММА(Товары.Количество)                             КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И СправочникНоменклатура.ТабачнаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТабачнойПродукцииВозвратТоваровПоставщику()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ТабачнаяПродукция)
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И СправочникНоменклатура.ТабачнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТабачнойПродукцииВозвратТоваровОтПокупателя()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура                                  КАК Номенклатура,
	|	Товары.Характеристика                                КАК Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)  КАК Серия,
	|	СУММА(Товары.Количество)                             КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И СправочникНоменклатура.ТабачнаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СгенерироватьСерии(ДанныеДляГенерации) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДобавленныхИзмененныхСтрок

Функция СтруктураДействийПриДобавленииНовойСтроки(ДокументОбъект)

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		
		СтруктураДействий = СтруктураДействийПриДобавленииНовойСтрокиПоступлениеТоваров(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		
		СтруктураДействий = СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровОтПокупателя(ДокументОбъект);
		
	Иначе
		
		СтруктураДействий = Новый Структура;
		
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиПоступлениеТоваров(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		СтруктураПараметровДействия.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровОтПокупателя(Объект)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровПоставщику(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	
	Возврат СтруктураДействий;
	
КонецФункции

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры


#КонецОбласти

#Область ОтражениеРезультатаПроверкиИПодбораВДокументе

#Область ВходящиеДокументы

// Переносит результат проверки и подбора табачной продукции во входящий документ.
//   Общая схема:
//    * Заполняет серии номенклатуры в документе, при необходимости создавая их,
//    * При использовании актов расхождений - создает акт, иначе
//    * Обновляет табличные части "Товары" и "Штрихкоды упаковок" актуальной табачной продукцией,
//    * Перезаписывает документ.
//
// Параметры:
//   ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
//
Процедура ОтразитьРезультатыПроверкиИПодбораВоВходящемДокументе(ПараметрыОкончанияСканирования)
	
	ДокументОбъект = ПараметрыОкончанияСканирования.ПроверяемыйДокумент.ПолучитьОбъект();
	
	Если Не ПараметрыОкончанияСканирования.СоздаватьАктОРасхождениях Тогда
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня);
	КонецЕсли;
	
	Если Не ПараметрыОкончанияСканирования.СоздаватьАктОРасхождениях Тогда
		
		ИзменитьДокументПоступленияПоРезультатамПроверкиИПодбораМОТП(ДокументОбъект, ПараметрыОкончанияСканирования);
		
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДокументПоступленияПоРезультатамПроверкиИПодбораМОТП(ДокументОбъект, ПараметрыОкончанияСканирования) Экспорт
	
	ПровереннаяИПодобраннаяПродукция = ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции;
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	МенеджерДокумента = Документы[МетаданныеДокумента.Имя];
	ЕстьСкладВТЧ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура        КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика      КАК Характеристика,
	|	ПодобраннаяПродукция.Серия               КАК Серия, 
	|	ПодобраннаяПродукция.Количество          КАК Количество,
	|	ПодобраннаяПродукция.КоличествоПодобрано КАК КоличествоПодобрано
	|ПОМЕСТИТЬ ПодобраннаяПродукция
	|ИЗ &ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|;
	|///////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодобраннаяПродукция.Номенклатура        КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика      КАК Характеристика,
	|	ПодобраннаяПродукция.Количество          КАК Количество
	|ИЗ ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|;
	|///////////////////////////////////////////////////////////////////////////2
	|";
	
	Запрос.УстановитьПараметр("ПроверяемыйДокумент",  ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	Запрос.УстановитьПараметр("ПодобраннаяПродукция", ПровереннаяИПодобраннаяПродукция);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПровереннаяПродукцияГруппированная = Результат[1].Выгрузить();
	Склад                              = Справочники.Склады.ПустаяСсылка();
	
	СтруктураДействийОпределениеФактическогоКоличества = СтруктураДействийПоТЧОснованияАкта(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	СтруктураДействийНоваяСтрока = СтруктураДействийПриДобавленииНовойСтроки(ДокументОбъект);
	
	Для Каждого СтрокаПодобраннойПродукцииГруппированная Из ПровереннаяПродукцияГруппированная Цикл
		
		ПараметрыПоискаПоДокументу = Новый Структура;
		ПараметрыПоискаПоДокументу.Вставить("Номенклатура",       СтрокаПодобраннойПродукцииГруппированная.Номенклатура);
		ПараметрыПоискаПоДокументу.Вставить("Характеристика",     СтрокаПодобраннойПродукцииГруппированная.Характеристика);
		ПараметрыПоискаПоДокументу.Вставить("КоличествоУпаковок", СтрокаПодобраннойПродукцииГруппированная.Количество);
		
		ПараметрыПоискаПродукция = Новый Структура;
		ПараметрыПоискаПродукция.Вставить("Номенклатура",   СтрокаПодобраннойПродукцииГруппированная.Номенклатура);
		ПараметрыПоискаПродукция.Вставить("Характеристика", СтрокаПодобраннойПродукцииГруппированная.Характеристика);
		ПараметрыПоискаПродукция.Вставить("Количество",     СтрокаПодобраннойПродукцииГруппированная.Количество);
		
		НайденныеСтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоискаПоДокументу);
		НайденныеСтрокиПродукция = ПровереннаяИПодобраннаяПродукция.НайтиСтроки(ПараметрыПоискаПродукция);
		
		Если НайденныеСтрокиДокумента.Количество() > 0 Тогда
			
			РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект,
			                                            НайденныеСтрокиДокумента,
			                                            НайденныеСтрокиПродукция, 
			                                            СтруктураДействийОпределениеФактическогоКоличества);
			
		Иначе
			
			ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, 
			                                          НайденныеСтрокиПродукция, 
			                                          ПараметрыОкончанияСканирования.ПроверяемыйДокумент, 
			                                          СтруктураДействийНоваяСтрока,
			                                          Склад,
			                                          ЕстьСкладВТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда 
		ПараметрыУказанияСерий = Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
	Иначе 
		ПараметрыУказанияСерий = Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(ДокументОбъект);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект,ПараметрыУказанияСерий);
	ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект);
	
КонецПроцедуры

Процедура РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект, НайденныеСтрокиДокумента, 
                                                      НайденныеСтрокиПродукция, СтруктураДействийОпределениеФактическогоКоличества)
	
	ТребуетсяРаспределениеПоСериям = Ложь;
	СерииВОтдельнойТабличнойЧасти  = Ложь;
	КоличествоКРаспределению = 0;
	
	СерииАкта      = Новый Массив;
	СерииПродукции = Новый Массив;
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
	КонецЦикла;
	
	Если Не ТребуетсяРаспределениеПоСериям Тогда
		
		РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
		                                 СерииПродукции, КоличествоКРаспределению, СтруктураДействийОпределениеФактическогоКоличества, 
		                                 СерииВОтдельнойТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

Процедура РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
                                           СерииПродукции, КоличествоКРаспределению, СтруктураДействий, СерииВОтдельнойТабличнойЧасти)
	
	НомерСтроки = 1;
	КоличествоСтрок = НайденныеСтрокиДокумента.Количество();
	
	Для Каждого НайденнаяСтрокаДокумента Из НайденныеСтрокиДокумента Цикл
		
		Если НайденнаяСтрокаДокумента.КоличествоУпаковок < КоличествоКРаспределению Тогда
			
			Если КоличествоСтрок <> НомерСтроки Тогда
				КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаДокумента.КоличествоУпаковок;
			Иначе
				НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
				КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НайденнаяСтрокаДокумента, 
																			СтруктураДействий, 
																			КэшированныеЗначения);
			КонецЕсли;
			
		Иначе
			
			НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
			КоличествоКРаспределению = 0;
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НайденнаяСтрокаДокумента,
			                                                 СтруктураДействий,
			                                                 КэшированныеЗначения);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;	
			
	КонецЦикла;
	
	Если СерииВОтдельнойТабличнойЧасти Тогда
		
		КоличествоКРаспределению = 0;
		Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
			КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		КонецЦикла;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура",   НайденныеСтрокиПродукция[0].Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", НайденныеСтрокиПродукция[0].Характеристика);
		ПараметрыПоиска.Вставить("Количество",     НайденныеСтрокиПродукция[0].Количество);
		ПараметрыПоиска.Вставить("Серия",          СерииПродукции[0]);
		
		НайденныеСтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(ПараметрыПоиска);
		
		НомерСтроки = 1;
		
		Для Каждого НайденнаяСтрокаСерия Из НайденныеСтрокиСерии Цикл
		
			Если НайденнаяСтрокаСерия.Количество < КоличествоКРаспределению Тогда
				
				Если КоличествоСтрок <> НомерСтроки Тогда
					
					КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаСерия.Количество;
					
				Иначе
					
					НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
					КоличествоКРаспределению = 0;

				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, НайденныеСтрокиПродукция,
                                                    ПроверяемыйДокумент, СтруктураДействий, Склад, ЕстьСкладВТЧ)
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
	
		НоваяСтрока.Номенклатура        = НайденнаяСтрокаПродукция.Номенклатура;
		НоваяСтрока.Характеристика      = НайденнаяСтрокаПродукция.Характеристика;
		НоваяСтрока.КоличествоУпаковок  = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ЕстьСкладВТЧ Тогда
			НоваяСтрока.Склад      = Склад;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Количество", 0);
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДокументОбъект.Товары.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящиеДокументы

// Переносит результат проверки и подбора табачной продукции в исходящий документ.
//   Общая схема:
//    * Обновляет табличную часть "Штрихкоды упаковок" актуальными штрихкодами упаковок табачной продукции,
//    * Обновляет табличную часть "Товары" (при наличии - также "Серии") актуальной табачной продукцией,
//    * Перезаписывает документ.
//   Недостача табачной продукции списывается с первых найденных товарных строк с тем же ключом
//     (номенклатура / характеристика / серия).
//   Излишки прибавляются к первой найденной строке с тем же ключом, а если ее нет в документе - строка добавляется
//     с параметрами заполнения по умолчанию для документа.
//
// Параметры:
//   ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
//   ТипОбъекта                     - Тип       - Тип проверяемого документа
//
Процедура ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияСканирования, ТипОбъекта)
	
	ДокументОбъект = ПараметрыОкончанияСканирования.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня);
	
	ТаблицаТабачнойПродукции = ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции;
	Если ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииРеализацииТоваров(ДокументОбъект, ТаблицаТабачнойПродукции);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииВозвратаТоваровПоставщику(ДокументОбъект, ТаблицаТабачнойПродукции);
	КонецЕсли;
	
	Если Не ПараметрыОкончанияСканирования.Свойство("НеПерезаписыватьДокумент") Тогда 
		
		Если ДокументОбъект.Проведен Тогда
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Переносит таблицу штрихкодов верхнего уровня в документ
//   Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие табачные (содержащие внутри хотя бы 1 шт 
//   табачной продукции) штрихкоды верхнего уровня
//   Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды
//   Не меняет прочие (например алкогольные) штрихкоды
// 
// Параметры:
//  ДокументОбъект                  - ДокументОбъект  - документ для изменения
//  ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня) Экспорт
	
	ШтрихкодыДляПроверки = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива<>Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		Иначе
			ДокументОбъект.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ЭлементВНаличии.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	ШтрихкодыСодержащиеТабачнуюПродукцию = ШтрихкодыСодержащиеТабачнуюПродукцию(ШтрихкодыДляПроверки);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеТабачнуюПродукцию Цикл
		ДокументОбъект.ШтрихкодыУпаковок.Удалить(ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлементОтсутствует, "ШтрихкодУпаковки"));
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрихкодыСодержащиеТабачнуюПродукцию(Знач ШтрихкодыДляПроверки)
	
	Возврат ИнтеграцияИСРТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, Перечисления.ВидыПродукцииИС.Табачная);
	
КонецФункции

// Переносит табачную продукцию из формы проверки и подбора в документ Реализация товаров услуг
//   Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки табачную продукцию
//   Не меняет прочие товарные строки
// 
// Параметры:
//  ДокументОбъект           - ДокументОбъект.РеализацияТоваровУслуг - документ к изменению
//  ТаблицаТабачнойПродукции - (См. ПроверкаИПодборПродукцииМОТПУТ.ТаблицаТабачнойПродукции).
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииРеализацииТоваров(ДокументОбъект, ТаблицаТабачнойПродукции)

	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Подобрано", ТаблицаТабачнойПродукции);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ ТоварыСПризнакомТабачнаяПродукция
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	ТоварыСПризнакомТабачнаяПродукция КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика";

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровОтПокупателя(ДокументОбъект),
		СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровОтПокупателя(ДокументОбъект));
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

// Переносит табачную продукцию из формы проверки и подбора в документ Возврат товаров поставщику.
// Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки табачную продукцию.
// Не меняет прочие товарные строки.
//
// Параметры:
//  ДокументОбъект           - ДокументОбъект.ВозвратТоваровПоставщику - документ к изменению
//  ТаблицаТабачнойПродукции - (См. ПроверкаИПодборПродукцииМОТПУТ.ТаблицаТабачнойПродукции).
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииВозвратаТоваровПоставщику(ДокументОбъект, ТаблицаТабачнойПродукции)

	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Подобрано", ТаблицаТабачнойПродукции);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыСПризнакомТабачнаяПродукция
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|			И (СправочникНоменклатура.ТабачнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	ТоварыСПризнакомТабачнаяПродукция КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Недостача УБЫВ";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика";
	
	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровПоставщику(ДокументОбъект),
		СтруктураДействийПриДобавленииИзмененииСтрокиВозвратТоваровПоставщику(ДокументОбъект));
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = СтрокаТаблицыТовары.Количество;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция СтруктураДействийПоТЧОснованияАкта(Основание) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ДополнитьСтруктуруДействийПоТЧТоварыПоступления(СтруктураДействий, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ДополнитьСтруктуруДействийПоТЧТоварыВозвратаПоставщику(СтруктураДействий, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ДополнитьСтруктуруДействийПоТЧТоварыВозвратОтПокупателя(СтруктураДействий, Основание);
		
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции 

Процедура ДополнитьСтруктуруДействийПоТЧТоварыПоступления(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДействийПоТЧТоварыВозвратаПоставщику(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДействийПоТЧТоварыВозвратОтПокупателя(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры


#КонецОбласти
